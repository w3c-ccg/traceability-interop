{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "e44bde0c-1f02-4117-8be9-a0140888556c",
        "name": "Clear Cache",
        "item": [
          {
            "id": "a3bdfc17-9c92-44f6-bbe0-1032ecb4f0d4",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "30995da0-9171-4001-953e-b0ac5d825eef",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "04adcd8e-86bf-4228-a70d-760c5598f5d7"
                }
              }
            ]
          },
          {
            "id": "564b3242-2e2c-40ff-a22d-afc334dff55f",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a77e226c-0d19-432d-8335-3af083468127",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "173b5927-1fef-4757-8f44-68e41346c91a"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "3c9f2324-a7cf-4ef6-a555-b301bfca1d52",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "7b3314af-81aa-4999-a988-bf6672ba9518",
            "name": "Positive Testing",
            "item": [
              {
                "id": "800a1587-3afd-4d85-b490-f902e373275a",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a7333028-cbde-4db6-9e12-ebf6ac821c1c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a1da8f9c-9e3f-4834-a2cb-7aecadef6068"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2fae986a-bf90-4c58-a5fb-43e3555170cb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "09f90f5b-700b-43b1-acc8-1f10545e425c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a4bfad8b-1b56-460b-912b-660d0573f1d0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1e9c08c5-5eef-432c-a04e-0d3993ae2833"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9d47ac2f-31ec-4f5e-b071-056b9f44af00",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "869c130a-a813-47b4-97f1-17561277b4a3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7eaf4373-8293-47aa-814d-2afc2c6cfb6e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "da168411-96de-488a-80c4-596ed3ca7197"
            }
          }
        ]
      },
      {
        "id": "53382c9a-e6bb-40a2-bd39-41b57783fbf6",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "00f4cfc7-bcf5-41e7-8986-5abe2e9da808",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3a6a6464-b307-47ea-8317-4289cdab4bca",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "054f30b9-e420-400d-b788-c9d802998172",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ba984d9-bc06-422e-abb8-6a8283c07557",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c398bb0e-5485-4715-8be7-f59af9041eb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0909974-0a2b-4200-bc69-01514dcf5bbd",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3787f310-56ba-4f8b-8cb0-e80fe93d2f3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bdad2792-c602-4050-814b-cc65188774ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88ceb4be-d2eb-4d26-a78e-7a91a451e129",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab8299b5-99c8-4513-95b1-8f3358e75143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "767a613f-ea7c-4d85-a59c-7ce18d9f3fe6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "06947649-bdeb-4ae8-abaa-d8feab75f13f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d278c801-44e8-4a12-9040-f3038ca9c650",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a81ac9e-0edf-4688-a447-9c2f10c3b85d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7a9f7486-8aed-4435-87a1-020c95714c8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "054dd6e4-ea31-40df-8b19-bee39512e986",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6cf0676-a08c-4d68-8e64-eb25bd228698"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "cec84767-9be3-4f4f-aadd-b07da9131085",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fe2f22dc-1179-4e19-9f89-d0d54af9c64a",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ac32f1a5-e952-4351-837e-ef1ea7aec44d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "4e179699-a6d1-40d5-be57-9d724ead874a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "30452531-2190-46e7-b375-a4d46253cab3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "25111d20-5ede-42c8-9564-eef2862fc1db"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "57419aee-3ff8-43d1-9ed8-db8a46264959",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ce87f96e-f034-4bb8-9160-bc40cdd96043"
            }
          }
        ]
      },
      {
        "id": "ae0cc329-9e27-4281-823d-a9ced98ebd8e",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "71263424-0987-47cc-b80b-055c7ef5f996",
            "name": "Negative Testing",
            "item": [
              {
                "id": "68409999-38b4-4627-ab66-c503763a00f8",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "2fced70f-1d1b-4e86-b583-74f0cda6c8c6",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96282fd1-e15a-4c08-b828-a2c147eb66a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2c0f9b5-60f9-4cd2-94bb-d4c0a051f475"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5dce109-46a1-4a6a-99d3-b7250ac583c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e96a5e26-f2a6-4f42-8d23-e85b5dac87e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "661b9cbd-73bd-47d4-9e33-f2f02d440837",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83315a0a-ad4f-4a58-a94b-628ffa530a32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9ab8bf9-cbdf-4713-85ac-8d22e15bf343"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12d22925-1e04-4287-8899-0e64cf04f965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2a660308-8b40-4593-9128-5d1847ec59d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb4ecaf8-c3d1-458b-81e0-72356d96a38c",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e366857-05e6-4412-9f94-597076e75a53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5fee92f-782d-4bfb-a870-5196c65ee085"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05b01b27-d524-4b6a-8255-e27659b61347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "180a7a15-ecf7-40db-abf4-630c870a7bad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b4b6c84-ce15-4104-a4fa-66b939974d5c",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95bd682e-0933-4f15-9d8e-1fe839161289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63aa0439-f8aa-4294-a86d-ba788c7cd310"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "089e89cd-6cd0-48ec-beb2-422b6628c7f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "efdd6210-430d-440e-a782-6a26ef120e1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b979774-f98a-41e7-b587-b19cbfaa9779",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2735274-8e7c-49f5-95da-398845650527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3866d9a-489b-4fe3-b685-689d01392dae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67c1c8fd-c816-44ba-8447-333c3dfe3b8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "315540f7-8a6e-4258-912a-8e5e652d0681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3a32b62-83ce-45f6-a417-b9bf3e7da74f",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92f44693-9fc6-488d-b49c-2ecfe360130e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fc5adaf-f934-49a3-a1ca-996cb62dce56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "974be994-7f38-474c-8215-13c533c64f5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "189f1edd-e7ff-4a4c-977d-ba261dba9591"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c30b9a0c-9f7c-49fb-9643-0f3be22fdf89",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56ec0d3c-a9d0-4773-8d97-7e470f14f4bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c815e57-941f-4d42-a219-d85c99f92897"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10df5d8a-4686-4010-90e6-bee4c55f6ef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ed083085-bf98-426a-865e-3f3c970b831f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfe02139-7d4f-46df-b19a-d051f1393f8c",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c10f5bc5-db31-414e-b17f-4bca6dfcef0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10e030f3-ca76-4530-af28-c0790a683bab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46c81204-5cce-4fe8-a6ce-372b259dbf2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "864564fa-2600-4767-8adb-cdd39be29884"
                        }
                      }
                    ]
                  },
                  {
                    "id": "874f26c9-2dfc-4e31-8601-f1e69e7713ad",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "548997bf-6f1f-4565-bbed-cf6b4567c770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1ee3986-faa4-4471-9ebb-58c454a309d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "091d48c4-47c1-49ca-89bc-4c54d30f7dc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b100b84e-693a-4afa-b2c2-1838fa1f2329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6544e1ab-1e47-472d-b195-5d6558bb9192",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97f08deb-0385-45aa-8921-a15efc34ae9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ef37a9d-8f85-478d-8eea-61eb35a09e05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61030980-e2fd-471d-be8c-60d9a69a833c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "33e51283-c4fa-4a1a-b932-46e7234e924f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70edf153-6694-482f-8a9f-dddfb751576d",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25cafac8-f4aa-403e-9c26-1e868eeb0811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b28d5f52-1508-4a3c-8bd2-a9dff9c262f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deca530c-c8b0-4707-9c57-11685dbcefbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b641e31a-feba-4b65-8432-24883b80fa4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21b43332-76bb-4ea1-af2f-0319db27ef57",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43f455bb-cd00-4642-9bcc-a3a9bf9f63a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf3a4e5e-1eff-48df-92e9-31173118827f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc13a246-92f8-4282-9c51-6da1216f1e05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aa116b14-c5e3-4446-b345-33ca420e82f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d87e83c2-51f4-49b3-b202-6507e71a384c",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33234d11-7600-43b2-8dd0-7952ba771a58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3a6d6f0-061a-46de-8079-f0af70b3ee42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "631b6b36-ec81-463c-98f4-eac9a79958b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "146fbcad-92ea-4304-9a48-828d5c93e342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8d8cef9-bbfb-421e-985f-8b785277b9fa",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "042c8dd7-0f1f-4981-bfc7-66b3ff716f12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d367bb67-7a38-44ef-8099-b4aa39bee6b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "446efb7e-3fc9-457b-a3d7-f6ea6b472dc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "11130d17-b3bf-40e9-ad79-b44bdf08952b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b297f5c-703c-4a63-baf4-48abf19d5a36",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88127174-50fe-4974-8186-fedec719c72e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "387d9b75-a075-4b48-bdde-3a70a464f0d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70825d34-5000-41da-bdf8-9afce6b8efc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "15c96383-ae3c-4c43-b54d-7485cc5a3266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f456da7-3e74-4fc1-8f1f-c41eb4e59cff",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1569e8da-e3e9-43b0-b1d4-29a0f81cf47c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40e645e1-3dd6-4f26-9a06-2b810eca3489"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fdd52ba-8c30-4e2d-9ec1-69b9bef44861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cba8b8e2-d349-4745-a1f9-6d35a44a9568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18c88e31-6831-4f81-8366-8ed7ce5ae55f",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "846c9c6e-785a-493f-bea4-70f04d3039a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e4d1d12-17b2-4d5e-9277-7f4ffb4b3837"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "101759cb-8566-43e9-890e-e33a1178f879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "46946b2c-8e81-4f2a-a55c-c8c3468b88bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "791481f5-c39e-4cf4-81b8-9b60948df189",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9751c30-0b57-43ca-a24b-52d0e6c4206e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbaeb822-456c-4fe3-80d8-a13e72191690"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca5a91b3-40ca-47cd-b6c6-31713fe39336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "01f7fcc6-e207-4769-ba39-019c6948ae15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8e48192-b1ce-4879-adb3-b35364b6304f",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fb43958-0fc0-4383-8324-1144d84912fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aef5aca0-02c5-49fd-8119-96a564df8dac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6461d2b1-3c4f-4f81-9488-19ddba43b3c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "259f20eb-8d30-4a89-a0a1-ae8f9404146f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db0c462b-99db-4bbd-a1f2-b1f656889907",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ccf4a22-682a-4755-8734-db8d4ec44989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2eaaf2eb-a24f-4668-a604-b5145c8c3571"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01d4ab86-2a99-4ed5-ab84-4e2a3a8cb62d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "82dd306c-c026-47e3-90d6-816e92f51e9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4a1a037-8650-4bbc-a5b2-c84cb9b7fe90",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b7676c6-9b4f-4b54-a7cb-b67bd5075e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7292b1c9-194f-4c5d-a65a-ec26182c8925"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f56b3d9-74eb-4021-accd-c5c2b62ecd8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3b9e749-15e7-4cd6-9ef9-7d09ef176f34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "637fa0c2-3360-4a42-88f2-c4967b82e383",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b00c5d1-45a5-4d47-94ee-62eb000a7ad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21fc1270-6967-49cf-acee-b169ce13cb8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e503b7f0-ea3e-45e3-a358-a1f7a762c4d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "335fd830-2d7f-447f-a6af-0df2b3513979"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7b5477c-7809-4b54-9341-dcb258ff4d6e",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77404d78-e602-4cec-83bf-02b885469db7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f7ad046-fe1b-475f-8a94-f42dfe5e5ab4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a09ac30f-2815-4a40-bb1e-ca277421597f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d387c410-9b33-465e-be71-2901554fe7bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51a20451-5896-426e-aea5-b6cc4cc70543",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01f0b63d-d723-4661-8a87-d5d878d4501f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7132aa5c-0565-4b0f-a0d9-d45d2932d5fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17b15a36-4626-47fd-9349-1728b1ac6285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "153901d7-7ca0-4df7-9b22-ea0ab9a11481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4316477e-ad51-4fd4-a0da-2edef467ce44",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd21e84e-e3b1-4953-ba15-16118e42744d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1057addb-2a61-49e3-bf3f-ffa70727fc11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3d3dbeb-29ee-4bf1-af97-298efb380b40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1c7a01e-e6ed-485f-8a25-1832c5b9ea68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "565f073c-93f9-4c20-af2b-a41ff3e7bfc6",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4a724ff-616e-4aa0-a080-c8ad90fd21c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd0a2bf6-d1b5-4d2f-bfef-70718ee70f8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ff48b5c-0ea9-4c7e-9288-ee1097a4ee08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "94497edf-3a72-4ced-b4af-d6ab67c098d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e6177ad-4b4a-43f0-ad98-310e1a351140",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64e10d4a-c4dd-4845-96f9-e0d4c147a290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "068949d5-f081-4a46-a91b-ee2ae86225c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80a9c693-23a8-44eb-a2d7-8720e908a361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9b98f30-2654-4ff6-b990-84ca160aee89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "879ad93e-69fa-401d-a947-7044495dd619",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c7b78ef-f13f-4d85-9e4a-f8f1ac35fc9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "461a894e-f0e7-4526-a417-584f1079fb0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07d86bf0-d1df-40b6-86a8-f100c31928fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b386ff7f-29fc-46c0-af51-6cc0007eeafe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a70d107f-d01e-42d6-a7ee-a093577c91a9",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9497d881-d8ad-4c90-b5a4-b65b1ce6a7ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18da2733-9e1a-41b4-87cf-1f30b73e6f01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d381a1df-9995-499f-819b-6d994d67ca5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4090bd6-74b0-407a-b81f-1e616fe6fa28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eebc5916-d6e5-4c66-947a-9ab5892f068f",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fdb9ec7-8e65-431b-aba9-034f7711e83b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6827698-2ebe-4af3-86a2-c94c502a9ea0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1183b04e-56b3-46d0-b452-d669f36d1da5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea30e73a-3a70-4567-a310-daf25dd5a7df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da1013b0-65b1-4599-9a90-a7d32518f436",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a3f1ea2-b7ee-42e7-a9b2-77116ba69d20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35dede87-3697-4912-b124-aaa8d854dc34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41925cca-2847-449b-81df-0b616efd824a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec5d5201-6250-4e3d-9d05-9493429fb482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1d48f82-47cc-4e3e-8b24-4df881a993f4",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f44ef588-ade5-44fb-9d3c-b6603ff2bd5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "790b25d7-c349-46d9-a533-c10802b6abba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "730d67a4-c335-44f0-9912-1a8a1e48d1d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9ee0cbf-cb94-47d4-b224-cfb061b01751"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06fc5452-e751-4301-b8c5-f6804f3d9a67",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5051c177-d129-414b-bc0a-fedab3a43815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b53c5077-8f87-497b-a70c-4986ca3446e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e18a6197-78fb-4902-918e-3ba4f7d73212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "edd82d02-2337-4686-a1ad-012dd3755364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f777a59-355f-4b4e-b620-9af7e3e48b2a",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0d58a6a-d4d2-438b-98f5-baa8fcee1861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "018fdde1-9dd6-4ec1-ae93-d5d4e2495330"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "546c235c-97b3-4f5c-8969-e3e96107bc84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6848822d-e39f-4544-bd77-d2c5af7ccd15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "782b6270-d563-4474-b05a-e838a6d5ab4b",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06301464-daaa-479a-bcf4-cfacc57143da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d703aba8-d335-4e95-9e97-7d802dd9ad06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae894e0c-5111-4b6f-8bf2-f17227a3f6f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "e82c9195-0664-47af-bb0c-60dff5c92c73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7c0b220-8f45-48c6-b109-cab4ddfe8ada",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e55e49fa-bcbc-44b9-b3e9-1e47378f7a94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f84cbe79-948e-4ec4-b35f-6058792094e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "432db14c-838c-48ea-8741-1a21b2015f33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2ccd8c04-f5d8-4346-ba79-c76406e85cef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a394f1f2-4a1d-4124-b00c-7e2f000b70f4",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f01836b-80bd-4bf2-9a47-1964029745f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02f7ddae-8353-4ee3-a525-999e544f6411"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13617eef-3d5d-4a4f-b607-3b6fbcd967af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c800eea9-28ae-44d9-a892-83780a47971e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "919fcf5c-8476-4d63-9030-74c62e4191ab",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ed93d19-4c69-4639-a0bf-cbb00e0827ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c8b3945-0b42-4dd4-921a-f07849f39aae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9107dd8-ab43-4393-a73b-ef908b7ea399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "656a3c79-31d2-40b5-bd9d-f6c3b70c1d69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e47cdcfe-2e9c-415b-8e5d-789d88c4e808",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25aaceb9-21e6-4d51-8d1a-59e35d14c90f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e0bf87b-6dfa-4d1b-abce-36f5c8ea6c5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b600107f-3fbd-42d2-8796-5d5ca58eb184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1425947c-c15b-41b9-abb0-db4e2df440a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65a45fa6-6ea5-4b32-98e3-b307dd550906",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37ae2390-181f-464e-9444-7cff6574bf75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5ac2667-bac4-460e-ba4e-19fc8968e0ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f94e7aba-5b46-4672-9750-de932151c410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "23014b2b-0fac-4e1f-a78d-2cf3105b06ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db0cd305-28c6-4dfb-9e0d-cebcbed69eed",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aea4421a-6adb-4e80-9557-a9803d67d932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fee6268-f5bc-447c-9c0d-1ef09ec920b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0110a2d-e5f0-45aa-bdc3-ac063a299efa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e09320df-6f7c-4533-afcf-864c66aad697"
                        }
                      }
                    ]
                  },
                  {
                    "id": "862cf71e-8a07-4932-93a2-37ddc7324c01",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24fa3fc2-261b-4c00-871f-dff4f17f9bf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d51c8d9e-57f7-4d33-8f64-591da6edc488"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54c5b404-c28b-44ac-b2c7-d4f72509bc63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "84bbcad3-634c-4b7b-83d1-f1c9cdc345ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dda341c1-70d7-487c-87cb-abc46ac26cf8",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df2fb98b-8cb3-4668-8a94-af95c6b9c281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0afdca27-e953-4293-aff2-09b8773e5d18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c919dd2b-905c-4cc0-82fd-14b7d3032534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "407bcf6a-5cb9-460f-b796-bada084f95ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3747aff0-d7f3-4739-88b4-8dea8a51df54",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0186ff58-3c0d-4058-82c4-b64e07c1ee86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "272c1d98-0275-4106-b6ce-52e981231de2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "288ad342-fe35-4c02-8c70-b5308e9825bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9c33bc8-46f4-4c3c-b2f6-328b8f726481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "809624eb-bad9-4289-909a-95110d40acb3",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "930fbe7b-1e13-4e04-8454-b4956041a68a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28c7ed67-d276-442e-9954-a41daba9b479"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "997536af-caae-4337-80f9-3505c8ca0c9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "36c82a02-5800-4f6f-bd00-502b2cf2da9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04b703a8-9520-4f06-8576-3f715592eaec",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bb42088-e7af-4c1c-8cc7-8985c6514681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba030d1f-1d25-4115-8118-b58c1d771f69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0577fea3-03a2-4736-8ea7-0021487f3bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1aab94b3-db30-4705-a35c-ff665428991a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35819126-8c4f-4a78-83ec-7799be8715d3",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8b6e5fb-936d-4517-bce8-267f7716337b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "678299d5-5237-48ba-9f9a-b40f14716ccf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b8d88a6-becb-4f83-a1f2-d5b880c05562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8feefb7-0321-4d4a-8b88-2786dade6441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db082174-d0bb-46da-b9b7-802544d942e8",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecaee44b-7746-4718-b27e-e34ebc08f48d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c52b543-6461-4fab-87c8-e255cafb0935"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0c0df81-476c-4e1d-8425-ab86ce9ad1c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "62b68f62-1060-4354-8876-3283d31a3d0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f23ba5a-2044-490f-b71b-c40aa63abf8c",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20c3f898-b577-4bfc-b348-d7afe2b17620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f6f97bd-191a-49a5-b0df-5f3644bf762e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6719b3e0-6016-4f1b-bc7d-040a64256208",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "57fffbb8-6f53-4b80-be59-f7861423eb75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2142c234-6453-4a20-a468-1904971e8e4f",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4e6125f-ba0b-469c-a4ab-52adc4c9e3f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca79270e-63c1-4eca-bd26-9b5403b8b657"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3750609-09d9-4e0d-9067-1db5c72052b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e7266493-fbc0-4e99-92b2-a8f6c6fc45d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e58d223d-216b-4176-a132-1bffc525961f",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87ea5445-3569-4e3a-bba3-b106691965c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dda5616a-aa76-4ad7-a80c-acf3fe1f4ccc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b26cea51-5bc1-495b-bd0b-0cc31f46ff97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b51cfb5-a396-4d42-a997-c9a78686f3c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be9f2bfd-2325-4e15-9cbc-98012e4bbd9e",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b9fd73d-043b-42fc-ad74-4e844e4c982d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd0c0a36-7712-4fbd-aa2f-6aaee648658c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dac99d36-aee5-4d0a-a9f3-1ccb69acc7a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "aeaaf6f8-d06b-413b-8934-6cac23297102"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcf2ffbe-bc06-4d27-a318-f6b8a5b2f187",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e3509e1-a01f-4740-a71d-50d58d2d3660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbaf95c8-39d1-40d4-9557-9a1100b440f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e0fa74d-86e6-4e5f-8313-44882846fd75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "882c183a-3f7e-42a5-ab32-8bc43dd82de0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce2d9ac0-5e34-4d26-848e-6661fb110fed",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f1fe7a3-22cc-497e-ba51-9822d952d8bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2dda682-994c-483d-bf9c-f6c7909a2417"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9758b74a-0a6d-4711-bb8a-06406be3b58f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ed10335-9f6b-4da2-8d95-8a7836b32e6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db9242f7-2e5a-4a93-97fe-579ea60079b6",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdccb0cb-3b42-49e9-bd7f-eeff1305df7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08b23dc3-2cad-4483-9d3d-64a25a638a4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f05dd953-b222-4fbd-b978-ccf94226b071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3cce7b9-b21f-47f5-bf2b-96976414b34b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "609d7c05-f2c8-429b-8e16-f5c6fdb24b2a",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "562d91d0-41bf-4d7e-9bfe-e12aad80c2f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efdb3fd1-108e-4489-8dde-0225d2948281"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13e22f21-3113-4d67-8f91-ddb0fde8bc12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "58b9e881-483c-4539-9ffa-59a7444fe857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ad64bb8-f49c-4c10-a89a-e56a6ac060b7",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1858a6c5-2e18-46f1-a6dc-b432a6d820b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66a250d0-b752-4fcc-af0b-7bff8de79298"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fc677c3-0bc7-4020-a8f3-8810f8ced8db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4757bcb9-3824-447b-8fe0-4d75c34ff6c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc7d3504-ed66-4ba0-ba70-7a013d3dd5fe",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "398fc714-b67f-402b-82e7-486d6e466b15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0b4e86e-5196-47ac-8990-8da64e093eab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6b3561c-d73c-4894-b780-7fedeac323c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc75b210-f4b5-441b-9b5f-f88d446f614f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21de7cb3-b3af-4f9e-8188-46bf9e7917e0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dc7e418-adb4-401c-a222-37ae784e6b21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4bb7279-29d8-4e9d-8da7-9474ea34ff58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fca67263-518b-4a7c-bd40-72994e169942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "07afb6c1-6728-4e77-bf2d-c84de5d8d653"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b562e69-a546-44f4-adbf-86497d3ee348",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da4811ef-f849-4596-9961-74b877d2f768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e801af28-5eb4-43cc-8184-ebf7aa4606a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c0d1815-16f6-4030-b7d9-5d8c872a3acd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d8c45510-7146-4fdd-ad54-83acfa0c5c6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acd20ed0-5a89-4d68-9c4c-019c498609cc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01a5901b-26f7-4936-b68a-ba9ffc97da67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66d60f20-7de6-42f2-8d4b-cdec76079642"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "521d7e24-d52f-4c9f-bc72-851b635e81d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3e75431f-24d0-45e5-a7e7-75356d099e63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90b72298-52e4-422f-900b-edb6e3cd5702",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39f88537-0c2f-44c8-b469-d9e054cac525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bc26565-a5d5-4910-b06c-769406f34871"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f6d71ad-cf8e-46a3-9d35-9193f68a0df7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "6aac6d97-e0b5-475e-81ff-1cef39142823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67d957a5-eafa-467a-82e4-f1650e7bc8ff",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f031219e-d7df-4f79-b3e8-c75a19136a6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7d7af39-5e35-4871-b3d8-2e0a18ed227c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00c7ac09-9f55-446b-92c0-58068fa4ca05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb1840cc-07c6-4e4c-b4b1-365bf51d206f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "443ed749-02fc-4ffc-8c46-44474d5b1508",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5994676e-2780-405d-bf7a-9a86a67aa5e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "846282a9-0be4-401a-9fbd-b416876ee781"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1201c2b-5815-4062-8cda-57427e57f119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6dc89b4d-556b-4d9c-a100-fae37876b517"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78be8d10-fa96-4486-bacd-724cc0b38120",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8130b130-6c59-4aaa-97ff-465e5d12430c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e036825d-2502-401a-9391-e86ef248a5e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6183009a-58da-45f5-9503-a8b3d84ba6ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b48dd2a5-dced-4f7c-9ce3-5272fd9a9bba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47eeb707-4e9c-45d9-8d82-20b9dab6c268",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f6d8917-d42b-4d9f-952b-ddd6c59af845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a34556d-8e3a-4f7f-b207-6ee2ec6cab0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1ed6d1d-8235-489d-9bec-385c4db336df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0150f7f-2111-46ef-9f22-da430b5c5119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15fcfb6e-8f91-4bcd-911e-59d406930e53",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fea06ff-f123-4d29-88a1-41f8472dda27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7981aacc-cd71-40d2-8655-ea70c275d262"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eea177f9-8165-41f7-b661-6f1bbd10bc90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bf6ef39a-071d-4e72-add8-f3dceeaa5976"
                        }
                      }
                    ]
                  },
                  {
                    "id": "819c69a1-8436-43bb-abc3-1f1e835e000b",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcab8413-032e-413b-a3d8-e691a2310df2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83a9418d-c1d8-45c7-900f-935efe9b7559"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce9fce12-649d-469c-b5c5-d384e80c5ca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3dd966b-ba5a-4989-b119-9d4cd16b6fee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97c91988-ca54-4a77-926b-4fb064bc71f6",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08fc198d-5270-4bcf-ae75-b8aed2fca9f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05ef85e5-2d0c-438b-bc4b-1fae65d7efdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "667405dc-06c0-4f25-9d2e-2d91bb9f536c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab841ffb-3dc8-4291-83ac-606bca286556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64caa561-e52d-4a08-9bf9-4b5f3d472a9f",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78788678-d122-4eff-8e67-9ed34c841f82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b9b7692-bd8b-4490-a81d-0dc8cd3a1d0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6174e2d-f871-4dfb-8cf2-538491631aa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b9727d0-de98-4ab9-9ac1-6999ff12c986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e27e3527-65f3-4598-b523-82ac36cc83f2",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d627ca7e-8d6c-4a32-b8e8-f20f3b078ebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c3aa5fa-944b-40ff-a9dc-b2270ff71883"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65dc040d-346d-4a61-8afe-7483eb6364db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5689a01e-e2b3-41cc-b2f5-5d2f9952feac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34fac97e-cf8b-46c1-b8ae-c53036d8728a",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3266e29-f656-4802-9fb4-f0afb6dc6bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2be60c35-8c88-4ea4-9e2f-24041de50bc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c905b12a-4ea5-42d0-8cb9-205227c36c59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8334abba-bcd1-4dd7-8b75-1551d08b2311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09629cf5-f3e8-48c9-9ac9-f6859f07cb92",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2abad10a-42ca-4104-b9e6-006f520aa68a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d690c5f4-94c5-4d99-8193-681093875518"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25a50c48-c27c-46c8-a6b3-0456c5460d0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5af9f9b6-fdc5-4238-87e1-eb17f7f0d9e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dbfc3a9-83f3-4d36-89ad-c52a4e6f6998",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a673d25c-5a8e-42b5-a8a5-ccf526c0a7ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1503df82-d13c-44c3-87c3-2a6bfad26ca8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4423a71-9ae6-4c8f-a715-19b0ffddcf6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c74e112d-6e75-4741-918c-694ea3f80762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e8946fe-b6be-4c17-bcf5-73f0552776f9",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7d793e9-4f92-4524-bae2-7d1f56974642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e03edcab-5609-49bd-9f35-9de48dab4e18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "653f9355-bd47-4e6d-b9f2-ba98bdf53ac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0aa41018-9076-447c-8734-6fa2093d5087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12760252-99db-4e83-a885-ea228046da85",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48f1ad49-eee0-409d-971d-d06041073658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41c4a8ba-6baa-484d-86af-78323d862726"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3e81ee9-ca26-436f-9121-67b3bd17167d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "338ed70e-7a27-451b-9e2f-dae55f1ebcba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20c99b2d-a562-4f1a-a84a-e92ada99a026",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b3017df-1776-460b-b863-6429843d3c85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "800d5372-ea2d-4e89-ab71-eec59b5d79f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbbb0392-f627-49bd-9655-a27dbd5eba8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4314d3ff-abde-4b91-875d-fc703021b9d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb0e7d44-68fc-4b3c-b4d6-7c4b94b22d4a",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1fd945b-1b83-4d38-8139-ab0a80348bb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8432479e-f54d-4fc7-ad38-61a3cfffa921"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "077a8dae-c42c-4839-a4d6-e2b4464d12b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "edd5c210-6419-4d52-a2af-445a76be1ee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77df90fb-5909-4287-8362-b25d0b5366c4",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31d3913d-9e29-4984-823f-835b81cada18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1608bfb0-8c4b-4c2c-8ab4-b2f315ff084e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb127be0-0115-4775-b6fd-7e4ebe251cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b468ce3-3dc1-438a-b4c9-f242880434b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea742f37-0f0e-4f4c-8d1b-01caa67df608",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0682799-6cc8-43f4-9560-9742ca64932e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d9924b2-c3d4-4f85-a116-211439363423"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "779acb85-5df7-402b-9d57-e2d6e404aae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ca3862e5-832e-4e3e-ab5e-6d9f94e5948a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84838f0b-dd42-4799-b385-5fd28bac5d01",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41f316a1-3c06-4e37-9530-b19c3d375942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "757b08b3-4d82-4c12-8cd5-ba4b55967106"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9a4a759-399f-4977-b637-b7073c09049e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6ab125b-6889-4927-b6d1-d7e91c58c548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91662d06-96a2-40fb-9d89-8d9b5145f29e",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d52a594c-7694-4b0a-9ee9-0802ad62f20a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fd1b63b-78d5-4b96-a439-d00b2d5e96f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e4923ec-9c15-43bd-b6b8-cdd56c48ba96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d48e81c-267b-4ad7-a889-35d5db4ee59b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb259251-430b-431c-a665-329c0851d18a",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64f5ee1f-671d-4dc9-a908-f601865ed491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6ac9409-37c7-424c-93fe-5aed05a11105"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "655c7447-968e-47b9-b38a-6e821d34b703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fa193f4-d4df-44f0-9ad3-cd7048600f5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e938e8a-4342-4c2f-ac14-2542cb30c4bf",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06ac980d-d218-49de-8d91-03e65b8312c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3968c352-871b-42d1-8043-ff08643cbf8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d397fd0-f85f-4d33-8182-28a220425714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd10058c-dfb8-4041-ba55-f51613490fda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd86b2f3-d9b5-46d3-bc3d-25824167e53f",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb540d6e-e2ba-4ecb-95a1-19a0652ea548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0a7413f-b777-4b60-846d-785d0eca9172"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fac577c8-2f75-4f68-9f5f-5a8abdcf2d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d9a99996-d71c-4de3-89b0-66ba091cba8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f8d7aab-eca5-4666-8dd2-62b6f8d5e4bd",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fc75d87-88e5-48e3-b5bd-8d795b582705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52f00d74-c823-42f9-922d-359232cd9428"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8696e083-0501-4e6e-9848-985bac582efc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "879b1543-36ea-436e-900f-84c6d7073be6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "879ca34f-517e-48a8-96a2-6a1ef8b794cf",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aab48a0-1f5f-49a1-b4e2-b26edaea6936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21fd1aca-8323-472c-834b-80a1f8b32fd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6e352f0-5c1d-42f6-a811-79a032049bfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7ae3879b-3e9d-4522-8699-04328cef5b41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "528f629f-28f2-47a6-93fe-5a44ecf23c85",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f127d39b-a931-4ca7-a8db-5d85591670aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "717ced0a-58d6-4ddf-a019-2a7a7b9f86e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37a301f4-9327-4355-b8d4-330ce476f092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "baeb27b3-3a7a-4139-af2a-230727991dd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ef27833-5866-4534-8b9b-c29bcf5573b0",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0eaaeef-eff8-4985-9d43-aabe21eb896c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ea6a141-9d56-4c12-ac4d-e8592c9dba56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e4105d1-0e4d-45ab-a032-e94562846faa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc883226-c557-4485-9504-33b8757bf8e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba0a3da2-f72e-4972-b291-59a51f432a40",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9222384d-92a5-488e-ad76-3f844a878539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "452bb569-a102-49de-9b48-3814c1a1d559"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f9b99f3-aab9-4aa8-ba44-4f584ceff7a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "75cdd47f-9b9e-4da7-89ba-3970e072e340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f0a01d1-f8a6-4d32-a8fe-e84b20581e5e",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7867e919-e6ee-44f5-9a30-ef4366434005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9916633e-2dff-4b09-a29f-cb55d47da39f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47275d89-f641-4d5f-81e2-d8c4426edda6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "0978569c-b2d5-40eb-bc0e-681e1513fb74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90273691-e507-4efb-85e4-194a1f06d9ec",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dcd0137-ccd7-4f3b-8178-0399c208cd9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "4068cb59-ecc7-4f4e-a85f-b3bfbcfa929c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f72c5b6-3c4b-42fb-ade4-466a28c1ceea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "58503be5-fb26-46e8-abda-89d101eed282"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "424f5d1f-9f1c-486c-821c-3fa593d3343c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b4ae91f5-284c-4fd1-acfc-d80bb96a4b53",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2858b234-dcb3-46c6-8ebc-873e56d4a49d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7b077efd-0668-48b3-9fe6-a5f644390ed1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b7bb829-fa1b-4e82-86a3-3c0921bf5b6e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "83007d6e-9084-4170-a965-cc986141624f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "685b5d77-bab2-4360-a71c-3bf053a5baab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e357b505-e444-4d8c-bb76-e21d540ae5b9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cd72082a-bc7a-41ce-a15d-ef95a6320963",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "21b88501-c824-4547-977a-c4a54f9f2151"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ad28cf36-69c9-4905-a814-cd8116edcba9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e1a13caa-b757-4b61-8c26-6f06b537701c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e120b611-b639-497e-a375-9b9ff02740ba",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c6f428ea-2271-48bf-8607-72753009f477"
                }
              }
            ]
          },
          {
            "id": "74952194-f9e5-42ee-8957-128294eceb03",
            "name": "Positive Testing",
            "item": [
              {
                "id": "20d52cf9-5300-44d9-b45f-a6db1b77f777",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "79980a39-87d2-4f56-9926-fe512dcc74c3",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ab004e2-44cf-4b8a-8b8d-93b5b59c5576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "b30e81b4-d567-4b4f-afcc-9517581c0bd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca3f96a7-b3de-4f35-af1b-807a343ca60d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "804754cb-20ca-470e-be53-5acf0f330fa2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "34f2bc6d-921b-4269-b928-afc877a09e4e",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e28f3376-0078-486c-a19e-6df815d1c69c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f08f42e6-1a1b-4422-afcc-68acbc4eaaf2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2d6f0528-5a08-4987-bf69-f2a224fbfc8a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "20afe221-bb5e-49db-b3e6-c38ad6b9721b"
                    }
                  }
                ]
              },
              {
                "id": "db0be6ef-4cbb-4af9-81f6-a11f948eb6cd",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "087290f9-c0ff-4029-a5fd-b3ba88f2260a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cac65954-8b41-44e0-8fdd-fc0b5d93b0dd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "323ea065-f75c-4593-9323-168db2856415",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e746f47c-9198-4b73-a210-eade4d79bbc5"
                    }
                  }
                ]
              },
              {
                "id": "d2a2dbb0-b973-418e-84ac-b61eb520800d",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fc4c4e65-1f10-49ba-b02f-45e5cdfd338e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "829e3f10-a5f4-41ec-acdd-d68def208def"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f28cdfad-e5ce-4e73-9648-c4a732ec6951",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0595b257-119d-4f6d-b0a8-7f21e97b9f70"
                    }
                  }
                ]
              },
              {
                "id": "5c0685cc-e129-4974-a41a-eba45aa3fadb",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "139b342b-a5e3-4e37-9256-f8a5d365ef28",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2930a21d-a014-4b74-bffb-6f94b76a31b1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "523fb72c-118d-43e6-b877-cbb6d20e6c84",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "1c5a08d5-e00a-48c3-864a-7b99abbac3e3"
                    }
                  }
                ]
              },
              {
                "id": "67c369f7-faf8-42bf-bb83-d33e7bc9ecee",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "af423286-63da-42db-8e09-54ad3cf6aa2b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b393b32a-73d3-459d-9318-2c6b32d8eea6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d7b108ca-157d-4502-a6b4-0ea51bf02f57",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "7d7f9243-7150-471b-a566-264e5cec7a48"
                    }
                  }
                ]
              },
              {
                "id": "5b138418-9191-454f-bed8-b2f9aab492e5",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2b1b739e-2ab1-460b-9817-d59d3158acba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "614704f1-7aca-4e56-98d4-a1ed1753f23e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f6b7bf86-f62b-4cac-b7c6-34df11c39de1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5f963c35-6d11-456d-924c-975860eada7a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "175c8366-0d1f-4239-b70d-f61c7b3c5e75",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c5a943ab-c0a2-4559-a3cb-86287d1b960e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "cbaf8dfc-4335-43cc-b267-1f21d4e4fcde",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "96fe068a-2716-4ed2-b0c8-e4b44ddbbaa9"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "70fc2022-583e-4875-936b-957bee5fb36a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "7765bbd3-b72b-4c0a-8850-38ee9f20ee2f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a0faca16-876c-4323-9456-640622599e46",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bd37c1fe-424a-4efb-927b-46d8eee5959c"
            }
          }
        ]
      },
      {
        "id": "14003e35-0357-42a0-b4c8-89e146b5cacc",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "1e23600f-ec54-468a-9c6f-26a32f6342bd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "70a88ebf-9e30-4fc3-9d4b-d9da746e85f4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7d3987fe-af03-45cf-a69d-ddbf6fddbd56",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df5b0753-a153-4f9e-ac76-50beea682e00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fea307e-22a9-4f0d-ab69-022418c246f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec5edb31-0a80-46d1-a4a9-395492c3e305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "cae3582b-3648-4d3b-bd72-b25d52d452d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0db7c5f-6b2d-497f-989d-e066bdc6ade7",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df497c00-371e-4d02-8f6d-cf2c99c4f422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b914b23-254f-4a95-8738-724e3797e65c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1130c4c2-c39a-43f5-a180-86c2404d2add",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba28cc47-f1b0-4357-8931-6d47f5f60213"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35eafe65-9fab-4e38-8acb-7d5b0aaa8659",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ade46d08-6b9e-4156-ac81-1e9d78cc13e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aff5635f-f8f8-4a41-8698-984c0bf8eec1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45890577-7809-47fd-bfa3-43adaaff7a25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "44650c74-e427-4894-a4f0-5fff8eeddc44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e901d17-1598-4719-a840-875876537c4d",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55d2e2f9-3dec-4554-832e-3f3a5bd55572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c568edf-4e4a-4bc0-94ac-34fab5b89120"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f954e1a2-cefc-43f0-a8e5-a62e2f8d8932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "754caeaa-3688-4ba5-9801-585d3349bd63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f719710f-48f7-436f-bf56-6e472c8b22dc",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d7e6715-e6f5-47c2-a068-8d98c623e488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb5fe756-1785-4933-9295-3917c1a75358"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a566dc7-d0d7-404d-9daf-87fffbb63d04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0bb1a445-1c45-4dd2-a0c8-8c972a3c873a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "486b5ec0-4ab6-47b3-92a8-e957a792a066",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ffa019c-7187-4d36-a66c-b944f05e7923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce5bd60f-d49d-45e0-86b9-7b558a651e2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fe918ce-9736-440b-801c-dec69b618c53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "90390be3-f380-4580-b2bc-aedaca5ce610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bd004fc-d299-4542-b9b1-7a3cfab1523e",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e81ba383-ba7e-4bd4-89fa-20bd0ba20ae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4a48da3-a58f-4565-871a-b3325e8ba017"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "673a18ab-def7-4059-a31a-d7a9b5c7ad3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "7bde25b8-aca2-4e2a-b068-b4adbedd45d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49973ff0-f4c9-402b-9e44-78b1373a8dd3",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88bffa13-2653-4d74-815f-7e7d014a8c31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b82e14aa-6b6a-4074-8799-fdab961dc20a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cddf30b-0caf-4001-8bdf-240c3febd6d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e937110-b374-412b-976f-a0393ae92d95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12e8b270-74bd-4a0a-80cc-4749c08147d4",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5e7857d-4bde-42e2-b061-ea5cc4ab1081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcd8dde0-3794-4527-9b2d-208525d65ea0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "203d37e1-e685-4da1-9ad1-7bb5c3aa79d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e8b3cd5-e309-4e85-bea7-f8921602f3b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21df3587-48c1-480a-b659-06f26abdb692",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96e0c3f6-7684-4ab9-8dfc-eae8f12a2bc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "126ac4fb-3639-4b4f-b8b8-7eae760f0eac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f81fb398-ad00-43fe-a06a-8d22a59c76e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2c1019f-3e27-4aef-b4a8-78d5964a6d89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecd45b34-f44c-465c-a9e9-56ab9415647f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c0f3d94-28a5-499c-b849-ab4f5873e91f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5d02fe2-4bb1-42ef-a061-54ef9b82dc90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a034392-5cc8-46b2-9b93-2b9d007a6cf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "39d29377-53c3-46e7-a6cb-fad887eb0b30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ac805cb-518a-40bf-bd19-dfec6054efb0",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c5ee765-032b-43a7-bb44-3cd97bc60884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e296b43b-8d46-453c-84b9-88f9d64988e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e14ab2ce-65cc-4ce9-ac28-df96a41b427d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "51015371-8664-4eed-9a0c-bfd97557c345"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9765daf6-f813-457d-b756-fba248cfb5a9",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae1e84d6-c542-4b4b-bf1f-13b93106bc76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba8fa32e-7b20-4501-af98-daa9060b2355"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f71ff7c-342f-4c7a-9034-09b36146798d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "38eacb4b-cb53-42b7-8d17-8d8b0c2aaf35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a76c2729-ab74-426a-bb0d-de580e0ff89a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dde711ba-6a8b-49e8-abef-af75c74290c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1989b10-c97e-4dd4-9c7f-8706be99e944"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6be0972-6f00-48fb-bc24-d57a2074e8c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "28f3e56e-7061-4d63-8929-65a8a2333ca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95759d85-83b3-4ac4-baeb-28fb6d01602a",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a653310-1c76-477f-8235-8f6bf19f9541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5fd4013-50dc-478e-b3d5-ecfba57ee571"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9beb956-b146-4af3-90aa-5f03db9a79c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "50fd6cfd-0289-4f78-a69c-f41880bbcdbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4e7986e-b072-4ecb-a88c-244f6dff4678",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34e03438-83bb-4c21-bd9b-93770523b0bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d29c71b-423a-43db-8237-8f02b4ee2ebc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8abc601-3680-424e-98ac-2c427ebb029f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "99d6676b-824f-47fe-a737-613c9dd2b016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dedec839-cee9-48be-a359-e779418e45aa",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2740329-07f3-4de0-88c3-ac3227e4c0f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb32d072-99d5-455b-975d-a61227007a26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e10ae2c-a141-4ad8-99e9-e6c3c691aed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "467f0c07-2798-4e55-af2d-a809affb8430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56f83a12-4422-4d32-bf2e-9cf079565ded",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69fadb6e-2a1e-434f-a3f1-ae5d4720215c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a1a3284-745e-40bb-a382-a82a3604167c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b09e5d4-ccfd-4f13-8e27-380b29f5c939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "83a659bc-14b7-4fd5-823c-bef68bc7e8c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a04c2bd-4bac-43ab-bf55-17f3f38a4b27",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2564dc52-e3b7-48ba-8504-353d57db78bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c614a99-52ab-4d8e-a16c-88a45132364c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "405dcc5e-2f64-47a9-9800-7ffb27198341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "42a24459-a0a0-4eca-9fa4-ef9101388ea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcd21ce6-b542-4533-8978-7e49269a8cbd",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47a9ae51-6e32-4ff8-8426-e1bafecf4ef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85cc40fd-2e6f-460f-80e6-5fd8ded37a70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49c5d136-5216-4112-a051-28855359996a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "15115024-84a1-4db3-9482-75c56b9f5edd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6c601fa-8816-4c28-bf65-0fa76ae756fb",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c8bad15-6eb8-4704-8cff-8be76cc5b0df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da159cec-0f91-4435-a763-fb616ea8c60f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08f8753d-71b1-4707-822b-c45676593402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c49221aa-8584-4cbb-a842-9dfb4a0c1ba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b266917-eede-434a-b720-2daa25f8a6e9",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9610d0ef-3bfd-4fe0-badb-c92c06eae422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "923f6f92-b238-4ddd-b0a2-17060ad16f04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e757d5a3-3762-46c6-b759-6b150e186384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c4f8cc9-2e52-468c-9bed-df305c69ec84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78adff12-9f49-48f9-b366-55ccf1bf9064",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5454f925-804e-43ab-af2f-0c5011f66a98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df904f2a-238b-41cd-b2c2-4bd7d361db01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2d8e3bd-4446-48af-bf1b-9b1efbcd4171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9add7793-78be-4691-8e93-20cdeb1d3fcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c346d9be-16b8-43e6-8b8b-6851e967f0ed",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b815faa1-89cb-4cd9-9c07-d75cf5a5f448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a94e3aa-9776-470c-8cbc-310564de4e82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3f3cd35-8202-453e-8df8-24f28c9ac136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "44831f2a-be9d-40fc-ad54-eb0a4385f467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d6f57d1-e833-48ea-9993-f02436206c3f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c219364-da9b-4564-b641-3adb7f52dada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e04e314c-3a78-4fd3-a3bb-c445a0428f15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19db12d9-7413-4592-a0c6-71b0f307f1e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff0d0a86-9d75-4600-81e6-c20f48582240"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0974ff7-ef18-45da-827d-9c84fe0a01c9",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c59736e-a49e-4c34-a02e-c1be0d6c2930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5ac6d80-8563-4d46-8e1a-7aeca2119335"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7281baf-3cc3-4466-ac79-844e190565ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "23ac20b4-1a9b-4815-a005-9e457469f028"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41335fa5-1a6c-4036-89bb-90ef8c727161",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b39b102c-71d4-4c8a-bf78-57c5e414f073",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ded15322-41f5-462b-b1c1-ff84ca2a2363"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ab7318c-8178-4920-8540-728ef19c4611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "50e19fd4-d9ca-4596-bfb4-bfb8f1ae9355"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06897c16-5525-4428-be56-981f62446680",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72f88629-3de2-460e-b2ac-91400b54847c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24bc0a39-ae88-4a7e-9c72-70bcf55f5f66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60add2e3-e6a9-4fc0-914e-741ec4573eab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1844beb6-451e-4b5d-a14f-8cd43a8f5d53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7776dc95-ed70-48d4-a277-34d8219f48e1",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "668bbd1d-5fb0-4f83-97a1-d5d4eda96a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a03f8320-3c6f-42fd-85cb-4c95a7b28eae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94630dd5-f24d-49c0-9685-799f0639dc71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "52958915-5ba7-41fc-beae-58954c5401f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "994564bd-8e8e-407f-869a-ac8ce190b0d6",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46851259-87f6-4f65-83f8-4082be025a8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a13c5c2-9533-400e-bda6-2201ca8c4812"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5761bbe9-705f-497b-8341-11ce27f45789",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "632c50b5-edbb-42db-9086-1b93cf606b43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "508e9d62-c243-4e56-bea9-d0ec94ff81ae",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eb08c62-e4d9-4626-badb-b613ded44513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86e288cb-8aea-426a-bd8d-c08aa3b8100b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60196d27-5706-4dee-94d7-c62398d96053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "82970d89-7653-489a-8283-52fd1d5195a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09566331-a515-438f-88e4-8f02ec9b3c0d",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7c75975-9491-435c-af40-c3b620cd41ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72e02b91-5a50-4b32-873a-4796d6aeff09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a12ba393-1e6c-4dc9-be1d-d0810c6e12c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc3c8db0-e90e-4fe5-9d0e-fff11b9a3ec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a69e5e5a-3778-4b7a-9146-50e1bc5bff78",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdd0f7a4-f027-4090-80ff-6ad123463166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acb6d137-c8e8-4929-9216-0f9eb84cf6e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee21e82f-31ab-440a-8fc6-80ef3f8ad165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e11e46c0-90b5-4b78-b5a5-29f2a060887a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30e91e07-fb16-4d6a-9015-7a154006ba86",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47520216-7c2e-4cdc-a6b1-8d1d4b567232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c931697-4b9c-4bed-bcff-3ff811b55cc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08b71449-b1af-4e15-975d-b260c6fad205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb3d60d5-203b-442e-963b-e2eff5a99a99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea77a5d4-34db-4a3f-b217-ede5dc7c34f7",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cae9ccc0-884a-40ae-a8aa-938fde5ff9a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90c16313-7061-4029-aed5-b7f9d56d1a48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66b328a9-6b5c-43d3-8dcb-fd14345d0fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "03cffa52-56dd-4e88-bdcf-6dfda257caec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdedefd0-b22d-4434-a8c4-5d1dcd9d98b3",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41038136-32f2-4df2-a170-1739196db3bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0911d42-d485-4106-ac3d-78353e1eaa21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd4db310-5498-41ae-9ecf-84354b3fe1b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7534d6d-c1f3-47d4-9bde-df89990d6a02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d3891c8-872c-4cf4-b061-b44d15fe94b4",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c52972df-4e4e-420b-b803-eb2884bfc9bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fb4e5ba-e560-47c5-b1f2-2639aa1cd46c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97102b16-fb08-4902-9ffd-c67c642f05e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "518980c7-c7fe-470b-80ad-7177c04ae8b9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a765bfbe-765f-47ab-938d-93f13a0d0f76",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "64c81290-a80b-4f11-b5c3-110b45e69895",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1185918c-234e-4b2b-a365-5e24536ea975",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "8b98c1d0-6f33-4445-9a86-1308e01a704e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ca1e7f0-df84-4ffc-9b59-acdcb4400c33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "32519a47-a688-4388-b139-c903d6db071e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "156df001-141c-415a-935c-fce09dd0c08b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2e49eba2-0a3b-4c94-b031-cc8a4644e845"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e3b3ab3-9505-41b6-a776-553ba012e387",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "04bc0af9-1d3f-4b5c-8f96-bbc911975a2b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0ed5ad95-336f-4950-97a1-c097cecfc175",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b8e4902f-a3a8-4aa8-b657-38af539f228c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4028876c-91fb-49ac-82eb-8dc9d9a30b9a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1e887e95-9ec6-4194-bb19-3a2f7e43b350"
            }
          }
        ]
      },
      {
        "id": "d5b4bcc5-64bf-49ad-9798-9bbc508c6dfa",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "9565f3c4-c639-4be0-a3ad-b17c4a8b7b43",
            "name": "Negative Testing",
            "item": [
              {
                "id": "691cf324-7b05-4080-9ed2-b86536b5fb2f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c4594261-97bc-47d6-8f92-0ce0c1d1805d",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdab4b47-2a58-4782-a0ce-20d8597f821e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4277f68-418d-4f08-a08d-e12d19df8d15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ab49926-181d-412c-8f46-b50e6a4269c7",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a00f654-829a-4169-823a-081b55e008fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "867aa9e1-875a-48f6-9b5d-39f897555615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d00c9dcd-c4af-42fb-aaf6-fbf692236eda",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf512aab-c0d9-4949-b4dc-b9fac1544420",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91bb9190-3239-4330-8faf-ec2ee2c372a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aaac367-90e6-4315-bd2c-55463efe60fa",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7087db0f-8d9f-4c5b-b844-b4fda86a693d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b3b28db-fa7b-4ff3-b37f-e57c0d4c5e2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c15460ca-c54f-4282-a300-6f85262b409c",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8702098-b67e-4e32-a356-6da739c0b2fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f915d68-67fd-4389-845f-e8b0a9964298"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dba0cb8-3291-4030-ba6a-24c1deb2feab",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95582f6c-2884-4526-a115-451a9f362cf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e9256ee-023a-4e3f-ae5f-11fe4e099d88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6de3d03-e07c-438c-8fde-0e38dd21ac8b",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f27b4834-7353-480a-aabd-d57066c18eff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1898f83c-552c-4de4-8b44-82f0811a7fc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2d4395e-8364-4615-b0be-9edea453b976",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7f26c3d-0ed6-4dfd-aeff-d7501c8aa5a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa0230f3-4a52-4694-8b30-5088027e76cb",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be6e561b-5fb4-4257-a7c2-fc52fec1b52c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2c01604-9a38-490f-922d-423a6ed7aa58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afb25372-5202-40f7-a475-7f430f286561",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a2df468-b7b9-466a-8608-4fb7740f20e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c282947-e065-4135-8c3a-f1123eeaabd8",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfbac70c-16a0-4a29-a874-7a77aaf59966",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa52ea61-1dd9-443c-bd81-fc6d14ee75c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "919a1642-0875-4b1a-9c47-b34be2845db7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b34457e-254c-4af7-8efe-6d939db0cab3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36520102-4d11-4158-bde9-f1d4deaa7a8c",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "922d8410-cc76-4743-af6a-22b686adcd8d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f05590ae-4a2e-4cf7-a447-73fa79a6384b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44b7f0aa-9f1e-4541-9a61-3fc591952cdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de3a8642-6b6b-4ce1-9cdf-369d06116895"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85c34e4c-73fc-4267-abc2-6b1a0fbf5f51",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8977ec64-368e-400d-a170-209f3cf6bdf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79430a3d-4dd4-46cb-bfb2-df329df4602c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd3c7288-1be3-4dcd-96a4-e45fd6eabb8e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a5bc244-c4f4-4f54-a200-9a359efeb846"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c58d2d84-d002-4c01-b33a-e97d95d5c6f6",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da5c735e-a9c7-4e0a-b250-975f6ccac280",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "333d8fa2-755e-407e-a07f-009eef5d2ba3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92bb2ffa-0259-4c12-a2bf-9b28c44f5b2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcc7f08c-23e2-4517-bac8-32830cbae684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13b6a11b-0c6e-4b2d-834e-328af97a2ba6",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d432f52-d94f-4bdb-9724-be8438f8ea0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b6a9203-7522-4d02-971e-965d615ca5c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3b341cd-59b4-4892-bbbf-86157881a760",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad2c07eb-9651-4d89-8ef2-3fd7113775a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cd8d4f0-01d5-4a5b-b857-a72a48dbe072",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90c29d32-ff0d-441c-9d52-1d51b04857a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa4bb165-d095-4773-a881-b383fca47007"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0f41c4a-a662-489d-ab25-81d3e8ec7ab3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efffc8a4-0bec-4879-ac58-f629a09964d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2036774c-7ec0-4e42-954d-fe323a2044ac",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2209661-d1cd-4661-b177-0d4bb43af26a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af7f4bf6-cd31-400f-ae9d-1394deb1a924"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cc62bc0-cd45-47ad-b354-17a19fd822d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1d6dbe3-8cf6-406c-b0fa-01aed0f07789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbfc06fd-5b3a-47f8-a71d-5d8fd53292a0",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d0e930f-7740-4c2a-8857-4a7671cb4224",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b4c2b80-b44d-4e18-82c0-3563da125d49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d31213a5-4851-457f-8419-662271852ec5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c47e20f3-d000-4493-98ea-80de355eff67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27623428-801e-4621-a5d9-4e74be998e79",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8144fb42-a507-4ba6-b48e-08f72024cbde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afbbdb3f-22c8-4d4f-807b-b88b5f666356"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "906d1460-10af-40e4-a955-34f5fd8039f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4a9e53c-8994-4943-8000-59d392c50339"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e7d8bdc-0534-432e-909d-a40a735e3bf7",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e823da6d-de47-4374-83cd-5995f71d024f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaefce40-14c0-4ca9-9ea3-cb60431c6cef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b5b6507-32e2-40db-b45d-5e2049a13909",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb0d534c-7e5b-413c-ab23-4417c693c684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da383631-973c-404d-b126-ca3ee5554fd1",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50013f8a-38d2-4ca8-a634-ce97cb23805a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df963d40-8021-446b-b8ed-110dd5d863cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f576f86-75e4-4319-b111-6829e01832d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c43729c-75b2-44cd-a3dc-1d783b3adb07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04981204-76ee-4286-bba3-046062ea63c8",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a268547-ee81-46c3-b074-5a40106d7bb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc70bf9e-2bc3-4440-b7ae-868d60173e5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57611e9a-3cff-4a7e-b963-95128a6c312a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad0b28e4-71d0-444d-a9ea-6cc584c286c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb53e45c-14dd-494c-9994-c5cac1595c19",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff345679-9eff-406d-805f-5d18639d6415",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efa52aa5-4680-44b7-ae7d-99ead70aef50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dbad768-a800-409b-9025-21cacab832bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d48942b1-781f-445b-b767-bfe7eda7597a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c05b8223-ad83-481f-aefd-eb9df520cabc",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bf05b3e-2753-4b56-992d-34867d5606f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb8ef144-32e1-4b2f-98b4-1df8544cde0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06fdd238-af5c-4c30-9338-03c557131ddf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddfbb8ce-ab91-4110-9b31-7929ed18da02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f69801d1-6eb0-4d08-bf04-19198fd68642",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0619044a-d5e6-4b56-9708-6c41f659ae82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab667faf-0b2c-44e7-9bd1-6e3794197dc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a40aa565-87dc-4a44-a897-19db8e487d4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98dbf2c3-4ff0-4cc3-a56b-2e443138015a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f0629d3-5fb1-4a11-8664-28685090225d",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bc80b98-8e53-41eb-b1e4-ad7335c2696f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50fba29b-87d6-4705-9d98-3312d7cd8a99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f627b03-edbf-47ff-8f29-02dad423014b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efec5708-5640-4dc2-a40c-c0515f02c2e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e1d7741-4dcf-48cf-aa08-9e66e6717118",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffcaa044-76f1-46cf-b32e-041ed0e32045",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3777474-2ec4-4a99-aba9-fda5e7936047"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44e5dea4-9a11-4014-ada4-3c2c136ab0cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "137ad928-9a6b-457b-bc7c-ebec70f75d73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50926e9e-e4f0-4fab-a9d8-6b073daee7d6",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a66546f-ed26-46ba-978d-c1af4081a3bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28b965a5-7096-4de5-b973-d888ce731797"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "210a7b1c-a6ee-42cf-8b2f-f5eaa3fd5a78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f63cf8e3-0f04-4a2b-92b8-9737fd08c35c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8cdb729-7547-4a40-8738-61b2aa377926",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "968d10cb-4432-49e8-8d04-bc2a5a423298",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5907a028-b339-494e-825b-13429c7f6d78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cd11e2b-45c1-4065-a437-c667f8698d33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7853c894-9f37-435a-82bf-136e543ee49a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7087ba76-13b8-4edc-8e26-8467c4c77087",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe2bc80b-24d8-4d8e-8ee8-983d4067592a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c6b38de-09a1-457f-a142-faf15fdfdff4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab651de3-66ce-47da-acb3-263bd57968bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60162bda-871d-41bf-b706-d6c11650dd39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65e4a58d-f7d8-45fb-ade3-d14da44cc23e",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa8d8681-b7fc-4cb2-81d2-cd26d44ea32e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43f46ba2-f8a6-49fa-8e0f-c24a79166f40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "005f46e9-54e9-41b8-9307-0661b0197e87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcb1170f-476e-4cea-ba12-a1a34a406e55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5a35da2-79ee-45e5-acd7-debebd1179e1",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6edebd3-5c0f-4a1b-999f-977ee82310ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50b97873-45e0-4e2f-972e-889b2b341275"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7cec19f-b289-4f0b-8f66-8d2321e16da5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "352d21dc-01f2-4e27-a14f-f87e72ed3afe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14d027e4-1363-4824-89ff-afc5ae46e1d7",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac466fb2-a27d-4432-8f0b-a8a38d70910e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90b3702f-a24d-432d-a407-da4b3fb5b0f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c26a3aba-fe39-4ce7-ab04-20a27f66dc7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea30d9c2-c603-4cf5-8fb3-18096a98648c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6b76a0d-a801-403a-b903-c9bd7c20e1f6",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "551b684a-ef8b-45e0-8db7-929bf169ac67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "decc014a-1b60-42d8-a908-b23ec432e57d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f7cefc9-5a97-4b6f-9b02-4d918bebcc04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66cc91f5-1e2c-4d9c-8095-db7beee3fe36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12c0de59-9353-49f2-8cb7-e24ac240b736",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f49f2cc-9527-41cf-8b01-f2a374c9da99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f40613e7-f02a-48b6-83ac-ffabd0e55b0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ebbc3b0-b19f-4e6f-83b4-e4090a84f122",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27a09b0f-d089-4f55-b0e4-43299cc1a152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ef3aad3-c932-4845-b097-e42217c425a3",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bc63537-27ab-4901-9e49-1efbc135c08a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2f18b5f-cc31-4396-a14e-2ece55275f5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aac71d37-cdff-40e1-999c-bf5ac3a68f43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b424161-2308-454b-9da6-e5d1bd2686f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61b19203-540b-4686-a73c-9e3753d5ed3a",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6c8adad-8f03-4ed5-91e4-bf7cd66d4088",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc897cfd-9ee3-4d55-a5c2-88817c03879f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edf3b669-e646-444d-8b5d-adffba9fc4f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3cda4f1-3a69-4001-8cbf-e28ef2f96235"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62a2ef47-4b53-4396-b5ee-737446ba18bd",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46ea147f-00b9-4660-8069-da8fa2fcba7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dabdd87a-ed69-4bdf-8b90-c1be7d3df1c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4b47447-abae-436b-b146-a72bc88f554d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3884b291-8d73-468f-8a7b-1d99d28cdf3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "057fb1f1-ed64-44b8-befa-83b160ab9602",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d7cc367-81ca-42e2-b6e4-9a907041db64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98194fd8-1eac-482b-9504-417e2f0533e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "752dfe1f-d0ef-4e32-a19c-ccadd5d528cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dd3582d-8eef-4f80-9215-1f9dfc13277d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2cb0a8f-9fd5-4aaf-a2de-15208edd1878",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ad73e97-57f2-4e23-8a9a-0c6469e6df4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "968f82bf-48e9-4520-9e6c-32515e69d649"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4787287e-fe97-4539-867c-7ec543965584",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34523bbb-f253-4d30-94d6-b2925f55b78c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "271854e0-f71b-4db0-b899-085572a3bcfd",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fca8e3be-738d-4615-a79d-0ef99aa308d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b4a27aa-a8bd-4286-8d02-3952f84ff509"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d3d2d7e-ed0c-49a8-8ab7-cce22c7f9258",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a802f689-f6c9-4abe-9c52-ddec888ae9e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a536bbe-779c-4988-80d0-22068186db35",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c8f0682-b7b1-45a4-90d7-c4298a84d340",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5740a53-5551-45ee-83a5-fd1bc1b7b75c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf8693d5-0f28-4c3a-bb51-03d278b6ac53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c36e13f-cd72-4dfc-9c83-a50ff5983c5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b3e4059-aa7a-4509-b65c-dc30e0bd6538",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd64f397-4022-4a8f-be54-0bb3deb12816",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ceaff7f-ca0a-412b-bcea-3a5618ff855c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74e8d8ea-d95a-4701-b637-03be29579c3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f15bf296-38ae-4ac3-b991-b79822dbd4ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "039223cf-d3bf-49fa-a63b-1f626a719b18",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bef2ac85-f78a-4080-aff9-0a1fcd617acd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e454776e-6f67-4150-9286-ed6c99b359ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d4fc50b-43fe-419f-97a7-40ac1f17ac19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a1a3865-1797-4ea5-9d19-61baec03c151"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50c76075-b4c8-4f75-9979-0e1531144d8a",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31cb3145-b6e8-4871-bded-a8a60b36fa0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38d70c82-2d6d-4e2c-bf6a-d76b612e820b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91273241-9310-4be5-96a0-e34a8ab9329a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbe3c479-b81a-40f7-89d8-a12e5eca3211"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46ac572f-8fc6-4a4c-9400-e9e8a932cba8",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ac31cd5-1dfc-4a7d-a3ce-046ba4778c00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27148b0c-e405-451d-9a9a-f5e48b35c515"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8269b23a-582b-468a-9753-3d3b3cdf1845",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e5bcf62-feda-47d6-9f0c-724373683411"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdc3589d-3ab0-4877-b9d1-dfbd2020c516",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98d277f8-31b4-456c-8793-c34290c75fbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d60a929-31db-4a16-8696-fe363be98ef3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d76aa938-ab2a-469d-ac7a-3e29b26c6670",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be8ffe21-4c2e-4b45-afb3-d8865a5bb949"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6da01e3-4321-457d-b6ca-cf85cfd56149",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0e316d9-81aa-4cf2-9156-9d8fd81c4494",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ad2cc19-4aa9-45e3-921c-d37f8d11a71f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e26fac82-0bda-4da1-b258-5c07c14ce247",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be7b5302-12c6-418e-8a31-ed27f591cc89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f53948fe-b287-4683-a9ba-f82083584d7b",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ad3b7c5-f0e5-4d03-a682-b7b6e1deb9e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e2c9b7f-bd0b-4152-88da-dc00cc15bc06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30488e68-fb20-4af4-bae7-2eb62ad244a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0283e971-1463-4ee9-93a7-ca3ee1fc3f3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeaf3b3b-d53f-4e9f-8806-67b5e3cd7ab6",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e4b74d7-a3f3-4a51-8fd8-9a927b5593e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3351176-758d-423b-ac81-7699583a8e58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc4e5a18-1804-40d0-82ab-36b775f8fc5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94116991-4b01-43a9-b33e-1b4d004a1d23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5592d106-a6a8-4178-bcdf-56da99de3235",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a72a25d-ab56-4c80-99ef-4e8169a13e86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88b7c065-550e-4dee-9217-db88e7504ddb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1eb8532-6f31-4c1e-9602-4740fe43d2cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46c89b6b-154d-48a2-8f69-d38971bc0f54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87cb80a3-4342-42d5-a2a9-0cda4c7881a1",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "362d4fbe-3ab1-4134-82e3-b5bcca0349df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35ee209b-0c8b-492c-b394-6209a7cc7eee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e48b4b72-40c6-460f-a47c-d47ee3720817",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eee78849-0ae4-49fa-9656-09742cdae85d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afed6155-678b-42ab-9797-8db8abec8c2b",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbd3f9f2-d2dd-4506-a044-da89c9f359db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27d73c5a-4873-4f8d-b7e5-9e6509431882"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d93026d8-636b-4aa4-99a6-1edff7f7e2a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ea54afb-facc-4c5e-97bf-d42738eae10e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeaf6eee-550d-4309-a918-c49e0520a5c5",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55bfc68a-d20d-43a7-a125-18f170e7961b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7272dce0-5cf6-4f4d-8520-0aad7b5a1d7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f39c4e4-6dc8-4ce1-ad6b-fae816477b2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b6dd59a-e035-4dd4-b4ad-9a974d5e8a3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85e97d3e-08ab-4cd6-ad0b-dff384a3496b",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e764097a-3284-4beb-a014-8db04248ae35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d54de0a-2f18-413a-8b26-11fe3b945fce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c575137-a2cf-4b7d-ad7a-da03675ea24f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bbb3fe4-ebc9-47ce-8ff8-a13b22e497de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d73e425-429c-4a1f-a2d1-d16dad9158e8",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ff566c0-cdc0-4071-b3c4-d76f8b329ac3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "974afec4-58e3-4ee8-9654-33ab99da636b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37a29c0b-ccf1-40eb-9b33-c81d72583f03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e65378db-5435-4753-bf85-c9baa4e873bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52a625a6-23b9-414e-99e9-974a0a276604",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88b90dae-a5fa-44e6-b238-d3232cdc6da2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16d05b00-dfb1-4694-9880-ca673480b29f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9548ecf7-3530-4876-8ed0-1058b6b71f8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5f39ca6-693c-4dc4-9ad7-c5ac6985d533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d9892e3-152e-49ce-a145-92ee79894f70",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2db4e2b6-4e5c-4c42-a0aa-b3f962c43cd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cae56708-8679-462a-8a5d-4b9554230423"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d5fa1f5-1cab-481d-bf75-5820643fbe99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e812db9-48e0-40c1-86f6-290d7a6ff11c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d7e23f9-ea2a-443e-9974-ac7773fd3607",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72f815fc-05d4-4583-bc87-2c85a2a4d975",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35281232-4efb-4fa6-9045-ba2efd8e5c37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f058b40-d061-41c3-84af-3f602a2a80d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1da9119-1525-4be0-9916-24d15836a0df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df8c5a33-100f-42a1-a123-5bc54c9e4031",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca223dcf-24d8-41e5-96cc-ca4281bb2d3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6d5c906-ffe4-4fe8-9c2e-580b19a9bf91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58d5632f-c1d3-4e9f-b929-94a38c97775a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a91d66d-b8ba-4864-8884-7bdd7e3357cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aad8a62c-9265-455d-ad8a-8eae85ec3945",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3791b4f7-d934-49b7-9060-b70aad70fdd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4831172f-ae8f-46d1-a4f0-caafefbf0a17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d43ab786-a3be-41da-bbf6-28dd5ed1da76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50021ea9-9c46-4b07-a156-11edd3cee890"
                        }
                      }
                    ]
                  },
                  {
                    "id": "709548bf-91d9-4605-b0b5-e5947eeaad45",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00d6df9b-8158-4af7-848f-78932fd5ad78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ecc7c94-0735-4374-bd37-02905cbb4589"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da0e7900-85bc-4805-9f3f-ac77452de79d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b28d345f-a03d-4098-91c3-169a01677fd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d092825-442b-4f75-96f5-4d3f44c57e9b",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abd9f7ba-6d8a-4cec-82b0-21848a844193",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2498bbc-b58a-49ef-8c09-bc84340507d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df562e55-333c-4f18-88ca-35ce1981d735",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbfeee6c-76e4-40b8-81fb-1061f6cb66c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79d9d9e6-69e4-407f-be10-4f86721ffe64",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02a143ba-a2ef-445f-9856-6cbabe5420ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f6ed09d-fb1c-4a12-b57f-1f2822eb5caf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d786847-95d8-4ef6-af9d-9313b990dfda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ca3102f-7062-48d1-8b4e-e72fd77db5f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12725a39-ae06-43c5-afb9-5732d5a29245",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ab2ce61-b08a-40d5-85db-811baf7aec82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7de6ace4-0722-41f3-b0ca-dd7a64c2bb27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8965032-111b-4871-89c6-e9d7898c640c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e46a6c9-7822-4a68-b0c5-316f94605b37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39a1dda8-f1b3-4b01-8061-395ed9cc76eb",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3000b329-2d15-4b9c-a079-084b4bce1de0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eda82ceb-93ae-4723-a0b0-579dcc134574"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6350538-b425-41a0-a6f3-dc2ce878af09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ad2695d-8e8a-4e45-8e6f-31ad94e9d664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f1db4de-65dc-40cd-a3c2-44febf4efdf9",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efbab538-1748-4143-9c7c-13b8f84d6ca2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e7bb031-905e-4a34-8bdd-a9fc974f25ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1522bac5-f55d-4b5c-b5d7-ab8dfd708a49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db73f610-49e0-417f-a85a-95d43f332d24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "468faa55-520e-407f-9e7d-ef667ec71708",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daa127df-2f30-48fa-aebc-9c55340b60d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a3cbf89-c540-415b-99f6-a50a3e03e06c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c10afd73-89cc-43a3-a7ea-643d52cd66d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dec527b-7342-4b82-bd95-b506388a177c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99f4d3ce-8215-49e5-96db-9df79103bcc1",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44e9ec7e-ef86-49be-96a8-e2543efd9775",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "962b3cb7-0b43-424f-b977-dbf41b071c2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "089ab3cb-bb69-4066-85cd-568e059acdcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63271544-c071-4918-a74c-8a5095957d99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af6853e6-536b-498e-b96b-1e1b47640aea",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fda2af9-52f7-46ab-a519-547b4804b917",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1881b99-0996-4908-8b47-68a2694df873"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2917b04c-d54a-4728-944d-dfcbfc47a4fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f896718-934d-41e6-b3a4-16825272a9a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ef441a1-de8f-4578-85d1-77f107ce939c",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69ffe42c-300e-482c-9151-686464dc2593",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fee9d3b9-3da2-45b6-8b0b-c1c4889db8b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcab6101-fe1e-43eb-8465-8f2fee849dff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81c7c33e-6f08-4870-9d76-5943df907294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6df8f507-795d-4759-939a-c2a31a885871",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f6cf98e-54de-4578-bdfe-ec94f6ce9098",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc2f099a-15e8-43bf-8985-653e3e40dd66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8997fd2a-8ed1-4a97-8cff-ebc673582a03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c02193d5-e759-4b21-ae4e-c18ae388c734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c9ef03e-2a93-46dc-a847-725f6da261e8",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2875c8cd-8bac-46f6-afa6-7b3c9294bbfd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbdae7da-d7c0-47e4-b46f-581c584295cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "807fcb9e-f1de-4dfd-8b94-9746c848cd82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26d1a616-de4f-42e9-ac66-2d13dd904d76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "762f6be5-8cf8-4816-8ff9-fac54d55cac9",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcd0313c-45ed-4531-a845-cc7a4fc2f283",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0a22cec-e87b-4da8-a0e7-8ece46d002db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ce5c9f1-4ca3-47fd-8871-ad916a151ae7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97841914-2c6a-487c-9d1a-6b869e916c2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9842aee-ab10-45a1-9807-be04d05fa415",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2c85adf-225a-4406-8f61-14ff37ec3e3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8bd3c053-8713-4a62-9fa3-d38140a0ec99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b293110-cbac-4a9f-b2ac-d5d46dbdda0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c861b0b3-63d9-4790-a2f7-65388366ebc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3c38636-7583-48f8-8c94-e48fdfe987e3",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "713a6e44-4672-4735-a7ef-9803e8f09b0f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08fb0159-b48a-48e7-a4b9-05dbc1ba5ebf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f67af73a-5c2c-430b-a7d5-85667a516c9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "875ffbe9-d65b-450e-9445-535920d49107"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84e9898b-47ac-4cfc-8f0b-1597afef48c7",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b2c8ab8-1b3f-4a47-851c-10fc3d63a7bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87a4663f-c4ce-4506-b01e-26f33104064e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0033ada-bfd2-4fa4-a69c-0adbf5ce7ba6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58d8ada4-44a5-4565-9ef8-d3c4cc773aec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d121ae0c-a6b4-480c-a078-a4844ba71011",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31c52b76-455b-4bfb-b8c4-6b942ac8e61b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e588c7d-3582-4fbc-b60f-79889423fe75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a1d5a26-4ef6-4da7-8013-3073f22ab4a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "786a3ec1-13c1-473c-8588-2aa05983eab2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78d6da8e-d365-4c2d-81d9-d5ad16a6f6ea",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36ae03b7-67d3-4e41-9078-06b5744470df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "482639de-d91b-4805-9dbe-58dbaf4fc912"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b3cfc84-4c51-4c2c-8cf3-1df3e0b7110c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e162afc8-ff0e-4355-89aa-fe73d8fe3f38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f600caeb-6de7-4294-a9f4-08f75da1b843",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b51e000-bc58-41bb-9a4c-ca41d0f0256a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0df11ea5-29ce-4189-97d5-109314e12397"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43213d2e-9f0d-4815-bbbb-0e6ddfca8050",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09e3c63d-fa1b-406e-bf21-dd97cad7e1b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3d3681c-24af-4d59-99f4-bc35cb34a1b1",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eb3a91c-9e23-401c-8047-020ab215b3ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12bd451c-9c7b-4b10-be33-b861bc030e59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a31c73eb-88bd-42c1-ac7c-be47e656b030",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c314e2ca-a973-46c8-965c-0b552e2192c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96f374d4-ea6b-4471-882c-633c33a5df5b",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d9dc8cd-936e-4421-a5aa-e9ba3aaa1a84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d353d69-491b-4c8f-94b0-d83ff671ac40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35b35ea0-4d98-4537-bf52-fad8720af8bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44233200-1275-4430-96a1-40b69d7910fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23143ef1-6bd5-4810-8014-4f5f3ed4cdee",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9a89288-2ee6-4257-820a-27392ef8d7a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cdc883d1-ae6c-4ba7-befb-34a567929d79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e88b3a97-d83e-41cb-b618-0707f2e5b75d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "907a945c-d122-44bc-a3ae-519f2f73b971"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4cd9191-eb5c-4561-a256-5b1cb8f616a1",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13de080e-311f-4ef7-a0cf-213b41329822",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22e253d3-073a-4648-80d0-d8c35e399c8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efb8b060-ab41-453a-8be6-b5da8f8b04ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bbad657-d65c-4831-92c8-2b0deb8215c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0edfb8d1-5e63-48a5-91e7-3f5f10ac07d6",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db7f3c0c-5e4b-44eb-910b-b38ba8987501",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69bd9340-2a37-4767-ba09-0d5557ab7f2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a4a881-cd7c-4d9e-9c93-f2539c5ee292",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69078bd2-a2d7-4d75-8516-33ee6fe1b2f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b742ec5-2f14-4cfa-88d6-05562c1c835b",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a7143f4-3806-41ef-9ca5-ebe7c7ad10a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eca8cabc-705f-43b8-bb57-9f566c48ce41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9ecadfb-c9e7-47a2-96c1-aa22253fed4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cedea18-613d-4228-a42e-9726be53bdc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c37c0257-6e4a-4fa3-a6f4-82a4d9b56c07",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07200188-362d-4437-ba70-0de6b8c66bc2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d79d47af-55f3-4fed-b9e4-a62e717eeece"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bc3af4d-cedc-429c-91d4-f29d0de37688",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbc80d83-da04-4b70-99a2-abccabff45e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e5b34fd-f319-402b-b91b-d0d511f6db4c",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd030936-52cb-44ad-a875-cb0d24181373",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aec9e425-5898-4412-b3f2-ce8d47988f02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b174d63b-27c6-4274-930b-9959e65e9c84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a25952fd-2e8d-41f5-a9a6-a945f3ff0c08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb7de8dc-40fb-406f-a1e9-d7965fafadde",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de1e3de3-fe17-4739-a616-05816d09a6c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "478bee9b-f4bf-4d1a-b7e3-afca299fb799"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56276105-4e81-4285-b491-7ca65b8a316e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f426a23-c845-4f2c-8f82-85b900fa2486"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3433ca2-2c6e-4410-8295-85feb1fe307b",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4bcfbaa-2137-4ee6-9a47-f7c5bb9a56a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96f48a8f-7f38-454e-91f4-9f075d5c8cd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c8e561f-15d1-40cf-aaf7-34a528aca08d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7bec25f-9ae8-4de1-aa27-d641cf823f35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ded1840b-9761-46f1-8331-869fef19b21c",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07cbc562-5cb9-483b-9924-8cf9b018aaa9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "db68fe00-71e1-4d1a-80d2-345310513d7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95880831-c0d1-4cd3-ad1c-455861192b4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90e02317-4c42-412a-bc80-cbba77a0ce6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c293d3cc-64fc-4008-925c-de51230f8001",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f196ed88-8c1b-48b9-931e-18f85310d050",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f483984-fff3-4778-90fe-98dcd65142cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bec20c01-428c-4e90-8c8d-5add42148f5e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ad4339c-3af5-4d25-968a-97fa62e48f7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8402fb0c-37ed-494d-949e-c951211e34b4",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "297f6aba-9a7e-4902-a998-be9544dce788",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fa4e87b-973d-48fd-a867-271748c0b579"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e3f677f-a0cb-4b85-bf3b-760f44aa8312",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f2513ed-7188-47bd-a3ba-9c412cde2230"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9944d77c-8939-49f1-8c80-b9eb9c139ae3",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9b010a5-f12b-405a-895d-bbc6da8ff6ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b648f68-bf50-4b11-b15a-8b682b4c32d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1638a3ba-212d-4081-ac26-5d130844d237",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3e79d4c-2aaf-4dc5-ab04-726f9682b060"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cea9c09-045b-4dc4-84cb-45e04c98b218",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ec8d448-70e0-4dcd-9218-35803e8aa76c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66f1c789-9675-4959-942f-e38ecb08c619"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a467da04-5e15-427d-afdc-5504caf2ad59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97b1d781-9878-4a79-ad09-f5eeb2502138"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e8d7dbe-538c-49ad-81ac-d3d55ba04f54",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "483ede3a-bf0e-4dab-a199-fd721aeb08d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b00454e3-9cba-4da5-84d8-a95686f9dff5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c13dbd14-8b88-4c81-8338-19445ccff405",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1de1615b-3b6a-48d1-ae02-32c4f2788504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b87fd37-9099-4df6-8fd7-8f3aafcee701",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81e4d10b-70fd-4e97-b5a1-030b45367ce2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a413d9ad-536d-4905-838d-b931148c4a34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e24e195e-047a-4c24-bbdd-6d832ca683cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "356d019f-a7e4-49bd-aa71-c96a84aea54c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37506e73-7dfb-4be9-b7f9-197552557599",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15db6b41-9fde-48e1-b059-e6995c2d316c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "642223f2-20ea-44b2-8890-8cebf27ed603"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a63d4247-acdc-4bb5-856f-6b037eec2ef9",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "861fb022-d459-4606-8541-3cc9ccc579bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6593065a-0898-44de-bd2e-a090532a5698",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22894ee5-17f3-4669-a8ea-d3a4c8cd2ae4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "289256c3-6e68-4985-8947-b44bae428145"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "388b9b9d-59b2-492e-a69c-020c1d94ef66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d568614-9830-4f25-be8b-e5dfdc1e30ec"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1f5b8d11-6546-4763-ace9-17f4f76f57e6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a3978d4f-8e07-46f6-8613-be256a02eb13"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cbe325c1-af6e-4525-ae0a-342e7007e546",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cd2b2c76-820d-4d79-831c-84663e661bfe"
                    }
                  }
                ]
              },
              {
                "id": "e1566d29-5d54-4215-b0cd-341260c1f4cc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3dc26510-c5f5-4b97-8d7a-61d6e9c32ebc",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fd781b9-4ca9-499e-b58f-3435edc1b81d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f50c958f-3e25-41bb-8bbf-60a1fbcf50f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc9b23f7-c17b-407f-9cb4-537fbecff601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5a18ecc4-4ea7-4bee-8714-5de2bb88414c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1af76d33-185f-44c1-81d4-ed373004adee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b8dc1c0-f60e-4960-b9ab-ace74641a5ac"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b825fae4-d9eb-4822-b32a-e920719429e2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0276bf4a-9e34-4476-801a-4ac9b5400dc6"
                    }
                  }
                ]
              },
              {
                "id": "5bd86f96-837d-4c70-b2f2-8ad3c54c2d80",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "25d0313c-f115-4ca9-9d9d-c3e9630f667d",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a1a4c16-0e2a-4be3-9666-35dac6de83f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "d41903ad-6644-4743-b815-36b538feb3d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec7224c2-02ab-4a7d-865c-4f911a87ebb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b0e6707-ab77-41f0-8992-44ec5e3b3663"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a122f09e-5938-4ea6-ad27-6abd7ccd7f47",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7ff60032-c71b-49a8-a1b4-0590981ddabc",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "49d87b55-a1ef-4e0a-a75a-31ed508a0d9f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "6dea6de7-6db6-4384-96a3-6810ab01d7b8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "374adece-a6f5-48d9-9711-245874277ee0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "316a3768-7589-49bd-bf02-11095e96c379"
                    }
                  }
                ]
              },
              {
                "id": "08ef4214-f732-48fa-a5ed-aad93588d0c5",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "efe2a461-77a3-47f9-af22-f6f4d11607de",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "62ea27bc-8abc-431a-920a-9d2610d3d7db"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ccfcf70b-03e4-4ac2-a368-32a07345c11a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "970c628e-83d0-4347-ba04-3e4786c70ff8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b2da5f70-fb8d-4500-aaed-75d663eb07f1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "2890d199-c52a-480c-9e6b-0f2f8cc35e48"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "312cccb1-b17d-4bac-9b8e-19cb611dd13f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d4038505-9056-4466-8f96-c45d170bfe9e"
            }
          }
        ]
      },
      {
        "id": "b133863e-f332-4f80-aff2-df100bfa5587",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "41981a8c-9385-44bd-9a23-48f081d40457",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fa9c7ded-33c5-457d-b704-ceb841da8666",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "efb545f4-e971-4319-9092-c8b70cd3e19c",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca5d00e5-6d12-499a-af40-d89537f34f62",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a52548ba-f1a1-46df-8ee5-c7217a5173fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5169e4f-8ba1-4a32-a284-1583898b7124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9fb0a3f0-0df3-4071-9871-6d5948f98780"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b33b15ed-05a4-4d11-a83a-7a2e1876382a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3788bb6f-d2a7-4de4-806b-2c0ce4917b7a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "24f85495-7d7f-414d-ae88-447ceffd8dde",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ba4ba6ce-4def-41dc-8386-5754279fec98"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "91b70002-9292-4330-8053-ab8d527a1df4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "0b9b6c1d-2810-4151-9ca9-23fcd3d630d7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6e98ebdc-1711-4776-b32b-9e162f9f4172",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f8c618eb-27df-48e0-9c95-667d4c2ac2ca"
            }
          }
        ]
      },
      {
        "id": "dce81c6c-f493-4a35-b380-654148d48c50",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "d8d849ed-ea30-4ab0-b535-ca7e6d7f1c14",
            "name": "Negative Testing",
            "item": [
              {
                "id": "984afaf7-1340-4f73-aef5-ed990ac22d97",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b83b2e8d-89b4-4674-b357-4560b3f44867",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df47e947-e737-475b-9008-160e9220f4bd",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b9a647d2-bd71-44f6-9da3-79a271bf769f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1be2e367-f2ae-4527-87b7-bb8b68e65ec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1b90f49f-de4e-46db-b5f7-543ea2086b75"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1cf7404e-567c-4214-bdca-05f99b1c2630",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "045e3585-d387-4465-a317-178fbc830d61"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1435620e-40c9-4ec0-88a6-f92c0f87e076",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0628e888-976f-4a9e-9016-030d5f8336a1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4db29fb1-8a4b-4365-9806-4b908f98e154",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5b477044-cda4-4c6f-b8f2-9ac2316b1cea"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "016a5161-6e56-41e1-bf0c-eb2e7df9ec5b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "54ec5498-a448-4ed7-88fa-020626dd36d2"
            }
          }
        ]
      },
      {
        "id": "9ca820fd-bbe2-4508-8764-0278362e36a9",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "0a33f929-3007-49c6-b536-b69bac28910f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2ed034f3-2461-4991-b978-653439cd3468",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e80a3d0b-f0c4-4d30-a7cc-e02874c27f89",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b030838a-3277-401a-a2e2-98b9cb11760b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1210d175-3073-44fd-a8fc-0798c86d28ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac3c687e-b6b1-47ff-b89b-30f1e5cf5062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2727cb8c-45be-40f4-a3ca-240a8d0efe8c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9f88c7fc-f07b-458b-8601-c91a643b956c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "30648e6a-057c-4fc7-813e-d62b2d47a27f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4dc58e83-e28e-46a6-b24e-7179df7161e4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2e8de9ce-3eb0-435c-9d6e-1b3bbffeeda3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cbf0c628-9f77-4306-b037-00499c30023b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1c9dd930-7fe8-449b-9733-4f40fe62dc40"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "452e6873-38b5-43ba-9296-0530d54bcf3a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8eb0a965-0ad8-43a6-b84e-02b43c9943fb"
            }
          }
        ]
      },
      {
        "id": "47423a44-bc49-438f-b195-c24321da7402",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "397ee4c5-1975-4108-a015-e0a76c7a78bc",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d27874e4-7738-4726-936e-c5efb19b60fe",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "0fd016b2-a105-4eed-9d5c-308364df306f",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "65e9b1e5-24c7-4d5f-8bc3-fba81ff09df8",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "977d3c97-cb45-4b43-8af5-33c2fd3a782e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 263
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 55.98412698412698,
      "responseMin": 21,
      "responseMax": 238,
      "responseSd": 24.31146575373414,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1717634250849,
      "completed": 1717634273210
    },
    "executions": [
      {
        "id": "a3bdfc17-9c92-44f6-bbe0-1032ecb4f0d4",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6e894d0c-f2bf-4433-8698-855d3f13d29a",
          "httpRequestId": "9f732024-f13d-4f0d-a580-c0ebb5a9f6d9"
        },
        "item": {
          "id": "a3bdfc17-9c92-44f6-bbe0-1032ecb4f0d4",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "4e1222c7-03e4-4c64-aa78-f9ccaee01b0d",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 0
        }
      },
      {
        "id": "564b3242-2e2c-40ff-a22d-afc334dff55f",
        "cursor": {
          "ref": "34b58519-b501-4ccd-853d-de589247689d",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "9c2a9f50-5bd9-4490-b67e-18c4755e7474"
        },
        "item": {
          "id": "564b3242-2e2c-40ff-a22d-afc334dff55f",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "7839d4a9-2277-409b-b814-f3e4685e83ed",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "800a1587-3afd-4d85-b490-f902e373275a",
        "cursor": {
          "ref": "b844ec9c-e8c6-459a-948f-b3921ba10ba4",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6bedff8b-306c-426d-a9d6-b60189413276"
        },
        "item": {
          "id": "800a1587-3afd-4d85-b490-f902e373275a",
          "name": "did_json"
        },
        "response": {
          "id": "fbed0071-3ecb-4991-b750-a08a804ed9c7",
          "status": "OK",
          "code": 200,
          "responseTime": 221,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "054f30b9-e420-400d-b788-c9d802998172",
        "cursor": {
          "ref": "11b54a2a-43c7-4d7c-9aec-13656a6c1719",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7774aba9-1200-4936-be41-60590cdc3341"
        },
        "item": {
          "id": "054f30b9-e420-400d-b788-c9d802998172",
          "name": "did:invalid"
        },
        "response": {
          "id": "d63067a9-1c96-47d9-8c5e-6f1ec5a0a1dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "054f30b9-e420-400d-b788-c9d802998172",
        "cursor": {
          "ref": "11b54a2a-43c7-4d7c-9aec-13656a6c1719",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7774aba9-1200-4936-be41-60590cdc3341"
        },
        "item": {
          "id": "054f30b9-e420-400d-b788-c9d802998172",
          "name": "did:invalid"
        },
        "response": {
          "id": "d63067a9-1c96-47d9-8c5e-6f1ec5a0a1dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0909974-0a2b-4200-bc69-01514dcf5bbd",
        "cursor": {
          "ref": "8d2b6a05-7102-4893-95aa-ef935bda80c8",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e0bcbbe0-153d-4592-b285-db0440fa301b"
        },
        "item": {
          "id": "f0909974-0a2b-4200-bc69-01514dcf5bbd",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "73642344-f522-4fce-a706-25ab1b4c68cf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 227,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88ceb4be-d2eb-4d26-a78e-7a91a451e129",
        "cursor": {
          "ref": "c2150adb-69b9-42f1-943f-72120a7890ac",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "eea7e703-4b08-41ce-8217-b02447982323"
        },
        "item": {
          "id": "88ceb4be-d2eb-4d26-a78e-7a91a451e129",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "64c42169-beaa-4415-bc52-be7286dea8a9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 54,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d278c801-44e8-4a12-9040-f3038ca9c650",
        "cursor": {
          "ref": "0843d304-6d21-4836-ba7c-40fd50c78a39",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "156d917e-442d-4b0a-b4fd-7d429c315b75"
        },
        "item": {
          "id": "d278c801-44e8-4a12-9040-f3038ca9c650",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "ece4e9bf-f44f-46f1-9fac-4be95376920a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe2f22dc-1179-4e19-9f89-d0d54af9c64a",
        "cursor": {
          "ref": "0449044c-fe3c-4551-9514-12d1b6cdf326",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "df908859-c9a7-4f85-b2a7-4882adf2a774"
        },
        "item": {
          "id": "fe2f22dc-1179-4e19-9f89-d0d54af9c64a",
          "name": "identifiers"
        },
        "response": {
          "id": "ade6a429-8949-4806-b4db-b16c7a442e61",
          "status": "OK",
          "code": 200,
          "responseTime": 153,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fced70f-1d1b-4e86-b583-74f0cda6c8c6",
        "cursor": {
          "ref": "a591e9b3-7151-472c-9561-abb11b698760",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "19a427ac-0fa0-43d6-b33e-4c7ca1cc97fd"
        },
        "item": {
          "id": "2fced70f-1d1b-4e86-b583-74f0cda6c8c6",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "1012f7a4-e404-410f-8f19-5df9687cd25a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "661b9cbd-73bd-47d4-9e33-f2f02d440837",
        "cursor": {
          "ref": "633cccf8-d7ea-485b-ae07-1e6ce66d7ebc",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "98b6cf3e-953e-428c-a241-0fbeb5b33930"
        },
        "item": {
          "id": "661b9cbd-73bd-47d4-9e33-f2f02d440837",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "2323772f-e32f-4458-af08-425a31225d6f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb4ecaf8-c3d1-458b-81e0-72356d96a38c",
        "cursor": {
          "ref": "3ce8fc45-cc93-4fd3-b910-a5394ee4e103",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "0f6d05a9-27b1-4756-8d71-1f59a20ab471"
        },
        "item": {
          "id": "eb4ecaf8-c3d1-458b-81e0-72356d96a38c",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "50de8536-b9d4-4a0a-988d-43bcf9092f39",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b4b6c84-ce15-4104-a4fa-66b939974d5c",
        "cursor": {
          "ref": "8b61f420-c04c-4008-be4b-b9f5763b0fbd",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "a86ef336-ad66-4d70-8c29-bec4aeb20ec9"
        },
        "item": {
          "id": "6b4b6c84-ce15-4104-a4fa-66b939974d5c",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "91cc3b39-e42c-4de9-a44f-0922542280a0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b979774-f98a-41e7-b587-b19cbfaa9779",
        "cursor": {
          "ref": "4370091b-dcbd-4dd3-82bf-9614364329f1",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "64da0952-39f2-4689-8599-768f4ac73513"
        },
        "item": {
          "id": "9b979774-f98a-41e7-b587-b19cbfaa9779",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "ecfef44f-a177-4c86-b364-d528496e514d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3a32b62-83ce-45f6-a417-b9bf3e7da74f",
        "cursor": {
          "ref": "648753b8-f390-4078-8329-0ae45b840d19",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "dfabb7b2-a081-477f-8ae6-f0efb3c9e1dd"
        },
        "item": {
          "id": "e3a32b62-83ce-45f6-a417-b9bf3e7da74f",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "eeeda642-082d-40a5-8a90-a0c23b0147be",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c30b9a0c-9f7c-49fb-9643-0f3be22fdf89",
        "cursor": {
          "ref": "66eef253-8449-44fc-8500-1853faf2418a",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "bcd82a69-6b98-4fe9-a5da-8ac36329d54d"
        },
        "item": {
          "id": "c30b9a0c-9f7c-49fb-9643-0f3be22fdf89",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "128e60a5-c531-45ec-8872-d0f4f3bfa160",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfe02139-7d4f-46df-b19a-d051f1393f8c",
        "cursor": {
          "ref": "81f67870-70e4-4856-9105-feb49c61afca",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "e3c3cabe-90cf-457c-8832-f89ff2140d1f"
        },
        "item": {
          "id": "cfe02139-7d4f-46df-b19a-d051f1393f8c",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "adeaf5fe-aafc-4360-8554-c0674b6dd552",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "874f26c9-2dfc-4e31-8601-f1e69e7713ad",
        "cursor": {
          "ref": "e348446c-718c-48a8-8465-4168c027b509",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "ac14802e-5f2e-4963-b889-1310661937e4"
        },
        "item": {
          "id": "874f26c9-2dfc-4e31-8601-f1e69e7713ad",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "dac11cc3-94cb-4767-b5d3-c5393f0ec322",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6544e1ab-1e47-472d-b195-5d6558bb9192",
        "cursor": {
          "ref": "22fbdaf1-9f9c-46e0-9be2-0f789327fd19",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "aa2e2c16-0180-4b7c-9099-edbd590ce29c"
        },
        "item": {
          "id": "6544e1ab-1e47-472d-b195-5d6558bb9192",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "3d6e431d-ffc3-4d28-8008-eebc3271ab9d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70edf153-6694-482f-8a9f-dddfb751576d",
        "cursor": {
          "ref": "40a966dc-0d17-4308-ae1b-d60941851e60",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "75c6c75b-799a-4532-ad79-9eac43981038"
        },
        "item": {
          "id": "70edf153-6694-482f-8a9f-dddfb751576d",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "a04adc44-3a2a-4112-abde-7862566d90a0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21b43332-76bb-4ea1-af2f-0319db27ef57",
        "cursor": {
          "ref": "61db04cb-0cb1-48c1-bcd3-4198b8380464",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "dac53909-7e5e-4705-a5c5-5750a2a98ac0"
        },
        "item": {
          "id": "21b43332-76bb-4ea1-af2f-0319db27ef57",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "02d2c13e-541a-47bd-8055-ec0843a21685",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d87e83c2-51f4-49b3-b202-6507e71a384c",
        "cursor": {
          "ref": "dd69004d-1c24-4e2f-b965-821c5ad8946f",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "84fa59af-7931-483f-8592-ef862524a2b0"
        },
        "item": {
          "id": "d87e83c2-51f4-49b3-b202-6507e71a384c",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "be11be2f-cc60-4f19-8e6c-dc3404decc59",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8d8cef9-bbfb-421e-985f-8b785277b9fa",
        "cursor": {
          "ref": "e4a3c6bc-5357-40dc-82d1-4a36e49d4d61",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "cd96b030-1a76-47a6-a688-7d5e2b328a2a"
        },
        "item": {
          "id": "c8d8cef9-bbfb-421e-985f-8b785277b9fa",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "4b93fb77-70e8-4372-9e80-f79ada375259",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b297f5c-703c-4a63-baf4-48abf19d5a36",
        "cursor": {
          "ref": "fb17c25a-10c4-4fd2-84af-0cbf180e71a3",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "392333e7-7770-4096-a454-9266905d4bd4"
        },
        "item": {
          "id": "5b297f5c-703c-4a63-baf4-48abf19d5a36",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "80f7682e-dcfa-4413-9f9f-cf6d0e24e22f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f456da7-3e74-4fc1-8f1f-c41eb4e59cff",
        "cursor": {
          "ref": "3295b80e-2ba4-43c5-88ad-a29150b04e64",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "06800fbc-fa3e-446b-9604-274a0d0f8e0f"
        },
        "item": {
          "id": "4f456da7-3e74-4fc1-8f1f-c41eb4e59cff",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "e5c3eefd-1c01-4700-bfec-a1ab1d79146d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18c88e31-6831-4f81-8366-8ed7ce5ae55f",
        "cursor": {
          "ref": "5d024cab-a885-4a74-8bf6-252726eddb47",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d8e43142-e69e-4c2e-a28f-655bf9404435"
        },
        "item": {
          "id": "18c88e31-6831-4f81-8366-8ed7ce5ae55f",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "1d6166df-ee30-41d7-9784-54184ef9bbe9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "791481f5-c39e-4cf4-81b8-9b60948df189",
        "cursor": {
          "ref": "54f39dd4-a53e-4fde-9e10-f2719c7f7828",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "d701b543-eb5b-49d3-a6e1-cea47a0fc3e2"
        },
        "item": {
          "id": "791481f5-c39e-4cf4-81b8-9b60948df189",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "7232ab06-f981-4c30-8512-9529f5bdd418",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8e48192-b1ce-4879-adb3-b35364b6304f",
        "cursor": {
          "ref": "66e01191-f3c4-4430-b0c9-48973f328ce0",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "48d5eea1-1ac6-416d-9ca4-031ffa33c11f"
        },
        "item": {
          "id": "b8e48192-b1ce-4879-adb3-b35364b6304f",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "b0f1c428-8df5-4e1c-99c7-a32379606710",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db0c462b-99db-4bbd-a1f2-b1f656889907",
        "cursor": {
          "ref": "81f9a535-07a0-4629-b5df-f49d9e89c759",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "09f4ddd1-52f9-42f3-bb66-05a583d620e2"
        },
        "item": {
          "id": "db0c462b-99db-4bbd-a1f2-b1f656889907",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "2b08d786-d497-410e-97ac-6a2d38f24be4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4a1a037-8650-4bbc-a5b2-c84cb9b7fe90",
        "cursor": {
          "ref": "291381e6-df0b-4780-95bd-25d1dee26f00",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "4947033b-9dd7-4cba-9403-e43119162220"
        },
        "item": {
          "id": "f4a1a037-8650-4bbc-a5b2-c84cb9b7fe90",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "f23a05e8-073d-4949-9a97-bfa9e0d600ff",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "637fa0c2-3360-4a42-88f2-c4967b82e383",
        "cursor": {
          "ref": "8e7fcf52-61af-4ee6-9023-8ff84e2f41db",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "b0aa5e2d-4b3e-4924-be21-2eedb81fc38f"
        },
        "item": {
          "id": "637fa0c2-3360-4a42-88f2-c4967b82e383",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "f613c604-9c74-4a94-ae33-523e89a839fd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7b5477c-7809-4b54-9341-dcb258ff4d6e",
        "cursor": {
          "ref": "c0a8ee86-6c16-435b-9d1d-aaf87c1d9893",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "92e48652-c07a-4368-a141-cdb18acdfd0b"
        },
        "item": {
          "id": "c7b5477c-7809-4b54-9341-dcb258ff4d6e",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "1dfd4319-5c45-4868-9fac-5aaf4461030b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51a20451-5896-426e-aea5-b6cc4cc70543",
        "cursor": {
          "ref": "dafd52d0-eb8a-4704-96d0-0b38b3cab4cf",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "23ee1bf8-0ff5-4dac-8277-ca05e472cf3a"
        },
        "item": {
          "id": "51a20451-5896-426e-aea5-b6cc4cc70543",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "ec4cac4f-4148-410d-b461-5f07ea51e68a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4316477e-ad51-4fd4-a0da-2edef467ce44",
        "cursor": {
          "ref": "4971592b-d377-48c0-892b-bd2c79b2cc90",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "4ba2e29b-c7fe-4491-8be0-d5fcecb6b07d"
        },
        "item": {
          "id": "4316477e-ad51-4fd4-a0da-2edef467ce44",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "03a5b99b-7b91-48d1-9cf8-42adc2aa4b55",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "565f073c-93f9-4c20-af2b-a41ff3e7bfc6",
        "cursor": {
          "ref": "f1c22e51-c715-48af-9261-ff8937986d3f",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "20e7f66e-0cc0-4402-9130-35ee318281fc"
        },
        "item": {
          "id": "565f073c-93f9-4c20-af2b-a41ff3e7bfc6",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "7d3c0825-99b9-4010-a5ad-90d8604d050d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e6177ad-4b4a-43f0-ad98-310e1a351140",
        "cursor": {
          "ref": "edd5debb-be1a-49cc-947b-465678d2a459",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "10939ac8-64f9-4e77-b02e-973e43a8b9df"
        },
        "item": {
          "id": "2e6177ad-4b4a-43f0-ad98-310e1a351140",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "e3482b49-783f-4583-8c1d-1c2210ee32d8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "879ad93e-69fa-401d-a947-7044495dd619",
        "cursor": {
          "ref": "80cba22e-c389-42ad-89d8-345f928bec7c",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "e2557ad8-1987-4ec2-8a44-b0c4af8ee563"
        },
        "item": {
          "id": "879ad93e-69fa-401d-a947-7044495dd619",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "47fb8b67-4b39-490f-a49a-89fb96790dec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a70d107f-d01e-42d6-a7ee-a093577c91a9",
        "cursor": {
          "ref": "4438c6ef-1799-44a7-8b1b-ed5e55c74d8b",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c821a6a4-c3e4-4c90-80a7-26c6e918e6e0"
        },
        "item": {
          "id": "a70d107f-d01e-42d6-a7ee-a093577c91a9",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "711dd499-3a88-4d33-a2e2-b9858905f620",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eebc5916-d6e5-4c66-947a-9ab5892f068f",
        "cursor": {
          "ref": "b0422e24-bb80-4cda-94b7-ed982c2d0aa4",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "5ee2ecf5-6015-4332-bfb8-7cd0dc078176"
        },
        "item": {
          "id": "eebc5916-d6e5-4c66-947a-9ab5892f068f",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "2c6ebf80-2e1d-48ed-9cb0-0837bb02c73e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da1013b0-65b1-4599-9a90-a7d32518f436",
        "cursor": {
          "ref": "a72c2ed5-381f-48a1-ba7a-7e290c76a32d",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "30df1be2-9c5c-4d24-8d8f-6095ebee04f4"
        },
        "item": {
          "id": "da1013b0-65b1-4599-9a90-a7d32518f436",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "4dd0006d-716c-4d46-a4c5-91608d3225d1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1d48f82-47cc-4e3e-8b24-4df881a993f4",
        "cursor": {
          "ref": "9d5ca86a-9049-4793-b9c1-2c172f2f2962",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b712abc3-558b-4b13-91f7-d485aab38ef9"
        },
        "item": {
          "id": "c1d48f82-47cc-4e3e-8b24-4df881a993f4",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "2c6ba441-9f6c-492c-9e92-cc444411809d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06fc5452-e751-4301-b8c5-f6804f3d9a67",
        "cursor": {
          "ref": "03f580b6-0abf-4e35-8867-3612141af01f",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "07a81ba2-79b0-44bc-91e1-3873c04dc050"
        },
        "item": {
          "id": "06fc5452-e751-4301-b8c5-f6804f3d9a67",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "691a3476-404b-46a6-8658-b2ad6e5c22e2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f777a59-355f-4b4e-b620-9af7e3e48b2a",
        "cursor": {
          "ref": "d5489fb3-d8aa-4b19-a5f9-c7d0c080afec",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "a326b093-cd39-4776-a788-e0ba3b55c562"
        },
        "item": {
          "id": "5f777a59-355f-4b4e-b620-9af7e3e48b2a",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "984b0d3e-e9e2-4d60-89bd-907a03140042",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "782b6270-d563-4474-b05a-e838a6d5ab4b",
        "cursor": {
          "ref": "797d40c2-8a17-490a-832e-3043d49d6860",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "73b6531e-0a65-4b13-bd51-fb2c67fc75b9"
        },
        "item": {
          "id": "782b6270-d563-4474-b05a-e838a6d5ab4b",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "2e1213b6-1bfd-4092-9e31-5d98bb8df682",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7c0b220-8f45-48c6-b109-cab4ddfe8ada",
        "cursor": {
          "ref": "cd87a349-ada1-444a-b5f3-ee27bb360e65",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "c678b220-1845-43f2-8ed1-4e493047140d"
        },
        "item": {
          "id": "e7c0b220-8f45-48c6-b109-cab4ddfe8ada",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "73674547-d5fa-4089-8a60-c8e8d149b2eb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a394f1f2-4a1d-4124-b00c-7e2f000b70f4",
        "cursor": {
          "ref": "84e01e3c-0051-4899-82a1-854101d68496",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "1cb0ba00-3ed1-4e01-a509-93d0989caefd"
        },
        "item": {
          "id": "a394f1f2-4a1d-4124-b00c-7e2f000b70f4",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "9bc629d6-4e12-46f4-958c-b05f6eea62d8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "919fcf5c-8476-4d63-9030-74c62e4191ab",
        "cursor": {
          "ref": "dd2cf353-b80a-46bc-9cb7-5436e7e381d1",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "7eefd1f4-7fac-4e33-b720-d784f7bb8e09"
        },
        "item": {
          "id": "919fcf5c-8476-4d63-9030-74c62e4191ab",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "26a217c2-02ce-43b8-81a0-e3f799297859",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e47cdcfe-2e9c-415b-8e5d-789d88c4e808",
        "cursor": {
          "ref": "5a8847df-56b5-4dc7-94a7-f622da33c6cf",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "ce0e66aa-fdc7-4376-823a-6e81af501869"
        },
        "item": {
          "id": "e47cdcfe-2e9c-415b-8e5d-789d88c4e808",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "5483fe53-6ccf-4188-8606-3504841af79b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65a45fa6-6ea5-4b32-98e3-b307dd550906",
        "cursor": {
          "ref": "2bc7942f-1d88-496e-a9eb-8b48a06b49d2",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "e4a71c8f-ab0c-4171-9e29-bc6da1c1b101"
        },
        "item": {
          "id": "65a45fa6-6ea5-4b32-98e3-b307dd550906",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "1ba22b58-ac67-44d0-b238-2e1cd0a93dc0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db0cd305-28c6-4dfb-9e0d-cebcbed69eed",
        "cursor": {
          "ref": "7d858c29-0008-4dfd-bea6-7cf990deea2a",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "aed0cbe7-91b4-47f2-ac11-64942736c3a0"
        },
        "item": {
          "id": "db0cd305-28c6-4dfb-9e0d-cebcbed69eed",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "e11df5ac-bac8-4153-81fa-97f1cffb36bc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "862cf71e-8a07-4932-93a2-37ddc7324c01",
        "cursor": {
          "ref": "c507cc7f-b405-42e8-8814-d822bd8c3d99",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "0b499e5a-e48e-40b5-bc5c-dad6aba49d08"
        },
        "item": {
          "id": "862cf71e-8a07-4932-93a2-37ddc7324c01",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "a7ef0b35-3bfc-431d-9e2d-e6fb3f9949dc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dda341c1-70d7-487c-87cb-abc46ac26cf8",
        "cursor": {
          "ref": "66a09e3a-2ea0-48aa-8704-c6d622d4e626",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "028d9a11-b4da-4a77-8621-c0237d2f1030"
        },
        "item": {
          "id": "dda341c1-70d7-487c-87cb-abc46ac26cf8",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "df8cf43e-e45a-43f5-a3bb-91595b3b8eca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3747aff0-d7f3-4739-88b4-8dea8a51df54",
        "cursor": {
          "ref": "33ae2daf-c303-42b9-a791-f79123b2fc2c",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "2b534e59-df93-487d-a864-ad60f786399e"
        },
        "item": {
          "id": "3747aff0-d7f3-4739-88b4-8dea8a51df54",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e645897d-61a9-4fd2-82f7-6c1851a04f51",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "809624eb-bad9-4289-909a-95110d40acb3",
        "cursor": {
          "ref": "2fb9eb86-a965-463c-a584-fc9acc0d76ea",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "938e7d05-d972-43c3-a52a-1fd151f3edb1"
        },
        "item": {
          "id": "809624eb-bad9-4289-909a-95110d40acb3",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "98d27a92-5388-474f-a05a-92749690b1e2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04b703a8-9520-4f06-8576-3f715592eaec",
        "cursor": {
          "ref": "e77c2098-2f41-4fe1-931e-fad7e1ceb48d",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "2d60247a-6ad3-41b1-979c-1534466b7efb"
        },
        "item": {
          "id": "04b703a8-9520-4f06-8576-3f715592eaec",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "ecbb198f-d070-4bb4-aaff-60deef88ea7c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35819126-8c4f-4a78-83ec-7799be8715d3",
        "cursor": {
          "ref": "42bf6748-9762-4e0c-bfbf-5a2dbd287356",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "c5fc4a99-53b0-4008-9196-629644e044fc"
        },
        "item": {
          "id": "35819126-8c4f-4a78-83ec-7799be8715d3",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "d2f174eb-25c2-498c-9ee7-f56441bc50c3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db082174-d0bb-46da-b9b7-802544d942e8",
        "cursor": {
          "ref": "3fffd908-a90f-4692-86de-ba057a6114fd",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "3a0e53cd-a2ad-4f94-8a26-478fd709b94f"
        },
        "item": {
          "id": "db082174-d0bb-46da-b9b7-802544d942e8",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "d00ff41f-d81a-4d5b-8941-4033fa0efd17",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f23ba5a-2044-490f-b71b-c40aa63abf8c",
        "cursor": {
          "ref": "48af56ae-52e3-4a42-9c05-1c4ef2c7d70a",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "06ec394e-4448-45c7-908f-701e0cb91811"
        },
        "item": {
          "id": "6f23ba5a-2044-490f-b71b-c40aa63abf8c",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "8d07f34b-8a93-4a63-9373-5d3bc888bc06",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2142c234-6453-4a20-a468-1904971e8e4f",
        "cursor": {
          "ref": "dbf4a457-3dcb-4671-a3fa-f3ae17d483ff",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "ad0ad657-b511-4434-a4e4-171d9ab00de0"
        },
        "item": {
          "id": "2142c234-6453-4a20-a468-1904971e8e4f",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "c442ebff-2a5f-4737-8876-f94f7a37cc2d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e58d223d-216b-4176-a132-1bffc525961f",
        "cursor": {
          "ref": "e022759c-4ce4-435d-89ca-a43d1d1d49cd",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "fefb1633-1401-425b-bc71-ffb8d3304def"
        },
        "item": {
          "id": "e58d223d-216b-4176-a132-1bffc525961f",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "f9d397a7-4e97-47fa-b952-414f7af10a68",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be9f2bfd-2325-4e15-9cbc-98012e4bbd9e",
        "cursor": {
          "ref": "1f86d53a-5db8-435d-80e6-33e0b2e566ab",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "636f10b8-6272-4f4e-b387-653f5bd5dd92"
        },
        "item": {
          "id": "be9f2bfd-2325-4e15-9cbc-98012e4bbd9e",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "c07cafad-2b40-4378-814f-5825765f7222",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcf2ffbe-bc06-4d27-a318-f6b8a5b2f187",
        "cursor": {
          "ref": "8fb79c31-eed7-4d74-a54f-acc0970ba720",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "b419ca13-5b9d-4eb6-ac18-3e30b489c1a9"
        },
        "item": {
          "id": "dcf2ffbe-bc06-4d27-a318-f6b8a5b2f187",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "9a22d508-73f7-41d2-9c8e-79f45589e85e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce2d9ac0-5e34-4d26-848e-6661fb110fed",
        "cursor": {
          "ref": "27d3bab2-ba0a-4d2d-a1d1-baee96588beb",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "10be497b-9088-4d14-9d4b-dbf42b1e332e"
        },
        "item": {
          "id": "ce2d9ac0-5e34-4d26-848e-6661fb110fed",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "ec251d4b-6701-49ed-9342-8087bae90152",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db9242f7-2e5a-4a93-97fe-579ea60079b6",
        "cursor": {
          "ref": "9e3e1d2d-bc3d-4807-8dd9-208838ecb6db",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "2577b1d5-914c-48e7-8532-d8a632337403"
        },
        "item": {
          "id": "db9242f7-2e5a-4a93-97fe-579ea60079b6",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "b644eaa4-50d6-42cc-a600-54b25d316c69",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "609d7c05-f2c8-429b-8e16-f5c6fdb24b2a",
        "cursor": {
          "ref": "ed2f30ce-a23f-4f03-912e-00eb58b692bb",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "059f47b7-2bbd-4916-9c87-5dd8104a9500"
        },
        "item": {
          "id": "609d7c05-f2c8-429b-8e16-f5c6fdb24b2a",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "4801ba57-fe8c-47f5-a741-991f8e849b7c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ad64bb8-f49c-4c10-a89a-e56a6ac060b7",
        "cursor": {
          "ref": "6218ef1e-6d06-4244-ad27-5df3a0825a53",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "6d3c3e49-3120-48cc-82f3-9682c483bede"
        },
        "item": {
          "id": "6ad64bb8-f49c-4c10-a89a-e56a6ac060b7",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "3f7ab1ea-dfa3-46ab-b28c-c1f13a6f0b6e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc7d3504-ed66-4ba0-ba70-7a013d3dd5fe",
        "cursor": {
          "ref": "2ffc87ee-0649-466a-ab81-4a4563a12906",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "0c572aa3-a7f8-4f23-bfa5-f179fb811306"
        },
        "item": {
          "id": "bc7d3504-ed66-4ba0-ba70-7a013d3dd5fe",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "13c2e36c-ddb6-48b2-adea-371f0b818e87",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21de7cb3-b3af-4f9e-8188-46bf9e7917e0",
        "cursor": {
          "ref": "dd5a176d-60bf-43d8-8ea4-fbd63d05dfdb",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "522706d9-3f67-4471-8110-3482c145e8cc"
        },
        "item": {
          "id": "21de7cb3-b3af-4f9e-8188-46bf9e7917e0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "ca5863e7-0d5d-4896-ac61-20bbe6680be4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b562e69-a546-44f4-adbf-86497d3ee348",
        "cursor": {
          "ref": "a4dd2a23-a970-477f-beda-d5478afcc25a",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "2f469046-6193-4778-82f5-6040d90cdc56"
        },
        "item": {
          "id": "1b562e69-a546-44f4-adbf-86497d3ee348",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "df5370d9-f194-42ab-a2d4-60b5e88f95e0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acd20ed0-5a89-4d68-9c4c-019c498609cc",
        "cursor": {
          "ref": "79818bcf-a6d2-4702-9d00-54f38a600ae6",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "079f626f-4531-41d3-b4c4-51f92946e463"
        },
        "item": {
          "id": "acd20ed0-5a89-4d68-9c4c-019c498609cc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "2b5991b5-650e-4a9a-ad8c-5a826f8a40b6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90b72298-52e4-422f-900b-edb6e3cd5702",
        "cursor": {
          "ref": "b4d6e879-2769-463f-be59-c98babb8d04b",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "1bce2da1-a8d6-41c0-af7d-8b0a3a1e141a"
        },
        "item": {
          "id": "90b72298-52e4-422f-900b-edb6e3cd5702",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "406d327a-6f74-4f53-aa6f-53008950922c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67d957a5-eafa-467a-82e4-f1650e7bc8ff",
        "cursor": {
          "ref": "c0672eb4-0880-49de-b92a-08791287a02e",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "783ed10b-3cf4-46c4-958e-408ff806bb69"
        },
        "item": {
          "id": "67d957a5-eafa-467a-82e4-f1650e7bc8ff",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "a65c2c71-367f-450a-bea3-dc2ae4eaafee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "443ed749-02fc-4ffc-8c46-44474d5b1508",
        "cursor": {
          "ref": "5e0f67a9-14ce-49aa-a78b-cdba226e7c01",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "6a880e9f-a671-4fbf-af98-db86a1517adc"
        },
        "item": {
          "id": "443ed749-02fc-4ffc-8c46-44474d5b1508",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "a85d4b89-0427-43d6-8e56-c6bb0629bc94",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78be8d10-fa96-4486-bacd-724cc0b38120",
        "cursor": {
          "ref": "958470bc-ff3a-4db7-bde0-49b71e3bd537",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "2de9b986-cc5d-4ac1-9003-468ae8bb5715"
        },
        "item": {
          "id": "78be8d10-fa96-4486-bacd-724cc0b38120",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "595722d0-8325-4b1d-99fb-3c09126304aa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47eeb707-4e9c-45d9-8d82-20b9dab6c268",
        "cursor": {
          "ref": "832f5ff5-443e-4cc3-84af-313cbd3a978e",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "fcf26739-a9fd-44ab-9e5a-9440eb1e3542"
        },
        "item": {
          "id": "47eeb707-4e9c-45d9-8d82-20b9dab6c268",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "268d4173-56be-403c-96f9-7fb32f9cbff2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15fcfb6e-8f91-4bcd-911e-59d406930e53",
        "cursor": {
          "ref": "b2b53be7-6809-4664-b5aa-d685dd73687c",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "12fe02b1-b887-49ca-91d0-16aa286a6149"
        },
        "item": {
          "id": "15fcfb6e-8f91-4bcd-911e-59d406930e53",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "23a176ed-7d95-4569-9728-b36be034acbb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "819c69a1-8436-43bb-abc3-1f1e835e000b",
        "cursor": {
          "ref": "c28c90a7-a100-4411-becc-902c3dd35390",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "cc8d0bfd-e463-44c7-9d73-b08a0b4f463f"
        },
        "item": {
          "id": "819c69a1-8436-43bb-abc3-1f1e835e000b",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "9b7e6a37-7a70-44a9-9fc0-ecbd358abe50",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97c91988-ca54-4a77-926b-4fb064bc71f6",
        "cursor": {
          "ref": "b428697f-bddb-4a37-ba80-1b51913a83eb",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "5473dd4f-344c-4253-8a4c-6ac545f56170"
        },
        "item": {
          "id": "97c91988-ca54-4a77-926b-4fb064bc71f6",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "c7163e7d-3934-46c8-beb2-468801a6db2a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64caa561-e52d-4a08-9bf9-4b5f3d472a9f",
        "cursor": {
          "ref": "a862c27a-986c-4aef-b859-3cb1827f4d13",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "6764c32a-868e-49db-b8a6-666dd958fcbf"
        },
        "item": {
          "id": "64caa561-e52d-4a08-9bf9-4b5f3d472a9f",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "17a48035-8161-4934-be8f-3f771fbf671d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e27e3527-65f3-4598-b523-82ac36cc83f2",
        "cursor": {
          "ref": "6c8e0e4e-f460-49f9-8cdf-b1d252290517",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "7f0c6f6c-f70c-425d-9605-c265875c9bba"
        },
        "item": {
          "id": "e27e3527-65f3-4598-b523-82ac36cc83f2",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "3eeb1f84-2caf-4a54-a0bf-b2b79c553510",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34fac97e-cf8b-46c1-b8ae-c53036d8728a",
        "cursor": {
          "ref": "1d5a63c4-3b26-4c29-ae1f-815cb5dd1182",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "814e62fa-64b8-48ae-a09e-967c48079fca"
        },
        "item": {
          "id": "34fac97e-cf8b-46c1-b8ae-c53036d8728a",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "14b2b141-bca8-445a-bb0f-cbd6ec21c68f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09629cf5-f3e8-48c9-9ac9-f6859f07cb92",
        "cursor": {
          "ref": "86485b96-c58e-4629-a885-96b03c38124e",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "5bcc16ed-2e2b-4b35-a73a-7fdecbe85efb"
        },
        "item": {
          "id": "09629cf5-f3e8-48c9-9ac9-f6859f07cb92",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "2b13582a-fb18-446e-ae63-fcc5c4c33e46",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dbfc3a9-83f3-4d36-89ad-c52a4e6f6998",
        "cursor": {
          "ref": "844fa32a-ef33-48d2-b7d8-02fc68fbca13",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "5606b5d7-d3c3-4059-ba6d-2a25b8223abb"
        },
        "item": {
          "id": "7dbfc3a9-83f3-4d36-89ad-c52a4e6f6998",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "b6ef9361-3a83-466e-96d0-e29ef2230176",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e8946fe-b6be-4c17-bcf5-73f0552776f9",
        "cursor": {
          "ref": "7aadd7fc-15cb-4aee-8a27-dcc1a3dea4be",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "7a6dd90a-d286-4bdb-9e1c-9820e26f2512"
        },
        "item": {
          "id": "0e8946fe-b6be-4c17-bcf5-73f0552776f9",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "6cce7c05-dc0f-4484-8478-edb7e811a156",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12760252-99db-4e83-a885-ea228046da85",
        "cursor": {
          "ref": "582728a9-df78-4309-9978-a3223fbfb93a",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "fc6680b4-5b51-4a36-a48d-cfc97943f0b4"
        },
        "item": {
          "id": "12760252-99db-4e83-a885-ea228046da85",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "b9bf0f5e-71dc-41ff-9954-415673bf274a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20c99b2d-a562-4f1a-a84a-e92ada99a026",
        "cursor": {
          "ref": "d9577497-23a5-4d7e-9b76-39bd962b317d",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "cb0ea133-d906-4019-9469-205357af02b0"
        },
        "item": {
          "id": "20c99b2d-a562-4f1a-a84a-e92ada99a026",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "e2e01173-fdb9-4cab-82f4-71b424d68620",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb0e7d44-68fc-4b3c-b4d6-7c4b94b22d4a",
        "cursor": {
          "ref": "05de6a30-e6a2-4488-b5b0-7cecf60303c8",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "66f67274-f204-4557-b80c-4416b48861d6"
        },
        "item": {
          "id": "cb0e7d44-68fc-4b3c-b4d6-7c4b94b22d4a",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "087fb69f-9044-4d25-9e9c-a1282fa71c6e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77df90fb-5909-4287-8362-b25d0b5366c4",
        "cursor": {
          "ref": "e734f50b-7442-4c9e-93d5-c2d10e86d059",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "c91dd8d4-8a9b-43e2-921c-edaf5ad92a98"
        },
        "item": {
          "id": "77df90fb-5909-4287-8362-b25d0b5366c4",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "ab2c6fa0-1bd1-49b6-81af-6d545d7fd844",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea742f37-0f0e-4f4c-8d1b-01caa67df608",
        "cursor": {
          "ref": "d59cbfb1-1aaa-4df5-a490-0313dc23ad4f",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "38242054-d358-4d7c-a78f-a4cb70c6f349"
        },
        "item": {
          "id": "ea742f37-0f0e-4f4c-8d1b-01caa67df608",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "638a2bec-e881-4097-b176-422f34019930",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84838f0b-dd42-4799-b385-5fd28bac5d01",
        "cursor": {
          "ref": "936120a6-f8aa-4e2f-b946-0a88e47e91f3",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "18c023f9-2e7b-4d1c-affc-b7ab173affa5"
        },
        "item": {
          "id": "84838f0b-dd42-4799-b385-5fd28bac5d01",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "0d7cf716-25b5-4b1d-b0a1-c165a3f0af66",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91662d06-96a2-40fb-9d89-8d9b5145f29e",
        "cursor": {
          "ref": "12ddf4c3-0c60-469f-96a5-943ba02f3fab",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "e05a0a58-e9eb-4e49-89da-a8b8a7d73845"
        },
        "item": {
          "id": "91662d06-96a2-40fb-9d89-8d9b5145f29e",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "4fd91e3e-4894-4dd7-bb1f-2c58260dac1d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb259251-430b-431c-a665-329c0851d18a",
        "cursor": {
          "ref": "00fe2457-495b-446f-a517-4b810fdd51b9",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "aea29700-ad6b-4bfc-a2ca-31ec28630f4a"
        },
        "item": {
          "id": "eb259251-430b-431c-a665-329c0851d18a",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "677347f1-1bc6-4c8d-969f-569834b06d0f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e938e8a-4342-4c2f-ac14-2542cb30c4bf",
        "cursor": {
          "ref": "dfb21017-e9c0-499e-8305-35d276e01fd1",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "aafa2e88-cbbb-4c35-a5d1-d594e12fb34b"
        },
        "item": {
          "id": "1e938e8a-4342-4c2f-ac14-2542cb30c4bf",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "e3b179bd-43a3-4dd5-a34a-37ffa1993505",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd86b2f3-d9b5-46d3-bc3d-25824167e53f",
        "cursor": {
          "ref": "65c6f33b-a5e9-4b26-8b0c-b25d63b3e29d",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "73310090-284a-42f3-a456-ccaf23d2941c"
        },
        "item": {
          "id": "dd86b2f3-d9b5-46d3-bc3d-25824167e53f",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "c8598a7e-8fe1-4cba-834b-384a823bf4f0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f8d7aab-eca5-4666-8dd2-62b6f8d5e4bd",
        "cursor": {
          "ref": "30c43feb-a732-4513-a80e-ab14f6102a1d",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "24375035-4e1a-4c27-abe6-7f6bc20cd42a"
        },
        "item": {
          "id": "4f8d7aab-eca5-4666-8dd2-62b6f8d5e4bd",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "5f4a4c53-5270-4863-b173-b097932094ec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "879ca34f-517e-48a8-96a2-6a1ef8b794cf",
        "cursor": {
          "ref": "74cf669a-5e96-4403-8c50-33c9d9c4dbdd",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "3815e04d-c257-49a5-a9f3-fe5f87e9804a"
        },
        "item": {
          "id": "879ca34f-517e-48a8-96a2-6a1ef8b794cf",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "e669d26c-c774-49a6-b71e-3a777bebfacd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "528f629f-28f2-47a6-93fe-5a44ecf23c85",
        "cursor": {
          "ref": "243510b3-20b9-4c8f-8243-790497fa487e",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "e7d9b7ba-4eb9-4e65-9346-a1e6f1117293"
        },
        "item": {
          "id": "528f629f-28f2-47a6-93fe-5a44ecf23c85",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "b353fe1a-3acf-45a0-9700-09414ac52c69",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ef27833-5866-4534-8b9b-c29bcf5573b0",
        "cursor": {
          "ref": "c7c6e576-97a5-4208-9ca9-5eff4ca27455",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "55843d1d-384c-4aa6-9a70-0c3b2cffe46c"
        },
        "item": {
          "id": "5ef27833-5866-4534-8b9b-c29bcf5573b0",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "95412013-ea47-4edf-92fe-6b413aea416f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba0a3da2-f72e-4972-b291-59a51f432a40",
        "cursor": {
          "ref": "05435554-b0f1-4239-9530-86cdb8c7a62b",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "c6b29d49-32af-448f-9d8f-e49e24b83baf"
        },
        "item": {
          "id": "ba0a3da2-f72e-4972-b291-59a51f432a40",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "e359754e-9c1c-424e-926f-7f520504dd02",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f0a01d1-f8a6-4d32-a8fe-e84b20581e5e",
        "cursor": {
          "ref": "23ee0b1f-19a1-4610-ba20-d9f995892a32",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "34e71698-2d18-4cec-8beb-1fd7f093507b"
        },
        "item": {
          "id": "0f0a01d1-f8a6-4d32-a8fe-e84b20581e5e",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "ba401acb-8c82-45d6-ba5b-8bc5317ab1f2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90273691-e507-4efb-85e4-194a1f06d9ec",
        "cursor": {
          "ref": "88ca73ad-e536-4709-94fd-3c0aa3be42a0",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "f108208d-0159-46f7-ad91-dc81e885b686"
        },
        "item": {
          "id": "90273691-e507-4efb-85e4-194a1f06d9ec",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "1f823fce-68ef-42ad-8b59-b230d9882718",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4ae91f5-284c-4fd1-acfc-d80bb96a4b53",
        "cursor": {
          "ref": "c45c1994-a58a-4bdd-8084-0a831dc38df7",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "8b958761-a86e-4a6f-823c-8a69a0f5e168"
        },
        "item": {
          "id": "b4ae91f5-284c-4fd1-acfc-d80bb96a4b53",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "8f27fad4-0d14-49b8-9991-a25bb37c69cd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79980a39-87d2-4f56-9926-fe512dcc74c3",
        "cursor": {
          "ref": "511808ba-fe8f-4c21-9b37-671fbdbdfa61",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "63b89e92-f3a8-4c43-b9b2-a3496bcc8262"
        },
        "item": {
          "id": "79980a39-87d2-4f56-9926-fe512dcc74c3",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "4c40a289-1401-4a1d-a658-da045bd6426a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "34f2bc6d-921b-4269-b928-afc877a09e4e",
        "cursor": {
          "ref": "ec833f4c-471b-4d19-ac4b-9b99ffda2321",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "3e2c297b-d294-4ff5-9e55-eac920f45e26"
        },
        "item": {
          "id": "34f2bc6d-921b-4269-b928-afc877a09e4e",
          "name": "credentials_issue"
        },
        "response": {
          "id": "e9647d54-4a72-412d-ac5c-8c90412105b9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 220,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "db0be6ef-4cbb-4af9-81f6-a11f948eb6cd",
        "cursor": {
          "ref": "e5be1976-1857-4544-a347-3b321f18d0c1",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "9cbb0efc-3f17-4692-adfb-319b03aeb90e"
        },
        "item": {
          "id": "db0be6ef-4cbb-4af9-81f6-a11f948eb6cd",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "d8b5959b-e94c-41c1-9788-94ebcdf5f153",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "d2a2dbb0-b973-418e-84ac-b61eb520800d",
        "cursor": {
          "ref": "973ba735-89cc-47fa-8e9b-5bd610e95527",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "9c60b36c-5ab4-479b-94f9-db0852d752aa"
        },
        "item": {
          "id": "d2a2dbb0-b973-418e-84ac-b61eb520800d",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "95479117-a51a-465f-a1a1-3c1267b19d9c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "5c0685cc-e129-4974-a41a-eba45aa3fadb",
        "cursor": {
          "ref": "782febdb-4a4a-423d-b412-538dcfd3f45c",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "2d146c93-8727-49ea-96da-0e1a361af307"
        },
        "item": {
          "id": "5c0685cc-e129-4974-a41a-eba45aa3fadb",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "f1a7bc79-b166-4547-b26a-1455b2739cd4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "67c369f7-faf8-42bf-bb83-d33e7bc9ecee",
        "cursor": {
          "ref": "0bf8bbc7-15fb-4768-965d-fdeff0054aa5",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "f0e0a0df-25a6-46fa-a1c3-bbbba02cc3c9"
        },
        "item": {
          "id": "67c369f7-faf8-42bf-bb83-d33e7bc9ecee",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "fcc666c9-1c9f-42bb-bdbe-ce8aee484ff5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "5b138418-9191-454f-bed8-b2f9aab492e5",
        "cursor": {
          "ref": "aa6cbb34-4ee3-4583-a0a6-94d629355813",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "482f0cfe-ce46-4ae4-b1a4-861b5a8fa3c8"
        },
        "item": {
          "id": "5b138418-9191-454f-bed8-b2f9aab492e5",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "1123ff95-8835-4ca9-9c47-b4a351f1973e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "7d3987fe-af03-45cf-a69d-ddbf6fddbd56",
        "cursor": {
          "ref": "39cdaf45-2cb6-4d31-ab6d-60c3f8d9d94a",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "6443b4e4-d13f-4a69-90b7-02d15d484a86"
        },
        "item": {
          "id": "7d3987fe-af03-45cf-a69d-ddbf6fddbd56",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "0dce60a2-6d9d-4776-bd77-2c12fc0e8553",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0db7c5f-6b2d-497f-989d-e066bdc6ade7",
        "cursor": {
          "ref": "03c98584-5d0d-415b-8e9f-c2811e62a115",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "18e8d613-5b36-4f37-8f01-c95233a904d1"
        },
        "item": {
          "id": "c0db7c5f-6b2d-497f-989d-e066bdc6ade7",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "fe26a197-3001-40b3-85cd-d0fcb07290ca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35eafe65-9fab-4e38-8acb-7d5b0aaa8659",
        "cursor": {
          "ref": "6c60e5be-a3b5-48aa-9fa7-025a31134752",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "10093969-c109-4ec1-92dd-ad81bc0ffdf8"
        },
        "item": {
          "id": "35eafe65-9fab-4e38-8acb-7d5b0aaa8659",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "55612c86-961a-4545-956c-2f4ac70f2422",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e901d17-1598-4719-a840-875876537c4d",
        "cursor": {
          "ref": "3fd7527c-4c4a-4c1a-9ddc-2606f176b635",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "71b59601-52e3-479d-ae9f-2c2d22172bc1"
        },
        "item": {
          "id": "9e901d17-1598-4719-a840-875876537c4d",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "aa795500-9312-4f3a-962c-70390ed72167",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f719710f-48f7-436f-bf56-6e472c8b22dc",
        "cursor": {
          "ref": "3b88485a-8622-4bf7-8510-2cacae6dbac1",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "669747fa-ac6c-4fce-a477-6bd3e80869f2"
        },
        "item": {
          "id": "f719710f-48f7-436f-bf56-6e472c8b22dc",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "6c124383-9d9f-46b1-a9b8-3603fdb16ee7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "486b5ec0-4ab6-47b3-92a8-e957a792a066",
        "cursor": {
          "ref": "53d478ee-ed4d-470a-84a3-02868db1469f",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "fa2cd8ab-15e7-4df7-87ef-dcb1b2200b18"
        },
        "item": {
          "id": "486b5ec0-4ab6-47b3-92a8-e957a792a066",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "8eb20c7c-45e5-48d6-a217-f65b57fd6833",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bd004fc-d299-4542-b9b1-7a3cfab1523e",
        "cursor": {
          "ref": "da214798-ad7b-47a5-9097-2117a1c16c99",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "7a56883c-e2a1-474d-a7bf-a0f2ce2b7428"
        },
        "item": {
          "id": "0bd004fc-d299-4542-b9b1-7a3cfab1523e",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "2f593f75-9ce9-4c1a-80ad-47afeacea800",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49973ff0-f4c9-402b-9e44-78b1373a8dd3",
        "cursor": {
          "ref": "75a8f6d6-2f96-4e2b-895c-6b60de39a9a5",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "a2d59df0-8a98-479f-9d91-8bfdc45671b9"
        },
        "item": {
          "id": "49973ff0-f4c9-402b-9e44-78b1373a8dd3",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ab09fd8b-7c8d-45ec-bb05-9e62ffc3eadd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12e8b270-74bd-4a0a-80cc-4749c08147d4",
        "cursor": {
          "ref": "cc76a103-b41f-4a35-ac85-213f98177c78",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "9d7f92fe-f171-4b55-9b3d-4e2f7491ed0b"
        },
        "item": {
          "id": "12e8b270-74bd-4a0a-80cc-4749c08147d4",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ab698d22-85b9-4749-840e-79020a3fe262",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21df3587-48c1-480a-b659-06f26abdb692",
        "cursor": {
          "ref": "9921f225-c246-4244-8520-ac9d966b5515",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "18323e62-2829-40fc-80e2-2f1d4839216a"
        },
        "item": {
          "id": "21df3587-48c1-480a-b659-06f26abdb692",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c8d028ae-1263-4d5f-8553-6ea53a157af1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecd45b34-f44c-465c-a9e9-56ab9415647f",
        "cursor": {
          "ref": "e9305eb2-350c-43aa-a8fe-acf023b22530",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "ee14d4b8-e95d-4f94-a43e-3188e65687f2"
        },
        "item": {
          "id": "ecd45b34-f44c-465c-a9e9-56ab9415647f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "9d6e16f6-99d4-4dd0-a13f-0edcd1a40a51",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ac805cb-518a-40bf-bd19-dfec6054efb0",
        "cursor": {
          "ref": "4e3693bb-1b4d-40bc-b8f7-fcd79cd35896",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "45495fdc-7166-449f-bc00-21c42eebe105"
        },
        "item": {
          "id": "0ac805cb-518a-40bf-bd19-dfec6054efb0",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "dc3f3f3f-098c-4aac-be84-0883dca2cc32",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9765daf6-f813-457d-b756-fba248cfb5a9",
        "cursor": {
          "ref": "d3b88099-745b-48e9-ad69-440511305987",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "784dc63c-188c-4da0-9f2f-d94a12b6584e"
        },
        "item": {
          "id": "9765daf6-f813-457d-b756-fba248cfb5a9",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "08a53afc-74c5-4f25-9725-79c9c00921d4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a76c2729-ab74-426a-bb0d-de580e0ff89a",
        "cursor": {
          "ref": "b68311cd-6c3c-4005-aa95-ef7e7ecaaca2",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "697bc524-68a5-4828-bb74-47ec848d181a"
        },
        "item": {
          "id": "a76c2729-ab74-426a-bb0d-de580e0ff89a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "0f71cdf1-39f0-4dc3-b511-34e6ca203a65",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95759d85-83b3-4ac4-baeb-28fb6d01602a",
        "cursor": {
          "ref": "8e45733a-91ae-47d8-995c-85a1034f29b4",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "040b5669-441e-4dad-a3be-c608246d7e73"
        },
        "item": {
          "id": "95759d85-83b3-4ac4-baeb-28fb6d01602a",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "bd9aba96-99c6-4261-84a6-ae200c65db6a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4e7986e-b072-4ecb-a88c-244f6dff4678",
        "cursor": {
          "ref": "7fdda0be-6e0d-4d47-9bb6-59ab6a341c95",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "077c3358-e402-41a7-ac87-e66fe04b44bd"
        },
        "item": {
          "id": "d4e7986e-b072-4ecb-a88c-244f6dff4678",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "fcfc34b5-aaa9-4cbe-a2e3-0a03bb9de9fa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dedec839-cee9-48be-a359-e779418e45aa",
        "cursor": {
          "ref": "dd8cd950-26a0-4d87-a2df-b338bcceee63",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "9ac2ef24-17f5-477b-8b92-81defae97768"
        },
        "item": {
          "id": "dedec839-cee9-48be-a359-e779418e45aa",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "308852ec-dabb-4a7a-9cc2-33ea370c05f4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56f83a12-4422-4d32-bf2e-9cf079565ded",
        "cursor": {
          "ref": "187ffb95-6dd4-4c1d-b906-8118212369c2",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "532d3abc-98b0-4780-bb7d-0c84777ad4d6"
        },
        "item": {
          "id": "56f83a12-4422-4d32-bf2e-9cf079565ded",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "98465e22-c634-4ec0-aa11-49eaafb69a64",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a04c2bd-4bac-43ab-bf55-17f3f38a4b27",
        "cursor": {
          "ref": "db83df74-7f1b-49b3-96bd-9b5d9902e1d4",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "edba6dc5-2af9-43a0-88f1-00754db29d7e"
        },
        "item": {
          "id": "5a04c2bd-4bac-43ab-bf55-17f3f38a4b27",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "a6fb0284-0cc0-4c5d-bce9-2f76aae8b693",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcd21ce6-b542-4533-8978-7e49269a8cbd",
        "cursor": {
          "ref": "22e7ae4e-5102-4e6f-b782-6b1b16d1851e",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "c1f6f8ab-9a66-4ebc-8ff4-bfcc3bc03094"
        },
        "item": {
          "id": "fcd21ce6-b542-4533-8978-7e49269a8cbd",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "aa8988e6-5abe-45a7-8bbd-591ac2f01bc0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6c601fa-8816-4c28-bf65-0fa76ae756fb",
        "cursor": {
          "ref": "f7dc8a78-f0cd-4f65-b1b2-545c5528bdff",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "f8e85ba5-7d05-4ccc-bb77-2f6ef41a7bc9"
        },
        "item": {
          "id": "e6c601fa-8816-4c28-bf65-0fa76ae756fb",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "e1c93a38-c795-471d-a607-6f347a299717",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b266917-eede-434a-b720-2daa25f8a6e9",
        "cursor": {
          "ref": "0c39f166-16dc-4360-96c8-5fc6046f9f60",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "d5146bce-6c72-434c-8743-f7d20e151d3b"
        },
        "item": {
          "id": "7b266917-eede-434a-b720-2daa25f8a6e9",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "56d70dcc-7fe3-48ff-9c96-62d17ef5bcfa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78adff12-9f49-48f9-b366-55ccf1bf9064",
        "cursor": {
          "ref": "ddd65d71-a218-4dd6-aff9-a3aa99eb65d8",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "13c507d5-f293-485c-90b4-14eeaece03cf"
        },
        "item": {
          "id": "78adff12-9f49-48f9-b366-55ccf1bf9064",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "34aace16-2ec1-49ab-a70a-54bf223b3084",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c346d9be-16b8-43e6-8b8b-6851e967f0ed",
        "cursor": {
          "ref": "36442176-f4e7-4d8d-b510-a8545099e9a7",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "559399a8-c035-4750-8724-5ef4e8089455"
        },
        "item": {
          "id": "c346d9be-16b8-43e6-8b8b-6851e967f0ed",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "1bb8494b-f9f8-4169-aae4-3b1780f9fc1f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d6f57d1-e833-48ea-9993-f02436206c3f",
        "cursor": {
          "ref": "6e0b60cc-fd87-45b0-b5cc-06edf15d5299",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "e40f7a65-1ee0-40d2-8118-2883d5bad1ef"
        },
        "item": {
          "id": "9d6f57d1-e833-48ea-9993-f02436206c3f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "6e430b2d-e472-44d6-a412-64c41a5f8322",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0974ff7-ef18-45da-827d-9c84fe0a01c9",
        "cursor": {
          "ref": "82b256ef-649a-4ba5-8f61-26a7d6928f52",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "7c9ce851-0561-45d7-96fa-76257bf74866"
        },
        "item": {
          "id": "a0974ff7-ef18-45da-827d-9c84fe0a01c9",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "5ebf27b1-2040-429c-88e2-7a10efdb69e9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41335fa5-1a6c-4036-89bb-90ef8c727161",
        "cursor": {
          "ref": "6bfdf7bc-82a8-4e9f-8ec3-66eb4ae7d3dc",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "e494dd6c-d336-4b6e-8d02-ef8ba9c35f3b"
        },
        "item": {
          "id": "41335fa5-1a6c-4036-89bb-90ef8c727161",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "29672d94-51e1-4735-9e34-5c7914202204",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06897c16-5525-4428-be56-981f62446680",
        "cursor": {
          "ref": "95c8aa33-d030-4149-b8ac-91ae55557473",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "a6b76340-3550-462b-9455-f9e02a60ca12"
        },
        "item": {
          "id": "06897c16-5525-4428-be56-981f62446680",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "7de71c8e-5f88-4fee-9594-8bcfc4162e51",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7776dc95-ed70-48d4-a277-34d8219f48e1",
        "cursor": {
          "ref": "f977d1b9-4c5d-4706-9b03-07e2c5c42ca8",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "2ddc70ef-4fb9-4a36-b9d4-6ee673e44e24"
        },
        "item": {
          "id": "7776dc95-ed70-48d4-a277-34d8219f48e1",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "c1d58c77-0160-4d07-b5d8-ae0b7fd1cbc1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "994564bd-8e8e-407f-869a-ac8ce190b0d6",
        "cursor": {
          "ref": "08e7cd37-c042-493c-bbb7-9dfb8ecbbcf5",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "f509262a-323c-4897-9563-668c654bd0a4"
        },
        "item": {
          "id": "994564bd-8e8e-407f-869a-ac8ce190b0d6",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "c3b6d6b8-9e8d-4ede-9ab7-d453bc089a7d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "508e9d62-c243-4e56-bea9-d0ec94ff81ae",
        "cursor": {
          "ref": "0467d94c-e5a4-4502-b55b-4c4607a1dcb4",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "eb413af3-05ee-46d5-89c7-eb8328cf133f"
        },
        "item": {
          "id": "508e9d62-c243-4e56-bea9-d0ec94ff81ae",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "61d1e540-0208-434f-84e1-6bb6ec31df5a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09566331-a515-438f-88e4-8f02ec9b3c0d",
        "cursor": {
          "ref": "fb06e642-7b8f-4a24-a3e2-5be55486d5e8",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "8239b256-abff-42df-a5e8-b30c510e2020"
        },
        "item": {
          "id": "09566331-a515-438f-88e4-8f02ec9b3c0d",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "75ed4520-3543-4fde-97a7-f57a3f66aed2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a69e5e5a-3778-4b7a-9146-50e1bc5bff78",
        "cursor": {
          "ref": "a2683fec-8c38-4c89-b559-ecf03eb426c3",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "6dcffef2-ee00-4ab8-918c-f81b0e856f54"
        },
        "item": {
          "id": "a69e5e5a-3778-4b7a-9146-50e1bc5bff78",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "fafc3ea3-7147-4362-9f0b-f7c7c69755bc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30e91e07-fb16-4d6a-9015-7a154006ba86",
        "cursor": {
          "ref": "c518c137-2449-46f9-9a35-abf69142b519",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "52f9e30f-7919-4060-b985-ac5f575ad76b"
        },
        "item": {
          "id": "30e91e07-fb16-4d6a-9015-7a154006ba86",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "c3003013-b528-479b-a004-b9b4cc8f6890",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea77a5d4-34db-4a3f-b217-ede5dc7c34f7",
        "cursor": {
          "ref": "acb2f4ae-228e-456b-9361-58a15f8175dc",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "641700ee-e8e2-4863-95e9-52facbe4a083"
        },
        "item": {
          "id": "ea77a5d4-34db-4a3f-b217-ede5dc7c34f7",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "78d78b6f-0411-4b0f-aa7f-3ddf169e1e3c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdedefd0-b22d-4434-a8c4-5d1dcd9d98b3",
        "cursor": {
          "ref": "c2d25122-1e1e-4101-b0c4-3d2c3b71189c",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "7f3c9dbc-979b-41e4-b57d-fc9ae7767f63"
        },
        "item": {
          "id": "cdedefd0-b22d-4434-a8c4-5d1dcd9d98b3",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "ecddddc1-fb60-4084-b194-1e2f67468f6e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d3891c8-872c-4cf4-b061-b44d15fe94b4",
        "cursor": {
          "ref": "b54ae1b0-dd2f-40c1-ac34-8150846235a7",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "6f6ac920-f9e3-496d-ab4c-91475ef66e6b"
        },
        "item": {
          "id": "0d3891c8-872c-4cf4-b061-b44d15fe94b4",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "3e37ed12-659b-448f-902c-89526ccedecb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64c81290-a80b-4f11-b5c3-110b45e69895",
        "cursor": {
          "ref": "4adcf02d-2c8d-417f-a617-95f204a2ee95",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "86b92f0c-72c4-4772-9ec1-7c647c386a86"
        },
        "item": {
          "id": "64c81290-a80b-4f11-b5c3-110b45e69895",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "3847bfd8-55c4-4c46-8d18-e31d7a07a3f5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4594261-97bc-47d6-8f92-0ce0c1d1805d",
        "cursor": {
          "ref": "4113e52d-e701-49db-9944-a2b6cb014327",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "e7413e7b-39b2-47a3-961c-cd5ffcca7650"
        },
        "item": {
          "id": "c4594261-97bc-47d6-8f92-0ce0c1d1805d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "2d5f8609-6a45-4f74-a29f-d0bb32f1049f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ab49926-181d-412c-8f46-b50e6a4269c7",
        "cursor": {
          "ref": "90902e9b-5324-41b1-ac70-2b3b71a1baeb",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "358b84d9-aeba-4a99-a859-c7a43be72fe7"
        },
        "item": {
          "id": "0ab49926-181d-412c-8f46-b50e6a4269c7",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "5d4cf169-5e3b-44c2-9b7e-1db0fad2d751",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d00c9dcd-c4af-42fb-aaf6-fbf692236eda",
        "cursor": {
          "ref": "6f2902da-41af-4cce-bc9d-372eae8e8580",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "8078bbfc-e400-4205-ad1e-5674c8a5251f"
        },
        "item": {
          "id": "d00c9dcd-c4af-42fb-aaf6-fbf692236eda",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "1803e43f-7056-43c5-b4b2-e1deeded32ea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aaac367-90e6-4315-bd2c-55463efe60fa",
        "cursor": {
          "ref": "75cacf49-3705-48d3-be0f-d8d225bfb69d",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "b148a072-a0e5-46e1-a13d-830fc0398b9f"
        },
        "item": {
          "id": "2aaac367-90e6-4315-bd2c-55463efe60fa",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "d7d4ed5a-fb6b-4054-9f22-3c81cafd6519",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c15460ca-c54f-4282-a300-6f85262b409c",
        "cursor": {
          "ref": "5eaa082c-1e80-45d3-a4d7-f23cd7048ad9",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "5e24c4c8-6d64-46ab-bbba-310d5948228c"
        },
        "item": {
          "id": "c15460ca-c54f-4282-a300-6f85262b409c",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "aa5b19ab-f721-4e41-852d-f870e7772f40",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dba0cb8-3291-4030-ba6a-24c1deb2feab",
        "cursor": {
          "ref": "c69803d0-4f8c-4b14-9790-fecfa70ac7a4",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "8efda14d-c3db-43b3-bd80-91a7c81dddef"
        },
        "item": {
          "id": "6dba0cb8-3291-4030-ba6a-24c1deb2feab",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "fa9d578b-8f9b-4686-833e-82dcf2c6132b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6de3d03-e07c-438c-8fde-0e38dd21ac8b",
        "cursor": {
          "ref": "52709885-f89b-4806-840c-419643afeafd",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "b6f5efd4-1e49-4688-9422-a4d61aac5408"
        },
        "item": {
          "id": "f6de3d03-e07c-438c-8fde-0e38dd21ac8b",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "168a44fc-addf-4424-88fb-f29a110da1d3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa0230f3-4a52-4694-8b30-5088027e76cb",
        "cursor": {
          "ref": "9f495d60-ac01-4003-a578-8f624a7dc876",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "7108ee6b-aa48-4600-a87b-66ee135c7d33"
        },
        "item": {
          "id": "aa0230f3-4a52-4694-8b30-5088027e76cb",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "cbc2e098-b045-4d03-8fcc-6371f4013c72",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c282947-e065-4135-8c3a-f1123eeaabd8",
        "cursor": {
          "ref": "66dfe534-6fda-4cea-a8da-102702cca6a1",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "4897cfa7-48c2-4eb7-b4a3-137609667f91"
        },
        "item": {
          "id": "3c282947-e065-4135-8c3a-f1123eeaabd8",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "b61d6480-4d65-4d14-90cc-0a97e6b5ab7c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36520102-4d11-4158-bde9-f1d4deaa7a8c",
        "cursor": {
          "ref": "55f77d2b-9717-47f0-a0c8-f071d43b6195",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "0c6b953b-0473-4a03-b8f8-e0843946bbcd"
        },
        "item": {
          "id": "36520102-4d11-4158-bde9-f1d4deaa7a8c",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "e73da41e-85a0-4734-9020-7341372104f9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85c34e4c-73fc-4267-abc2-6b1a0fbf5f51",
        "cursor": {
          "ref": "53512524-3c33-4c2a-82ae-df78ffe01255",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "5007ded5-2039-46b1-a869-e7420b1e872d"
        },
        "item": {
          "id": "85c34e4c-73fc-4267-abc2-6b1a0fbf5f51",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "644e01ed-62ee-40fc-bab2-f9be1f55677b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c58d2d84-d002-4c01-b33a-e97d95d5c6f6",
        "cursor": {
          "ref": "28ed2db6-4eb7-4f0a-a918-69b87f782fd3",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "9b37dad2-177b-4945-bf94-0df26ad6b276"
        },
        "item": {
          "id": "c58d2d84-d002-4c01-b33a-e97d95d5c6f6",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "c9e123be-6849-443c-943a-a9f48519acb0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13b6a11b-0c6e-4b2d-834e-328af97a2ba6",
        "cursor": {
          "ref": "0504d9e4-e64a-46b4-8ae5-bf59cb46e34b",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "24bf09ac-46ab-41f6-9304-f969becdc5ac"
        },
        "item": {
          "id": "13b6a11b-0c6e-4b2d-834e-328af97a2ba6",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "6f63dbca-1ca1-42a9-b493-bec9836c2f61",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cd8d4f0-01d5-4a5b-b857-a72a48dbe072",
        "cursor": {
          "ref": "f0aacf56-c986-4156-8bb3-e82fd337510d",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "a58ec418-c02a-48c7-af81-5cf4dc09446f"
        },
        "item": {
          "id": "7cd8d4f0-01d5-4a5b-b857-a72a48dbe072",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "342e9da4-e048-4a1b-b817-214aa1dce8dc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2036774c-7ec0-4e42-954d-fe323a2044ac",
        "cursor": {
          "ref": "be5e955e-7467-49b6-82a1-04b5abf5cab4",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "0f8a150e-5873-4ed8-a509-6251463f9be9"
        },
        "item": {
          "id": "2036774c-7ec0-4e42-954d-fe323a2044ac",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "6c5bfb46-1e98-4507-ac66-f2385284e2e8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbfc06fd-5b3a-47f8-a71d-5d8fd53292a0",
        "cursor": {
          "ref": "cc923bea-9242-427f-bef8-87a7f006761e",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "948115cb-dc6b-46c0-9abd-0604cb98f5e1"
        },
        "item": {
          "id": "dbfc06fd-5b3a-47f8-a71d-5d8fd53292a0",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "e94503ae-3e35-45a7-a97a-2222f8aeab58",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27623428-801e-4621-a5d9-4e74be998e79",
        "cursor": {
          "ref": "d8b5e2d8-8ed3-4c41-85c1-0182b62a32ae",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "a0a5d815-6449-46e7-9f2e-24a8a764b35b"
        },
        "item": {
          "id": "27623428-801e-4621-a5d9-4e74be998e79",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "8b442be4-55b4-4383-8472-c7329c3410fe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e7d8bdc-0534-432e-909d-a40a735e3bf7",
        "cursor": {
          "ref": "ff6e4103-7345-46b5-b554-6a3384845fcc",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "e1450b51-ca27-4b27-a49c-7a1772702b39"
        },
        "item": {
          "id": "2e7d8bdc-0534-432e-909d-a40a735e3bf7",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "32e13a5d-add5-4cba-b9d2-642bf17ab71c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da383631-973c-404d-b126-ca3ee5554fd1",
        "cursor": {
          "ref": "ddc05d51-54c2-412f-aad4-bada31e73476",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "fbdc7cd8-ef91-4569-8af0-78390ef51a36"
        },
        "item": {
          "id": "da383631-973c-404d-b126-ca3ee5554fd1",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "785d2b5e-94eb-4ecd-a7b8-4ba45fda263c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04981204-76ee-4286-bba3-046062ea63c8",
        "cursor": {
          "ref": "2ce93c09-154d-4ad8-97d7-a11a4fc4c40a",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "c081dbf5-cf3e-4ca7-bd84-54bbc1745cc9"
        },
        "item": {
          "id": "04981204-76ee-4286-bba3-046062ea63c8",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "5468dd3f-325f-4b2e-8cb9-8d1d362ed1ce",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb53e45c-14dd-494c-9994-c5cac1595c19",
        "cursor": {
          "ref": "250ee274-360b-49a9-96ef-45dc168358c7",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "6ab8245f-84c9-42ab-b980-e872b118b030"
        },
        "item": {
          "id": "fb53e45c-14dd-494c-9994-c5cac1595c19",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "0fbdffe6-be1f-42f1-8da7-dbfecba3bce2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c05b8223-ad83-481f-aefd-eb9df520cabc",
        "cursor": {
          "ref": "54e4cc10-d252-4149-9b23-bcf34e6005d1",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "aea5dbb3-eeff-4890-8257-30afc6552a84"
        },
        "item": {
          "id": "c05b8223-ad83-481f-aefd-eb9df520cabc",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "237721e8-e81e-4e98-9f5b-a52858556ecd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f69801d1-6eb0-4d08-bf04-19198fd68642",
        "cursor": {
          "ref": "1597ba87-c2d6-4fe0-a3a3-04d125b45b82",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "a61a0efe-3dd9-44db-a23d-d84cfd0df380"
        },
        "item": {
          "id": "f69801d1-6eb0-4d08-bf04-19198fd68642",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "c312f5a9-99b5-4edf-b1e7-7cc2c04db3f8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f0629d3-5fb1-4a11-8664-28685090225d",
        "cursor": {
          "ref": "ff752077-14b3-43ae-a849-f650853046df",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "d42a10c0-e4a0-4369-b7fb-798c4fe0a4cb"
        },
        "item": {
          "id": "0f0629d3-5fb1-4a11-8664-28685090225d",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "390c0807-fa3f-4b1b-8e4d-ed16ac35cd49",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e1d7741-4dcf-48cf-aa08-9e66e6717118",
        "cursor": {
          "ref": "b8e56ee9-7a5d-4d12-99f7-7097a5277844",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "2663df53-9847-4c7e-a04c-9ff00d901e50"
        },
        "item": {
          "id": "5e1d7741-4dcf-48cf-aa08-9e66e6717118",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "5ebf708e-3a9d-4718-a862-f14f9230c1c7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50926e9e-e4f0-4fab-a9d8-6b073daee7d6",
        "cursor": {
          "ref": "eb1e622d-0353-4f07-be57-d24643efed92",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "fe45c91e-c139-4c32-923b-01ab40a2fc15"
        },
        "item": {
          "id": "50926e9e-e4f0-4fab-a9d8-6b073daee7d6",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "343b3cff-ed42-42ca-a2f3-8d2ba05abe97",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8cdb729-7547-4a40-8738-61b2aa377926",
        "cursor": {
          "ref": "08fee1f2-227c-4ee5-8190-fc538e5da989",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "85ad2f31-9631-43db-bc02-768db57c3c57"
        },
        "item": {
          "id": "d8cdb729-7547-4a40-8738-61b2aa377926",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "e021c311-2dfa-4fb4-a1da-d54684473307",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7087ba76-13b8-4edc-8e26-8467c4c77087",
        "cursor": {
          "ref": "8b5b3a93-4f99-421b-9881-2100752c492c",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "dc81ad94-0e96-4de0-93e5-fc4aaba0473e"
        },
        "item": {
          "id": "7087ba76-13b8-4edc-8e26-8467c4c77087",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "b19f6e32-ef45-484e-8041-082fead0d87b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65e4a58d-f7d8-45fb-ade3-d14da44cc23e",
        "cursor": {
          "ref": "c5cc5d17-cafc-467b-baa3-65f6b33e5196",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "4ca05ac4-0ea2-4a12-949e-b345a312c9ea"
        },
        "item": {
          "id": "65e4a58d-f7d8-45fb-ade3-d14da44cc23e",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "f8442c64-c682-4838-acdc-b6865f92fd75",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5a35da2-79ee-45e5-acd7-debebd1179e1",
        "cursor": {
          "ref": "68669385-7183-431c-872d-918e1119f9a3",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "bbe2e701-bbd5-4b3f-8b8f-6a952fcdfd17"
        },
        "item": {
          "id": "e5a35da2-79ee-45e5-acd7-debebd1179e1",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "791a94cc-0bfd-4afb-9f6e-c46459e6eaa6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14d027e4-1363-4824-89ff-afc5ae46e1d7",
        "cursor": {
          "ref": "5baa8c94-e40c-4b20-afa8-bdaf804d134c",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "c646a5c2-fdd1-4e0c-9cf0-b1836b7de5f2"
        },
        "item": {
          "id": "14d027e4-1363-4824-89ff-afc5ae46e1d7",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "4c950427-5b4d-4b61-a5a5-c56697c6215e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6b76a0d-a801-403a-b903-c9bd7c20e1f6",
        "cursor": {
          "ref": "209d79f5-251e-4d90-96d6-a72ee27d0b98",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "b663b8b3-a966-4e1c-9f28-25eecb6e8455"
        },
        "item": {
          "id": "a6b76a0d-a801-403a-b903-c9bd7c20e1f6",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "0742531b-30be-4dfa-bc13-c57243673514",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12c0de59-9353-49f2-8cb7-e24ac240b736",
        "cursor": {
          "ref": "0b2df5c2-3bb7-4e02-a793-15e2eba7dc74",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "71e64cdd-5468-4cb2-baf3-f820d5fa5a59"
        },
        "item": {
          "id": "12c0de59-9353-49f2-8cb7-e24ac240b736",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "326efeff-4eb9-466d-a833-150b00136e74",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ef3aad3-c932-4845-b097-e42217c425a3",
        "cursor": {
          "ref": "1c698a2a-a86f-4b6e-990a-e13136455a40",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "89573c45-2ecc-4eba-933b-fac55c2ca0c7"
        },
        "item": {
          "id": "6ef3aad3-c932-4845-b097-e42217c425a3",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "14129475-5402-4d29-a31b-8bb25e91f67d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61b19203-540b-4686-a73c-9e3753d5ed3a",
        "cursor": {
          "ref": "15aef057-fc54-4185-a1c2-ae1c6cf2e57f",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "46ccc548-47cd-4634-966a-d4ec5b8bb8cf"
        },
        "item": {
          "id": "61b19203-540b-4686-a73c-9e3753d5ed3a",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "53f87fd6-6801-4ddd-9131-e68111363d44",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62a2ef47-4b53-4396-b5ee-737446ba18bd",
        "cursor": {
          "ref": "9cc4c4c9-0646-4cbf-97b5-9a3e5365fe9f",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "6b993013-35c9-4b6c-a765-8337924c15c7"
        },
        "item": {
          "id": "62a2ef47-4b53-4396-b5ee-737446ba18bd",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "7008bd22-f77d-44f4-8e90-323b1bd5d4fc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "057fb1f1-ed64-44b8-befa-83b160ab9602",
        "cursor": {
          "ref": "ef107a88-ffcf-45d9-a2bf-7f7278ebdc4e",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "68c838a9-c21d-4cc0-86f4-72fb1520220e"
        },
        "item": {
          "id": "057fb1f1-ed64-44b8-befa-83b160ab9602",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "cdf557c9-bbf8-437e-8441-c0d431e04b1f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2cb0a8f-9fd5-4aaf-a2de-15208edd1878",
        "cursor": {
          "ref": "c1886fee-1e22-4e22-bf92-f079d75c35e3",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "150db886-3ac6-4b61-bc07-e6fcc06d0d50"
        },
        "item": {
          "id": "b2cb0a8f-9fd5-4aaf-a2de-15208edd1878",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "715f6841-47a6-4f9e-b562-a6c35181f57e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "271854e0-f71b-4db0-b899-085572a3bcfd",
        "cursor": {
          "ref": "78164576-d4eb-4bfd-9573-a4f8e5c0bef8",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "2a27a249-d2a3-42d1-a224-32cc0e9dd047"
        },
        "item": {
          "id": "271854e0-f71b-4db0-b899-085572a3bcfd",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "8aa90df1-d7a9-4435-ac32-603017c7e016",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a536bbe-779c-4988-80d0-22068186db35",
        "cursor": {
          "ref": "a4eeec03-06c7-4566-882a-f4e2dfbab1ef",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "2120bb41-b827-4892-9232-2f8a0533cc94"
        },
        "item": {
          "id": "3a536bbe-779c-4988-80d0-22068186db35",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "01adbaa8-af48-4c0a-99af-adb2859c3eaa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b3e4059-aa7a-4509-b65c-dc30e0bd6538",
        "cursor": {
          "ref": "64acbfa7-1cb7-4c37-b8e3-e44577d6011d",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a6c83bc2-7593-4410-a07c-af4d37489895"
        },
        "item": {
          "id": "2b3e4059-aa7a-4509-b65c-dc30e0bd6538",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "426af8b5-bf4f-4717-81d7-416c64f11a96",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "039223cf-d3bf-49fa-a63b-1f626a719b18",
        "cursor": {
          "ref": "557dd6ed-3744-4238-9959-3ab79618a9e5",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "f7a4ee5d-4915-43e4-be4c-10ba36d0b3f9"
        },
        "item": {
          "id": "039223cf-d3bf-49fa-a63b-1f626a719b18",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "ff7521ee-5ff5-4e00-b4ba-4b8c24dadfdd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50c76075-b4c8-4f75-9979-0e1531144d8a",
        "cursor": {
          "ref": "3b31c493-fb73-4c44-9f52-1b3a6d91c17d",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "2a9ed8d0-445f-4f9f-a5d3-046dea7e68e5"
        },
        "item": {
          "id": "50c76075-b4c8-4f75-9979-0e1531144d8a",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "c3ef6dec-4abb-403c-ae17-e9bba635a27d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46ac572f-8fc6-4a4c-9400-e9e8a932cba8",
        "cursor": {
          "ref": "183294ad-215f-447b-b1e4-bcce2e650293",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "912fac2c-c28e-43be-97a3-2772db57d016"
        },
        "item": {
          "id": "46ac572f-8fc6-4a4c-9400-e9e8a932cba8",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "5710e56c-c618-421a-a92a-32aea2ebff84",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdc3589d-3ab0-4877-b9d1-dfbd2020c516",
        "cursor": {
          "ref": "dea9c3d1-6836-43af-848a-8de5223231c5",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "c68bd2ef-ec5e-4cb5-9fd1-b9e05170f95a"
        },
        "item": {
          "id": "fdc3589d-3ab0-4877-b9d1-dfbd2020c516",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "41b5f6db-7b0a-4f10-9d15-8053c19fc31a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6da01e3-4321-457d-b6ca-cf85cfd56149",
        "cursor": {
          "ref": "ea18a16b-92c6-49f1-a8b9-b2717811975a",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "8b6be41e-d607-45da-aa03-912d52edd2d6"
        },
        "item": {
          "id": "c6da01e3-4321-457d-b6ca-cf85cfd56149",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "2bca80ac-238d-4576-aed9-6a69ea4df9f7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f53948fe-b287-4683-a9ba-f82083584d7b",
        "cursor": {
          "ref": "620a84d3-dbe1-4927-91b1-a618470b6622",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "abf1edd0-4173-46a0-abe4-480c4c0bd084"
        },
        "item": {
          "id": "f53948fe-b287-4683-a9ba-f82083584d7b",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "c6c2934a-5b52-4290-9452-617cd6aca438",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeaf3b3b-d53f-4e9f-8806-67b5e3cd7ab6",
        "cursor": {
          "ref": "cf8a9b59-d3cd-45eb-bd8e-6c6f5ef3223b",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "51506e6c-9b14-446d-aa3e-dce90ff3f5a4"
        },
        "item": {
          "id": "eeaf3b3b-d53f-4e9f-8806-67b5e3cd7ab6",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "216b657c-6416-4e8d-a8f6-1384ec65057f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5592d106-a6a8-4178-bcdf-56da99de3235",
        "cursor": {
          "ref": "0be5c816-64b1-4154-b86c-15419821fc88",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "117930a3-9952-454a-9575-898c0b7a3cca"
        },
        "item": {
          "id": "5592d106-a6a8-4178-bcdf-56da99de3235",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "366010d3-b384-43ef-bf55-76fbd9706439",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87cb80a3-4342-42d5-a2a9-0cda4c7881a1",
        "cursor": {
          "ref": "4a9ad628-6d58-45c8-ac36-901f135582c8",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "018eee2d-7a24-4bb9-8429-f49bfe786d5b"
        },
        "item": {
          "id": "87cb80a3-4342-42d5-a2a9-0cda4c7881a1",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "f7583214-bce7-4c66-9f69-85c1d6ee65c8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afed6155-678b-42ab-9797-8db8abec8c2b",
        "cursor": {
          "ref": "92ce63b8-1344-45d4-bd73-23ccf752c69e",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "9385c5ef-9593-4c0b-9ef2-0d7058ed582c"
        },
        "item": {
          "id": "afed6155-678b-42ab-9797-8db8abec8c2b",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "253a456c-91a2-4434-9857-54315c23c40f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeaf6eee-550d-4309-a918-c49e0520a5c5",
        "cursor": {
          "ref": "8527fd42-9faa-42d7-80a1-6252539a3c72",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "e8a1b8a0-2a0f-417d-b0cc-3d676153460a"
        },
        "item": {
          "id": "eeaf6eee-550d-4309-a918-c49e0520a5c5",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ed9519f2-f50b-4881-9636-cae96f27ccf8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85e97d3e-08ab-4cd6-ad0b-dff384a3496b",
        "cursor": {
          "ref": "636bccc6-9728-4282-921e-9236c8a96e0b",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "95f91d4c-5f1a-4719-9933-e8b9e9b85e62"
        },
        "item": {
          "id": "85e97d3e-08ab-4cd6-ad0b-dff384a3496b",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "4da988f7-28b4-45be-92f7-62971d43a5dc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d73e425-429c-4a1f-a2d1-d16dad9158e8",
        "cursor": {
          "ref": "ea0a28ab-1e14-4661-b023-b7b95d0dffca",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "4a6c36af-9160-449c-9840-c27c567d6166"
        },
        "item": {
          "id": "0d73e425-429c-4a1f-a2d1-d16dad9158e8",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "0125304e-8a04-4c62-9701-664277000615",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52a625a6-23b9-414e-99e9-974a0a276604",
        "cursor": {
          "ref": "87d1d4e1-1e1a-4112-ba58-f0bd5662d947",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "969cc2d4-e919-472c-a173-48525963dd9c"
        },
        "item": {
          "id": "52a625a6-23b9-414e-99e9-974a0a276604",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "4accdcc3-9c9e-4496-8200-e0d8c937069d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d9892e3-152e-49ce-a145-92ee79894f70",
        "cursor": {
          "ref": "6c423e7c-6240-4df4-a7cd-43ae70664aae",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "2bef90f6-ef91-41d0-81c1-fd5a3daccf6b"
        },
        "item": {
          "id": "2d9892e3-152e-49ce-a145-92ee79894f70",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "6460cd7c-21cd-4735-ae66-da19abb50816",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d7e23f9-ea2a-443e-9974-ac7773fd3607",
        "cursor": {
          "ref": "f48c0503-d257-4e73-83b8-a7efdf727dd6",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "dc5b8258-99d3-4a27-b53e-34beb2c63a5d"
        },
        "item": {
          "id": "5d7e23f9-ea2a-443e-9974-ac7773fd3607",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "e29edaad-694c-40dd-ac27-e49e1ff7f681",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 187,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df8c5a33-100f-42a1-a123-5bc54c9e4031",
        "cursor": {
          "ref": "fd7c9f9c-aa2b-4054-99b2-94291ed4386a",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "93d0ed01-7e10-4e7f-9865-b28b5c0f5f11"
        },
        "item": {
          "id": "df8c5a33-100f-42a1-a123-5bc54c9e4031",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "220fed75-d5c6-408d-933f-64941533d45c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aad8a62c-9265-455d-ad8a-8eae85ec3945",
        "cursor": {
          "ref": "0669a701-ed2c-49d9-b006-ef838b0bcb94",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "98c33ba6-8225-44f2-b986-8935a444dd98"
        },
        "item": {
          "id": "aad8a62c-9265-455d-ad8a-8eae85ec3945",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "6beab43b-e06d-4a01-be29-50556d3ff90c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "709548bf-91d9-4605-b0b5-e5947eeaad45",
        "cursor": {
          "ref": "5c0622a4-777c-470a-81b5-581ad0b095a9",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "55f43a07-04e6-46cd-9a34-6b656f30123d"
        },
        "item": {
          "id": "709548bf-91d9-4605-b0b5-e5947eeaad45",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "63306100-2da8-47e9-9f47-8d44e3eb7411",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d092825-442b-4f75-96f5-4d3f44c57e9b",
        "cursor": {
          "ref": "c345a75f-c7ab-4101-a301-5f684bb2997a",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "54349acf-960d-4d03-bdf9-698529ba8fa6"
        },
        "item": {
          "id": "7d092825-442b-4f75-96f5-4d3f44c57e9b",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "3b8a0b4b-a6e1-412b-a757-757c5b824766",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79d9d9e6-69e4-407f-be10-4f86721ffe64",
        "cursor": {
          "ref": "4dea62c2-76c6-4043-8f93-9999353f036e",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "af3343f9-9a86-49a2-9631-2200d6185fb7"
        },
        "item": {
          "id": "79d9d9e6-69e4-407f-be10-4f86721ffe64",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "3e5a76a5-46b3-4ff5-b796-5911f4faa560",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12725a39-ae06-43c5-afb9-5732d5a29245",
        "cursor": {
          "ref": "6aa1346b-e8a2-4a6d-954c-3bc7de623191",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "0ea969b1-e62b-4714-ab76-53fb2b7cb645"
        },
        "item": {
          "id": "12725a39-ae06-43c5-afb9-5732d5a29245",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "b17845ef-3a3f-4291-a7d8-a0c7631357e3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39a1dda8-f1b3-4b01-8061-395ed9cc76eb",
        "cursor": {
          "ref": "319d90bb-773d-4024-8885-0815eaff159f",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "70618e63-1b93-4cb6-8f31-9701b14fadd3"
        },
        "item": {
          "id": "39a1dda8-f1b3-4b01-8061-395ed9cc76eb",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "89707718-5958-4e04-835c-2551873521b3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f1db4de-65dc-40cd-a3c2-44febf4efdf9",
        "cursor": {
          "ref": "98015964-cfda-4883-9f28-8db831b252be",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "a2cd8260-6db1-48de-95a5-f548e483536c"
        },
        "item": {
          "id": "7f1db4de-65dc-40cd-a3c2-44febf4efdf9",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "b877c910-ec9a-4413-af8a-214f327b8b48",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "468faa55-520e-407f-9e7d-ef667ec71708",
        "cursor": {
          "ref": "97fbadf2-5874-4230-a8d9-834a68182e10",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "22cda712-1488-40bd-9599-2ac860e92ebe"
        },
        "item": {
          "id": "468faa55-520e-407f-9e7d-ef667ec71708",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "96582854-c46b-4b9f-94cb-f34199f9f460",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99f4d3ce-8215-49e5-96db-9df79103bcc1",
        "cursor": {
          "ref": "74f0fe3a-244d-4ac2-a1bf-54914cc6b5d8",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "d8fb4c05-4f5b-4d69-a75d-705278067843"
        },
        "item": {
          "id": "99f4d3ce-8215-49e5-96db-9df79103bcc1",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "ea8cb6e0-b6c3-414a-9caf-5a0fde5da8ab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af6853e6-536b-498e-b96b-1e1b47640aea",
        "cursor": {
          "ref": "7f350dec-11a9-4102-81a7-c324557d385c",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "c054c07a-c7d9-45c3-acee-abf6830a72d1"
        },
        "item": {
          "id": "af6853e6-536b-498e-b96b-1e1b47640aea",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "6c3116e8-d478-43a3-9809-d7e95860bf42",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ef441a1-de8f-4578-85d1-77f107ce939c",
        "cursor": {
          "ref": "95642b0b-eaa6-412b-9de0-5fddbe8f0287",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "4d622910-4dd8-48cb-b4e6-2b704e4bbdb0"
        },
        "item": {
          "id": "2ef441a1-de8f-4578-85d1-77f107ce939c",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "07bb0ea2-32ec-46b9-bed1-7437cc1c968b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6df8f507-795d-4759-939a-c2a31a885871",
        "cursor": {
          "ref": "be69e7b1-1ae5-4616-8060-0b6acf820600",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "5a5194c0-6f7c-4e87-ba15-83f5048cdcdf"
        },
        "item": {
          "id": "6df8f507-795d-4759-939a-c2a31a885871",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "33e1de5e-ffcf-4e9f-9a07-036a32b7994e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c9ef03e-2a93-46dc-a847-725f6da261e8",
        "cursor": {
          "ref": "4de312d0-7c89-4615-8977-91e43c35597d",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "14c3fde8-704a-4ad5-b4e1-8b2472bb4270"
        },
        "item": {
          "id": "3c9ef03e-2a93-46dc-a847-725f6da261e8",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "d75c175c-4072-4983-8fbf-ed988d13476f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "762f6be5-8cf8-4816-8ff9-fac54d55cac9",
        "cursor": {
          "ref": "4268aad2-e9b8-422f-9397-d6b625a8262a",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "15d1acc1-eba5-4710-85e5-2fe28b022c29"
        },
        "item": {
          "id": "762f6be5-8cf8-4816-8ff9-fac54d55cac9",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "cfb04c39-2468-49be-9424-acfbf98e52a7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9842aee-ab10-45a1-9807-be04d05fa415",
        "cursor": {
          "ref": "96ec36df-2c5f-4fba-a621-24a7274c8132",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "ccee5574-dd94-47e0-86bf-ec8c7adeceac"
        },
        "item": {
          "id": "a9842aee-ab10-45a1-9807-be04d05fa415",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "333668e5-b210-4a84-a1fb-d782d41a0c74",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3c38636-7583-48f8-8c94-e48fdfe987e3",
        "cursor": {
          "ref": "f6f5b727-1313-4152-bb6e-2d87aa577135",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "c0682a3f-4744-499f-ae86-3be4333adf97"
        },
        "item": {
          "id": "f3c38636-7583-48f8-8c94-e48fdfe987e3",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "df28b4dd-8b9e-483d-8597-7b143ce0d0dd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84e9898b-47ac-4cfc-8f0b-1597afef48c7",
        "cursor": {
          "ref": "8efdcfa3-7a36-4505-8389-da041d0ef4b7",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "5df280e5-dfc8-4cc0-b4d4-7e53bca93166"
        },
        "item": {
          "id": "84e9898b-47ac-4cfc-8f0b-1597afef48c7",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "57454055-4fd3-4732-8616-573aa1b8c2e2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d121ae0c-a6b4-480c-a078-a4844ba71011",
        "cursor": {
          "ref": "792a4a50-df1b-48a9-abb6-6aa080865ce9",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "2cbcb26c-80ea-488e-ab84-d4a9482b3231"
        },
        "item": {
          "id": "d121ae0c-a6b4-480c-a078-a4844ba71011",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "09eafdd8-70ab-4c22-82d5-d6554a24daee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78d6da8e-d365-4c2d-81d9-d5ad16a6f6ea",
        "cursor": {
          "ref": "6a3095ca-7428-4c92-8641-16f1a740d20d",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "c71aeec9-77c3-40a6-a4fd-b3da9662d261"
        },
        "item": {
          "id": "78d6da8e-d365-4c2d-81d9-d5ad16a6f6ea",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "73470817-38d2-430e-a6cd-546d2d46b93c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f600caeb-6de7-4294-a9f4-08f75da1b843",
        "cursor": {
          "ref": "4d2cad38-20a1-4a9d-91df-5531dd39d83a",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "4cec5eec-d9ed-4a5c-bf96-52367d692fb6"
        },
        "item": {
          "id": "f600caeb-6de7-4294-a9f4-08f75da1b843",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "e9e8b752-6dd9-45d1-b614-c69a5d703ba5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3d3681c-24af-4d59-99f4-bc35cb34a1b1",
        "cursor": {
          "ref": "0bf33c57-64e7-4feb-90fa-006f8f29c912",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "0920d003-ed76-4242-bbcb-7443b55d2093"
        },
        "item": {
          "id": "e3d3681c-24af-4d59-99f4-bc35cb34a1b1",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "6c8cf104-78dc-4833-a3c0-2cdc91332519",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96f374d4-ea6b-4471-882c-633c33a5df5b",
        "cursor": {
          "ref": "387dacb5-4364-4e15-a4b2-6959566aaceb",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "297a0d5d-7db6-4283-a5c1-5608308f2ca3"
        },
        "item": {
          "id": "96f374d4-ea6b-4471-882c-633c33a5df5b",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "11712227-385c-40b9-a83e-4c2ee283653f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23143ef1-6bd5-4810-8014-4f5f3ed4cdee",
        "cursor": {
          "ref": "b1ae0c7a-7a08-4756-a54b-2dcfea6e1bcb",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "0c3fa302-1d84-4440-9478-0abc30162138"
        },
        "item": {
          "id": "23143ef1-6bd5-4810-8014-4f5f3ed4cdee",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "1b0d5793-b2ae-4253-b614-033f9123535a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4cd9191-eb5c-4561-a256-5b1cb8f616a1",
        "cursor": {
          "ref": "6b7fc2e1-e113-4382-a24f-909b29dc5026",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "b9da81bc-b567-4075-a7ff-150593d4d13c"
        },
        "item": {
          "id": "e4cd9191-eb5c-4561-a256-5b1cb8f616a1",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "166bce66-18f0-4427-ae92-dc2019e667f5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0edfb8d1-5e63-48a5-91e7-3f5f10ac07d6",
        "cursor": {
          "ref": "8d9bd5f6-25ba-4f9c-8da4-e56852077d20",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "cb505733-068f-4e8c-8cb5-3f14636b6e6f"
        },
        "item": {
          "id": "0edfb8d1-5e63-48a5-91e7-3f5f10ac07d6",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "b299e040-5771-43c9-b6a7-4a9c4893dbef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b742ec5-2f14-4cfa-88d6-05562c1c835b",
        "cursor": {
          "ref": "f67e818f-db70-401c-b2f9-18127802b776",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "7f434140-e435-4dfd-b9c0-ce5ee579abfc"
        },
        "item": {
          "id": "6b742ec5-2f14-4cfa-88d6-05562c1c835b",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "2cf45005-d194-4baa-9df5-09b121633f79",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c37c0257-6e4a-4fa3-a6f4-82a4d9b56c07",
        "cursor": {
          "ref": "1f3ebb07-67b8-438e-8ffa-0229dfe51130",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "aeb1c552-d35e-4a27-8a95-f8059de95205"
        },
        "item": {
          "id": "c37c0257-6e4a-4fa3-a6f4-82a4d9b56c07",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "fd3dade9-07e3-4e67-b506-c157e926dab2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e5b34fd-f319-402b-b91b-d0d511f6db4c",
        "cursor": {
          "ref": "43bd3131-0de3-4e50-80da-13a75054a896",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "13d63432-b8e9-4829-834b-77195490fba0"
        },
        "item": {
          "id": "1e5b34fd-f319-402b-b91b-d0d511f6db4c",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "4660fcd3-a2bb-4e2a-ac51-8b34a399a3dd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb7de8dc-40fb-406f-a1e9-d7965fafadde",
        "cursor": {
          "ref": "f31dd5c6-95af-44ef-a3c8-8bb4fc85fc26",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "9aa27748-cc4a-4ca4-a99e-1947bba7c73f"
        },
        "item": {
          "id": "cb7de8dc-40fb-406f-a1e9-d7965fafadde",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "79812e85-e74b-4a2c-9bc0-8f3c38419373",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3433ca2-2c6e-4410-8295-85feb1fe307b",
        "cursor": {
          "ref": "721f81d2-68b8-497e-a17e-12439b308b7e",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "5e19e158-2b46-4cc9-a301-516aa1f58868"
        },
        "item": {
          "id": "e3433ca2-2c6e-4410-8295-85feb1fe307b",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "2e7655a2-f8aa-4d01-abc4-f84d120b7201",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ded1840b-9761-46f1-8331-869fef19b21c",
        "cursor": {
          "ref": "f2e37e5f-a41a-4465-83ee-d39307401d73",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "81412aa7-fff9-493d-8243-046cb4b88d20"
        },
        "item": {
          "id": "ded1840b-9761-46f1-8331-869fef19b21c",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "f9abcd64-9478-4358-8860-dc3def37ac7c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c293d3cc-64fc-4008-925c-de51230f8001",
        "cursor": {
          "ref": "fa643be2-f8eb-48c6-81bd-94324901976d",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "fefdf366-f2fa-42cc-88fb-6d6622cc9426"
        },
        "item": {
          "id": "c293d3cc-64fc-4008-925c-de51230f8001",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "dfad905d-157c-485c-8c4a-bbcddf0cb1b8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8402fb0c-37ed-494d-949e-c951211e34b4",
        "cursor": {
          "ref": "34656652-5334-4ff5-8a74-5fa762dca832",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "5adf6afa-1ee0-4011-a3f7-971e4d8142f5"
        },
        "item": {
          "id": "8402fb0c-37ed-494d-949e-c951211e34b4",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "45486aec-cd06-48e5-9be1-9f34831e0001",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9944d77c-8939-49f1-8c80-b9eb9c139ae3",
        "cursor": {
          "ref": "d49b8ceb-104b-40c3-9c12-5bcc59a3009f",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "4913f58a-6a40-4e54-9cb9-67ffbfe1cd7b"
        },
        "item": {
          "id": "9944d77c-8939-49f1-8c80-b9eb9c139ae3",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "1d949454-a899-49f0-b7c5-f0ecc8ab49c3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cea9c09-045b-4dc4-84cb-45e04c98b218",
        "cursor": {
          "ref": "53dfd1d6-0dd0-46a6-8516-efd8b8d3bd29",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "4ee8ddd5-4b68-46ec-9941-9c932f9f6d3b"
        },
        "item": {
          "id": "4cea9c09-045b-4dc4-84cb-45e04c98b218",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "4db7cacb-c1c0-4b80-a060-5e9d1ce922c6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e8d7dbe-538c-49ad-81ac-d3d55ba04f54",
        "cursor": {
          "ref": "67905532-2422-487e-899c-03634c2766be",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "bd35cdca-0152-4757-81ac-e6fe92c91ddb"
        },
        "item": {
          "id": "2e8d7dbe-538c-49ad-81ac-d3d55ba04f54",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "d79b063b-101b-4d39-bec4-a6f68e8bfb7e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b87fd37-9099-4df6-8fd7-8f3aafcee701",
        "cursor": {
          "ref": "6a67d882-db48-4330-8323-65ba95164d3e",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "16f3dcb7-64d4-45ab-bf3c-5f31f00a42da"
        },
        "item": {
          "id": "9b87fd37-9099-4df6-8fd7-8f3aafcee701",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "16107359-f6d9-4888-8ba0-0b6ce96f2820",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37506e73-7dfb-4be9-b7f9-197552557599",
        "cursor": {
          "ref": "80852e28-7977-4700-9bbd-583910d7e821",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "7552a743-62e9-44dc-b6ed-74f38a520fc9"
        },
        "item": {
          "id": "37506e73-7dfb-4be9-b7f9-197552557599",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "561fe342-ac7a-4e36-aba6-9a331d050cc2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6593065a-0898-44de-bd2e-a090532a5698",
        "cursor": {
          "ref": "3cdf0c96-7583-441a-b715-b2df902666e5",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "03ff9e6e-0ab3-44c9-bdb0-f8e50ffc7967"
        },
        "item": {
          "id": "6593065a-0898-44de-bd2e-a090532a5698",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "83dfa45e-e698-46c7-bb8f-7d922ec6da06",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dc26510-c5f5-4b97-8d7a-61d6e9c32ebc",
        "cursor": {
          "ref": "2c43abfa-8fa2-437a-b113-ecd386656921",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "22092375-cd43-4700-88b5-72e53d29e2fa"
        },
        "item": {
          "id": "3dc26510-c5f5-4b97-8d7a-61d6e9c32ebc",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "7c6281ef-4085-41db-9fb7-e6c21370cd53",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25d0313c-f115-4ca9-9d9d-c3e9630f667d",
        "cursor": {
          "ref": "ca93666d-cab0-4fa5-a4f9-c906d03f7759",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "619888b2-8d6b-4fc5-b0e2-95010120b7bb"
        },
        "item": {
          "id": "25d0313c-f115-4ca9-9d9d-c3e9630f667d",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "441f6b9d-b3c7-4a89-8efb-8d16fe796875",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "7ff60032-c71b-49a8-a1b4-0590981ddabc",
        "cursor": {
          "ref": "c4d769f5-cbec-4ae6-a00c-07a859f7749d",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "205badfb-696d-4deb-92e3-5ec682f0eef9"
        },
        "item": {
          "id": "7ff60032-c71b-49a8-a1b4-0590981ddabc",
          "name": "credentials_verify"
        },
        "response": {
          "id": "45d15662-f2cb-41d8-b01c-bf5b9123d868",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "08ef4214-f732-48fa-a5ed-aad93588d0c5",
        "cursor": {
          "ref": "2430c73a-ff5c-44d8-8d70-ff6ce84ded07",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "13444ff2-3679-4076-9c60-7f7c8dac718c"
        },
        "item": {
          "id": "08ef4214-f732-48fa-a5ed-aad93588d0c5",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "ca456564-7f93-452e-9d8f-e131b64d98bf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "efb545f4-e971-4319-9092-c8b70cd3e19c",
        "cursor": {
          "ref": "8b4a330e-9774-4f74-b340-6b15bbcffbac",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "99981d83-95d3-44b8-852a-f8c4ab13c480"
        },
        "item": {
          "id": "efb545f4-e971-4319-9092-c8b70cd3e19c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "487d4a4f-ab05-4243-abcf-16c9b43a6535",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efb545f4-e971-4319-9092-c8b70cd3e19c",
        "cursor": {
          "ref": "8b4a330e-9774-4f74-b340-6b15bbcffbac",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "99981d83-95d3-44b8-852a-f8c4ab13c480"
        },
        "item": {
          "id": "efb545f4-e971-4319-9092-c8b70cd3e19c",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "487d4a4f-ab05-4243-abcf-16c9b43a6535",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b83b2e8d-89b4-4674-b357-4560b3f44867",
        "cursor": {
          "ref": "4dc8ebb9-3c73-4a87-a27f-88e71ccafb01",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "b49f8ac8-9a5f-4076-ab21-489362a7262d"
        },
        "item": {
          "id": "b83b2e8d-89b4-4674-b357-4560b3f44867",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "0f4cbeae-4e6d-4c0f-a89f-c0cd3bdb6486",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e80a3d0b-f0c4-4d30-a7cc-e02874c27f89",
        "cursor": {
          "ref": "6583aea5-4a2b-4163-8245-a65fe5acc4e6",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "e99062ab-970c-42e1-9dae-ad37336cb061"
        },
        "item": {
          "id": "e80a3d0b-f0c4-4d30-a7cc-e02874c27f89",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "f478bcfb-3065-4e33-b08c-934caea638a5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}