{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "eaa80917-b3c5-427c-a910-ecc58b3304ce",
        "name": "Clear Cache",
        "item": [
          {
            "id": "6768700c-13c6-4554-814d-3e70b52f726c",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0802211c-d84d-42da-888e-2bfda40a25e6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b5b69e6d-68bc-498e-ad61-17c40cfab89f"
                }
              }
            ]
          },
          {
            "id": "806b4807-d95f-4e95-862d-f567bf38cedb",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d664bce3-4ef3-47d5-ac94-bd4c5fdde27b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "95a938a1-e2c5-4565-b662-79b1b3edebe6"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "7bee5ce1-d60e-480f-a6ff-4c00f465758e",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "bab37dc2-2f1a-4e6b-9ffb-91c7114e1790",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6442e348-271a-4e21-b00f-6fb948440fa5",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f8c7757b-1945-4663-b2ed-77bcbff5587a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7e07f403-2ea8-4247-8727-90040eae4fa1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "df298412-f2d3-4598-b45b-ac957cde5b54",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ed4dc3d3-eedb-475e-adc1-d1295d028aaf"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "db725a7b-4993-49ba-be0f-031fe8bb24ee",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0a1a5478-31cb-460c-acfc-99d288aba495"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ea381629-7458-4ad9-a9ff-a05581b21782",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "452af6f5-b5b8-4caa-87a5-7dfe7744f2c5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "402c50e9-f218-44be-801e-616df68a6f95",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8ada97b3-70a2-458e-9f37-f9cf87d8dffc"
            }
          }
        ]
      },
      {
        "id": "8b7c2232-f152-4820-81b4-6af77497c92c",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "ba0e0ce9-17a5-4116-9cbc-9bd9b2180375",
            "name": "Negative Testing",
            "item": [
              {
                "id": "aff1a59f-8dc1-41b9-b33f-900dd8c90218",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "44a3fc43-fb9a-4dbb-acfb-6e4bf898f918",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ab3bea7-86ea-4574-a282-e0ce4de82280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eb64a4aa-e552-441c-af56-101b0c6a97c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae5ada73-c46c-4c99-abec-59c51838d9d7",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd6846f5-6f3d-4af3-acd1-54a6ef5b75ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b30da3ff-618d-4816-b24d-bfc0d672cbd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2ce96fd-e9a0-4ae2-b56a-e9dc328e7ea6",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41d0e63c-f320-43b7-8c1d-c9fdc369043e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d6d10063-474c-4cc4-986d-bcd4f7b000cf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "55328dd9-5882-468f-8058-f20b8efff8df",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1c80d420-a063-4d5e-beb9-8b36731dbb10",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9f81069-2fcd-419b-919e-8d1088527569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7d87e042-5eed-4ce3-86e6-e6cda6ce4f4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78936e8e-4dbd-4ba4-b363-29545b91e914",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee77831b-2655-4743-98fb-cac0d70e78e3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1e7cbe78-6e20-437d-b08b-259a6588266f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f6f2607d-a586-4175-9493-5212cba24a16",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "92c9d366-b887-46da-9ed7-d6c09b7cde8b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "477a368a-43bd-444e-98d1-e66301d1a98e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b9f9945a-b453-4d0d-85e6-fb0a4b959b46",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "e0c46423-43d2-46a9-b468-eb5cbee6818d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b142763b-785d-4192-b873-d4d383d3904c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9dfc7517-6ca8-4b76-a007-0ebdac61bdc4"
            }
          }
        ]
      },
      {
        "id": "342a4646-12e9-4e0d-b47f-bfaf9891f5b0",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "e1944ccb-bb5f-4c6b-92b8-3b86332ca036",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a82b450f-0151-422b-a9ea-91a9f04219ef",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "de6c0401-2525-4b80-b658-5afffb0c7f74",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "400f0b03-585c-4984-a555-dea3a52bcefe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b4402a1-a4ab-45d9-ab6d-e1ad1d4643f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0364c6a-94b3-499c-8710-ae328ee97bd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e17e1743-957d-4083-948a-74b21168a34f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd015657-9003-4048-ac5d-23720552e434",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d63adaf-8231-4d64-ba3f-c8480dfefe94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f686f1e-48cf-477f-b1d3-64f6313d7e0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d249fc35-94fc-4d5a-9c63-877f62f717ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "78549b1d-afb3-4d77-bb2d-e45f76a7c3a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42fc651c-0929-413a-8386-4b6c4c3739e9",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5361d8f0-e275-49a2-9ea3-4966c9b66661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f47b8a7a-459c-42fc-b820-3c105274cd79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "796dce80-cf6e-46e8-9e1c-24fa0f56a354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e6273b26-097e-4b9d-b841-ce3a282c1194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fceb22fd-8fbb-4513-8b53-5aa0031dd544",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4092c763-9833-4cdc-82a3-0ae1cba735b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e7487fb-d9af-4404-9969-af3d904aac94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1577adf4-c787-4349-a30a-2ecf073c25ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b4ed5459-0456-4553-9bc1-280c530f2e60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3e6cdeb-43b1-48bb-81e9-970b3db0f098",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "738ccaaf-501a-47ee-85f7-c4f640ffeed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a75cf25-e76e-4d20-ba3b-933a0995f80b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4db7267-dd0b-4b45-aba0-132de4c9b2e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1c8f13db-b232-4654-8fb5-7721ebb1c598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b87fc6f-c4ee-464e-9c48-a28f5e058e8f",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ca4e7d8-1590-4859-8f44-d5b98b0e35d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7946cf25-772e-4204-9e5d-9b3158e4018c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a790e64c-89a0-43bf-afa7-38a7878faaf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5fdb1dd7-b4c3-4560-a4d9-2b096d76da7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7ab46d6-28bf-470b-9263-c59926cc2b28",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3716ba7-5fc3-46f9-b3fb-b3e6849b9f3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3520d7e9-db88-45f5-831e-2cb8aeb98234"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c5ecddb-6d67-498b-9414-2857b0c3f7ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2d3482ae-144e-46dc-826b-a8522693fbf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a4c9356-2a02-434c-847b-54388f1e4e48",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9905a215-69b4-4493-af44-87506c582266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cf2ebfd-0cc1-441b-b1f4-a6b1d0c7e179"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "562dbfbd-7b17-4e59-a3da-ff0d78e073f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "272056b8-8e65-4fd8-8d54-7bba3a3d26af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6346bb04-bfea-4a8a-9f59-17c8c9999ee1",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aee11a37-62ad-4bd6-91a2-73de363b0373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc868ac6-a210-4d35-8ba3-fabb93fb31e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6638fff4-8732-404e-9da3-3b98e40b1abd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "342eb493-0223-4f3e-9725-65106020eb69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb7b4a5e-1378-4b41-bd0b-d9bf4f3d70e3",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "150f9f93-1786-4c3a-ae5c-dd541031da73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3f621c5-32a4-458b-829a-4e0deabf3926"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4303c3ad-c0ab-4836-96ec-adbcefc29952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "29eb6399-6b28-41d3-88d0-e3b804758789"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e762adc-4915-4484-8537-828032aab185",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06224fdc-8f5c-4cde-9544-aad234c45de1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13687ca6-5086-4982-acbb-b1ce6a4bc6a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eab88bb-4c40-4e95-b28e-8faae52ef861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b3baa7b9-df20-4b3e-b6ad-917fa8b91e26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfc3e91d-d8a9-41a2-bf2b-0efaa56a7c31",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bbd4d6c-324d-4ac3-95d1-5e205ae13977",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5128194c-1f64-4238-80bd-3936c1c3d90e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "495c2c11-eeff-4b4a-9af9-8bae781bc66d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "320c6757-5d83-4eac-9dc4-17ffa44c9f21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b91680e-e926-4609-8c18-912c9b885fee",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4edb84eb-1d20-4b0e-921a-586afe8c618a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a95732a-4bd6-4033-87e3-db42d1a984bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "207926df-f0dd-4a8a-ad74-8299df6689e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6f5ad093-2dee-403b-8a84-a0c25c9e4c80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "274cfd65-275b-4fe4-ab66-2b053b546db7",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9971834-9762-4dbc-a10a-ad90a67f2527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48bd42d2-2937-4fd5-81e6-1e8ab9c5824a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d76d0ca5-b5a9-4218-8955-327834217de4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7c4340c6-e607-49e4-b64a-2745fedcec8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81434cbc-91b2-409a-a65f-a8c4acbebe97",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19c0292f-c7cf-4db1-af4c-e8793773ffdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29b697c5-ded4-420b-bbc2-55f24318a7fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1f23fa6-5035-40a8-99cb-cfa4e9d865ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "749085a0-a68a-476c-a6f5-8d93d3c9dde9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e1bdb87-2142-4cba-934e-325522bc48b4",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57016c97-7a76-4ebe-91e8-69ba04ab6853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab9c6632-7e4c-4621-a286-c083ecd713db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a64826c6-e14f-4cef-bf62-cdb06e66967e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f2b06607-12d0-4c01-b0ca-25d9b132e911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50855018-6759-4c93-bdd4-7fd0f08c1342",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ac5631b-9559-4ce1-9796-93ac976690e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64b7a21e-275d-45fc-bb0b-68776054ff04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bb2c505-2f95-464f-9136-cd294ab2593f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "02b46519-37b3-4120-a54a-1e6462bab4e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47048320-1aed-4e87-a02e-8729b1f80fab",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b9cd0df-9e9b-4dbe-bf5e-ff9af9bb4340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21eb4893-b26e-402f-bf9d-7827e5de9f68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f228deec-e95c-4d0d-8ba6-80ebb36bb3fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "30c85ca4-ea70-4cca-ac14-40e8528bb695"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a058e5c-fedb-44b9-accc-624a84d2c999",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee2cc2ec-1aa8-45a3-85a7-b81c52f7ff74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3cff95e-4bb3-4850-8516-714efcdb8b07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6417504d-049d-49cf-96cb-51208eb8c674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3061833-d31f-4953-bd90-894c037242dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efc6f281-2849-46b9-bff8-9f9bdd2d8b72",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf0f962d-d1d5-4a22-9d11-fdb25fdb9687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0aa82091-b0a0-4403-bacd-306fb0b3f865"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3561fafa-cb51-4e10-9769-eb7589ebd19e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "27275a6b-d6ce-4c7f-8afd-d3688970cb6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3bcca95-82bc-4165-b333-e72f5d347de9",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b187cbc-9d09-4f14-a543-89d7d6c0624b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec6b1cdb-8739-4999-8fc4-571b85a7fd3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0ea2ee5-f042-4ad6-8b5e-a2ace7d10ba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4eacfb17-bb79-4fb2-8c9b-9c0daa3d50ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a48761c-d1ad-48ca-937f-67a96d92fd7b",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1afeef7a-2686-4f5b-8220-f135a8a381a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c76aaba-33e8-4c70-b113-31f79496b2dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d284ddd0-04c5-43db-a835-ebffa8eb160b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e7c72cd-2260-43dd-87d4-4c55471e94a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54254f6d-531c-4f06-9bfe-2976e346ebdc",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecca7860-d818-496c-afe9-af748f9dbbd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f50a5b8-e2e8-49da-b2e8-eeaea5a24545"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea2a760a-280e-4a71-b710-c54e1b16cb82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ecb131f9-a7f3-4f70-87b0-92962a6f59e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edaf0896-7079-4247-a18b-9f98b90c45e4",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1119c06-180e-4c4f-b791-6ac3958ac1ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d45196bf-d10d-4cb2-b30b-e943bab334f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74838f6c-bb07-4d92-9b22-ab76ce0116f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd680f58-f2b3-4a1e-a324-125b3f2145a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2de41429-d796-440a-a6c3-11332ba02429",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40f91aa9-aa75-4e38-8dba-98dbe2a6e335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04ac63fa-002d-4e98-a062-92f2aae255b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "672dc323-1426-42e3-8479-42f8fde36c47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5611ff9a-35c7-45f5-864d-2be91a34926b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c93545d5-7bc6-4e5d-8b03-2acac217590c",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03f96316-cf09-46b9-a3ba-7e62dfc4ce95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f44bf7c-ee52-4784-92c6-e2dc28b41a2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "077e571d-d6f6-465a-af28-1e8359062923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0bb2efbe-ea45-445c-8038-3a823c303292"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbc58652-49a2-4b71-b6b9-b03feeb41c28",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2f14d40-0b34-4bc1-bd5b-c11b4f78b82f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1602f64-029b-4f5e-ac3f-2e5a53bf34cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "122da487-8815-49f6-9202-fe844f35e157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba207ad2-5bf6-48fc-86a4-d93c37e3872a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01217755-18c6-4fb3-9771-5b6bfda1f98e",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3efa9dff-65c1-4580-832d-832184a8a3d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d67bdebf-4408-45d9-8d52-ea90f5428e8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f18a435-58c0-4f24-801a-e781ca0950eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "de91371a-b40b-4c01-bdc3-baee90c39df7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c54bd94-9360-471b-ab95-0ccd59f89d56",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c615d17-4a3d-41e8-bf49-1316624beac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebcdcdeb-4c57-499b-8742-60094dc9aea8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3772cf7-3fb2-4381-8279-47e07c548faf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "10b811e1-1e1d-4a15-a7db-8e028705dcf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32a9bf81-7c86-4553-b71b-ba97bcf58cbd",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d704e17-267c-40b9-b433-a90f65e6d63e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39c030a6-2bdf-41f2-b124-5ae3735009e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8469dac7-aa52-467f-9179-60dd5cd56cab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "18a51861-18b9-455a-a174-4352b0ca4888"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29697108-57d7-4a67-97b5-402ba01f01eb",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65bf60c9-637f-41d0-8c5d-973658b50ab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f87e48cd-40eb-4845-9406-38b7105e2503"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bb15fc7-1e18-4313-85e6-7b88c1e063d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9188fc7-beed-440b-ab7a-c75c0af0f348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c268c3d9-8cea-4f4c-8004-4ef17d37b753",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5f4efc9-c8d7-489c-afdb-f24ba5c6ceb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92a9ce17-5252-41e2-92c3-7a97b12b91a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27969ab1-23e0-4bf3-a5da-981c1e60782f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "da50808d-1e4e-4160-ab64-3e997830050e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44204861-a7c6-420d-ace8-ddfb0d76191a",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b002f40-9768-468a-b5c7-177aea67540e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cbab2df-6cc5-4d6f-b634-943a7d1d7236"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "146608dd-69dd-415d-be7a-1dcc07a3b0f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7baf41b-0d36-4178-b1e4-4808e026d5bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b954056-ece5-4336-885a-bb987cc48fa1",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d91c4526-7add-4ac9-9b66-888d979b4241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9243f0d-c783-4405-9c6d-ac8e65aa4605"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5262e12-dff0-4d4c-bc64-8f6d76a1c82c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ea02215-da35-41a1-b45b-ee2c7668e671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6881b69-d1f6-4e9a-957d-4f062e376f13",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ec797b5-2afe-4bd9-b8a3-f6b85861ba0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48c7a342-fd7f-4195-bd28-cee9835b4368"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdf7d94b-8560-4d22-b4c2-e6e450612f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "7c26fe88-ab78-4f0c-961f-69902e7f4eef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0f52f32-4b1b-4496-a777-5ff4b4bbe502",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23a66abd-b177-49f2-817b-75b7ba9a5b93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d8f7ba77-9a20-4f68-bd16-18c4df466de8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43a5f2a6-2f2c-44d4-8e60-ca6c59c19750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "34c3d6b9-54ea-421f-b154-919c07e2ded0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e39f4ede-d831-49b8-822e-7816942ab81d",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3ffab4c-0b1b-4670-bb3e-cff39b01229c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1b13d8a-f7c7-41c4-9532-9991aaddf724"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5e83127-ed0d-46ee-b775-ec046380d70c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2ed20bef-882c-47b9-9a07-0adb1f96d9cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a64c326c-296c-4a4b-b43b-64137a0b0ca2",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "349bd41b-4007-42fe-a5ee-c3c3255ec9cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efb8a11d-13d3-48d6-8839-f4d8bc13ab3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e17ac5ad-2c0b-49a4-8556-d779cfdfb998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ab16207-257b-41a1-9b25-c0a9daad3f95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4a5fe5c-b4b6-4d56-86a4-02462df75fe1",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2074dfe-ff28-4384-b432-8d082953790c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35475024-2b26-4a1b-a32f-09c127193483"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbe9c948-8804-4019-999e-b06c4574d5ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e7e7159f-1c10-4218-81b7-b88e7990df40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c83b360-df9c-4041-98ca-f46c14b154fb",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b7ffba0-4fa3-4a5e-9133-1a23f148de22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51b3c1c1-0687-4119-8ad5-25eff4192b0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "651875fb-5f8a-4462-ae93-0b7a6e928562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "91c4897a-13d7-4941-ba01-6e8d81012f36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56b44279-b3ef-4581-985a-c98355962219",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aad99c2-1e94-47df-b750-ce5b0ade24d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36a75868-4d4b-400b-ac4f-8e8e5767f9ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "766af290-5c09-40c1-b7ab-62f2216abb46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2901c18e-0aaa-496a-95c6-5d24d36d147a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54555bd2-bd5e-4e8f-aadc-4ec5828de414",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50dfbdd0-2625-4a1d-a9c6-00290c8110f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "644dffbf-7e53-4ade-9748-f6e5ad7050df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b455e6c-d34e-4d19-b52f-3c5555a48e71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "bed377cd-a06e-4e0d-bc23-348947d12bc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a925b26-ce34-4add-bbec-e409fa3d15d3",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef428600-0de3-4f1f-b509-36d1a7b7fccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ddc2974-68c7-46de-beca-c55c6ca3e8db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1957dced-7af3-4429-be1b-217e82860525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "451d1159-5eb2-44f3-bda9-a5cf6c1950d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2c20cb3-daf9-4c8b-aaf2-9ef96c8c8915",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11e6f81b-276a-4e98-a661-091228dc0ac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9db5588-4290-41b9-8a7c-3c1a9f8777ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b828f384-0d47-4629-818f-6fd692ecdc4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "65760e92-ac39-4c61-9039-875587c658b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c69b8714-4ba3-4625-9676-8a59fac0aff1",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7955a78-fce0-44af-81b6-e0642de34a47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91db00de-5eb2-45c1-bb43-955d1f1013df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d66a8dc0-54c5-4e24-bbd5-dad98e1376ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4df9825-14cc-42f1-a0d9-75bb9080b7ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab10ef73-f4f0-461d-8fce-2bfcc9d86e2f",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9642ec34-4190-4343-b618-91708eff80fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6434f2bc-7f45-44a6-9a66-7479cbd38a10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a922ecd0-aa80-4da4-b2b3-26dc6ff52d8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2d09cf4-23ab-493c-b9c2-4094e4ddd4bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9609b55d-42d6-4f4d-839f-d6f19de4d320",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "331c8048-7842-4c59-ab32-20c9310a55e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "395f0a74-68ba-487b-b8fe-243590893d0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba5f244a-6ef0-41ed-ba4b-bf3c411c2fac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "64eee54d-cf4d-487e-b54e-deb0cc508bf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35803398-745c-48fa-a765-3ddf202c7418",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a4d77ab-8e55-4d74-bc63-6c9e2dea12d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdd8c557-1238-4fbd-a6e3-28b0b3c3dac7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ef05868-5010-4881-8c4b-b87be8c3b9f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee0f1f05-6e56-44cf-8f63-c1fe87ba004f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdd4a60e-f4fb-4869-9cf7-fb9051343f85",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc7d1d3b-03b7-4a7b-b683-e8676f890233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bcac23c-c4c8-4ba8-9473-0278188c6eff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d62b119-fc61-4c75-b304-4624c6c51c4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a58ce8b7-c121-4016-82bf-7ab43a285b2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c55816af-b11b-45ca-b744-5e2c6f61ed05",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9449425a-e458-4fa3-8aca-535799a5b1ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76598391-fe8c-4b02-88d2-552b42a26763"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f0e15b5-c5e0-462e-977c-78e1bb2a6dc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "15d36f65-1341-460d-967c-7ff0ba9e5ffc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22783fc2-12d4-4c8b-8a7d-d3851a944820",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08ada0df-7db3-4443-9c08-893f8d5c99b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cd1b94f-3371-412c-b867-05ab3f93813c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "299a7972-7e8d-49ea-9d6f-68d9455a71b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "549734d1-eea8-440d-99e6-fe1b1daac6c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24d3d9ee-fc6e-4e2c-8765-0cde5a25e031",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b06cbdd1-ef5d-42ba-8b12-000fcb0449e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db6be0e9-85f8-4d80-b204-5e15910585e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b07e1a18-9a6a-4f2f-9c70-61ceb0babecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e24376b5-738d-472f-95a8-ca09aaedb4a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a447afec-a92e-44f3-893f-c6ab8b3961f3",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3d4a6c9-231e-442c-a8b2-b2cee750edd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4950a2d8-e3c3-4a5c-b048-5a5a5f9cbbbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3c1a486-eec9-43ed-8f2d-5d05805d0489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "09eea44d-6905-44e8-95a6-b98077405654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ca274d6-ef82-4d48-b4c9-9193380a31e7",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "381cd0c3-5046-4e8d-9194-c9094e40af9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b38920a1-667a-4775-9450-d254550e7d49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13fc4a52-dbce-4dfc-a1e9-4805725c94a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "75c725a1-3537-4462-86ad-ee82e7ae8549"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d66ce387-2991-403f-8514-972455dfff3d",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8741297c-7863-44dd-bac7-8e2f3d643c38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2d1a54e-dce2-479b-8877-db19c48dc209"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c136e82-54d6-45e2-a9e1-295253698515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9834b02-33d1-4d54-8e73-e6af55c35e11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cd30ef9-7bb7-4122-8b93-b577329548e0",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a789bb8f-d9d8-4a98-9ef9-e368697c3ea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0272afed-6bb5-47ab-bcd1-c047f2969fc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "777d9287-b530-4f7c-8ec3-01a5bf9fd7d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "f4a331d0-72ab-49ed-9a54-af4f2ae5ab78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e3aee2f-07ef-4d29-a925-cfeb784ad765",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "598e7c70-93e7-4d0b-b7cf-960ac0a2b2bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66d234f5-076b-4e10-a5fe-6c727d46fffa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c16bbc4-3750-497f-a376-b01d77097f5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ff8c7b8-a09a-4dfd-81d6-7452453ff1d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "198912fa-644b-4b22-9f86-4cda38bea6a3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "142e8d4b-e0a7-45b8-9bf1-288e6dd50fc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "081d9ef5-daab-4e23-8f97-b14c59a36508"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e211674-4ed2-44f6-9ea2-a0f023a46f5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "835cbd75-804e-40f1-8e46-c32b16932762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2949ed1-9ce9-4102-bfc7-1815f97e0819",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7740302-cbe7-461a-9fd8-6e3e2c1bfac6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9dd4074-363f-41fd-a20f-06592d114065"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee22d1c0-855e-4d75-87ef-0981055c0b9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "28489c9e-5764-4a4b-8c36-1c60230379b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbbe496b-8528-4b7a-b92b-7e484573a45f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdb3ff1e-e2f1-40d0-a837-bd0e20a2e215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49ad7406-c178-4974-afed-6e2d8a0d351f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86bcd244-383e-4160-a794-358e24e213b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "98be3c55-136d-458f-903d-a5d87928e2d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a38c3c4-f88f-4d35-9c35-8d86be8f9d42",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5396cd76-d9a5-428d-bf16-809dd7b8dcf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dc21710-53ca-49ca-8708-e73cfe31869e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54dc198c-9798-4a2d-b7af-decad617bac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6082bb08-c240-4219-af13-aadc5af2a648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5886b89b-6952-425c-9841-3677a76f6d69",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a60b924b-a224-4e36-b932-61885c7e3778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42e551f8-e3b9-41d7-861f-3809b4d8c71a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc70e02a-ab62-4920-8703-c594aca62a73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "dda8e674-275f-4da8-9a75-6c321071b157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa885f2d-ee13-41b1-9d88-d7d92c2fab61",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01157f4b-e75a-4e3a-aeb1-b7b2b3500796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "572a0e27-1fc9-4915-8bee-d3953b879f04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9c9c21e-8833-4c5e-90df-05e734ac6461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5999cbf-ee6b-4f58-b20d-a2f66e7acea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70cd5b6a-fa5a-4ec2-93fe-545a1e6f34a4",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c513da31-d1b9-47d4-82d0-755cfaf3fb92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffa6362d-23df-4804-a823-f2f25a85e769"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "963ec335-d9bd-4536-a959-7c5bed7c003c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b02a8c7b-6833-457d-8071-6994cd1c164b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6f352a1-4d9f-4555-b811-3f2d6ccdad47",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f645ee5-fa73-4b5a-9778-db57b33f2ea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32e17b2a-2a24-4a74-aa9c-377b2ae0c2c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f16e9c43-2a60-4ad3-aed3-396efc2fde41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "336b2505-3002-4cdb-a086-67f4a60245fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ff4fec8-2014-4f43-8242-b9897b82ef38",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2a0dc56-c4de-41d2-a443-0976f4f075f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7c6ad8b-57d6-4307-bebb-8f9d6f96370e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b35cb81-a6ad-408d-9b56-ff5b79b44071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6212bb2c-d74b-459f-9ebd-f3b3e7f342ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cac6efad-a810-40d5-8bc5-6c0f0e6f1cee",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00d2089c-65d9-4ca5-bc61-e22955a96032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4c310aa-c078-4d9f-abca-12e5684da8e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65ad5e02-6126-4102-b4cf-d528046ed045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6b287c4d-ae06-4fb7-9000-eda6be690dcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97c39f67-eb46-440f-9818-fffd5ce9df61",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "157fb25a-04c0-4799-99a7-cdfb24c7ae37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4399e741-7d59-4be8-97d7-14e38cbceb3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0784d4f-0696-47be-bc75-940dfdb7f659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "02bbecac-f46a-4cf8-b5ee-523179fe5387"
                        }
                      }
                    ]
                  },
                  {
                    "id": "247445d9-9c45-4bda-897f-55bc3d126dd7",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaf662fd-de6b-45eb-b9fd-d1104f609445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38936136-a3cc-43bc-bd55-62cc8a2313a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb0799cf-2133-41ac-8622-397d1fad0449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "beddf461-c8b0-4004-980b-3c37c05567a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4a06916-a44a-4a70-bea3-f16f47ba56e9",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59aa5526-09e9-4575-8ffb-447ad7893855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52836f4d-d895-4c52-a873-15d07dc219c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "566a394b-da1b-410d-a540-0238b8c0a8d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2af94d30-c4d8-4e83-be26-8ebecd41fe13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b48a45f-b6d2-4029-9622-4e98256e87de",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90a18b75-6559-48c2-8db5-6f5c0bd975ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7eb333c5-e749-40ee-89c4-da5566a3cb64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b6f2587-5379-4cca-a42e-a728e4cd6052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9aae996f-9b56-4a72-884f-462066f6437f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53b592fa-77d3-4a89-a335-9ab1d620c785",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "944dd908-1b84-477a-8418-f37dec157516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "053664f8-0338-41a8-9abf-0f0f078429dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4352838-6c18-4c85-93a6-f40743efe173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "60e0e36b-eb62-4402-b997-a20272b34e51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fde2bc4-ae4f-4e3a-8ccd-1b7c724e58ad",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bde036f-8533-41ee-821e-86a559f031e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52c80bd4-1875-416c-9523-f9da659e32f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3ec8fd2-ae58-4d50-aa4d-e3216f77ba08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "32b9070b-6482-4cc4-b261-341bd26074f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25e6f0c4-2f10-4076-9ce5-69e83d1a7edf",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11e97a8c-e0c8-4911-807d-1a8840308053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79bdbde9-d93c-43ff-b04c-a8297ec73bfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b9a4615-7b28-46f4-99c2-797bfd9a2972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cbe2d91b-e0ef-4505-8c76-01c04cc8d6b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e21fbd0f-a7b9-4c3c-a5b4-b234407f6e27",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d19bfec8-7d0b-4f85-9ebe-749f289b98f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d61289b3-bdd9-4d60-8798-f231ea3f5827"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8535a89a-0e1a-4f34-a798-6052c7e712f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f2dd10b-674c-405f-8a41-deadb7576221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3363f7be-687b-4b2c-9ad3-b9bd8c8f710c",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f2e2727-170c-4f9b-818f-cf814892a83a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72275683-ce3d-405e-99a0-421b5aa89e65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5167b00e-0cda-47ee-b389-9a7f611b740d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a4a8b61-11a5-440e-bde7-2d445d1915a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e66f869-3053-4479-8b92-78fb5f0a9e7f",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2659a9f6-2992-4e9b-9d10-5c07c80b88cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c82c0037-d4ff-42cd-b0da-31b9556d7d06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ef0d363-0348-4711-a5cb-b855e1e172d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "35b31e0b-e521-4ddd-972d-a12963b5a573"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c870a00-e83a-4ae2-bd9e-1928febda369",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe1dfa56-b4b3-4991-876f-3b9af3d8572a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "472f17ef-92e9-49d1-87e4-0aae86049509"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "681e7cfb-62e6-4bc7-b0cd-79e8d71c5097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "191c6517-8db2-451a-8b5a-191a61f82ec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e171d79e-c3a6-4c8e-ad29-db084513fafd",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b539a4a8-79ec-46d8-ade4-72293c360e28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55349e5f-895e-4bf2-af2a-c2326b0ae42d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f36c5ce-0d5c-4d8d-8706-992014490d4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "415b4883-e558-48b3-a878-0b572accdada"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b169aef-afe8-49cf-99f1-521fd8b7bb4d",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "849828b6-662f-41af-b61e-cb549dd3ae6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afb34d7f-824a-40f3-85e0-2342e55be868"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49605d39-93bd-421e-a89f-ee1708e68da6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7eb5cee8-13ef-4f53-b840-ab691896241a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97a91802-64ce-416a-a2ab-0a0f02a310e9",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eaac59d-91b5-4998-9f62-4cfb308a74f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "689fab02-db0b-452b-ad69-7deb3a67259e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6993a02-f122-480b-9a35-90af33683dfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f95cf809-000f-4c48-8734-0d25166cab04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f744fc1d-6b93-4aa8-99cd-4f2ac31c9331",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77896c58-af38-48a0-97e9-a6d79586a922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a960b18-52b3-444b-bf76-4e11d7a6d0f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2754d061-dd1f-4873-80de-7d1511f01253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "050f53d4-c3d6-484a-83a0-fca51eaa0824"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2297200-a8a0-44ba-bcc3-a113665ddead",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8984a9b-e7ad-4440-8847-7ac32c6b35a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c0a97a4-0125-4d00-95e3-1c0a909f1b52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff2c00bb-1190-43af-b0ec-96f541dee909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "121c59b6-d814-455b-972a-cdc977a4d9e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a99daae-b5bf-4d04-98ae-c07b733d9f19",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81f67c98-f74c-4407-936d-19896a4ecaf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19cdede2-12b4-413b-98b9-eff18bf21a6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afea46ad-c329-4b04-a42c-f89f696736e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5a2eb2f-b8e9-4f03-a5ad-516587a2cb71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2fea52d-bf55-45a0-9ed4-c71bd2fb942f",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d49ded38-5713-4e0f-ae76-fa1cf5fa108f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47f3c8c9-b5d4-44f5-8184-26bd222207e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50ca0deb-77b0-47cb-a8c1-88dde753eec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0ffaa5e1-6953-4f5a-862c-2bc7c113abce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62f54bcd-7638-47d2-87f8-6e38c640839c",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1073e994-914e-46d9-8ee2-35e27f0f2d25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85bfe367-f4b9-41a5-9078-d4c9b5588499"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3bc6b3e-42cd-4be5-a899-fe61b93e47e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4d9466e8-5e48-4231-8738-bb0d3f25eb48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cc09cd5-86b3-4e95-94c3-9ad3b2d8202a",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed90aace-671b-4f20-ae0d-a72d2439d089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96b07d3e-196f-4fba-96b4-6b17da6d4220"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfe3ec1f-56e0-4e05-a364-1b84904aa40c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3d2351c-a865-4cdb-9cf8-1a98b0e66fe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f161ffa1-accd-4f8e-8f47-6984626a853e",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "439e46fd-8150-4a88-ab36-2c2bceab43be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ba87087-2596-4de0-9493-aae3ee46e70c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c539c7be-e72d-4b77-ad8f-4fba29b89b6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b1e28c2f-c56d-4041-a50b-b9ef98e3ccf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80571baa-ed53-4dd3-84df-ba55604fd9cc",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "090b1ccb-6ce1-494f-b3b1-818c1be1c4a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d1f2267-57ed-49a8-969d-a65f1fd264fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "197fdde3-1afc-4998-8d0f-c2fb8b5e5b33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c085af00-8380-4373-8c6c-a68d669b046a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc50cdbf-830e-43b5-b52a-641ca5969b49",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec4c2334-30e5-4a4b-8d70-2923da46275c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17b587fe-c462-45a1-91e2-bde251cf2559"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f682fc4a-2574-40c7-960e-e33756f6fa2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8454447a-4704-4170-bab5-1d299153179d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "977768f4-300c-4ad1-b0bf-fdfcb3504141",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "039edb2c-e50a-46fd-a3ca-810462fb41bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90c0a503-8e06-4bed-b78e-55549fd5b7e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b53e69e2-0cc7-432f-badb-f9517fad35ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "796cb331-2dcc-4bee-a805-4d6a1f187f74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e925317-c6b4-4f28-9e9c-df2be449e032",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84135aaf-96e5-46b8-ba83-92ba0060ce10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "75bfe8e6-0c54-4abb-b061-62812ad44c83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adb1b244-c47e-427a-b4a3-065a9c07852e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a456687b-bc34-4d29-8463-9d83bcf2f68f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "21dbda0f-2a6d-4b25-8886-99234276e53c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e03c7c7a-27e7-437b-a997-dad932b85398",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63d50238-b841-4ca5-b386-c41a62d0fdf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "62815cb5-4600-4759-af53-6e2200ad9531"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c05904cd-e350-4f2f-aa15-4f27b5bdb740",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "70cbd81f-6a33-491f-aae3-d46ef8c85a4b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "35712a1b-2657-41bc-84b8-d56ea7c9ca13",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0f0c58f9-a5d7-4e91-bd4e-433106c5a349"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ba203184-b363-4c75-93c2-10c3facc40ab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "339e14a9-fb52-439b-8b71-8be3a6ec5e91"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6fe3e7bf-30f9-47c0-bd24-ae42210815df",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ff217e01-cd4c-493c-a041-1811a8027a00"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "582f9da4-abf5-40fb-a88f-57f06cc283e5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d2b94538-7251-4311-96aa-f72f1914b268"
                }
              }
            ]
          },
          {
            "id": "da9d1c15-e946-4634-8073-e34710b632ab",
            "name": "Positive Testing",
            "item": [
              {
                "id": "77dbe1c7-4095-42b1-9ae4-4de3800473f8",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "2ec6c767-b2d1-4516-9897-295532b32bd2",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78ddcd67-0ec6-47bf-bf22-b4816d6dbd19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "cf49e8f4-eae7-4d0d-aa7b-30be4cae6f0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5176e7c0-91a0-4e6a-80f5-ec078f5eb784",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d71860d-cb08-4ae4-a593-c64400e3a67e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c31871f5-4082-4f9f-9687-a420cdec09bd",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b6894394-f54f-4f1f-b318-e63013f65afb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bc24c315-8005-41c7-a40a-679c1c3c1d2d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c39a7747-faf8-4ed0-80ab-d18aa3c70c85",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6161f069-9e79-48fa-8d69-15fb6469caf5"
                    }
                  }
                ]
              },
              {
                "id": "285e120d-99c2-44af-9941-a5894994fbcd",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "15d5bfdf-e92f-4c9a-988f-3986514496b2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "87f49c49-0595-4aca-9cc4-5296f5aa0353"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "020c48f3-8d87-41ca-b0af-e787609c8dd9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8c20cf70-19df-4097-a521-557f7807e62f"
                    }
                  }
                ]
              },
              {
                "id": "26f40c02-7ec6-47f0-98d3-c3a95d9107f5",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4b404223-f062-4059-b446-da4af97e063f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2767e68f-6007-4864-b9df-f542bdbb5212"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b16741ef-97ee-4e48-a25b-1216934e1dea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ce1ea8c1-bc74-4cdc-acda-2834b16deeb9"
                    }
                  }
                ]
              },
              {
                "id": "1393ffe3-8492-4ea4-8f3f-b4e017726b7b",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8e7194a7-d3c2-4ae3-a9d0-6a2196a514a5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ee184a97-629b-4d37-a311-801e28a9d2c3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6e1b4850-6be8-4cab-8a55-bd1e6d79ee42",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "5aa4e143-ab2e-4c78-b344-e76ab3b4a0e4"
                    }
                  }
                ]
              },
              {
                "id": "39573e90-3edd-4463-98c0-94d07e96461d",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6eaf53e6-7ff6-47e6-9172-f37b4daf5eac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5525dadd-ed0b-4b14-ae98-7ce7375d57f8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "893f2f99-df12-4b4d-9d38-dff40fbb9a44",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "a262dfdf-5b59-4457-bca3-c08cce17ffc1"
                    }
                  }
                ]
              },
              {
                "id": "35cbfd52-9668-4d89-8a34-39e544ff95d9",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2004a351-cd2b-410a-80a9-f7231c69f366",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "680bb959-5c2d-4840-a810-ffb895011171"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "22e9973b-af56-4a38-b0e0-5021b0c0b098",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "35389c6e-f4ea-4ddc-819a-c2676b6bb678"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "67e9dbd5-c595-4dcb-ad9c-48f298589f4c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d0e02686-308c-433d-8f79-518e8784e0e6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f5f2696c-a8b3-4970-bc01-ffd747a316c1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a17b3205-d8c1-4635-8f85-de8aafb68c67"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5b108ee6-14a1-4f67-aa2e-40d4881b1416",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "5f9a064d-d2f4-427d-aa42-66eb9ff6c46b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "394e1423-436c-4aa8-9fb1-1b0460ad650f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "55c11f1e-2c29-4ccf-8af7-5d1019386537"
            }
          }
        ]
      },
      {
        "id": "fa64a063-2a62-4e20-9c6c-04a29746d7cc",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "c9de53a4-b1d3-4251-aa93-805bb4c98b2b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2d3b209e-9cb7-4cda-bd01-4b88728036f0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1784f741-148b-446f-85da-f0fd3f5a740b",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "938677a7-1f51-4699-b6cf-085603803aef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2971e5a-577b-4ceb-b163-1021da69ba95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9437524c-bd8c-4f83-840e-5703075bac1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "4af663eb-abe1-4c6b-be6d-7f29384ee9a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "041a247f-f8b2-445f-86a6-b58c08b14012",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6251d50e-11a7-4e13-9eef-f171d48e84bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b46c5c9f-266d-49fb-9236-d96a25f3c671"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d99bddb-86e2-4f8b-92aa-7052b5d3a2d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7bffa5e-9eab-4ab5-9cde-53a99957f959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f606a19-04fa-4445-9f27-95e71716f889",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4559fe94-f623-482e-87b2-db6c3e1c44b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98cebe0b-441a-4ec9-ae9a-05aa9095d2bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ace081b9-9b7c-49e1-a9f6-4f47379e91a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae8b23a6-e46d-4098-87d7-2f04fb33a119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ec33c35-ac08-4389-8c9a-22b36728eafc",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ff5dc73-431d-4299-a46c-f3242974dfa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c071edf-e14b-4811-a431-897df9d97d2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bcff6c7-8055-4a21-a039-41f3f06e9a28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9dbb805-72ba-414e-8acc-1b5ab432d72b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0f61954-ccb9-42ab-ab90-6f53f620d685",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f40f10b5-bc82-4b2c-a152-fdb8578263ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d98666c-be78-4dfe-a66a-7890e65061b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5362d7e-aa89-440f-a9cc-fb3f8f4b4732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5efed87-78fb-4c23-bc1a-8b95b4849797"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7483a30-744f-47d3-9e1c-d4cc8bce1d6b",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb2c0653-e497-4240-9810-d9d44e7ba417",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce229026-909f-4eb7-b85a-52631a8ad2c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50648f8f-55ae-4f71-98bd-58ea3afe01b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6e357282-9ad1-4959-9a38-11d71c7a7ae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ace539e3-9aa0-47b9-a401-d838bb392ae6",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ec2b181-c583-4186-b79d-886022150aa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5d8c53c-0322-403a-b6ff-e9f753a603fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a41bcd14-0d22-4ebc-9f57-df26d7204782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fab7c82-7056-44f8-a6b9-b99eb68fd1f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "990adae2-fbcb-4719-9a4f-fde1fe501f50",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a95919d8-731c-42c6-b4cf-dc890d316295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2751903-b4fb-4681-a7b4-8d9a4bbae410"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae1f7cee-71ca-44ce-8181-09a1c210e908",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "878f63a6-c4c4-4f5f-a649-52073593fecd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b991bc01-30b4-458f-b3a0-49c531611748",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc415d8c-6ca6-49df-a74d-aa056d38eccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b856ad7-8562-4e92-a2f8-819aca70ea47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80a9daf5-ed9b-432d-8f14-60999a498d09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "de5f7572-4128-423b-823f-e1cc08a752a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dad9b33d-0e7e-4c6f-bc81-28f4e1223dd0",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ed2d388-ba98-4b90-8373-4b488c9485cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "812a2eb6-0fd5-478c-a5d9-3b9e63d37cb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7840f81-c8bf-43f5-9993-8493cb407399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd9a050b-c225-43be-981e-f29b62b2625b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbb35138-0001-420a-b0a6-789c8ed1f94c",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fce86a5e-c1e2-4e0d-8f1c-a062ba28d36d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6020f0eb-1e57-49a3-8d0d-1a17fe81d128"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "499ae683-bbe6-4257-9e69-6ce7c19d8896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "edfce7ce-98d0-4571-a319-7135e2920bf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55d8abe4-1e0e-45af-8345-75980e5e777d",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a71b92b-21a9-453d-acde-222c27921fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55d19f0d-c45e-4c4a-b407-494f02e3703f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c16df7f-068e-4163-9a5b-e276ac876791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6c301ef2-9106-4cd5-97eb-887774c83bef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21ba6135-b400-4d38-8382-b612ba47731b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "878ca287-a04b-41c6-bb32-e056c87c4d8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56de4963-2209-4328-8f80-3d8fd6cf6eb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7804ab99-5617-49e4-beb3-f6a0b6dab9cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c795b1b1-1269-4495-a05c-9a9e62aeb858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1af1423-6dc5-493e-b72c-1986535e83d7",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65f04dcf-360c-4488-837e-a59016745969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51d630aa-171d-4bbe-8987-3ae4813a765b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca764cae-4b72-40f3-9716-e942aaca100f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "0315164b-a9d7-417f-81fa-2277d1915814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8fc76f7-d79a-4c33-a3d1-0c59b921e03d",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fbcc0ff-eb70-423b-8e48-4e35a3f17ad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a31a2bf2-5c7f-49d2-a7e7-0b3b977a7288"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "934f8fe9-e5a3-4402-b46b-957a1c81b3c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "30c21a99-0e40-4d5a-a326-59f6db96e81b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6338420-083d-41ea-8218-317c31a0df82",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "111769ed-3144-4371-914a-034873549033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a8f20ec-dc65-4138-9c38-6874b383ecde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd9c3277-7d1c-474a-9db6-644d4a0269bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "fcb9ff80-6b36-484b-9239-bc30afcd2f59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9db4a047-a0ed-4500-9791-e005696005a3",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9766e5ba-81b5-4af5-a265-ff570d399c65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "449f1ba4-37b8-42fa-a30a-e4c339c11140"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d9fb407-e7dd-45c2-8461-9e0dfd910b7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "6afadc6b-c0bb-456d-9ecb-1d9a3f6d675a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3350a151-2fb0-421d-8bff-812fae400937",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "081578a4-a2fe-4212-a0cb-a6725dabb625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68e67569-3a6e-4de1-8b62-12ae3db7dda9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01c03e24-27ec-4296-b9ff-c8a23a722936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "82c49d18-0bf1-453d-88a8-e76eef716d9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c5db3e2-b086-4937-92e3-1f5d14ca089a",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33536487-7cf4-437d-8d52-88cf948de91c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e84a519-501b-43e2-af49-9ac43f551c2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a83b1a4-6ce4-4fc3-977b-c9cf624abd0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e73b4716-674e-48ee-a853-ea6f61e87c24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a520a66e-a541-4823-94e9-7f77fab085fe",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d0ed4bd-4d64-4640-a92e-bb1a13946f6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "156db99e-1079-4b5c-b0ef-97a1766b4bef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc9421ed-8e2a-496d-a569-3a0f2d4a6473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "81b16e3b-a40d-4a5e-b322-237db25ceb9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31c7051e-3534-4acc-9554-fc4613c77967",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77880d15-dba7-4b3b-abda-a3b6bbad450a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d477ac5e-c8f3-422e-a1cc-9b1d3f18d063"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8cbaf3d-3b61-498b-92a9-d9826ad1834d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "10a10433-3dd4-41dc-97d1-f5e90a5f2e62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb437458-5058-4199-bad6-e71e09f62a69",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e373d064-cd40-4562-b5c8-f05b9d951199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a75a0a1b-fb0d-425d-bd1f-4b7a9519c8fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e432e5f-cb4c-42a4-a0c4-c69480e21c45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc68888d-0383-41da-9f04-4ecc0e1244fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96373f34-5f86-4ae9-8922-a2645d0ef311",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a41b76ad-251c-4d5b-983b-f663711c6e41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "701697de-0ff8-41a0-a3b4-b3b124b03109"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95c18d3d-ba92-40b6-8277-fad73502cdb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a29ee907-39f6-4824-9873-deaede3fb4d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cb088a0-6d9a-4a59-8f42-08000d7effe9",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "154c461e-a749-4858-a13e-f85c062032b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e5200c0-e7ae-4d7e-9bc5-499871c9141d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f79ec73-c45e-4be0-a4a8-b34379f56be1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "97b410d9-9d77-4f3d-a5b1-6ec340ed5b2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4505655e-ed5a-4c8b-afa1-5340cd1e92d8",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d88d58ed-8e3e-42f3-a12e-2881bdc1d7f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e05d5833-1e83-4396-803f-f03af9ad23aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b9e7e4b-d8c5-4a38-b12c-2dda79692c5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4724350f-672c-434a-b1d0-b54c0780d702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83f50e74-a4fa-42d6-af12-3ec5a76afca5",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b75a4e-156b-4caa-a973-ffac30a2cc57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3151560c-e2b9-4128-826d-6b9262919921"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb1ee3f7-6afc-4050-9e9d-2929124e8a57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3082a7e-d6da-4ba0-b812-754b4a606714"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17c44b0d-3a69-4613-9802-fe4fce3e89cf",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a080aaf1-47cf-4d88-9f13-d0e61d7385af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65c35695-2d6a-423c-9191-2f68f2c1e4ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "043f7644-ec37-4e64-900e-737edceead06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a559864e-89f2-4209-b002-60dc7f96fb31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd3dddcf-2f66-4720-926b-529f3d867862",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5705c8de-32dc-4d57-8054-004480d56988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b10b715-0aea-413b-b0e2-3a1f07cd4c89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bffc4145-e8df-4c0f-b852-710f584480a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2052087-78aa-49cd-aaca-21babbe4e177"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8a247e9-1514-4c38-a088-e0b5cddfda77",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9aa3f29-a5fc-4e3c-afe9-e23a2a9f2c45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b0a7345-d638-4ded-930b-e8d58102033f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44e1dd4c-1ad9-4c8e-b9a4-459b03b83a5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c32d41f-f48c-44c3-b4cf-c3234a930a42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ce3bfdc-8589-4ca9-a00a-97442016e857",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1903ca71-5a33-4acc-8b1c-fb8e31cbbf6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c686703f-9ec1-4c4e-9008-83b5b3380d42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5348615a-6c18-4c41-a5a3-8d19b464a9ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6819d31-fbcf-48e9-a479-28477cefeda2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58b1e2db-9dc1-41c3-a17a-fb987511219c",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b656a58-fe3d-4338-b9b9-a01112e1901a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9ddb575-0614-4a5d-a4d3-c696e5ff1005"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fae279f-e379-4d49-8a3f-1ecaaa41a4f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b75376d-f579-46d6-8f99-32b3e1a68154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a4202e2-3c19-42ec-9fe4-d17942444e83",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "193ec71c-70d3-4944-a4bf-b59e010b9003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ed73eec-56a3-4532-9b55-6ff5144abbb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9a9b3b4-8422-4be8-bcb9-498a36509ccc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5bb83717-86de-4dab-9b73-f28d8a7d6df2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "59b18a0b-e675-42d1-b500-7e042c862982",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4ed97f2c-4de5-458b-bab9-1769a380eab6",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2cbd538-fd7b-4d16-8491-87810752b66d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "986f2948-0195-480d-9800-f24e88c93235"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4de1b16-39ed-4633-8761-b28afa0ebb6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7c826533-929c-4bdd-8a5c-419723fd5d36"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a27740bf-76b1-48cf-bb0b-5899b8fa8061",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6d1da143-54fd-4068-afc9-9072b8c0bd3c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c799935f-dc82-477d-be9f-0e1af4c8980f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "add9d191-8594-432f-b5ce-059de9644c98"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4523ad59-01f7-4c49-b613-66a9074e6a67",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8cf3c697-8e53-4ad7-9f51-a78e1765e2e5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d3f15ea6-5123-434e-aea5-124fc213a3fc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cee29c61-3159-42a5-9b3f-90d934235dcb"
            }
          }
        ]
      },
      {
        "id": "42635112-e234-49b2-ad30-f104c9ccb89e",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "ee282893-a273-42c5-b5f4-8f406140d7ad",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2f0c486d-e6bf-4739-a77e-f8ef9d22256b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "27242db6-768c-42c7-b9c8-1e6bf8dd20b6",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4061c149-9e8e-4b39-bff1-cb1e7dd217af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e377943f-f8ee-4f45-a8de-6c15137f1671"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdbbf0c3-4b28-4114-8d87-0ee216035d84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca0dec20-503c-4b50-849e-6b0dffe59b34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ad4538f-7898-4cae-b09d-8974017fe984",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53251ed4-4ca1-44f9-a687-171d0b1d09a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "526ccecd-f121-4fb5-b623-46e4440e85d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dc8c0e8-8128-4bd3-a6d9-db7ba30508b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f989422-231e-43ad-a4f1-8ce554f61fe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d17199f7-497b-48d4-87c8-ba3ade02f35a",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90a8a735-dc30-4e82-9899-2515bafb8026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71650375-f9b1-4788-a9ef-1b18fba316ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d93e689f-8f50-4473-af3c-0061a134f963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "62aa34e0-e32b-484f-840c-a8f94acdb191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2571d7db-5361-487e-82be-6ff7e47293ea",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c914c3f7-55a7-41d8-b373-8873327506cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99fdb785-16b1-4aa6-911d-e88c4075e73c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "023dc48e-838a-4026-92be-3a2fb20ea21b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0e51008-2e38-4f39-b609-28e7716f6df2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eabd666-a850-4897-ab10-1bb14f96c067",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82b10a6c-ed81-4b8e-bd29-c6773d992ffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dfef4a8-2683-4c3f-9d8a-5a33dfea600d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "824ec90d-564c-4b34-919d-0152dfdfe72d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2c5476a-9780-4b01-9229-0eaeaae1efd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a37ee6e-8fd2-4b1b-8ef6-aba0557f653b",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51e035a6-a0cb-45f5-b762-6428f86d5af9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb777ba8-d8ef-4518-9c8e-629540349762"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91b43244-ddc6-4215-9e9c-b339d49ada0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "245ed7d7-f2c1-413f-a5f6-4981b8438747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca1af879-6764-4172-a9fb-0f0afb9deba0",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4efc9289-1112-4cf6-a436-c45f3aff4d85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cea91a29-5ac0-499c-b77b-165134c3aea9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e47bfe27-3377-4920-b817-0b9760ac5a28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "07d3e27e-e98d-4a32-b444-04bea669ea9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efa1811c-cd51-476f-9f83-d653759f4453",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3712777-ef26-4909-87e1-98501e75a437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2e8b648-a47a-43cc-9f91-88a7f5502fda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "136a0bf3-30e7-43ac-af1d-24713a79dbc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e019d037-77e0-4f78-a594-17720d3528a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "528bd9c9-5924-4cd6-b0da-d0d61b077822",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bfde2c5-97bf-4655-b6b5-079fd33a60ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dcc1027-c877-4b75-b1d7-4b5f730255b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76c5392e-ca25-4855-af74-c8f699500779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "87f250fb-4bf6-4153-97f3-86823d927c68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eb2eb9d-7df1-4788-90c0-9a42d15eb857",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "214fd5bc-af3d-42bd-bc99-7d09a7f051a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aca37185-2e22-48b6-b47f-c981e9c57618"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d095d8e-245a-4659-9239-acfabede5748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "999aaee9-2380-4caf-9507-0d6815d64389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5bf44a2-9f9e-4711-a6e7-3085ec9c9e88",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "421e14f6-6636-4712-b75e-f8b7460a392c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7196aee9-8371-4388-840b-4efb4a4f3525"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7f07070-82f8-49cf-b39b-87569171e676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "59a09253-ad83-43a0-aab5-66e4007f4795"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21060951-92e9-494e-878b-cae22ec70e07",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1386666d-bc79-4898-8f99-2b3d55646fa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9869b977-b600-4765-ba86-7ddc790633e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "350e70f4-5ea7-4c08-9aaf-734df4eda106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e7193f99-c3e2-4159-8ff1-dcf88d5d510a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e527b59d-abb9-4c7e-addb-5ba293fa4035",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ced82cd3-6477-4500-93ad-5edac867a935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd4a01b3-b934-4c17-a0fe-b82993e1ee9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1bd0354-e2ea-4c3b-a1f4-690e53a43f0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d00d23e0-ef84-4460-8e47-34c9f7cbd79b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "152e3c7b-3cd8-4696-8fa8-e3c1c31cf973",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62c372b0-186a-462e-8d4e-60c7d552b9c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54ff7644-460c-440a-8d73-90cf12373680"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74f790dc-0015-453f-ae5c-2451f6c1c1d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0d2806d-5580-4f95-b9f0-0b2895e9ea0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a698b80-ae42-4016-a2f6-e36a70c7f76e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b8dff48-046c-4b6a-8d4e-ad31b0fdca3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "015abcea-a9b2-43a4-a4ef-19c9d2c44eb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb685aef-7623-45cd-bb29-6ab3aca0235d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "9eecac4d-6668-4125-bce3-623f2cc8aa75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7a9e2fc-e0aa-4d93-aa3f-deea355b2baf",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a4258fc-c140-4910-a9b9-7fc51009ebc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08f9f774-2c25-4a86-ad3e-74a282eeb499"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01a004d4-1e31-4452-9b97-903b1340112d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "75585acf-4ebe-4cf1-9d24-38b033c971c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44107139-0eff-4f13-ac42-9e7a0928bfc1",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a4c04ae-285f-4597-8f15-d1a2f6d0eb25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f83ba1a-fa6a-4cc0-b54c-318b9e718d5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6341ad45-b4fd-4f7b-ae3f-fa10f8349d3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "6978ee8b-067a-49a2-9630-e17c625c3beb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e6b93ae-ecfc-4e36-829e-739292eb0591",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "652a9a30-4d36-40af-acff-c420d58b7086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "911e6f97-6e2e-4e84-b48b-6c8c102de7fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db546282-635c-4dfe-98fb-04eeb9ffd5e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0801235-6163-400d-8b1d-e9edf1e4d066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3612ccb-7955-4071-90d3-2fd1207b46ae",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae1977b2-933f-4efc-8845-06b3c3f22b4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f984ace-b0c4-48a3-9cc8-2c2da80baa9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c969a2cd-f905-4178-b2b0-644859f53d55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb43f11d-a580-402a-b12c-85524b9dac62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed19d8bd-1046-4f4f-bd01-9b4e9bc95a05",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "302d9261-3a85-4b93-b4dc-fd835f58b330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24dd73ff-1044-4d6e-a850-071d761b554d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f688619-066e-4ce3-985a-af044a697f48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "124352f5-0cf5-429e-bc39-b6d010baec3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da868c8e-80f0-44ce-9e65-5f898090076b",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "476e5d8c-d526-4412-acb2-ef8363384fd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69c391ac-20aa-4c95-8c57-61675e269cdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "207c5b19-cceb-421e-b859-3af06b24680f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d571848c-7930-4796-a077-a2178310a56c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9475d183-6efc-434d-987a-a38d1406afc8",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05fba63c-dbae-484c-b067-22938162fc05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "484dab7c-c52a-42b3-8d86-fde21aebe1be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52f14c86-c470-449b-a1a7-8084184cdc6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d04894c-10f3-4896-bf34-f55d1a343b30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa3f4a02-141d-49dd-940f-d89fc7c34f45",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "532124ca-932b-4751-a5b1-bec8fe2d1d42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d00702a-4d20-4ff6-bfc8-110d46037c77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac77dd5f-2308-4b4f-a3aa-41ba5e16353c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "543591d6-236b-4f3e-b0b2-4a820ec13072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6cee751-74ac-4d67-9cec-add54b6d6e12",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94d37f06-fba0-4fad-8d5a-549b707e43ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "205b2c2d-a758-413d-a762-b7d1fd0d1db3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5476bbc-7d4e-4406-9c5c-ef61bc6b23dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca448e56-e518-4d35-9b50-170f3a77e76a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fc7601b-160a-49a7-b35d-f5adc68ffe14",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66c32552-32e1-4c72-b52a-d364d3dad562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82ba82a0-0211-464d-8cc6-7f151b356d2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ad8c166-b5fe-48b4-9adc-97747e03e4e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ffa13cf-9b51-4537-bd97-f3b218661934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ecfea60-ce92-4986-80fa-b8befa06eb16",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "170f361e-896e-46ab-8e5d-536a3a34f5a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23bffee2-bf70-4857-af5d-46f9db05f436"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de222f45-0b8f-4ea8-8040-002c2d73a476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "62035e42-e77a-45f4-8766-66d19bd5f8e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7728ab70-2aa9-47dd-9cca-0dfc5373acea",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eff26941-1f10-4f2d-bd7d-7c3047f79930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a549d28-fa95-496a-b36f-35e95f9659ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12449989-770b-408a-8b8d-54c28c288167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa278007-ec83-4df0-92f1-9d7d5c5385cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c693f55-2976-49a7-9e0b-d2a91476d45a",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f68eff82-93c3-4a5b-8fbd-7c9890591959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd94c559-5c05-4f8a-ba63-cd0df271d422"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c17aa26-6cba-407e-adb2-d631c73c0a82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ac37f23-9190-4024-916d-9f7ca7860982"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6872cbf2-1b76-4b33-bd4c-d2733dfc0cce",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3fc1f39-a0da-48fd-8d2f-b4584b326bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08fe345d-c6f6-4c94-b746-f297b22ccf4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d9d58d9-d66d-4892-9c88-f60b829fa2e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca6d52c9-d232-49ee-a2c2-03aa0eea9cdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4930e84-6e64-4afa-87dd-ba0984c519d8",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc777acb-177d-44ed-aa14-f8666c42e1e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63271308-be18-41ba-a574-7e3be2834e88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab092223-a9af-4b16-abc7-5d759815f277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6ec127d-e815-4c75-9684-21ef02322620"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba75162f-9ec2-4b6f-8717-8db1d0887226",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36a659d0-43ae-4bef-9262-c0ab336dc3d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ff3dfb8-15b0-4daf-a7ca-889d0514c31e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d860968c-5fe8-48fd-86cc-9654dc551945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e4767d4-2ef9-4ace-91d5-22d1786dfe79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab09026f-ef70-47cf-a29e-bcd67192fbb2",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "679e60f3-ece6-473c-941d-72362579f59a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1aa2433-a067-4b1b-ad1e-830924ed4414"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad647c03-0424-487b-8bc8-fcc3d92debe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "43d4eeef-b285-4d7c-9a71-d82b7537d350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1f77802-6da3-43fd-9048-2e636fa59320",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f475e0e-5945-497e-8e18-a1635f04be9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09270af6-d60e-4fb2-9d45-4ef2e1e68d7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50c1d626-db71-465c-9e34-36086e01ba11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ed669a2-5079-4a30-9ee3-8d3cbd70a829"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60c1dbf9-83ca-4f86-a42d-b76432d30883",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bddd675-6a66-4ac1-85c9-793794292687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6eef4b0-8776-4bf3-be08-796949cb591f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80d72976-0f73-4cd6-aadc-4c0712a5ce4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "30807601-62ed-439f-9735-7651f50ea8a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c61e833c-a836-49c5-98ca-3b04b1ca316c",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f460c058-f094-4ee5-a69c-4391d3b616d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cb8ac33-275a-4b5c-a719-ab7d5591994a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0db32650-7eb2-450d-8da5-c7fb557aeaea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd269a7d-e40f-40cd-8881-e022a49f0d34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f19895cb-eae3-4fc0-a37e-cd456bccea43",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30641e44-9268-46b8-ab40-17411ceba257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac71297e-e931-4720-a45f-d540fd621d16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17726223-810c-4358-ba56-f6f655737100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a27124d4-13ea-4f0e-bb2e-5427f9e62076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ea24ae1-c01f-4f62-baf2-98f1f41e4f15",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33f3d070-2eb2-4401-96da-2e6dc5de703c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6976f5c5-367a-4c0d-93e5-16dc218e7193"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43f01633-8d56-46e9-835b-973d965a6658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07d5b96a-20a7-45e2-8297-4d732d00751e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a8d2db3f-4ea2-4a19-a147-9831ee768fe9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d59f2bbc-0c1b-4844-bc9e-ac6b56d1bc6e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "605cd4b5-d454-4765-9b60-43d24b94f851",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "08de445d-7a8b-4e9b-93a3-b649076ac9e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94324ca1-6509-4c0b-ac50-3b7a64efdfc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "654949ec-a57f-4d49-a2fc-5663185a5cd3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c9d87e36-4767-4699-bd95-659b1c106ed1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "19c7227a-e352-4a2c-8b30-708aa6059295"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8035e5ab-4ecc-4dd4-9242-d2897da5b0aa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cdd657fb-7fd1-47bc-86fa-087f4aa389d6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ca274284-3755-4b42-b661-71b3550b1887",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c9b6a396-3b70-4d0e-8a1a-52ddbea05e40"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "96077f98-7441-47f8-aa76-b6bdfebfa940",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b6260ca7-462a-49e8-a821-8d4cbc9d7ae9"
            }
          }
        ]
      },
      {
        "id": "c89d85ec-5004-40c3-ab06-2e2d82a370bb",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "e99d2df3-80b0-4c5b-980c-00500f0da50b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0b137eec-e019-4264-95cf-88fd791b93f1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a7af9aec-b86f-4679-9654-aa311c5438de",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca819900-b4e0-4776-8114-9b29e30e0253",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "590c1306-9d5c-470f-8dbe-02fc09cc4746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91a53c08-4cce-401b-9a0d-54a2cfaca25b",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08a40d0d-31d5-44b1-8481-c0018dfaad8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29f475e9-4b64-43dc-b108-53b5b42d5e9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "876a3fd0-5cb8-4031-9a31-7ca2c1dc659e",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0bca6db-1394-48b9-8744-191e34b6f65f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28349250-e7da-429b-ba1b-e8da9015c71d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13ed45db-a903-42b4-8ff1-83b6e23f9245",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "763025da-ecb5-4bfc-aa96-ea3845df3b42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "586e16b1-ca2f-4278-ac34-7e79d905306f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "344b8beb-7de8-4b79-85df-9c793ab754ac",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac7b4243-9af3-4475-9328-4000d69b965c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fff359a4-1a58-47dd-9a5a-3abcf3110d36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b4f8c32-9c13-4c6f-aae7-f60f7c048f7c",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d40f8a6-def9-4da2-a5fc-0790bb559960",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe2eb671-06cb-4604-92b5-e5b99e7f28e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d81bf3d8-f3e3-4f84-84e9-194a4d146ae4",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b458e37-996d-493b-906f-875b897f3383",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cd72d65-f2cf-4aec-a8e0-b18267e3d526"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19b5fb69-c0ca-4805-9fa1-6ad35a98740c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25f375f4-814e-472f-93e5-f8aef0ee7cb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dba8688-6776-45ee-9008-d40fcba9e58e",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0b265dd-2342-4ed1-86ed-ca4bd91558a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1099198d-c8c6-4527-900a-2dbfa7c35d0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b41039fd-dcb4-4df6-8805-ee5ab0d5ed4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74a955ab-4ed1-4737-a77a-ccf89f8bbdac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9944e8f6-8f6c-4275-aa34-9b0dd20a3ceb",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6cdef87-c38f-4460-b4e0-7818f5250f1a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6fdb4d93-d17d-4f31-b333-a73ab1f42e2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45cd1717-dd07-435d-93f0-981f75719a3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7dbd236-ee16-4c3f-a2f3-6184757620b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "923a0c24-3c24-41c0-8d17-0ba3dc2cdbba",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04563146-9ca0-4370-8e33-8b6cea65b217",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95a6545a-f96b-4b0d-850a-c20d1399ae21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9882bdc7-df1b-4c45-9ac7-f3eb26985e68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d45ce721-fef2-4601-b16b-ca45b7842c57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c6c05af-b215-423b-bc08-0c2b7e33ad42",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "879689ae-1797-4dbc-8767-550ef11edf6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae30c0a4-b288-4840-ad3b-7c94ef21698a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "733b4129-f296-4722-b744-47ad29a44391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d811be36-8cd5-404b-982a-4a05c518dc64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6546f8e9-01ef-42aa-9be9-e4edbfc6db08",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "109dcc25-ad75-4ada-b9ec-2d404f776c16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a24b6a89-78de-4539-a501-a6942658f754"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe3dd7a7-965d-466f-a05e-a52b9d99c116",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80213a16-d713-486a-b5d5-bbc563619e5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e215827-eb8d-441c-a059-260cfb67d5d3",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bb51568-5eee-4a70-8798-de4f348c076d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "504b8f48-fe64-4d38-87ab-b604c99a2ab4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b51d27f7-0bf8-4abf-8de3-1ecc17a16ba5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50e2ab42-12a8-4001-97f8-c458882208ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0068a8c-0dc0-4d07-8902-ad447b5c4ffd",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c13682ed-b266-4918-a3a5-fdd7618708b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64b6e601-d889-4979-9583-487aed1bf5d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5623e012-f4a0-4bd4-b1b8-38172edfef85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "581296a2-f135-4afd-b360-b6c9a9b46cf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "552fb313-9cf4-44bd-9519-77590bffb121",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a861e37-6f89-4d49-a694-e15d7c82bd33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07074c1a-99c1-4b2e-b3ae-54d9e0da2b1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a41bd93-ac17-477a-94f1-c3ec6c75144d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d07115d7-8058-4076-8857-daad99004988"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ab9ff59-c830-4778-978f-ca36837bf3eb",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f2f5901-24c2-458a-8421-fc552ce2cbdd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c5a6f758-4f7e-48b0-adfb-dcace5181d80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bbb79ca-61b3-4cda-acbc-364e72f9c490",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a29e3a3d-569a-4838-a134-5eda96925315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8661a7ec-e2cc-4624-9c16-afd695ba51cb",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0931112-28bf-4f77-a7e2-9cf5fd218a89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8890bd24-aac1-46f8-b4d9-900d01d38f0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22797831-49b5-4542-8e74-45506e86656b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8dbc472-621f-4fb4-a775-49631e5a8ed1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "191809f4-6636-4c3d-9281-96b0b05816cf",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "587bece2-8105-4914-81d5-7b91f526e09b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e75c53dc-1249-433b-96ed-4e06bc3a4ae6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29d33dbd-7ddd-4711-a8a1-166a077f39df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc03f994-c7e6-4f72-8fc3-b4e5fb0f2218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6409b2d9-5faf-4c80-98f0-ccd3e101efdc",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "218d627b-8394-41b6-b128-6d403162bee3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bff406a-6865-489b-bb6b-fd5aaaad3606"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffb7b008-d16d-417e-8a89-510293fcf8ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aabd3601-695a-435f-8d4b-cf3d993cdb32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb377774-2f00-4996-99f0-63270ca377d6",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaffbf84-3b38-4891-8029-7ba76b9aafee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb003e77-9e7d-419a-bc38-26d22201d0d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0acac89c-45ee-40e8-97a8-71fb4537c64b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "175a7d96-820f-44e7-a77b-c966c6554bc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "444c8df1-7dbb-4f6e-b048-735669251423",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c3f7e01-526b-45a1-8c04-ce78483df0ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33d7590d-5f2a-4801-a5f2-4e11db4f245c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c04b4ae-e7ff-4482-87d5-eeec644b3942",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed69f246-0f74-4611-8126-8018f21aea39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b845f64-8ded-4a79-899f-32ff3e2abafb",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a2646d1-940e-4a4c-80e1-738e05aefd11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d43a786-a0c6-466c-96c3-2d9a97c3fc79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40e5ea72-2d39-4238-87e0-defcc41c07a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe75df5f-1c68-4b27-9faf-2ae2017d7f95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d7c151d-bb05-4a8b-a4f9-c398d8dfbe64",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e24ecc02-a767-4e52-8754-fc0ed68be61e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "066b12df-329c-48f5-a119-b68b7d190a89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97863e08-ce36-44e7-9af4-77a85d7583ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7669f105-b2d7-4f0a-9f2a-341db8616350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "092e98c1-5be6-472f-8481-7fb53f9efaec",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2783bb08-75be-46c3-8571-85a165e51b1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51b1cb39-0504-4dec-b102-85cd4ad068ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94180500-65ae-4bd5-b850-81c9a3243842",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbab69a5-fc23-40c1-82bd-af1834db5b72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e61294f-3acd-4460-93cb-30779d74487c",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30c1b2c4-7175-4ba1-9dd9-d686b0cef8ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2371732-6743-4eb1-8d9d-28d40a7f66e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "892801e6-900f-4166-98f5-8165a1e66f6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee8476be-7ff3-4173-8eed-9b8aff657835"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7339a344-d1f8-4519-8c76-3312a7bc533b",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15ade8ad-f414-4b89-941b-8d104f1f55ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1289354a-e84a-4708-b81b-3112c8aa83e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e393dc47-3675-4b0f-bdee-881045e4e163",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3262cc3-b030-4db5-97d2-cd35472fe268"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5526070b-c2d7-49d2-99af-ea5311101e9c",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8ba9d68-c7a5-4d18-8a9e-f4fbabb4bae2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4faf335-15e9-4c84-a6cf-9c12f6109086"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04d734cf-79e3-4100-9cad-59a6a4b2c021",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7943ca02-aa6d-4e9f-b319-085c4b205a7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3f9dbd3-4f5a-41b7-ba9a-59c586643383",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bb2a830-f84c-4b86-9794-58d976224cf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "790192f1-562f-4317-a73b-81fca8674089"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "028ed080-32c5-4ad0-b67b-8abcd5fbb902",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1d689ff-a739-4944-abf3-ec15a8d4943a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71f335dc-1f14-4782-8f4e-eb78cb63b938",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f050dde-9602-4ee2-958a-8709aa2bfadd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95e46ecd-b036-480f-b347-6e3e759e91ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "145b8dc0-964b-4e53-92b6-0917a1075a2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd78f5bf-d95a-4cfd-aae7-90f8c2cb6646"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ce5632c-d05d-42ce-a71a-781e060710e6",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c14fea7-1e20-4d1d-9ad5-07355fa471b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61bc84ca-fb74-4bbb-84e2-24c2aa093fe8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0994fec8-c633-469a-90e9-70224881b91c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36ed2e53-bbf7-4196-831f-bd9ba9ca4c5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeeb302f-ed52-4fa0-9b3b-d8b7c352f0a7",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c78a6681-1d60-40a7-95d7-f5a6a4a72726",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60df493e-adae-45fe-978d-d0d9d4856ec3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f195a17-123f-416c-8e59-ed93ad4947da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88f95249-13d6-4b9d-9504-a4b6f0294e55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "156ce6fc-ebe0-4186-905c-25e9ff49a66c",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ba200c-6a6a-40f9-9b07-3c3ba8592fec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5b8f5b8-fb9b-45e4-b3ec-bef2bf52cbcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8460577f-f4d8-4e0d-a7eb-96d8ef6bb209",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d4944f7-43b6-42b1-b16c-921b0ccbc7bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "827e2e72-8f7e-4c33-9716-37fb9504aee8",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "151e342c-d5b0-473a-9770-deb638e135bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4abb9917-1d4c-4844-b9be-f72aa66975e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba0fa298-58ec-466c-ad46-176d90e21fc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdfa9d0f-5685-418e-9c81-1606e220475c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0441687-00f7-4211-b957-1d8fd231a053",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53975b01-e47a-401d-a7aa-f466323de7b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ac987c7-da99-48ed-bfe3-e6047449ec4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a9197b3-80e7-4fa5-a969-3d0093bbd2b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57f2d644-d56c-476e-a394-51b73946b997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fade31e-3e66-4aba-ada9-bfb0dc7e8a91",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc0c7b15-6885-4630-ab31-e9faf67eb52f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6e286bc-f274-4855-9932-55506bfa2ba9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "680bb58b-0733-469f-b8eb-1a22cd78eb64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d8932f0-0ecb-4ca0-aef2-df8c7b363f75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7b08db4-f99d-4dde-9534-79f31c6a550d",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a325768-a168-4b28-afec-28b01e562f3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34ff240c-d6fc-44db-82df-568317ac6163"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "436a8297-9f98-4339-aa15-88ff3c6ed112",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76851318-5bd7-4592-b14a-d95f0d185e2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7b1dbc4-428e-4eb8-9f4f-bae324693619",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07bb7fa3-3b9e-4343-9fbe-a6a2015134f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f93f50cf-4328-4341-9c07-2b4445631c03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fa351e9-8127-4638-bb1e-de4c50914a88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "641558c4-1426-4291-b9ad-8212312f3d22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ba30a44-94e2-4876-aa55-8fecd701410e",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dfe1712-14d5-40f9-a548-73f11d9b0233",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f73a80b3-9972-4b68-834a-169673d87a18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d97d9815-6ba2-4905-bac9-d64c844e6fe8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50988501-60aa-4c3b-9176-fce8db4669c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58841458-3a88-4e2c-b898-2262ec69d603",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46bddf63-346e-48a0-8baf-98c7ac7ed818",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6b76e4b-11df-4937-99ce-1289a52f8d20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c77912b-8167-468f-a02f-2b0bf5811ff7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c2a2a57-db42-4ae6-902a-bd6c4205cfa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cbb911b-8775-43ce-b44c-3eb9a111d095",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eb46917-4a42-4231-8054-cc4ee4320895",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f0d07dc-86e9-4859-ac92-b54fb8b490cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d131d0d-cbff-4ee8-9e64-4334ff2e4898",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbca80b2-f9c8-494a-b716-464bd98ecc47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6978d36-9882-4dfb-bd95-e35a3da6d60d",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3bd7e76-ddce-4869-ae48-e5fce4f18bcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30c82fa2-a3e9-423d-8d3f-a01c4a3ba65a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e1107af-1786-416d-ac61-1f9a6958f37f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33d1ace1-0e2b-45bf-b450-ced3deb457b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27f60de9-577f-4dd9-b93e-724bb7b8b4f6",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3135779b-65aa-4d73-8835-24335ca35b90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a68112ce-a39d-4ebf-b266-88256940ccc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2df35105-61d8-4f9e-8559-74ec2e4b5496",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4cf72db-5811-4a23-80af-c5d399e52777"
                        }
                      }
                    ]
                  },
                  {
                    "id": "691fcfb1-cce5-4acd-8fce-57d572f6446e",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7302d402-dc9a-4ad2-bc51-13b64f27d8e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e11e7d3-7ecf-42bd-b639-d8a11a0cf10e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81b7f4f2-2686-479c-945c-aafb297a99d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c71885d-3ad7-4c08-95fb-939c58329b2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cba8557a-b922-47a4-b050-c2cceb3ec821",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "699fb2c9-bb97-47c9-8891-60b05fe4afd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e5322e2-d83a-421c-bd64-e4b8b7ef1a83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "389e9195-315b-48a2-b932-897bb005b6f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "400fb10e-d317-4ffd-b2a2-ded964f08046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a16bacb-4854-437e-906b-43e28f066e1c",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2b6881e-5a83-4251-be05-a62b146de626",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4a60b5b-c423-415a-b31e-d8e9fba9e311"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73069890-35f1-4e0b-b5e2-fc683e62a580",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86776f3b-e47f-44db-b8c8-e0be5d3e3be1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a37be4c0-ed2d-4e20-8139-39974548f675",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26824938-bf17-473b-94b3-dbf67f6e607c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b962382d-fc95-4f0f-90c4-4b2b86998a4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4d06ec9-55e8-488c-9889-337db7cf7158",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2eda6eb-ced9-4019-997c-ae026bc8efde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c1be4ad-9803-45c5-b320-54d745446d13",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f59e8ab9-4ba6-4c42-9e90-ce449bc35bec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85099ff4-c36f-4f92-8e4e-3c29efe2f393"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f2b86e7-7776-4301-aad4-528380c4bcbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "690e0a5d-3b58-4fd2-b7b9-4aa4b3311956"
                        }
                      }
                    ]
                  },
                  {
                    "id": "120c6722-a0b2-4ac8-a640-d53c78b8d027",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22c46b1a-f09b-44a6-8962-f74249403dd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91409c3e-a01f-425d-901c-ec215776574d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "735e5180-fac6-42ff-a5e1-f3c1837ce139",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e84d772-3117-4f0a-98bd-1426101087ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fba7cef0-3cbe-41a0-8b55-435d8d954a74",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fedf3dd-31f9-4ee7-b162-a11edc8255e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e00abe7e-c22c-4adb-971f-e91d090b4da5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f88d92f6-1ed7-4713-99a7-779e0fec1869",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "081fda0f-781e-48be-9727-df1b28f42b0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bff740a-8084-4c83-8788-a367d0ca2da3",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e356a7c9-79e6-4f68-baff-3af70e26a52a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbc2c03c-ca2f-4797-882b-4d6986432bed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a519699a-99ca-4531-8e4e-59b08d9ac841",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "023bfb24-3f2b-4d10-854f-39006300c57d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c5e131f-3680-41f1-968c-a6fa7a3f861a",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b1338ec-e53b-40a1-971d-a0b89189d6bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b52a0281-0c10-4020-99be-ecba0bfa0e0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "410c5c4a-a72a-4736-b58b-2e76b4b4cafd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b9c7ed2-6bc8-4c1c-8595-d625f04f0635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b5997c8-e0fb-40ac-994c-4bd5d8887b81",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "299870b2-d139-4259-9d5c-bb8b5aea9abe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d33e24b5-46bc-48e1-bfa3-e228fc019c48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9045a83-d676-4200-a052-d1a5949cf9db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30dddd83-d3ee-42b3-afea-315553e02b34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a3bd376-8950-46d2-8d5d-23c4b8f5de4e",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e8205c4-6026-4af9-9436-45672b28cbd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8c69531-af2b-4d2d-b5bc-7a49cca7d886"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0176429c-8298-41c8-a706-08102b335a31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f5ea0c2-1a94-4484-bd3a-f15e602917a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5592b42-5461-466e-a0bc-893a3f3ec302",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96090a92-e223-483e-8efb-eaed17242d78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38f55500-7eff-4573-b6a8-6e18d5f33b03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95a7ba26-82ba-4a19-9fe9-4aed88b51720",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5a03e04-5efc-43c9-9309-4f666c02f384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7e2f447-caae-4ac4-af0b-166af20c32c7",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd473e5a-bd92-46e3-96e6-8939e8fb4bc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70024a9a-5218-4c29-a963-675ca93eaced"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d08dc7d-c7dc-4f4d-b1c9-0f3c32c3186b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b10bdde-660f-4da8-acad-022ec3d50a36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6927324b-b7b5-4518-a58a-818c9f4d7935",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc31b142-18f5-4a5b-b78b-cb658dd9be41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "443bfce8-b21c-4f51-9ef4-9aff890888d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fb7d30a-1be6-4216-878e-8b59944b8a2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "752f234b-3f2f-4077-891b-469258d1ac3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55fb1983-8b4d-4a5e-b866-adea1d437c09",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "309d964b-5798-4dab-96ff-6e3cb6409ceb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7857cc27-9469-4141-9c37-f2dbd0010d66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cdce0f2-8a0c-4cef-a1a7-6d81fb57bf7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6aea619-1129-414e-bc25-d5305521f4a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32243a9b-b58d-47c1-9678-836366659b69",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bd8b661-b0dc-4ce2-a716-9959a25587a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13811e3d-32c2-4987-80c0-cbfe75dce958"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f51424ca-5a69-43cc-9c1a-79ed66779311",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe50e866-88a7-4ac8-a45f-e6b4046defc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "517c0606-eac7-4bc4-a803-37496761c870",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b933354-aa97-4542-baad-4c547dc392bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1b3bf4e-e660-44f8-884f-7ff99f8a4965"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bff990ca-2268-4a42-b617-321b07b8a144",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6503771-a30f-4d40-8539-bedb944919a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d7178c7-ecb6-4b3e-9c6f-e474f5bc315a",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31af072b-a7e6-4213-96f2-44854aef5629",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aff8465-b154-4138-821a-d1a0a44e4870"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeee3ba5-5a46-4558-83ac-166b7f2e7556",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40ef8244-919c-47a8-835c-5d6a4decbbf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac5d4d57-a7e6-4081-884f-7cad07f178c7",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07d886fc-c603-4ece-a512-624b10ba1ab0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f23ddad-49df-49aa-bf12-cbaa6b8e397b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc23d476-9974-41f7-a50d-57a07f0eea20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16f00dfa-00f2-4df0-83e0-577a1fe89e82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc3eb184-691c-4975-9bfe-b53d6da55a00",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71852d8c-ddb1-4acf-9986-7de5c2134769",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68e105e7-903e-4b25-9bde-4ea2aa4f33d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b39e9474-f556-432f-862a-5927724a91e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65e32e12-1c12-45a2-9f96-5503828ece99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c76eda7-9a57-416f-a000-605871da9ef2",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d71f148b-eb99-4da7-baba-c36caceda0fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18fcf0dd-38a1-4761-a1ad-a0a1901e08c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "715ea6df-3524-4a70-b619-ca2a3df7b6f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5373f5b-bd3b-4dbe-8618-e529095f291e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b48886f5-dbac-46ef-9e08-cfc750fc3f5e",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5075461-fcfb-4f6f-99bf-da38010ac4be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f985e3e9-7e0e-4662-b036-17612a78aa9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73f750bc-50cb-47c2-9fce-fa85ae48bee0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42588e24-4f38-497c-9600-29a2aee58e8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29d09948-6957-4988-adf6-2efd4b4e5b52",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3923f6e6-bd7e-4754-8cd5-e95586187498",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce6d2c25-c2d9-4db2-8f9a-bb35f0aee454"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12f82f11-4175-483e-8a14-dc51b5fa4756",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05b05e29-a222-499b-aadb-3538303b3eb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d39d762-3032-4afc-aa13-cb2e43200fe4",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95bc910b-19f0-48f6-998a-e28574e17314",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1fd2be49-2f55-40e9-bcff-ce478c9a1c6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e652b21a-8b82-4cfb-aca0-03ec2f847ae8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaad9531-379f-4a34-9380-c904598bef34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4609dc12-197d-49da-b76d-ecaaf0b3e0c4",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd2dfff5-21eb-4494-b177-55e3bc5549a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7586725-945e-4c0e-930a-f2c34acff66d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7378b8fa-7a01-4943-86ca-b0a4389848ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4be98edb-f662-4f6f-95cc-f4e483ee3c4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fe69a7d-c7fc-4902-91dc-1fa17cb9c3c5",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "619005e0-718c-4119-9772-03ad544470e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ddb0b5d4-c06a-4fad-9405-130fe138f310"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5daee728-6a35-4556-8858-794267c43116",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d25b9b3-0b68-41cb-b027-e0482069751d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58af84cd-acf6-46f8-be45-480aae5a588f",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7f1eaf7-6c6e-4c5d-9cde-15f2c5a7834b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae983418-d642-4a03-a3ed-f1952e0232f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edbfe486-906f-41be-8d2a-5954a6c5f26d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a3b4d1e-1c0c-4779-883e-af2331dfc890"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdf78a52-4db6-4845-a5c8-af4a81ad29af",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e205a24-ca97-4141-99da-00704778cc32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc849c7e-5987-411a-ba2c-cdd94b1e4b93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3bbf85f-c307-43d3-b227-a6463845b0e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b90bd29-dbc1-4938-aeb9-871ca7fb4816"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d6b3cc9-9337-4ad7-b3c2-f244389a638e",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd17add8-1e22-415d-ae8f-f2586a9e84ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b95f1d5-322f-44ab-880d-a7b0415139e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac1b45cb-b6ea-4b55-beff-b8cae85eec0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbb2cbbd-8f47-45be-886d-721581a27af0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c64b578c-bdfa-423c-8b67-2f0ff0513998",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e060646-f3b2-4180-b010-d54ca2a883f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb468541-fba2-4046-a593-e8105a4d5ac5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52a67418-6f9d-4769-b425-b9864a02ddac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5763754f-a8bc-4f33-8282-0e74659412dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf829313-d236-4cc7-8f9f-714b5ff99469",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d84ae103-5da2-461d-b75e-b5a381a6c66c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c8b9e7a-b618-4202-b840-e6d3cfaeb286"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e50f9a0c-0bc3-4257-8bb9-77d4c570d389",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b30b651a-20bf-40bb-865f-0902000bc649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6289f6a9-5e33-47e2-a6e8-79a08cd79c34",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a2a4802-a716-41e7-bdb5-52ec962aa353",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6e91989-fa10-46b1-a199-19b5655dc27a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52364d51-9634-4849-8323-8448ef427c6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6664f3c1-124e-4dc7-9818-cc833f85537b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "058e9871-f5b1-42be-b267-4ef1f4273543",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6e324cc-a515-4505-a97a-2de912e52599",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1394a2e-320f-4c2d-9723-c1fd496e50bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7e362e1-0ecd-474d-86ed-b01409fe4a8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a9aabad-6638-4015-b2ba-19c1862107f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92d431c1-099c-47c9-93cd-d69adb41e5bd",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62c8d2e7-84dc-4ad2-8d98-2bf7d52f27e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9208640-e243-4fc9-b40f-58b7edb52597"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3f1c146-439f-492a-a713-e018d90688e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc4bd2f0-00f2-44f0-8566-d2023de2f932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e95f0f73-681d-4832-a5f7-6a289339d5c2",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c628f995-ac0d-42b4-bb04-a6c72c3a2f48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f940da8c-e754-4009-9afb-4f129aa71753"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d586c6e1-f119-4a60-8d40-14c944939731",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25551072-6d79-4b14-8a74-3ba4899f29ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "725b4d70-33e3-499b-b15c-6a7b03f76655",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2d82774-9058-44a2-826e-76343a6ec2d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a225486-2437-421d-a78d-7836cd5dde60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cee0be8c-ea29-429d-99e4-1d7b94e868b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22fe16cd-e033-44d7-8e05-216ba73d1d50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "651a25b2-bf9c-4857-b356-b5e1ee67789f",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50ff9efc-1e0a-43ab-a62e-8d25ea2346b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b7d964a-9226-4c0b-973f-acbe7cd661a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "467c5e05-5cbe-4562-8a96-cc3035c21447",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "972a9dff-087b-412b-b284-039aee82144a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f6ead8c-a68b-4d18-a928-3f2158e38055",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d04a7c8c-f4e0-4863-a659-f3d80173475c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "494a9014-3e37-4fd7-b4ad-434b4f79ab21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf77440d-4417-438b-87a8-fa0853983a7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7e48a80-4dcb-4ea6-aafa-91e077509bab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdf0759b-9c55-49b5-b0e9-272d34d20ad1",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b9069a5-2d29-4b96-b2fc-fffafd8585b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1396cc0f-3383-4205-ab1a-cbd23ee0199b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dee7c14-b18e-4b87-94c9-028c1ed0a3b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d22b897-5a28-47a3-b44d-9cb7ceaa258e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a772cf61-1c5a-4177-aa59-902b4f2208a8",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "543efc9d-6997-4e0c-89e4-5ad30791f442",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee5e82fd-73fc-46dc-b66e-a25d01ac88eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c49b6fa-d806-4aec-bb02-0399609e80b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1caaf002-4be8-49d1-a530-a32cca4295d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ef6d51f-c78a-4f8c-921f-5864bfd26f4e",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1074403b-e8af-4cc2-a889-4d29735208a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67ca4bac-e8c5-4fd5-bbce-9668c922c60a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d4e0993-7374-49b1-8564-60a30d408cab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4b70041-6e25-4614-bb27-7ec7d82cd77b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8dae84f-a27c-4a9d-bc6b-3d6d603582b5",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5ed59fb-8297-4141-9092-96b351b9aff9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b06e5305-0d5d-493b-acbc-d288f1360132"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b75c10e3-a6fe-417e-ab62-3c89d2c5baf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "291e881e-84ff-43c7-9430-80a6cb578b68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82362298-7ed6-40bc-b4b5-fb22335479c7",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0ae82aa-bcde-47eb-bb5a-35e4df35941f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3eafb904-2bd7-4f2b-93fe-8013cd4ad388"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67beb89d-ea11-44e6-b667-4de801b1b339",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02c6632a-ba76-4494-95d8-bca40e6c929a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87318b50-fd9f-4b6b-ac20-1117637b4152",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59eed107-906e-41d7-a904-cbba86ed8021",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7a17675-4955-411d-b82a-1e49ba353b58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71a1b14e-9aa3-4087-ac8d-2f56bc7b2220",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "342bd877-fb69-4a1f-a3ad-1a4f7f0b36cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9afe858d-eefb-4a8c-a817-ecda9c47b81a",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1096405-d5bb-4698-a651-fd7ec4041290",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a00dafee-6f50-4373-95b1-312bd99bfb10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47e6c8f5-b459-49ff-9920-df19fc14b883",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69495102-8690-4152-a55e-f1f83e0bbf08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9478a74a-edd6-41ef-8436-859652134605",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd116203-9d40-4da8-a404-8862f0fa79ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc02cbfe-83df-4e8d-bea2-c6cba16dfb37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7274640-85ab-4ee9-bf81-0a172b7d6fe6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "613d8175-d341-4e01-8903-9e7ea186a517"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c926dd53-c0bf-4b30-a53f-92f8a18b148f",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23141eac-f755-4db1-98e0-ce0daf161585",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6bee1e0-07bb-4119-8938-70ac44d9a279"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72bd0c89-67fe-4c87-b4c3-60b17eaac86e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c77bcc6-35d1-4477-9de9-ae077e088d91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8910afc6-3d97-45aa-81bb-3bd7aa034dc3",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94c6a6a5-c2a7-4352-9127-2092ac24dab0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca75e80a-975a-471d-816b-89bc1225e56a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7443b2e6-6634-45e8-b1fe-0fd72738371c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d856951-1480-405f-ae00-40787942ccce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f4444d3-8a37-4541-9d02-8e92d4602ee9",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f08dee1-c4c9-410f-ab19-8097341ba28e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be55e159-6b6f-4ae7-8f31-f11ab8318a2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69859e79-e902-4ae0-ba95-f3911a0030b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3610d699-c33c-4bc6-a59c-67c056e6cc70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a27dd55-6584-4a06-a336-effa5ffbbc16",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e30e168-58fd-424f-b8f2-fc842198f734",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "657f4949-d821-4e7c-8e31-01b964784969"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b582fce2-a7ae-4fac-bfe0-55ba746ddc7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "463017b9-cfa8-40f8-b74c-591f8855af18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ce1c99e-4477-4c1f-8de4-d20770afab7a",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94847b1d-ac36-4062-b0b1-1c0140086e78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42b32254-52cc-458f-9b5b-7f4fb2342714"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "152fabd3-a745-4339-994a-0eb9fe4b320a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0328d243-f733-4d0d-ad1f-4dfd8ad24253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14963080-0231-4d7e-9890-e2042bb364b2",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f67b457b-bbef-4d56-b9e4-c9571f8f243b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7d60255-9506-4e42-b45f-857933b30330"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e1e2278-e0c3-47ac-b04c-21fde909a990",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d06ec95-1a86-4fd3-b737-d0a5e1e92847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e73dda7b-8ab8-4d0e-86c8-94717fda5bba",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a032400f-aee2-4236-97fb-ef9687ccd15e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18c4f700-c474-4d18-9fd4-62093cf2c1a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "933cc3b9-ba78-4000-83da-3d43d8c079f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea07be3c-3590-4c8f-98d6-8b5024e44092"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08f2848c-e7bd-4e37-8ba5-b986d04cfce1",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78ef5503-8045-45be-b69d-6498a00190e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff263cc0-632c-4fad-ae33-1622c15da9b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f926e501-960f-483b-bafd-dcc4e83755b9",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95857976-466f-4399-af2d-90e845ef8015"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c678512-2c6c-45a3-919f-55d473067ad9",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47d85afb-a295-4ba2-a747-5e95884e72f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "beed7dcc-3bc6-4eb9-8287-b4d385ff3845"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0001897-6e03-4046-90b2-89559fcc6dc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bc873f8-fa88-4e33-8e21-27e1a3be7ee7"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a6615566-64cf-4198-89fd-cb78fdb2a984",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5347bb6a-2999-4be1-a406-924315125113"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "28484d32-eacb-4944-9505-03852230aaf2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b1692e26-16a0-4935-9ea1-79b6bee8d481"
                    }
                  }
                ]
              },
              {
                "id": "3a634d8f-2539-4718-9686-991595299316",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5f376e2d-88c5-4791-a5ce-1f8b7541f939",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8879d65-02ca-452c-b4db-9c0396c292d9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "5008d618-4f84-4f6c-b543-e6995a0b7902"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf392675-ee84-4a95-8a52-3dad6618b493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5dfc2776-0f1d-45b2-9f98-641777b59a74"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0dab3e88-7958-46b9-9e72-9006ecfbfb09",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "39615edf-c549-4edb-9bf1-7f8bc7a04f02"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7f942be6-b7b1-426f-936b-1c7612ada57c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "138b6462-bf6d-4f71-b2d5-58dcb1db6da5"
                    }
                  }
                ]
              },
              {
                "id": "4f00accf-7537-47d3-86f8-95f1265bbd85",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "383080e0-7413-453b-90ec-b0ab0afaa368",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f15a4a0-ab64-4e59-86ce-6e9a4fcd5d27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "8d699cae-64cc-4f8c-8b26-1c0bea2975e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "372e1a24-a582-4ddd-8959-ff9f3da23348",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac76bf79-6be5-4d13-b9ac-7c8e169ec7e5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "724484d4-2013-4cce-ad45-255f9b3f64ce",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b84a3311-1a2a-4527-bd62-d231c30cbf2e",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "49288c6c-6fd5-4e89-91e3-e8ae866ea71e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8b04fd40-4a6e-49e2-bb5f-abe0c54e9314"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "12a6a8e2-6811-4859-9564-28ab885644ae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9c851a12-82e3-4669-a292-d0923d2a3d8c"
                    }
                  }
                ]
              },
              {
                "id": "beb95283-ff47-438c-ac48-67b057649f74",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "763ef100-16ee-4d2c-953c-a0aa069dae05",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b21017b5-555c-4c15-9a68-d0ae6303179d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "988ee5a8-5f02-431a-bc30-c45480ccdc7b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "86f24d4f-4415-4048-af3d-662fb2d28326"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b860d3cc-2b30-4635-95cc-0bdb9150abdc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "6050a55a-9953-4f2b-9255-16b533b75d6b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e391a7a5-d231-45e1-8f4f-909cb56e15b6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d1e66e06-3b87-47b7-a3da-ad4d9eb4eb16"
            }
          }
        ]
      },
      {
        "id": "5d5aed4b-d266-45fe-a42f-ccc62f0d36ef",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "e4ca9fdc-f80f-4ac1-99b8-dea7944d5eea",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1ad4c2a4-13c2-406e-9d88-6a83162f4c25",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "969e018b-3613-4167-9de4-f6b344ed60a1",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a5cf4ab-afe6-4acc-90c1-3d7b5e721f6b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "27fdcb0c-2918-4350-85c7-5a007a35b4d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "656e318a-0734-4768-9479-8053ec066f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "979c76b8-75af-4521-98c3-3156cbbd018f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "91d2426a-f1dc-4822-8d5a-d50e01e6152f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "af2abe5d-a4fd-4e8a-a358-a6e4fb1b0b81"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b3c7ba86-c0e4-4969-9c0c-0d1371bc069b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "94462684-bdd5-4a56-bf19-b5d0de965ea6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7688b15d-e9ba-407f-9db9-f97c23f0c6f1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "b52343e8-b8a8-490f-9b8b-9ec916be0d0b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d6bedc02-e365-47e8-bf42-5ac01d1411c0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f582d759-ce61-42f0-abcd-3c8086f56500"
            }
          }
        ]
      },
      {
        "id": "5b69f2e4-2130-40f1-b68b-c0bd304d305f",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "40c3d5fb-cd08-41b6-82ef-0bbc0f93d0f1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "80fcf79f-9dad-41c9-88f4-be8db1dadff4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "592071e3-0cce-45cf-98b9-af859af4cd91",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cec48ec3-e142-4fbe-87e7-e0711fd9090a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "54ebd23d-c37d-48e9-9f23-c179bf363c78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41cd4a87-dc06-45af-a47b-a60805cdc50d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8d0a0d98-d548-452e-93a0-fc186efb815a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a11cc47b-f64d-4e2b-a3f7-16bbc1b02a01",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d5451ec8-6ed7-4f2e-9824-af175fe77c88"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "06bf5679-1240-4f4b-9125-afaba7aa64cf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "97a55928-3748-4f56-ad3a-3595442299dd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cdf0b33a-30ad-4e03-9027-f00e1e2c8257",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9e425566-b22f-4db5-86a3-8a390f805dcf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "db5ee759-7229-4ebe-87a9-59adf544f36a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "98d85073-a7f7-428a-8ed6-b21d1ce5b4ea"
            }
          }
        ]
      },
      {
        "id": "54dfcfdd-a0a1-4715-93da-b7e4d13eee44",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "6ef5a90a-61d4-4a60-9429-528f64ffd2c4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5ca0d10e-8b07-4e50-8aed-a5f0dd3531ed",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6cebad6a-ee7c-4ff0-93fd-dda625b34ca5",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb59248e-c743-45b0-a369-35acb1867f76",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d44c166a-60f5-4435-bdd3-c612338f08a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43f4fa45-75ef-4d75-b932-d96e4e3f50b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "72219b49-3796-41e6-90b2-9c8beffdb595"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6f7df527-8073-46eb-9f45-dca30cbb7046",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d67747fa-8fc0-4fb7-ad16-49c004361bd0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4c49c529-389f-4d79-bb27-0f8e9c4417ff",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3fe956cd-9f4d-4bea-96f4-1524d412dfad"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "edd8cbe5-5514-4f03-84cf-0b88e064747d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c79c25d2-1ec8-4b31-a38b-69e2133c93f7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "803c561d-1d2f-47e0-ac1f-a85a714306b1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0b172faa-3249-4897-bfdd-b2bf32923803"
            }
          }
        ]
      },
      {
        "id": "37e47cee-1242-4f47-9bf9-892bc3f01ecc",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1e235bf5-45d3-478d-a0ea-cce0660d009f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dcb39dfc-3155-4e9b-acec-1d72e562c4af",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "51f9dd86-fbd7-44a4-b49f-e02d17ad3f54",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c8855680-fa4e-441b-bd89-2c1d51891d0c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b9f03848-d96c-406c-b85f-234dcaafb912",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 58.29824561403509,
      "responseMin": 6,
      "responseMax": 535,
      "responseSd": 79.35467019106459,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1698021240810,
      "completed": 1698021269402
    },
    "executions": [
      {
        "id": "6768700c-13c6-4554-814d-3e70b52f726c",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "d4e31d31-3293-420e-b6a7-79607b474f2b",
          "httpRequestId": "48d294ce-abbb-4767-bf1d-7eacd7c26f04"
        },
        "item": {
          "id": "6768700c-13c6-4554-814d-3e70b52f726c",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "e8f5fbad-c247-4854-9444-9af0f363d5b0",
          "status": "OK",
          "code": 200,
          "responseTime": 54,
          "responseSize": 0
        }
      },
      {
        "id": "806b4807-d95f-4e95-862d-f567bf38cedb",
        "cursor": {
          "ref": "b3921edd-7143-4585-891e-b603fb099bb9",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "bf9cac89-15ac-4087-a552-78a058598a76"
        },
        "item": {
          "id": "806b4807-d95f-4e95-862d-f567bf38cedb",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "c0ffb2a7-1258-49c3-9012-1100fb1c45b5",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "6442e348-271a-4e21-b00f-6fb948440fa5",
        "cursor": {
          "ref": "9ff948a7-0869-4a88-a913-da39717d268e",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6d33904a-7c38-4328-a216-ebe885032af4"
        },
        "item": {
          "id": "6442e348-271a-4e21-b00f-6fb948440fa5",
          "name": "did_json"
        },
        "response": {
          "id": "d25f1079-b083-41d6-8a50-d243c276fa52",
          "status": "OK",
          "code": 200,
          "responseTime": 315,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44a3fc43-fb9a-4dbb-acfb-6e4bf898f918",
        "cursor": {
          "ref": "ba0d8446-87dd-4852-9de3-c8f4ad3fb357",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ead5e15a-ee4b-4273-a421-9de0f55550a4"
        },
        "item": {
          "id": "44a3fc43-fb9a-4dbb-acfb-6e4bf898f918",
          "name": "did:invalid"
        },
        "response": {
          "id": "5c113e1a-6319-4f3c-9d86-26808cb99143",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44a3fc43-fb9a-4dbb-acfb-6e4bf898f918",
        "cursor": {
          "ref": "ba0d8446-87dd-4852-9de3-c8f4ad3fb357",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ead5e15a-ee4b-4273-a421-9de0f55550a4"
        },
        "item": {
          "id": "44a3fc43-fb9a-4dbb-acfb-6e4bf898f918",
          "name": "did:invalid"
        },
        "response": {
          "id": "5c113e1a-6319-4f3c-9d86-26808cb99143",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae5ada73-c46c-4c99-abec-59c51838d9d7",
        "cursor": {
          "ref": "19674d69-b1b5-4e90-aab6-7ab55fa8e9f2",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a664dd8b-5c80-4889-bbe6-4b99a68ff7fa"
        },
        "item": {
          "id": "ae5ada73-c46c-4c99-abec-59c51838d9d7",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "01b73a79-d351-4223-9862-eb1b5f1be21f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 92,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2ce96fd-e9a0-4ae2-b56a-e9dc328e7ea6",
        "cursor": {
          "ref": "21b8552f-03c4-4b5a-af98-e8f1a13dff1d",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "dbe5ce54-5d68-4b9d-a9b0-723ae2e58ec3"
        },
        "item": {
          "id": "e2ce96fd-e9a0-4ae2-b56a-e9dc328e7ea6",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "f630f508-a150-47b9-9a2a-1007d8c4fb8c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 33,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c80d420-a063-4d5e-beb9-8b36731dbb10",
        "cursor": {
          "ref": "8d7b2fed-9f16-4cb7-a436-2de3f50cd925",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8bd6103e-6667-4aa5-b8b2-f210421e3336"
        },
        "item": {
          "id": "1c80d420-a063-4d5e-beb9-8b36731dbb10",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "a9c10001-4523-46c4-b212-cdfae28d002e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6f2607d-a586-4175-9493-5212cba24a16",
        "cursor": {
          "ref": "f329dae6-afb7-4324-8baf-593930edd6db",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "89ff451e-2439-449f-a72e-5dccd2a0416e"
        },
        "item": {
          "id": "f6f2607d-a586-4175-9493-5212cba24a16",
          "name": "identifiers"
        },
        "response": {
          "id": "0d743542-0686-4fe3-b462-dabba7e623ca",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de6c0401-2525-4b80-b658-5afffb0c7f74",
        "cursor": {
          "ref": "30deea79-14be-448e-975c-5af0fd6bd6fd",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6a4e1db3-7343-4124-adef-7bfce4f309fd"
        },
        "item": {
          "id": "de6c0401-2525-4b80-b658-5afffb0c7f74",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9ef33417-c080-4408-94bd-423d5173790a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd015657-9003-4048-ac5d-23720552e434",
        "cursor": {
          "ref": "166e2439-858a-458b-a981-b6c47dace6bd",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "39130b2b-cce4-4a98-9144-a0027960a282"
        },
        "item": {
          "id": "cd015657-9003-4048-ac5d-23720552e434",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "ad34f3b0-d733-4a30-aaff-660e23e5c1eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42fc651c-0929-413a-8386-4b6c4c3739e9",
        "cursor": {
          "ref": "28e7e1c5-2ce1-4972-add2-80701c741f35",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "28099e57-7a50-41d0-97aa-3626e32ff17b"
        },
        "item": {
          "id": "42fc651c-0929-413a-8386-4b6c4c3739e9",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "781270de-e9c4-4f10-8b34-7d66796a22cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fceb22fd-8fbb-4513-8b53-5aa0031dd544",
        "cursor": {
          "ref": "07f0b410-42cb-461e-91e4-e1ae070b0f28",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "0bc2b836-f311-4ff7-a073-1a91a0245840"
        },
        "item": {
          "id": "fceb22fd-8fbb-4513-8b53-5aa0031dd544",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "542c7dbf-e514-461e-80bf-895c4102cfe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3e6cdeb-43b1-48bb-81e9-970b3db0f098",
        "cursor": {
          "ref": "a022cb68-a8be-46cc-a815-913549138677",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "2de826e6-4c48-477f-a0cd-8617c4353ebf"
        },
        "item": {
          "id": "c3e6cdeb-43b1-48bb-81e9-970b3db0f098",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "017d0fef-49be-48b9-b51f-c041ba7d297e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b87fc6f-c4ee-464e-9c48-a28f5e058e8f",
        "cursor": {
          "ref": "c40a0914-85aa-4b20-b5c4-db58d12bb5a2",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "74005e2d-1f79-4280-be2c-6579968c6f1b"
        },
        "item": {
          "id": "2b87fc6f-c4ee-464e-9c48-a28f5e058e8f",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "f498db23-29fc-47b8-ba39-1290ba75219c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7ab46d6-28bf-470b-9263-c59926cc2b28",
        "cursor": {
          "ref": "4bf0350f-41d0-40ad-ae0b-23513d5ff76e",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "87e6bb57-d6ef-49bc-86e7-83a878183b8c"
        },
        "item": {
          "id": "a7ab46d6-28bf-470b-9263-c59926cc2b28",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "9208a3dd-03b8-4523-8c09-a4e04443ff4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a4c9356-2a02-434c-847b-54388f1e4e48",
        "cursor": {
          "ref": "977f3568-2422-432e-97c8-f8666d25998b",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "b687f298-d35c-4ecb-8a46-005a5914d55d"
        },
        "item": {
          "id": "4a4c9356-2a02-434c-847b-54388f1e4e48",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "ef92682d-a800-4b32-90a4-849e259624db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6346bb04-bfea-4a8a-9f59-17c8c9999ee1",
        "cursor": {
          "ref": "cf06295a-e120-4abc-90c3-62270848478a",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "db4a1bf6-95dc-477c-a720-0a69cfa1514d"
        },
        "item": {
          "id": "6346bb04-bfea-4a8a-9f59-17c8c9999ee1",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "872fb3a7-f26e-477c-afc1-0f9af3833d4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb7b4a5e-1378-4b41-bd0b-d9bf4f3d70e3",
        "cursor": {
          "ref": "2e9b2dbc-2a12-4cf8-b700-eb93a9eb24f5",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "002de5d5-3a13-4c60-8e0f-ccf7aefe9fce"
        },
        "item": {
          "id": "bb7b4a5e-1378-4b41-bd0b-d9bf4f3d70e3",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "7f4b42a0-9c9d-48ae-8b6d-55e053741aab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e762adc-4915-4484-8537-828032aab185",
        "cursor": {
          "ref": "70f71203-9861-48bd-9c90-e2a64c98b855",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "14b9df12-0980-4a42-bd7b-13f94f6b4254"
        },
        "item": {
          "id": "4e762adc-4915-4484-8537-828032aab185",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "3a54aa4e-34b0-4678-96a1-7febcf07b51a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfc3e91d-d8a9-41a2-bf2b-0efaa56a7c31",
        "cursor": {
          "ref": "dc791ba8-376a-4d04-b625-1ecb014f9dec",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "61d1d692-2cee-4c69-a2d3-08621ab6d433"
        },
        "item": {
          "id": "cfc3e91d-d8a9-41a2-bf2b-0efaa56a7c31",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "a50cf7ec-8288-4d38-b74d-7ad1b15aa07b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b91680e-e926-4609-8c18-912c9b885fee",
        "cursor": {
          "ref": "acd9c32e-bc63-4138-a23e-71b55a469c53",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "288d37a3-a1d8-422c-b192-383a6adf58e3"
        },
        "item": {
          "id": "2b91680e-e926-4609-8c18-912c9b885fee",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "00e15c2e-8b3a-489f-b3f9-ad0779b81b9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "274cfd65-275b-4fe4-ab66-2b053b546db7",
        "cursor": {
          "ref": "6c69cd3b-10ac-4aa3-b9e4-9a23eec59045",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "36e18e68-dacc-4a7a-a228-57e23ae78524"
        },
        "item": {
          "id": "274cfd65-275b-4fe4-ab66-2b053b546db7",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "77f244ab-fc49-4085-a0cd-d72867c21f2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81434cbc-91b2-409a-a65f-a8c4acbebe97",
        "cursor": {
          "ref": "b1c52c51-a455-4b02-a3a6-0dbc17f844ab",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "7d8c4a21-3f03-4d17-a77b-5907f197b84f"
        },
        "item": {
          "id": "81434cbc-91b2-409a-a65f-a8c4acbebe97",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "0b323cb0-de7b-45ef-a0ba-1e3d83cd5e0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e1bdb87-2142-4cba-934e-325522bc48b4",
        "cursor": {
          "ref": "7e275484-9b75-47d7-82a5-d0fdabbbd9ee",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "ec7ab59e-011d-4deb-b935-9bcc9c98e8d0"
        },
        "item": {
          "id": "3e1bdb87-2142-4cba-934e-325522bc48b4",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "6fe09607-35a9-47b6-81d1-45bccdb96d7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50855018-6759-4c93-bdd4-7fd0f08c1342",
        "cursor": {
          "ref": "bcb98448-34a2-4ec0-9232-5baf84b60edd",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "036930b1-c3bb-4fdb-8db1-21c59ce99e83"
        },
        "item": {
          "id": "50855018-6759-4c93-bdd4-7fd0f08c1342",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "82f347a0-06a6-4885-88eb-60f4e2f3ba52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47048320-1aed-4e87-a02e-8729b1f80fab",
        "cursor": {
          "ref": "dd309bc3-7690-487d-be0c-21f6ef388b59",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "c4b85114-f481-4f56-8573-4532d4389be5"
        },
        "item": {
          "id": "47048320-1aed-4e87-a02e-8729b1f80fab",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "77f05d9d-2ea7-4b28-8f18-efaa76af3d04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a058e5c-fedb-44b9-accc-624a84d2c999",
        "cursor": {
          "ref": "0e87313e-1103-4ee1-acfb-dffac7322d77",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "f46eb403-685f-4727-9db5-377716b1e985"
        },
        "item": {
          "id": "0a058e5c-fedb-44b9-accc-624a84d2c999",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "26b8ddec-3f74-4b9b-900b-82191937e39c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efc6f281-2849-46b9-bff8-9f9bdd2d8b72",
        "cursor": {
          "ref": "047a7534-e312-43da-ae63-12ecaaa53af3",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "5f11be74-f081-4ce3-b5e8-32f4ab64aa2d"
        },
        "item": {
          "id": "efc6f281-2849-46b9-bff8-9f9bdd2d8b72",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "b00e2c38-f86d-4fb2-a2dd-ccf3eeb29430",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3bcca95-82bc-4165-b333-e72f5d347de9",
        "cursor": {
          "ref": "46a9462f-ddf2-4c1f-b069-8da792955f39",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "ffb1b6ed-d815-4225-8870-e10fc690cd6f"
        },
        "item": {
          "id": "b3bcca95-82bc-4165-b333-e72f5d347de9",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "9424d655-e31d-4afb-bbfc-7e5d459c10c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a48761c-d1ad-48ca-937f-67a96d92fd7b",
        "cursor": {
          "ref": "4866e4a4-f597-4197-8bf0-9e7af464a9e5",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "68d625b4-9add-43d0-91f4-2d6ed53b68d0"
        },
        "item": {
          "id": "7a48761c-d1ad-48ca-937f-67a96d92fd7b",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "e24aab81-47e2-4abc-9ebc-0f0b77d6ad0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54254f6d-531c-4f06-9bfe-2976e346ebdc",
        "cursor": {
          "ref": "1401b721-155d-437a-b531-c5874ddfc908",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "9e9ed2e1-6246-4c6e-bef6-7e99b519735b"
        },
        "item": {
          "id": "54254f6d-531c-4f06-9bfe-2976e346ebdc",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "f27eb8b6-b640-4cdc-aebf-b567ecab03cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edaf0896-7079-4247-a18b-9f98b90c45e4",
        "cursor": {
          "ref": "1c884bc9-22c3-4c89-a47e-3edaa4aa7219",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "f3f41f4a-d252-456d-b172-49cef11a2a23"
        },
        "item": {
          "id": "edaf0896-7079-4247-a18b-9f98b90c45e4",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "1b6f6b22-8d98-499e-a2d1-b9ee67953085",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2de41429-d796-440a-a6c3-11332ba02429",
        "cursor": {
          "ref": "2742f150-d0a6-40cf-8af1-ef540bdac41c",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "576e5845-33cf-43fc-8fe4-c3088c67ae12"
        },
        "item": {
          "id": "2de41429-d796-440a-a6c3-11332ba02429",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "6ec55f15-43ee-4382-b8bd-e7310dacab2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c93545d5-7bc6-4e5d-8b03-2acac217590c",
        "cursor": {
          "ref": "1f5317ab-3800-4a72-92fc-d91de9abab80",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "0600c02d-2906-4557-abbe-c191b3fa4b13"
        },
        "item": {
          "id": "c93545d5-7bc6-4e5d-8b03-2acac217590c",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "d93d1142-620b-47ae-bb20-db60c83ddd2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbc58652-49a2-4b71-b6b9-b03feeb41c28",
        "cursor": {
          "ref": "d1f9929f-fc77-4ab4-a403-475c47d9196b",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "aa17019a-8246-458d-a061-9adaafb8febf"
        },
        "item": {
          "id": "fbc58652-49a2-4b71-b6b9-b03feeb41c28",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "2f362bcd-3ca7-475a-8638-398650426344",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01217755-18c6-4fb3-9771-5b6bfda1f98e",
        "cursor": {
          "ref": "98785c65-a20b-4d5d-8fb7-97cdb04b77e8",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "040d2e85-4dd7-4d21-acce-84a4eb6a3bc6"
        },
        "item": {
          "id": "01217755-18c6-4fb3-9771-5b6bfda1f98e",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "96a62de0-f47f-40e7-8c4f-8572ab21a063",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c54bd94-9360-471b-ab95-0ccd59f89d56",
        "cursor": {
          "ref": "b4f12625-79d5-4dbc-a99c-f57e22e0bace",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "f9a67ba6-41f2-4f09-a469-8ba4b5862bdd"
        },
        "item": {
          "id": "9c54bd94-9360-471b-ab95-0ccd59f89d56",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "b6485217-a558-4348-897f-b2d8d91aff82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32a9bf81-7c86-4553-b71b-ba97bcf58cbd",
        "cursor": {
          "ref": "b5d6fcad-f2f1-4719-b61a-3425decc2500",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "b7999b33-94c4-4e71-ae71-e718c0f04cde"
        },
        "item": {
          "id": "32a9bf81-7c86-4553-b71b-ba97bcf58cbd",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "f0d3b41b-33c4-4f8d-8d3e-dd43a7d109d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29697108-57d7-4a67-97b5-402ba01f01eb",
        "cursor": {
          "ref": "88362457-ce79-4bd1-a588-6f16be0195d8",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "c42a55c1-de53-49b8-b45b-8c00b1149ca3"
        },
        "item": {
          "id": "29697108-57d7-4a67-97b5-402ba01f01eb",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "b0efda61-aa56-4628-b50f-d1964c22cf16",
          "status": "Created",
          "code": 201,
          "responseTime": 535,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "c268c3d9-8cea-4f4c-8004-4ef17d37b753",
        "cursor": {
          "ref": "674ba709-aeed-4d8d-b31f-4155a4644898",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "1b89f8ea-8d3c-4b43-8dbb-e45f0800edef"
        },
        "item": {
          "id": "c268c3d9-8cea-4f4c-8004-4ef17d37b753",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "46f29610-f081-40ff-b924-2faf47bc0a40",
          "status": "Created",
          "code": 201,
          "responseTime": 301,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "44204861-a7c6-420d-ace8-ddfb0d76191a",
        "cursor": {
          "ref": "d0f5f56c-0fe0-4377-ba25-5ecec74580d4",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "51a0dc4b-04a1-400c-a01d-554f9b649f3b"
        },
        "item": {
          "id": "44204861-a7c6-420d-ace8-ddfb0d76191a",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "d8620446-e686-448d-a8a7-73199d47c3d2",
          "status": "Created",
          "code": 201,
          "responseTime": 301,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "0b954056-ece5-4336-885a-bb987cc48fa1",
        "cursor": {
          "ref": "299ce808-8af8-41f6-93b0-6630d8638746",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "d0217a39-e878-4eb2-8c7c-5db0ca431349"
        },
        "item": {
          "id": "0b954056-ece5-4336-885a-bb987cc48fa1",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "e225b7d9-0938-4007-bf93-cd08d45a6a9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6881b69-d1f6-4e9a-957d-4f062e376f13",
        "cursor": {
          "ref": "8fd1fbb5-d735-4c63-a76a-f316fa62a0c3",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "2e53ec91-14db-4e2f-9138-1a25de9f0ea7"
        },
        "item": {
          "id": "d6881b69-d1f6-4e9a-957d-4f062e376f13",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "baa12baf-5d98-47f7-b1ea-1dee2044bba9",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "b0f52f32-4b1b-4496-a777-5ff4b4bbe502",
        "cursor": {
          "ref": "747180b7-f86f-4677-9f05-def5766f029f",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "f5b7caab-dabf-4a6e-9e84-a7fef29275f8"
        },
        "item": {
          "id": "b0f52f32-4b1b-4496-a777-5ff4b4bbe502",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "dc9ebd24-c4e6-42b7-b895-87d513daed03",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "e39f4ede-d831-49b8-822e-7816942ab81d",
        "cursor": {
          "ref": "21ccedbc-a5b5-45f8-85f2-afba30f8fd24",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "eda1e7e0-c7e9-4469-8476-e9ca47e69a2b"
        },
        "item": {
          "id": "e39f4ede-d831-49b8-822e-7816942ab81d",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "9d379b74-11c2-41b9-9376-6e6bead1a387",
          "status": "Created",
          "code": 201,
          "responseTime": 231,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "a64c326c-296c-4a4b-b43b-64137a0b0ca2",
        "cursor": {
          "ref": "4c717b79-38a3-4dc4-86fe-a4b7997bd411",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "feafeff6-3696-47dc-9aea-dfe3d6c5120b"
        },
        "item": {
          "id": "a64c326c-296c-4a4b-b43b-64137a0b0ca2",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "b69b8364-6adf-44c1-a305-a3b62220324e",
          "status": "Created",
          "code": 201,
          "responseTime": 525,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "b4a5fe5c-b4b6-4d56-86a4-02462df75fe1",
        "cursor": {
          "ref": "3a9705d0-c082-4550-a2e5-aef38ee3731d",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "0ef4f236-e864-4006-8f5d-115d24314743"
        },
        "item": {
          "id": "b4a5fe5c-b4b6-4d56-86a4-02462df75fe1",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "e2bb6511-31dc-4ca1-a258-b3be532f5bab",
          "status": "Created",
          "code": 201,
          "responseTime": 237,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "5c83b360-df9c-4041-98ca-f46c14b154fb",
        "cursor": {
          "ref": "f2791a49-80ca-4424-b65e-499873172aef",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "50248acb-5ddc-4259-8438-4ad5b6830b55"
        },
        "item": {
          "id": "5c83b360-df9c-4041-98ca-f46c14b154fb",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "a9cbbcb7-20c1-4aa9-97d8-0234866de9be",
          "status": "Created",
          "code": 201,
          "responseTime": 240,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "56b44279-b3ef-4581-985a-c98355962219",
        "cursor": {
          "ref": "dff6f76f-f6e9-4021-a4a6-5cf3433801a6",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "1c00e2df-8bc5-46d6-a2d9-f1095921dc03"
        },
        "item": {
          "id": "56b44279-b3ef-4581-985a-c98355962219",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "ec0ea847-bc5e-427c-a764-e3065f3fa1ed",
          "status": "Created",
          "code": 201,
          "responseTime": 249,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "54555bd2-bd5e-4e8f-aadc-4ec5828de414",
        "cursor": {
          "ref": "ae3c62e8-cd8e-4c4e-8a96-b7547bb3d370",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "0f0962bd-2da9-429c-9953-a2693c7e3dc8"
        },
        "item": {
          "id": "54555bd2-bd5e-4e8f-aadc-4ec5828de414",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "d57949f4-978a-47c6-80de-8e951198b5a6",
          "status": "Created",
          "code": 201,
          "responseTime": 301,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "2a925b26-ce34-4add-bbec-e409fa3d15d3",
        "cursor": {
          "ref": "933db1de-1e51-4877-8126-d74e76e40175",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "50383347-396e-476c-896f-8d09669d975f"
        },
        "item": {
          "id": "2a925b26-ce34-4add-bbec-e409fa3d15d3",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "24859c1a-18e7-4424-9a03-c23845048ea1",
          "status": "Created",
          "code": 201,
          "responseTime": 365,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "e2c20cb3-daf9-4c8b-aaf2-9ef96c8c8915",
        "cursor": {
          "ref": "ea5ccd2d-49e4-4c8e-8d2f-e96bfdc5d1cb",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "071e724e-8367-4d14-8881-c6da647904bb"
        },
        "item": {
          "id": "e2c20cb3-daf9-4c8b-aaf2-9ef96c8c8915",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "5079178c-a070-4ee9-843a-cf43e3909b0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c69b8714-4ba3-4625-9676-8a59fac0aff1",
        "cursor": {
          "ref": "3e10c81d-db0d-4f1c-bd1a-e4fd2f6ef7e0",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "531a7d2c-7fea-4393-8ee3-e008a4163e62"
        },
        "item": {
          "id": "c69b8714-4ba3-4625-9676-8a59fac0aff1",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "ceb8e154-58e9-4263-8e6d-a2b7f62db448",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab10ef73-f4f0-461d-8fce-2bfcc9d86e2f",
        "cursor": {
          "ref": "681208c3-7569-4788-af1f-abae206e1104",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "3b63bf2c-926a-40c6-af98-468bbaebd607"
        },
        "item": {
          "id": "ab10ef73-f4f0-461d-8fce-2bfcc9d86e2f",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "c04bf7d1-3953-4674-93cf-02bebecf1e43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9609b55d-42d6-4f4d-839f-d6f19de4d320",
        "cursor": {
          "ref": "5a4eb299-f105-4d07-a41b-a08ba84e137d",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "5ab5cb4b-7314-4801-94de-34409a0824b1"
        },
        "item": {
          "id": "9609b55d-42d6-4f4d-839f-d6f19de4d320",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "473a0621-ad24-47a2-beda-fe27ccc519b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35803398-745c-48fa-a765-3ddf202c7418",
        "cursor": {
          "ref": "bb7b05ae-479b-4550-8561-c33bcd300a0b",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "8520d28d-ebab-4a67-a131-ef1f99df3424"
        },
        "item": {
          "id": "35803398-745c-48fa-a765-3ddf202c7418",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "4a69a114-f96c-467e-96ac-2b4880e32994",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdd4a60e-f4fb-4869-9cf7-fb9051343f85",
        "cursor": {
          "ref": "713017f3-591d-41fd-82b0-b7de40a278ef",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "aa29bc51-7533-4cf7-8038-9b9b490b4d2f"
        },
        "item": {
          "id": "fdd4a60e-f4fb-4869-9cf7-fb9051343f85",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "94fd3d26-401a-42d8-98e1-36dfee0492ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c55816af-b11b-45ca-b744-5e2c6f61ed05",
        "cursor": {
          "ref": "a7158022-7473-4507-b63f-93ec81f370ee",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "c7b77254-a7a2-44fa-b7ad-9980fd828b2c"
        },
        "item": {
          "id": "c55816af-b11b-45ca-b744-5e2c6f61ed05",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "a18ceb85-3b33-4af7-a19d-0a50d6b9655f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22783fc2-12d4-4c8b-8a7d-d3851a944820",
        "cursor": {
          "ref": "988fa84b-81b8-4aac-8b68-17b266f8123a",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "6dc03aca-a936-4d61-a04b-96d11a719382"
        },
        "item": {
          "id": "22783fc2-12d4-4c8b-8a7d-d3851a944820",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "99f8bf88-7a3f-4042-8371-9ecccc96bc31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24d3d9ee-fc6e-4e2c-8765-0cde5a25e031",
        "cursor": {
          "ref": "612389e8-7c73-4092-887f-a7745c6940e2",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "8af8656b-cfa0-47ec-97c6-9bfda09ee0d7"
        },
        "item": {
          "id": "24d3d9ee-fc6e-4e2c-8765-0cde5a25e031",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "be6fc210-f95e-4407-b8c2-76eb9d19d5a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a447afec-a92e-44f3-893f-c6ab8b3961f3",
        "cursor": {
          "ref": "fd93dd10-71fd-4ae2-bf32-4714c38efb5c",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "ed65358c-5280-40a8-9c07-434cc1744c5b"
        },
        "item": {
          "id": "a447afec-a92e-44f3-893f-c6ab8b3961f3",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "8a35e361-3cf8-4457-9584-5b84c7e044dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ca274d6-ef82-4d48-b4c9-9193380a31e7",
        "cursor": {
          "ref": "be3b3111-783f-4332-8eff-5673bd3eb1ee",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "671ed372-129a-448b-93b5-3e64f939e733"
        },
        "item": {
          "id": "7ca274d6-ef82-4d48-b4c9-9193380a31e7",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "7abb680c-19c0-4b8f-8486-a7a9f265fd1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d66ce387-2991-403f-8514-972455dfff3d",
        "cursor": {
          "ref": "4ce50c8e-a659-476e-9584-de9e9f8627bc",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "3bcd537b-04a2-4398-9e08-8e8f8a23a645"
        },
        "item": {
          "id": "d66ce387-2991-403f-8514-972455dfff3d",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "401b062f-813f-49ec-9642-8d715b569722",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cd30ef9-7bb7-4122-8b93-b577329548e0",
        "cursor": {
          "ref": "b4a1fe22-81c6-4caa-a631-c197936b97f3",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "4b248180-5375-431b-b3f2-4bfeadd25469"
        },
        "item": {
          "id": "3cd30ef9-7bb7-4122-8b93-b577329548e0",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "0547f414-160d-47a2-bade-00b8e76f2c73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e3aee2f-07ef-4d29-a925-cfeb784ad765",
        "cursor": {
          "ref": "ece791d6-2e5e-4a33-a509-1651b8e2733d",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "4c862e25-60d0-4f5c-a240-d1baaa874ab2"
        },
        "item": {
          "id": "8e3aee2f-07ef-4d29-a925-cfeb784ad765",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "54c8e915-072c-43b4-bf95-9ad0ca7e47ff",
          "status": "Created",
          "code": 201,
          "responseTime": 249,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "198912fa-644b-4b22-9f86-4cda38bea6a3",
        "cursor": {
          "ref": "0de763c8-bf66-49b4-ae1e-31cfcea3e84a",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "24b66c32-0786-4979-a8fd-3fcc0a3fe044"
        },
        "item": {
          "id": "198912fa-644b-4b22-9f86-4cda38bea6a3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "1c20d2cc-583b-4e78-b3de-a80065daa19d",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "c2949ed1-9ce9-4102-bfc7-1815f97e0819",
        "cursor": {
          "ref": "823fe259-e9a3-4f5f-93c2-59990ac66810",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "67e46443-27e2-4be2-be07-d9fc15e22d28"
        },
        "item": {
          "id": "c2949ed1-9ce9-4102-bfc7-1815f97e0819",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "5f334066-02ad-4ce4-8bc5-2740af34117e",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "bbbe496b-8528-4b7a-b92b-7e484573a45f",
        "cursor": {
          "ref": "6d2f5532-1171-4a9b-b61f-5748d2ed651d",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "eaf12e5c-1dea-47cc-8bf5-b63a7e34cce1"
        },
        "item": {
          "id": "bbbe496b-8528-4b7a-b92b-7e484573a45f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "9870b19d-f746-49bf-821b-31388e2be966",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "9a38c3c4-f88f-4d35-9c35-8d86be8f9d42",
        "cursor": {
          "ref": "438a6dbd-0804-40b8-9ad7-830a8a362bd6",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "ea8fac79-bfb3-47a1-a68f-6fda48300eee"
        },
        "item": {
          "id": "9a38c3c4-f88f-4d35-9c35-8d86be8f9d42",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "abad069e-c6d1-49f6-b1f0-a92b073d28d8",
          "status": "Created",
          "code": 201,
          "responseTime": 255,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "5886b89b-6952-425c-9841-3677a76f6d69",
        "cursor": {
          "ref": "b8cd6454-aea0-43fc-9de1-63de3b62649a",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "caceb559-84d3-46d2-8196-e46fc52495b5"
        },
        "item": {
          "id": "5886b89b-6952-425c-9841-3677a76f6d69",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "559f584d-cbf8-4010-a59d-e686f448db0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa885f2d-ee13-41b1-9d88-d7d92c2fab61",
        "cursor": {
          "ref": "f73c851d-86ca-4796-8c57-909008da1ce5",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "884cbeb1-2530-4697-8211-4d41ec6b0de7"
        },
        "item": {
          "id": "aa885f2d-ee13-41b1-9d88-d7d92c2fab61",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "cd200c24-e573-4975-a661-efedc2579738",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70cd5b6a-fa5a-4ec2-93fe-545a1e6f34a4",
        "cursor": {
          "ref": "ae17de38-a9b1-46f6-9acb-8bb802551fe7",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "817ac029-5251-40d7-ae69-4f1bdc3abba6"
        },
        "item": {
          "id": "70cd5b6a-fa5a-4ec2-93fe-545a1e6f34a4",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "94c3dcc9-a9f5-4163-9ce9-eb7b8fafa915",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6f352a1-4d9f-4555-b811-3f2d6ccdad47",
        "cursor": {
          "ref": "053be9a1-5ff4-42b4-a1b6-d57dad020c47",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "f3d046a4-b43d-4280-b997-2f4269c972e7"
        },
        "item": {
          "id": "f6f352a1-4d9f-4555-b811-3f2d6ccdad47",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "a96d1cfd-5294-43b5-bb2f-466ebc526e47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ff4fec8-2014-4f43-8242-b9897b82ef38",
        "cursor": {
          "ref": "bd718945-3490-4225-aeb5-1a5624e453f9",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "f179c09b-93eb-44b2-ab41-0ae328099b6c"
        },
        "item": {
          "id": "1ff4fec8-2014-4f43-8242-b9897b82ef38",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "78b8900d-e3e6-4baa-98af-9128368fd8be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cac6efad-a810-40d5-8bc5-6c0f0e6f1cee",
        "cursor": {
          "ref": "86e1d90d-2681-43a5-8b91-c7edad263566",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "1f27a473-42eb-4497-b409-0a03d80fb858"
        },
        "item": {
          "id": "cac6efad-a810-40d5-8bc5-6c0f0e6f1cee",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "d5179291-6516-4644-a423-87a4128a5576",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97c39f67-eb46-440f-9818-fffd5ce9df61",
        "cursor": {
          "ref": "61ea1a50-2589-4193-a1b7-994c701e9e99",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "27031daf-cf83-4b59-befb-e66250a812e5"
        },
        "item": {
          "id": "97c39f67-eb46-440f-9818-fffd5ce9df61",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "f75ec0d8-00ab-4552-9ecc-cc89057b5809",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "247445d9-9c45-4bda-897f-55bc3d126dd7",
        "cursor": {
          "ref": "2bd64e0f-f9df-4431-b669-7d634debbff9",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "70cf471f-f518-4f7c-80ba-154c085e7a88"
        },
        "item": {
          "id": "247445d9-9c45-4bda-897f-55bc3d126dd7",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "6290c086-a219-49af-9846-06758231279e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4a06916-a44a-4a70-bea3-f16f47ba56e9",
        "cursor": {
          "ref": "ce7e230c-5c66-4559-948e-118880724565",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "95564257-35cc-4b6d-83ca-00f36d4ae702"
        },
        "item": {
          "id": "a4a06916-a44a-4a70-bea3-f16f47ba56e9",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "7fadc3df-080d-4229-b0b9-980a5d3ff729",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b48a45f-b6d2-4029-9622-4e98256e87de",
        "cursor": {
          "ref": "f138e549-a621-4852-82b7-247180c57d1e",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "25d854a3-b738-4d8b-91ae-2125e4538344"
        },
        "item": {
          "id": "9b48a45f-b6d2-4029-9622-4e98256e87de",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "749f47c4-28f3-4d1f-b3c4-5f07b5e43a12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53b592fa-77d3-4a89-a335-9ab1d620c785",
        "cursor": {
          "ref": "890946ec-0ebf-48a0-babf-c9d39eee78bf",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "a8d711c2-814c-453f-a5d0-64237a2bd8ac"
        },
        "item": {
          "id": "53b592fa-77d3-4a89-a335-9ab1d620c785",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "4d991682-6cfb-47e3-85ff-8b6276e47fa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fde2bc4-ae4f-4e3a-8ccd-1b7c724e58ad",
        "cursor": {
          "ref": "3008f954-82d4-4ea3-9a29-2d376373e442",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "fc2c5308-d823-437b-b2d3-749fd310c22e"
        },
        "item": {
          "id": "9fde2bc4-ae4f-4e3a-8ccd-1b7c724e58ad",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "12243f83-8ac9-48fd-8658-46d0b7e54eac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25e6f0c4-2f10-4076-9ce5-69e83d1a7edf",
        "cursor": {
          "ref": "5a4d05d4-8bf3-4493-865f-badeab5c8c2a",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "22584ec2-dcf0-4b08-914e-7de47c007e48"
        },
        "item": {
          "id": "25e6f0c4-2f10-4076-9ce5-69e83d1a7edf",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "f48a40a1-8760-475f-9092-99cd535b95c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e21fbd0f-a7b9-4c3c-a5b4-b234407f6e27",
        "cursor": {
          "ref": "542cb905-fb35-4b53-8dc7-f1294ce13928",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "12c6c93d-4536-464d-9ff9-ed6b6ec2d00a"
        },
        "item": {
          "id": "e21fbd0f-a7b9-4c3c-a5b4-b234407f6e27",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "16464876-1afa-4420-9b92-d28533928a31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3363f7be-687b-4b2c-9ad3-b9bd8c8f710c",
        "cursor": {
          "ref": "f3928e2c-3c2d-41b2-8fab-c1c8bbec75d8",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "53b6daff-ec5e-4151-9a36-37681b926cc6"
        },
        "item": {
          "id": "3363f7be-687b-4b2c-9ad3-b9bd8c8f710c",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "0c251b27-d75a-403b-999b-a3024ac4c8ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e66f869-3053-4479-8b92-78fb5f0a9e7f",
        "cursor": {
          "ref": "4eadfd71-60e9-4519-907b-bf2050a01ede",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "4f65dbd5-6b9a-4624-8998-db5d9e8b6d3d"
        },
        "item": {
          "id": "9e66f869-3053-4479-8b92-78fb5f0a9e7f",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "131c475d-4c12-4980-a34a-c298ceb09205",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c870a00-e83a-4ae2-bd9e-1928febda369",
        "cursor": {
          "ref": "c041fbcc-fa51-410f-8c20-7d01843ac591",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "59dbfb77-b2ea-4e66-8007-a26e29d3ab82"
        },
        "item": {
          "id": "5c870a00-e83a-4ae2-bd9e-1928febda369",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "a1501340-c95c-4874-85b4-f58c082d4778",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e171d79e-c3a6-4c8e-ad29-db084513fafd",
        "cursor": {
          "ref": "0903b424-67b1-4110-94ec-5cd3e104a0ce",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "4934a5dc-d1fb-4de6-a5db-a14ac77784ae"
        },
        "item": {
          "id": "e171d79e-c3a6-4c8e-ad29-db084513fafd",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "9c4e514e-0847-493a-9fae-fa87699a09e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b169aef-afe8-49cf-99f1-521fd8b7bb4d",
        "cursor": {
          "ref": "3f22cb0c-b0e7-4f67-b843-cb108b452c4a",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "ce3ad371-7168-499a-be8c-692eff7e23ae"
        },
        "item": {
          "id": "8b169aef-afe8-49cf-99f1-521fd8b7bb4d",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "e6806207-535b-4de8-95c7-63a72a6d212d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97a91802-64ce-416a-a2ab-0a0f02a310e9",
        "cursor": {
          "ref": "e1bf9e20-3436-40b3-8d71-bf4c5a72c6eb",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "91132b9a-9412-4b6a-80e7-3ff147263499"
        },
        "item": {
          "id": "97a91802-64ce-416a-a2ab-0a0f02a310e9",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "114e8215-fa73-4041-8808-91d46e1183cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f744fc1d-6b93-4aa8-99cd-4f2ac31c9331",
        "cursor": {
          "ref": "dee4ebd2-230e-42a3-98d8-a0836a040618",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "9897d832-05a5-4f85-abe5-5463ea112181"
        },
        "item": {
          "id": "f744fc1d-6b93-4aa8-99cd-4f2ac31c9331",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "2e6a92a0-526e-4236-a21c-71e9705c7714",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2297200-a8a0-44ba-bcc3-a113665ddead",
        "cursor": {
          "ref": "f75c29a1-dc7e-4c60-ab39-19be6d8555d6",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "3946ea69-0fdd-43ba-b4e6-8b9196bac9f2"
        },
        "item": {
          "id": "a2297200-a8a0-44ba-bcc3-a113665ddead",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "3216dbd9-02d6-4298-a02f-f5ad31f34a43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a99daae-b5bf-4d04-98ae-c07b733d9f19",
        "cursor": {
          "ref": "ef2037f5-c27c-4285-8231-e1ec5a4f16c0",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "3ff830b9-1bba-4bb9-8a44-fcd38537c7cb"
        },
        "item": {
          "id": "5a99daae-b5bf-4d04-98ae-c07b733d9f19",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "d5dde850-2d09-4d7f-94ac-c6d32c5ccd58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2fea52d-bf55-45a0-9ed4-c71bd2fb942f",
        "cursor": {
          "ref": "a7c08000-bf97-48e8-bff3-c5d526791242",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "a319ceb8-7ba6-43c7-89b6-fabb17e1f65c"
        },
        "item": {
          "id": "e2fea52d-bf55-45a0-9ed4-c71bd2fb942f",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "5d64fe5a-0648-4ba3-a5cb-d968d157a8c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62f54bcd-7638-47d2-87f8-6e38c640839c",
        "cursor": {
          "ref": "bf5d5c1a-b55f-466d-a89e-2157f4242aec",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "10eb1987-89fb-4a5a-9531-1eabf926729c"
        },
        "item": {
          "id": "62f54bcd-7638-47d2-87f8-6e38c640839c",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "a11c361d-bad4-44d2-90ff-49fa43c65bb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cc09cd5-86b3-4e95-94c3-9ad3b2d8202a",
        "cursor": {
          "ref": "3d3ba823-a0ee-42a6-8f57-20936a92c6b8",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "aefbef11-b86e-418f-93aa-f7788bc1e824"
        },
        "item": {
          "id": "7cc09cd5-86b3-4e95-94c3-9ad3b2d8202a",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "658b2c96-60f5-4066-b2bd-0ab2bb232975",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f161ffa1-accd-4f8e-8f47-6984626a853e",
        "cursor": {
          "ref": "bb1b8d47-37c0-42bc-b923-228af801be0d",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "477a1d52-7a9e-4dd4-aa80-e4dcd2573faa"
        },
        "item": {
          "id": "f161ffa1-accd-4f8e-8f47-6984626a853e",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "380d5657-b336-43e9-977c-9414faf05aa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80571baa-ed53-4dd3-84df-ba55604fd9cc",
        "cursor": {
          "ref": "ab1815cf-2c91-4768-9c60-eff2774502d1",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "e25781f1-8699-49fa-b687-e11ea6dad42a"
        },
        "item": {
          "id": "80571baa-ed53-4dd3-84df-ba55604fd9cc",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "57b8a5fe-43aa-4a70-8bdd-5dba6d9cbe21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc50cdbf-830e-43b5-b52a-641ca5969b49",
        "cursor": {
          "ref": "7db891e1-71b1-43e3-91cb-00c189a92423",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "987d3ae7-d8b8-4ba3-80dc-31e2d56ffe45"
        },
        "item": {
          "id": "cc50cdbf-830e-43b5-b52a-641ca5969b49",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "7d843197-139c-46d3-bc28-0214e8c87c70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "977768f4-300c-4ad1-b0bf-fdfcb3504141",
        "cursor": {
          "ref": "47c5b90c-4f07-449b-875f-acb6c81d5850",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "bd76cb5d-ca3f-499c-b3a7-f4172d0bf712"
        },
        "item": {
          "id": "977768f4-300c-4ad1-b0bf-fdfcb3504141",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "352b9304-1176-4040-aa8b-b3dae0dae48d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e925317-c6b4-4f28-9e9c-df2be449e032",
        "cursor": {
          "ref": "79cc516c-1972-40c0-835c-9c92c1385676",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "ca0927e5-b66a-4f4f-866a-f079268e18dd"
        },
        "item": {
          "id": "0e925317-c6b4-4f28-9e9c-df2be449e032",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "edee73d6-cc1e-494e-840a-087bddc76206",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e03c7c7a-27e7-437b-a997-dad932b85398",
        "cursor": {
          "ref": "1904b6da-e9fa-4244-a0d6-57753d593e56",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "2f1a9916-6e27-4930-acef-2c1c6bb713e8"
        },
        "item": {
          "id": "e03c7c7a-27e7-437b-a997-dad932b85398",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "717fde22-6984-4bed-b142-3e195989d2eb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ec6c767-b2d1-4516-9897-295532b32bd2",
        "cursor": {
          "ref": "bd3d2eb9-dac2-408e-8ccb-9fa2afc7b4c3",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "abaa6a5a-d3ae-48af-aa04-49fbbbf2746c"
        },
        "item": {
          "id": "2ec6c767-b2d1-4516-9897-295532b32bd2",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "407d895a-3667-45d5-861e-4d8365c7de8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "c31871f5-4082-4f9f-9687-a420cdec09bd",
        "cursor": {
          "ref": "1d74ea37-0aed-47a9-ae27-a8a7d399c892",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "838f0618-5eef-49d8-a214-4b4cd7a382e4"
        },
        "item": {
          "id": "c31871f5-4082-4f9f-9687-a420cdec09bd",
          "name": "credentials_issue"
        },
        "response": {
          "id": "17a526d4-6e66-4b72-a338-063e1450d671",
          "status": "Created",
          "code": 201,
          "responseTime": 239,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "285e120d-99c2-44af-9941-a5894994fbcd",
        "cursor": {
          "ref": "258aff6d-1c57-4a90-8ffb-e51f9c7c8a47",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "f2ece5ca-409b-4f04-be1f-fbef0076b67a"
        },
        "item": {
          "id": "285e120d-99c2-44af-9941-a5894994fbcd",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "6107d9f9-b120-4555-b9b9-1f24481fc26b",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "26f40c02-7ec6-47f0-98d3-c3a95d9107f5",
        "cursor": {
          "ref": "f9d580a4-5746-4f18-80d4-feb3ee030c0f",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "a78e13e7-adb5-4842-a9af-ab08a8d48276"
        },
        "item": {
          "id": "26f40c02-7ec6-47f0-98d3-c3a95d9107f5",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "fabcad0a-88c1-4da9-b082-d94727525d50",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1393ffe3-8492-4ea4-8f3f-b4e017726b7b",
        "cursor": {
          "ref": "721863f3-507d-4eaa-ba64-20b4c0552841",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "c9623a4e-3742-4ffb-bbed-d208b6938e0c"
        },
        "item": {
          "id": "1393ffe3-8492-4ea4-8f3f-b4e017726b7b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "cb724d25-211f-49f6-b374-e15908bae63b",
          "status": "Created",
          "code": 201,
          "responseTime": 238,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "39573e90-3edd-4463-98c0-94d07e96461d",
        "cursor": {
          "ref": "985caca0-2946-4384-a2a9-8abcf4ae2f09",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "3f52d497-8e8d-4abb-bac8-c0c2ede6d17e"
        },
        "item": {
          "id": "39573e90-3edd-4463-98c0-94d07e96461d",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "5bab36e1-0155-458b-8ecf-97bb727a154f",
          "status": "Created",
          "code": 201,
          "responseTime": 222,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-10-23T00:34:15.282Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-10-23T00:34:15.282Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "35cbfd52-9668-4d89-8a34-39e544ff95d9",
        "cursor": {
          "ref": "73cf1bcb-9e6e-4eb0-a4f1-764627f14291",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "86d5179b-33ae-447f-a76c-12c5d4ee4ae0"
        },
        "item": {
          "id": "35cbfd52-9668-4d89-8a34-39e544ff95d9",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "fb0b9edf-2124-4b6b-96e7-d520ca83e08c",
          "status": "Created",
          "code": 201,
          "responseTime": 478,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1784f741-148b-446f-85da-f0fd3f5a740b",
        "cursor": {
          "ref": "9a265f0a-9316-47f7-bc48-c6a424757bb9",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "2de733df-20f8-444e-a46e-ae3d0405a620"
        },
        "item": {
          "id": "1784f741-148b-446f-85da-f0fd3f5a740b",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1baaa8a3-dbea-453b-8248-f6172ee4598d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "041a247f-f8b2-445f-86a6-b58c08b14012",
        "cursor": {
          "ref": "43d8aced-7f42-4f91-87dc-5358b2e85277",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "0e16e5c5-d5fd-4656-bd0b-9be2434dcad0"
        },
        "item": {
          "id": "041a247f-f8b2-445f-86a6-b58c08b14012",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "993d459a-7b2d-4cc3-9f59-b0a00cf42379",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f606a19-04fa-4445-9f27-95e71716f889",
        "cursor": {
          "ref": "c99f65e6-414f-4786-aff8-c04f86925036",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "7a40dc8b-fe79-41d4-9d77-a08428ee91dc"
        },
        "item": {
          "id": "2f606a19-04fa-4445-9f27-95e71716f889",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "71fc8683-1e13-435e-9d9e-268e21b7ecbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ec33c35-ac08-4389-8c9a-22b36728eafc",
        "cursor": {
          "ref": "8ec3e4b2-0549-4f4e-ab43-eaaa9dd58fda",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "2cb65328-ce70-4389-a0c5-e54bde94efe8"
        },
        "item": {
          "id": "2ec33c35-ac08-4389-8c9a-22b36728eafc",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ff37a66c-3eea-4a78-948d-245c33be83e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0f61954-ccb9-42ab-ab90-6f53f620d685",
        "cursor": {
          "ref": "8b4ff124-efda-4926-8861-5f905062b178",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "38a8ae30-f372-48fc-9906-a74756074c99"
        },
        "item": {
          "id": "d0f61954-ccb9-42ab-ab90-6f53f620d685",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "87e1f133-9670-40d8-a309-a591eaa58c7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7483a30-744f-47d3-9e1c-d4cc8bce1d6b",
        "cursor": {
          "ref": "2be9f049-62a3-41ed-975b-ad33f51ab71b",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "513dedab-1d26-4cd6-91ac-2379ac042d36"
        },
        "item": {
          "id": "f7483a30-744f-47d3-9e1c-d4cc8bce1d6b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "116b487f-5c3f-46e9-8255-d02741e7bf2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ace539e3-9aa0-47b9-a401-d838bb392ae6",
        "cursor": {
          "ref": "7a536fb0-3be8-45c3-b2ff-e1fe1bc07474",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "74754a8b-d5d5-437f-a7ba-5e56791aec43"
        },
        "item": {
          "id": "ace539e3-9aa0-47b9-a401-d838bb392ae6",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "c98a9699-98ea-48be-b29f-6c3d2001b6b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "990adae2-fbcb-4719-9a4f-fde1fe501f50",
        "cursor": {
          "ref": "436ba89c-ced3-4f5b-85bc-63c8cf4baf59",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "85b69ed8-c0ea-4437-80e1-442e10b0ae6c"
        },
        "item": {
          "id": "990adae2-fbcb-4719-9a4f-fde1fe501f50",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "f2cd6d81-691e-44db-9bc3-4d5366bc4d7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b991bc01-30b4-458f-b3a0-49c531611748",
        "cursor": {
          "ref": "0ac1d52e-99c2-4ebf-9370-c1e96827b8c7",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "3c149b57-ab6d-4e1b-b545-b7385dd1af52"
        },
        "item": {
          "id": "b991bc01-30b4-458f-b3a0-49c531611748",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "bff30dfb-6cb7-4a53-8175-49157956105e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dad9b33d-0e7e-4c6f-bc81-28f4e1223dd0",
        "cursor": {
          "ref": "4d6085d8-f2c3-4291-88e8-d5ce0d660de8",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "d4c23c65-61cc-4ab6-b4f6-af80476b6de9"
        },
        "item": {
          "id": "dad9b33d-0e7e-4c6f-bc81-28f4e1223dd0",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "0187eac1-62f0-4d41-a013-d4c24889132f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbb35138-0001-420a-b0a6-789c8ed1f94c",
        "cursor": {
          "ref": "ba27c34f-e1a5-4cfb-8b59-26959956e234",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "d06a6197-d3a4-491e-b4e6-aee85dafc9ae"
        },
        "item": {
          "id": "dbb35138-0001-420a-b0a6-789c8ed1f94c",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "844d9c5b-8ab3-43c8-ae5c-85980051c0e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55d8abe4-1e0e-45af-8345-75980e5e777d",
        "cursor": {
          "ref": "79d5ca5b-e03e-4957-b19b-ea08c25ef7f2",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "8a4887be-d5de-4e4b-a73d-041877b463f0"
        },
        "item": {
          "id": "55d8abe4-1e0e-45af-8345-75980e5e777d",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "5edb285f-c5ff-495d-b4dc-ef5bbffa8443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21ba6135-b400-4d38-8382-b612ba47731b",
        "cursor": {
          "ref": "3576c4e5-6993-461b-8c9c-d684996f31f6",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "218d84c1-b1eb-491b-a447-9809cad5d3d7"
        },
        "item": {
          "id": "21ba6135-b400-4d38-8382-b612ba47731b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "94a03212-6a3d-41d0-babd-6007ce6a7a3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1af1423-6dc5-493e-b72c-1986535e83d7",
        "cursor": {
          "ref": "6f15bba3-0256-4b98-bf7c-eace3c38ae2c",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "ff5548c1-1c79-4c16-bd2d-8983f62e77eb"
        },
        "item": {
          "id": "e1af1423-6dc5-493e-b72c-1986535e83d7",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "fc228ce1-25dc-416a-8239-8a5fb5dbb33b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8fc76f7-d79a-4c33-a3d1-0c59b921e03d",
        "cursor": {
          "ref": "cfc0e9e2-cfbd-457c-a664-0a6903b18e17",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "3acc11fd-43d8-416e-870e-55d4cff88e3c"
        },
        "item": {
          "id": "e8fc76f7-d79a-4c33-a3d1-0c59b921e03d",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "398eb7c8-3705-4c14-83f3-449e9c737d48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6338420-083d-41ea-8218-317c31a0df82",
        "cursor": {
          "ref": "0f8228d3-5ed1-4fc3-8385-95aa3e73491a",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "5d105862-45e8-435c-abcc-5d34ab52a898"
        },
        "item": {
          "id": "f6338420-083d-41ea-8218-317c31a0df82",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "069296f4-8756-4d93-8b48-2ab0e3389efb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9db4a047-a0ed-4500-9791-e005696005a3",
        "cursor": {
          "ref": "50f6c167-1eec-4fc1-90ee-e52a4292f606",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "ccc387fd-5f7e-4bff-9ef3-b604924b284d"
        },
        "item": {
          "id": "9db4a047-a0ed-4500-9791-e005696005a3",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "9c804829-212e-445b-8f9c-e3a33d640114",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3350a151-2fb0-421d-8bff-812fae400937",
        "cursor": {
          "ref": "b4d002ee-266d-4ee2-886d-254d0f4b2e0c",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "54103931-1ffc-47a8-9313-7728b7825fe5"
        },
        "item": {
          "id": "3350a151-2fb0-421d-8bff-812fae400937",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "63772fd7-bd8c-44c7-98f7-46c23f664194",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c5db3e2-b086-4937-92e3-1f5d14ca089a",
        "cursor": {
          "ref": "eaa445ea-8c3c-4f7b-9be6-d4a2d43cd931",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "c7f14c52-45c1-466e-b835-1127b5bf5c90"
        },
        "item": {
          "id": "5c5db3e2-b086-4937-92e3-1f5d14ca089a",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "61db6f47-385b-4450-9806-a7c2934de8f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a520a66e-a541-4823-94e9-7f77fab085fe",
        "cursor": {
          "ref": "0144a84d-572a-4b5c-b279-a8715f930bb7",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "224a21a8-8216-40bc-a80a-00eb356287d6"
        },
        "item": {
          "id": "a520a66e-a541-4823-94e9-7f77fab085fe",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "35512655-f1e7-4c44-8335-8e4de5d08c76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31c7051e-3534-4acc-9554-fc4613c77967",
        "cursor": {
          "ref": "39aca39f-4ddb-4564-96df-a046e2e4629e",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "b4fbe562-94da-41c3-a43d-060e571d08b6"
        },
        "item": {
          "id": "31c7051e-3534-4acc-9554-fc4613c77967",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "5a83c331-5a63-4f4f-a92c-9f9876c6a702",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb437458-5058-4199-bad6-e71e09f62a69",
        "cursor": {
          "ref": "6bdc02f8-98c6-4cfe-a8a3-c9d1016d7c76",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "664f29a7-e7cf-42bc-8f4b-6394f57c537e"
        },
        "item": {
          "id": "eb437458-5058-4199-bad6-e71e09f62a69",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "588ef962-0010-4500-9f22-514062055112",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96373f34-5f86-4ae9-8922-a2645d0ef311",
        "cursor": {
          "ref": "6714a491-6349-4ee8-8453-1d57cc4ae9e3",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "bbf8f2fa-bfc2-4ac7-889f-ec46f4b987b0"
        },
        "item": {
          "id": "96373f34-5f86-4ae9-8922-a2645d0ef311",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "5a4207b6-ce4e-4609-b0a3-63bc85baaee2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cb088a0-6d9a-4a59-8f42-08000d7effe9",
        "cursor": {
          "ref": "16fd4a13-b7b9-4503-9a28-6f6b6f321056",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "20d372e4-3abe-47fa-82f4-ebeec9d71f85"
        },
        "item": {
          "id": "6cb088a0-6d9a-4a59-8f42-08000d7effe9",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "cee36d15-c829-464f-9392-8dbee2abb0ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4505655e-ed5a-4c8b-afa1-5340cd1e92d8",
        "cursor": {
          "ref": "cbd8018d-ddb8-481c-87c6-28706fab7b37",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "cc835c60-d745-4701-bebd-9177adf53c9e"
        },
        "item": {
          "id": "4505655e-ed5a-4c8b-afa1-5340cd1e92d8",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "65927096-8d69-4726-bf6e-53750efc743c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83f50e74-a4fa-42d6-af12-3ec5a76afca5",
        "cursor": {
          "ref": "06437ca2-92b1-4873-9ca3-3f6792e8a82a",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "ee66c52f-25a1-44e8-9878-3c5358757a56"
        },
        "item": {
          "id": "83f50e74-a4fa-42d6-af12-3ec5a76afca5",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "c60614c0-d03e-4cc5-beb5-9bc5ef1439be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17c44b0d-3a69-4613-9802-fe4fce3e89cf",
        "cursor": {
          "ref": "ee962bda-cf5d-4da2-96de-733821d5509d",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "5f726f6b-4f12-4d9a-9bdf-1f545ee25bb9"
        },
        "item": {
          "id": "17c44b0d-3a69-4613-9802-fe4fce3e89cf",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "9520171e-efde-417d-ac41-b342ee902a4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd3dddcf-2f66-4720-926b-529f3d867862",
        "cursor": {
          "ref": "831921eb-0a21-490b-bd72-934ba95bb940",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "ea282cf7-62ef-418e-aa2e-603af026f245"
        },
        "item": {
          "id": "cd3dddcf-2f66-4720-926b-529f3d867862",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3a4f9a9b-7c60-4b79-b826-767b6e4c4e7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8a247e9-1514-4c38-a088-e0b5cddfda77",
        "cursor": {
          "ref": "547d60d9-75a3-4e54-9d06-3699684ae09b",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "a1d69111-f829-4bb1-af2b-9903871f2b18"
        },
        "item": {
          "id": "a8a247e9-1514-4c38-a088-e0b5cddfda77",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "2508a5db-9f50-4dc8-b126-a4e1f29f4671",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ce3bfdc-8589-4ca9-a00a-97442016e857",
        "cursor": {
          "ref": "65997228-b5de-45f6-ba2b-edfcd071d159",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "28d2c0c0-adc2-4967-a550-65927855ae71"
        },
        "item": {
          "id": "1ce3bfdc-8589-4ca9-a00a-97442016e857",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a1ed3d32-dfac-442e-aed8-2d2721d258cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58b1e2db-9dc1-41c3-a17a-fb987511219c",
        "cursor": {
          "ref": "d3fdb841-caee-4fa9-afb7-50b9b660fe0b",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "1f778bcf-0f09-421a-8f08-c42d0990615f"
        },
        "item": {
          "id": "58b1e2db-9dc1-41c3-a17a-fb987511219c",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "8a5da6b7-2626-49b8-8ef5-d225acd25bc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a4202e2-3c19-42ec-9fe4-d17942444e83",
        "cursor": {
          "ref": "3e89581f-e97a-4f41-920b-647fbcdbe9d6",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "bcbf0509-fdce-42d4-b072-351efb19f98b"
        },
        "item": {
          "id": "3a4202e2-3c19-42ec-9fe4-d17942444e83",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "87788f89-8f98-4d80-ad18-e0e726404346",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ed97f2c-4de5-458b-bab9-1769a380eab6",
        "cursor": {
          "ref": "839b6ab0-747b-4076-b476-61f6fd7db3d2",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "f2395985-21ec-45e7-9f79-3d94a5cccc23"
        },
        "item": {
          "id": "4ed97f2c-4de5-458b-bab9-1769a380eab6",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "7cd2d9e1-1388-4a64-87de-4db291522025",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27242db6-768c-42c7-b9c8-1e6bf8dd20b6",
        "cursor": {
          "ref": "9628ed57-35be-4bac-a074-996d6aaf9083",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "8f2bbcf3-8d2a-487f-9d43-c9fc08f4d030"
        },
        "item": {
          "id": "27242db6-768c-42c7-b9c8-1e6bf8dd20b6",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "6b63e67d-6727-48c5-8bac-f675187fca9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ad4538f-7898-4cae-b09d-8974017fe984",
        "cursor": {
          "ref": "44322acf-68a0-4190-a391-cc43ed9e9dad",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "28776d97-a3d0-475d-9f92-389b9c4095ef"
        },
        "item": {
          "id": "0ad4538f-7898-4cae-b09d-8974017fe984",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "53ef027b-c6cf-4a30-8432-8e2c7fd47a23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d17199f7-497b-48d4-87c8-ba3ade02f35a",
        "cursor": {
          "ref": "ea99e355-ca81-40db-895a-479140966ff4",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "83649865-9143-43da-afd3-ae3cceca19b6"
        },
        "item": {
          "id": "d17199f7-497b-48d4-87c8-ba3ade02f35a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "444002ac-6770-4a03-9cec-8559c8caf1ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2571d7db-5361-487e-82be-6ff7e47293ea",
        "cursor": {
          "ref": "0f4c9eb2-e973-4ab4-88b6-3a219f908e3b",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "3396d4da-235c-49ea-9045-fef26be33dbd"
        },
        "item": {
          "id": "2571d7db-5361-487e-82be-6ff7e47293ea",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "8bc397ed-d226-4f4c-8560-16e3bc557a6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eabd666-a850-4897-ab10-1bb14f96c067",
        "cursor": {
          "ref": "2b819d86-a530-4fa5-86ab-9f091dbdce4d",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "f82e91f2-d424-4337-a282-36ea267797f1"
        },
        "item": {
          "id": "3eabd666-a850-4897-ab10-1bb14f96c067",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "c6e833a9-337a-4ed5-b6c5-d0f062603acf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a37ee6e-8fd2-4b1b-8ef6-aba0557f653b",
        "cursor": {
          "ref": "e37361d7-e330-49ae-9ebc-9fb7d3683be5",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "6e2007b6-6040-40c0-9388-347b6a71587b"
        },
        "item": {
          "id": "6a37ee6e-8fd2-4b1b-8ef6-aba0557f653b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "8ab7ef2f-0af4-41fc-b321-0d03e14a7a73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca1af879-6764-4172-a9fb-0f0afb9deba0",
        "cursor": {
          "ref": "602d7a05-5543-4362-9853-21b1e79beb38",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "c51ea189-bb6e-4aa8-8659-5fc6c423be3e"
        },
        "item": {
          "id": "ca1af879-6764-4172-a9fb-0f0afb9deba0",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "7fe51699-c78c-4ba0-9c4e-344a051d73e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efa1811c-cd51-476f-9f83-d653759f4453",
        "cursor": {
          "ref": "0df52ddc-5d9b-46f5-b953-8723af6cdcf9",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "94dc0a1e-28e1-40b0-ba40-8a0d3f4abfaa"
        },
        "item": {
          "id": "efa1811c-cd51-476f-9f83-d653759f4453",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5a8c4eb7-d4ff-4323-8e6d-057687df4a43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "528bd9c9-5924-4cd6-b0da-d0d61b077822",
        "cursor": {
          "ref": "343c908c-a4d6-4021-b0c0-e28c77683cbf",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "2b647cd9-c006-43e0-b6ca-f4d6a9c4e0da"
        },
        "item": {
          "id": "528bd9c9-5924-4cd6-b0da-d0d61b077822",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "dc37fba7-6dc2-4f86-a915-81ba3af098cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3eb2eb9d-7df1-4788-90c0-9a42d15eb857",
        "cursor": {
          "ref": "451594e6-c13c-4288-b74c-11e5d45dee17",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "d6724937-d1f1-4e0a-9da9-2462bba1bb5e"
        },
        "item": {
          "id": "3eb2eb9d-7df1-4788-90c0-9a42d15eb857",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "4add5118-8d3c-4d83-9382-55f658b9c8d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5bf44a2-9f9e-4711-a6e7-3085ec9c9e88",
        "cursor": {
          "ref": "f8c61888-b5a1-47f3-8a35-236663c4f1a2",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "1c5a25f7-a514-45f6-8c09-4bc67ffd64a5"
        },
        "item": {
          "id": "f5bf44a2-9f9e-4711-a6e7-3085ec9c9e88",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "9bdba6a3-e48d-4d9d-a5c3-7607fca09c0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21060951-92e9-494e-878b-cae22ec70e07",
        "cursor": {
          "ref": "8fbb763a-16c2-44df-860a-6f149d8a5dec",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "d1cb4361-a2a4-403c-866c-a309b3430d3d"
        },
        "item": {
          "id": "21060951-92e9-494e-878b-cae22ec70e07",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "6e21854d-a3b6-4cb4-9629-6b5234f98125",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e527b59d-abb9-4c7e-addb-5ba293fa4035",
        "cursor": {
          "ref": "a4ab1d94-56c7-49cb-a201-e3b8d0665741",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "c0b4b019-5a54-4f95-94bf-a2c5ef3c00e4"
        },
        "item": {
          "id": "e527b59d-abb9-4c7e-addb-5ba293fa4035",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "92f6f9a9-80b6-440a-9f0f-173c51a2b2a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "152e3c7b-3cd8-4696-8fa8-e3c1c31cf973",
        "cursor": {
          "ref": "e33bf9b4-0cc9-4ca2-bf37-90f2d7f35577",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "ec5dd877-c1b2-4855-926a-d1c87441afa8"
        },
        "item": {
          "id": "152e3c7b-3cd8-4696-8fa8-e3c1c31cf973",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "29e15519-ef5d-44fc-bb08-1df26c4ff3f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a698b80-ae42-4016-a2f6-e36a70c7f76e",
        "cursor": {
          "ref": "e30b4f92-92ba-4581-8ea0-8d5530f9c3f5",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "4935f1a7-2bde-4978-aca6-c0c8313136e1"
        },
        "item": {
          "id": "3a698b80-ae42-4016-a2f6-e36a70c7f76e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "3805c7d8-a307-4af7-947e-d14b2c197fb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7a9e2fc-e0aa-4d93-aa3f-deea355b2baf",
        "cursor": {
          "ref": "1a8a3a99-9088-4029-b192-da0dc22524e2",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "90b3f202-878d-4d1d-907e-65cf96de8e0f"
        },
        "item": {
          "id": "c7a9e2fc-e0aa-4d93-aa3f-deea355b2baf",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "31e03082-e274-479c-878d-9ef6c2fdfdb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44107139-0eff-4f13-ac42-9e7a0928bfc1",
        "cursor": {
          "ref": "7b8f7c8c-b5ae-4ab4-a611-16f4dd1b6c96",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "9dea1b30-ea16-4f88-9944-a4d8182ce5fb"
        },
        "item": {
          "id": "44107139-0eff-4f13-ac42-9e7a0928bfc1",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b881b396-397b-4e8a-b282-3f01b3c2d8d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e6b93ae-ecfc-4e36-829e-739292eb0591",
        "cursor": {
          "ref": "791a428a-8a2b-4108-bb50-13b9e316e764",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "d6d5ce7d-9e9e-4e4c-b446-cf2555364229"
        },
        "item": {
          "id": "9e6b93ae-ecfc-4e36-829e-739292eb0591",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "858d6562-cf5c-4233-8edf-df609c02a95f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3612ccb-7955-4071-90d3-2fd1207b46ae",
        "cursor": {
          "ref": "75c020f7-eee5-4f41-ad6e-daa1d650597a",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "19fce2fa-ca19-4778-ad5b-df6179e9c8eb"
        },
        "item": {
          "id": "c3612ccb-7955-4071-90d3-2fd1207b46ae",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "0f0b7df5-5592-48e7-9b2d-8d5ff2c2b4c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed19d8bd-1046-4f4f-bd01-9b4e9bc95a05",
        "cursor": {
          "ref": "3e3f78f1-62ef-4194-a93a-6427f730e513",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "c15af728-d78c-46bb-8552-4259ac8153d3"
        },
        "item": {
          "id": "ed19d8bd-1046-4f4f-bd01-9b4e9bc95a05",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "d1a240fa-e421-44e1-b87c-c5008ab474bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da868c8e-80f0-44ce-9e65-5f898090076b",
        "cursor": {
          "ref": "b4f259a4-a443-4407-a345-0480d64175eb",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "9697d19f-7afd-44f4-95bb-1bf30575561d"
        },
        "item": {
          "id": "da868c8e-80f0-44ce-9e65-5f898090076b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "0670b478-6658-48a0-a3f7-aec44d9f80fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9475d183-6efc-434d-987a-a38d1406afc8",
        "cursor": {
          "ref": "7824bf1f-ccda-40c2-90e0-a3fb780ef9eb",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "07adeb86-039b-456c-b146-f84414236202"
        },
        "item": {
          "id": "9475d183-6efc-434d-987a-a38d1406afc8",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c5d0ebbd-1c5c-4531-af13-51fa04219e49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa3f4a02-141d-49dd-940f-d89fc7c34f45",
        "cursor": {
          "ref": "79c04bba-0e66-4b45-91ff-7f2986173f10",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "af11b472-ecfd-4b57-8d48-49b970b9e12e"
        },
        "item": {
          "id": "aa3f4a02-141d-49dd-940f-d89fc7c34f45",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "544dd013-a0f1-488b-8bd8-f61b4833b5c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6cee751-74ac-4d67-9cec-add54b6d6e12",
        "cursor": {
          "ref": "448f4310-bb33-4149-8a12-291a5aaa3dc1",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "fadbcfb7-82f7-4ac9-af34-a3b365558f44"
        },
        "item": {
          "id": "a6cee751-74ac-4d67-9cec-add54b6d6e12",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "39446679-1715-40cc-858f-230d0e5868bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fc7601b-160a-49a7-b35d-f5adc68ffe14",
        "cursor": {
          "ref": "cb3a6b8b-c3c1-4978-93df-747a36547b9d",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "fcac5323-dcf3-4b67-ac77-8e232dd9b20c"
        },
        "item": {
          "id": "9fc7601b-160a-49a7-b35d-f5adc68ffe14",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ce2442ed-0d6c-4526-984a-0148e99bd0c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ecfea60-ce92-4986-80fa-b8befa06eb16",
        "cursor": {
          "ref": "a676376b-a267-4dc9-ba09-9195e1834b86",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "d908faa7-3b94-454b-bf3b-410d33920958"
        },
        "item": {
          "id": "9ecfea60-ce92-4986-80fa-b8befa06eb16",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "fa494799-1a3a-4aa3-b982-cdcb486265dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7728ab70-2aa9-47dd-9cca-0dfc5373acea",
        "cursor": {
          "ref": "cd96d683-f0f0-4f1d-87cc-0f7c978f2978",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "ecf2988f-07f4-462c-a331-01421ce1c555"
        },
        "item": {
          "id": "7728ab70-2aa9-47dd-9cca-0dfc5373acea",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "bb5f3bcd-9e8e-4326-8dee-e6237ad81940",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c693f55-2976-49a7-9e0b-d2a91476d45a",
        "cursor": {
          "ref": "494db304-bf06-4957-89cf-960adc0d5fab",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "b16d400f-d3b5-40fe-8b69-13aa87835a7c"
        },
        "item": {
          "id": "2c693f55-2976-49a7-9e0b-d2a91476d45a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "2d9c4a03-6016-4113-b13f-aa21c039a930",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6872cbf2-1b76-4b33-bd4c-d2733dfc0cce",
        "cursor": {
          "ref": "153aa71c-7b69-4a12-993f-6c0e85b5cd3a",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "75dbe4e3-c37c-48a8-a911-7f10b105285c"
        },
        "item": {
          "id": "6872cbf2-1b76-4b33-bd4c-d2733dfc0cce",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "edb013f3-7e49-4c72-86fa-7d46a168a3dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4930e84-6e64-4afa-87dd-ba0984c519d8",
        "cursor": {
          "ref": "3fba8b68-acad-4559-9faf-a2606c32a75c",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "68d282fb-ae24-4504-b822-1ab0db7046da"
        },
        "item": {
          "id": "f4930e84-6e64-4afa-87dd-ba0984c519d8",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "25771f9c-f2e6-411b-9ff5-c8052f56b044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba75162f-9ec2-4b6f-8717-8db1d0887226",
        "cursor": {
          "ref": "1006b4dc-9c81-4fca-9fc8-d1e37abfbf7a",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "252596e6-1dfc-430a-8de8-cc54132b4f2d"
        },
        "item": {
          "id": "ba75162f-9ec2-4b6f-8717-8db1d0887226",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "2d088c51-fdad-4a09-97ef-88959b93ab4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab09026f-ef70-47cf-a29e-bcd67192fbb2",
        "cursor": {
          "ref": "175bcbc3-1a05-43ff-8baf-052f50a98e62",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "bd9d183f-9439-4ebb-8980-4faa31d7655d"
        },
        "item": {
          "id": "ab09026f-ef70-47cf-a29e-bcd67192fbb2",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "1c62cf5f-61a2-4fd5-b5eb-cd54fd3579eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1f77802-6da3-43fd-9048-2e636fa59320",
        "cursor": {
          "ref": "46119897-dc7c-4bf8-9730-6b391acdf586",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "dee43313-3b83-4f89-9ad0-f95421480737"
        },
        "item": {
          "id": "a1f77802-6da3-43fd-9048-2e636fa59320",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "98ba3cf6-acb3-403f-aa67-7f17b8777950",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60c1dbf9-83ca-4f86-a42d-b76432d30883",
        "cursor": {
          "ref": "2bede46f-3e86-4b63-8fb6-7d849b3c73cb",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "959ade2c-b79e-4734-9536-90c4119361e3"
        },
        "item": {
          "id": "60c1dbf9-83ca-4f86-a42d-b76432d30883",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "20d4b9f6-3846-40fd-834d-fcaeed2e489c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c61e833c-a836-49c5-98ca-3b04b1ca316c",
        "cursor": {
          "ref": "0a7dfd77-7b51-4903-b808-f7b626d6155c",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "0fd70304-f3cb-4440-a575-9b21f0c4d3d3"
        },
        "item": {
          "id": "c61e833c-a836-49c5-98ca-3b04b1ca316c",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "81f1646e-6b70-45aa-a339-c1f7973e40c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f19895cb-eae3-4fc0-a37e-cd456bccea43",
        "cursor": {
          "ref": "da04d010-c6d2-4dce-a6bf-eb3f73142fcd",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "95e77fd9-ad44-4184-80ce-bbbf4d760988"
        },
        "item": {
          "id": "f19895cb-eae3-4fc0-a37e-cd456bccea43",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "56be3eae-c21f-4d36-8a75-986b280514d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ea24ae1-c01f-4f62-baf2-98f1f41e4f15",
        "cursor": {
          "ref": "c62b1e41-2687-43fe-ba0c-63d9308b04ae",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "a656aaab-95e8-48e7-ac31-58062322e5ad"
        },
        "item": {
          "id": "7ea24ae1-c01f-4f62-baf2-98f1f41e4f15",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "159bd781-55e4-4314-894a-cdd74d0ac134",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d59f2bbc-0c1b-4844-bc9e-ac6b56d1bc6e",
        "cursor": {
          "ref": "40610e3d-5d08-4045-8314-3cdfd4fa1eb4",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "71fd2d0d-106d-43e1-b762-4aab9445b4a8"
        },
        "item": {
          "id": "d59f2bbc-0c1b-4844-bc9e-ac6b56d1bc6e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "3034f5d6-bad3-42da-bc83-965f3560b025",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7af9aec-b86f-4679-9654-aa311c5438de",
        "cursor": {
          "ref": "18367580-f800-44d8-abc6-49d406e7c646",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "385203c8-2a0d-4b52-a4c8-84ed46cd3004"
        },
        "item": {
          "id": "a7af9aec-b86f-4679-9654-aa311c5438de",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8240100f-f7e1-456e-a0d8-b30c2802112b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91a53c08-4cce-401b-9a0d-54a2cfaca25b",
        "cursor": {
          "ref": "09dedbfb-9e2b-4e1e-9f9e-d69f361a90f4",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "8ebb57c6-a2cb-4d4e-9a4f-53d75b6ac829"
        },
        "item": {
          "id": "91a53c08-4cce-401b-9a0d-54a2cfaca25b",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "e3457f58-2234-4b2e-b9dc-3f0d1227c44b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "876a3fd0-5cb8-4031-9a31-7ca2c1dc659e",
        "cursor": {
          "ref": "fcaa1e9c-1c1a-43b5-b95a-6f800eb7d240",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "9077a7de-757d-4ae5-8cc7-214d82ff2257"
        },
        "item": {
          "id": "876a3fd0-5cb8-4031-9a31-7ca2c1dc659e",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "950858d6-5f60-4056-8b90-1c8a64a252e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13ed45db-a903-42b4-8ff1-83b6e23f9245",
        "cursor": {
          "ref": "065d914b-0c81-44fc-943c-169579df24c9",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "b9b7474e-a145-4091-b13a-97e3918505bc"
        },
        "item": {
          "id": "13ed45db-a903-42b4-8ff1-83b6e23f9245",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "f5d70fff-00fa-4def-9683-8903a4af1601",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "344b8beb-7de8-4b79-85df-9c793ab754ac",
        "cursor": {
          "ref": "d5107d5d-66bf-48db-9bf6-ad9b97d8651a",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "31210b26-a0f3-4d6c-93df-3c16ae74b89a"
        },
        "item": {
          "id": "344b8beb-7de8-4b79-85df-9c793ab754ac",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "af428830-a755-4449-9b84-9b2b6b9b28ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b4f8c32-9c13-4c6f-aae7-f60f7c048f7c",
        "cursor": {
          "ref": "ac7cc502-811b-4497-a420-83fa3bee9add",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "67e0d85c-9a13-4bae-bbaf-795684f82727"
        },
        "item": {
          "id": "2b4f8c32-9c13-4c6f-aae7-f60f7c048f7c",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "db5ca893-d162-4fae-82b2-6589e8a1303a",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "d81bf3d8-f3e3-4f84-84e9-194a4d146ae4",
        "cursor": {
          "ref": "f68fd1ba-dd78-4b65-aa8e-0e1906ea622b",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "9645dc80-5bf8-46b8-87a8-4f0b5eb7371d"
        },
        "item": {
          "id": "d81bf3d8-f3e3-4f84-84e9-194a4d146ae4",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "022c9aad-7a86-4569-bdd2-42bf0782ca8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dba8688-6776-45ee-9008-d40fcba9e58e",
        "cursor": {
          "ref": "a63cc16c-100d-4d7e-9c85-bb69946869bd",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "699ea549-555c-458c-bfdf-0968642b14fc"
        },
        "item": {
          "id": "1dba8688-6776-45ee-9008-d40fcba9e58e",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "ab31f5a5-ef43-4ca0-8c83-87a969b826ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9944e8f6-8f6c-4275-aa34-9b0dd20a3ceb",
        "cursor": {
          "ref": "6d392eec-e50c-44ab-93ba-192e3d0f7ee0",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "f16444cb-3827-4ba1-b66d-ed3ed5ec72bd"
        },
        "item": {
          "id": "9944e8f6-8f6c-4275-aa34-9b0dd20a3ceb",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "45c386b2-362f-45b7-9431-b75a5149fc12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "923a0c24-3c24-41c0-8d17-0ba3dc2cdbba",
        "cursor": {
          "ref": "147b657b-dfe5-4403-b5df-a96882377bef",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "d7dbde78-1792-4cb6-9689-57be5261d9be"
        },
        "item": {
          "id": "923a0c24-3c24-41c0-8d17-0ba3dc2cdbba",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "46df68b2-f52e-4046-b75e-50304c911156",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c6c05af-b215-423b-bc08-0c2b7e33ad42",
        "cursor": {
          "ref": "dc82e814-e5f7-48aa-a7a7-c69436cb2182",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "ea9080fa-cb42-4530-b5c0-de94e70d44a8"
        },
        "item": {
          "id": "2c6c05af-b215-423b-bc08-0c2b7e33ad42",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "d67c2357-7bd4-421a-b6e4-9c2f72dea16e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6546f8e9-01ef-42aa-9be9-e4edbfc6db08",
        "cursor": {
          "ref": "9a02ef54-99c8-4b2d-b97e-b7638841d812",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "32babbdb-97a4-4344-ba98-41979f2be81e"
        },
        "item": {
          "id": "6546f8e9-01ef-42aa-9be9-e4edbfc6db08",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "36ef0143-ed2d-4b32-841a-126fd4e54bbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e215827-eb8d-441c-a059-260cfb67d5d3",
        "cursor": {
          "ref": "44aa96fb-8b3e-4252-9397-a38045ed6f13",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "8ebb4fd5-ee54-4ac2-ae47-5a7ca93ea096"
        },
        "item": {
          "id": "9e215827-eb8d-441c-a059-260cfb67d5d3",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "1775a567-f41a-4b8d-aa7d-e051dee041dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0068a8c-0dc0-4d07-8902-ad447b5c4ffd",
        "cursor": {
          "ref": "d8018c92-0cef-4ed6-a16d-f4ce39c0a4ab",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "f2c2f452-62d5-4441-a806-122baafc5dd1"
        },
        "item": {
          "id": "b0068a8c-0dc0-4d07-8902-ad447b5c4ffd",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "5cd2a68f-addf-4155-b387-e652ede2a269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "552fb313-9cf4-44bd-9519-77590bffb121",
        "cursor": {
          "ref": "b34fd651-d0cb-4336-b39a-240d6d68fe9a",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "17fe2f9f-edc8-47ba-bb90-0ce66b988982"
        },
        "item": {
          "id": "552fb313-9cf4-44bd-9519-77590bffb121",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "6f354d04-5341-4d7c-90a8-56c45d562367",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ab9ff59-c830-4778-978f-ca36837bf3eb",
        "cursor": {
          "ref": "bf3483a1-f196-4cb6-8b0e-28d5a4ca7745",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "4ce0a5ab-aa54-42ee-82fa-cdad27f5d1db"
        },
        "item": {
          "id": "5ab9ff59-c830-4778-978f-ca36837bf3eb",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "73df0206-f7ef-40c0-b6c5-6e40f09a26a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8661a7ec-e2cc-4624-9c16-afd695ba51cb",
        "cursor": {
          "ref": "dba01b1f-e1b0-439e-ad15-db24d635e6e0",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "a072b167-5e14-40b9-96fb-855763ee276b"
        },
        "item": {
          "id": "8661a7ec-e2cc-4624-9c16-afd695ba51cb",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "737c8476-823b-4a0d-9713-da5c538d01fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "191809f4-6636-4c3d-9281-96b0b05816cf",
        "cursor": {
          "ref": "65f67e93-7b74-454d-84d1-90a71b2170c1",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "5010395f-40b4-48e0-9be6-5f6565096a03"
        },
        "item": {
          "id": "191809f4-6636-4c3d-9281-96b0b05816cf",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "57b43779-2e8b-4c7e-9a8b-30109787b0c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6409b2d9-5faf-4c80-98f0-ccd3e101efdc",
        "cursor": {
          "ref": "3e7fe8be-9993-4491-9c28-eb3b261ef3ac",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "fa445880-b2f7-45aa-abfc-92f44ae8f727"
        },
        "item": {
          "id": "6409b2d9-5faf-4c80-98f0-ccd3e101efdc",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "95942977-34c1-4a19-8a3c-608949eeca3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb377774-2f00-4996-99f0-63270ca377d6",
        "cursor": {
          "ref": "82e2074f-cc65-4f66-8748-751b75bd32b3",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "25f97e86-1d33-4b1d-828b-5671c79ce006"
        },
        "item": {
          "id": "eb377774-2f00-4996-99f0-63270ca377d6",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "84bafb17-9b33-4bdb-997a-9ff04441ecf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "444c8df1-7dbb-4f6e-b048-735669251423",
        "cursor": {
          "ref": "3b4b835b-96b3-4b9d-ae83-57ead1286ee0",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "103cd948-7562-436e-87f2-a401526ec05a"
        },
        "item": {
          "id": "444c8df1-7dbb-4f6e-b048-735669251423",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "f87be6ec-0ea3-433d-b848-dff3d280a543",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b845f64-8ded-4a79-899f-32ff3e2abafb",
        "cursor": {
          "ref": "f9513fe7-0a25-4d13-9adf-39c1ec07f6b5",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "9cca3f4f-a265-462b-80d8-9fbdf74c254c"
        },
        "item": {
          "id": "8b845f64-8ded-4a79-899f-32ff3e2abafb",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "ec1a2634-449a-42dd-94e6-6e9bc30467d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d7c151d-bb05-4a8b-a4f9-c398d8dfbe64",
        "cursor": {
          "ref": "80859ba3-bdb1-4c12-a646-a865e667823a",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "e2e982c1-3fe8-4570-86fa-a60b10f0920b"
        },
        "item": {
          "id": "6d7c151d-bb05-4a8b-a4f9-c398d8dfbe64",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "1a1787f3-6962-4cc6-ad18-a556538afbd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "092e98c1-5be6-472f-8481-7fb53f9efaec",
        "cursor": {
          "ref": "e57a5cbc-267d-44a8-beb4-34d9b3da1103",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "fb03eeb3-c35e-4ad3-aea3-8f0084a8a41b"
        },
        "item": {
          "id": "092e98c1-5be6-472f-8481-7fb53f9efaec",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "cbbee451-50d4-4166-90e5-1628667d3033",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e61294f-3acd-4460-93cb-30779d74487c",
        "cursor": {
          "ref": "87447fc8-e09a-455f-8afe-a729e97437ac",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "8d58dda6-2f92-4b4b-8e27-c074c2eb2331"
        },
        "item": {
          "id": "9e61294f-3acd-4460-93cb-30779d74487c",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "d0e2c00b-b1e7-4579-8d08-f480154f841a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7339a344-d1f8-4519-8c76-3312a7bc533b",
        "cursor": {
          "ref": "6f5168d4-01da-4403-b1d1-89c90a7b627c",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "70fb2d59-b435-4304-ba0b-2bb9a98c3b82"
        },
        "item": {
          "id": "7339a344-d1f8-4519-8c76-3312a7bc533b",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "d9c3bf21-248f-46d2-be94-a4d0182334f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5526070b-c2d7-49d2-99af-ea5311101e9c",
        "cursor": {
          "ref": "92429d41-f141-498c-b8e1-8cf7c923fe85",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "14170784-86f4-4a55-b7f6-b03a21079fd2"
        },
        "item": {
          "id": "5526070b-c2d7-49d2-99af-ea5311101e9c",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "fbf71dd2-5489-4efc-ac14-950b356eef30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3f9dbd3-4f5a-41b7-ba9a-59c586643383",
        "cursor": {
          "ref": "bd79f475-743e-4ceb-b9e0-1b6f0b8f6499",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "ae5de25b-6160-4111-b5a6-4ba9cac5d586"
        },
        "item": {
          "id": "a3f9dbd3-4f5a-41b7-ba9a-59c586643383",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "f069a21f-0692-481b-9cc6-f39fd25df6ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71f335dc-1f14-4782-8f4e-eb78cb63b938",
        "cursor": {
          "ref": "38d58c40-7fca-4c36-b2ad-49b7972098c5",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "e9f40b3d-f2e8-4da3-bf4b-773fb1ffecae"
        },
        "item": {
          "id": "71f335dc-1f14-4782-8f4e-eb78cb63b938",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "ef1ae926-ce12-4ba7-98ac-2bc6fdb9d25f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ce5632c-d05d-42ce-a71a-781e060710e6",
        "cursor": {
          "ref": "c583a2ea-5de0-4442-ab50-d4acbaed5815",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "9f754203-ef9b-4561-8c67-7262c5722bf5"
        },
        "item": {
          "id": "9ce5632c-d05d-42ce-a71a-781e060710e6",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "60c09323-cc7c-4d82-af79-0dfd865ec8bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeeb302f-ed52-4fa0-9b3b-d8b7c352f0a7",
        "cursor": {
          "ref": "4e052a7e-9800-43b3-96e0-6c6a4685bc5f",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "fc21d50f-3779-49b9-a9e8-d096fc8db7b5"
        },
        "item": {
          "id": "aeeb302f-ed52-4fa0-9b3b-d8b7c352f0a7",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "1a89a331-9c86-410c-a231-85618e785538",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "156ce6fc-ebe0-4186-905c-25e9ff49a66c",
        "cursor": {
          "ref": "3a2ba265-bcfe-4691-b744-094cb759511a",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "34e67f69-cffc-4309-90d6-388917b36cd1"
        },
        "item": {
          "id": "156ce6fc-ebe0-4186-905c-25e9ff49a66c",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "68d68151-2186-452c-a8c1-18b4c9c97e6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "827e2e72-8f7e-4c33-9716-37fb9504aee8",
        "cursor": {
          "ref": "f0835cad-151e-40ee-8af7-b3391973ef9f",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "0c9d4b1d-b17a-4d51-a327-711c9c35576e"
        },
        "item": {
          "id": "827e2e72-8f7e-4c33-9716-37fb9504aee8",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "b594e9f4-9623-4426-8e53-f5d5e4ebd680",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0441687-00f7-4211-b957-1d8fd231a053",
        "cursor": {
          "ref": "8e410783-6b90-4fe9-bbe9-78d45b46c152",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "dc6a435d-8f26-4301-b853-8cae6a88a571"
        },
        "item": {
          "id": "e0441687-00f7-4211-b957-1d8fd231a053",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "43e07021-b077-4890-b79c-2eac8762bd96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fade31e-3e66-4aba-ada9-bfb0dc7e8a91",
        "cursor": {
          "ref": "980471ed-5dec-41ff-b8fd-ab6581cf0c21",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "aa8a170f-d245-42e5-9068-7a2b9cf5ad64"
        },
        "item": {
          "id": "7fade31e-3e66-4aba-ada9-bfb0dc7e8a91",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "c2f9f84f-2a18-4508-9d63-3f0ed554bcd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7b08db4-f99d-4dde-9534-79f31c6a550d",
        "cursor": {
          "ref": "6f485ea7-b1aa-4f3f-bf70-e6005f6a1e34",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "0b81fe0b-e098-4ca3-87be-3cdbbfda2f12"
        },
        "item": {
          "id": "e7b08db4-f99d-4dde-9534-79f31c6a550d",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "d5604285-902a-4204-b84b-7d7c8af9580e",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "c7b1dbc4-428e-4eb8-9f4f-bae324693619",
        "cursor": {
          "ref": "f670184c-1a54-4ddd-bf41-f18370c881ae",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "16ae0c55-aad2-428b-88a6-53bf488f124e"
        },
        "item": {
          "id": "c7b1dbc4-428e-4eb8-9f4f-bae324693619",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "5c84bf8b-c73a-4d19-9803-9bc8ecad1d1f",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "2ba30a44-94e2-4876-aa55-8fecd701410e",
        "cursor": {
          "ref": "7e3ecabb-0e40-4aae-851c-210850673758",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "771e3f93-6131-417d-b65b-6f9a430de763"
        },
        "item": {
          "id": "2ba30a44-94e2-4876-aa55-8fecd701410e",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "61fb6ffa-d249-4ab4-8b45-33fb6185fcb3",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "58841458-3a88-4e2c-b898-2262ec69d603",
        "cursor": {
          "ref": "6db8d9e4-f8c9-4b91-8140-129d61ee1bc6",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "24789675-d3b0-4cf0-9be2-c594d079b50f"
        },
        "item": {
          "id": "58841458-3a88-4e2c-b898-2262ec69d603",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "3354efcf-9cc7-47d2-a62e-e69f02b581b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cbb911b-8775-43ce-b44c-3eb9a111d095",
        "cursor": {
          "ref": "908aa45d-a284-4da5-b809-c366933ce655",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "900f5c57-03dc-4757-99d5-165b5b4f046c"
        },
        "item": {
          "id": "5cbb911b-8775-43ce-b44c-3eb9a111d095",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "16b2259c-92e0-4598-ae2e-89f0d31e6be2",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "f6978d36-9882-4dfb-bd95-e35a3da6d60d",
        "cursor": {
          "ref": "0fc05b36-da14-4a91-bc35-1d1944fe5018",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "1f3fefdd-643b-4380-85ce-68d6459c6a88"
        },
        "item": {
          "id": "f6978d36-9882-4dfb-bd95-e35a3da6d60d",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "ac1bd42c-b971-47c1-84a7-9b1b909fbbab",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "27f60de9-577f-4dd9-b93e-724bb7b8b4f6",
        "cursor": {
          "ref": "da04589f-2b13-4fca-bbe9-389fc946bec6",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "a32d4544-4e67-4fd9-872e-1ec2ea152fd5"
        },
        "item": {
          "id": "27f60de9-577f-4dd9-b93e-724bb7b8b4f6",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "3a25b05e-95b3-478c-a976-29b277421a09",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "691fcfb1-cce5-4acd-8fce-57d572f6446e",
        "cursor": {
          "ref": "66482f38-646a-4141-9859-ef29e03a7141",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "0c987f49-4101-4745-9b42-5bee74792d67"
        },
        "item": {
          "id": "691fcfb1-cce5-4acd-8fce-57d572f6446e",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "80df67bd-3773-4887-bb1b-1444701997ea",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "cba8557a-b922-47a4-b050-c2cceb3ec821",
        "cursor": {
          "ref": "320c9c05-8a21-4f4d-8794-2b33d31201bd",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "b50849e2-4d9e-47fd-b3c6-8301a50fb78e"
        },
        "item": {
          "id": "cba8557a-b922-47a4-b050-c2cceb3ec821",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "0a999ac0-b9e7-4a13-8306-115ed318e010",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "9a16bacb-4854-437e-906b-43e28f066e1c",
        "cursor": {
          "ref": "86f172c0-917e-4134-81e6-83f3480123d9",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "5fa3f2b2-bfa9-4e83-b557-1c37d21aebd5"
        },
        "item": {
          "id": "9a16bacb-4854-437e-906b-43e28f066e1c",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "c0d9c5e7-e706-48ee-b739-1952d9164775",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "a37be4c0-ed2d-4e20-8139-39974548f675",
        "cursor": {
          "ref": "2f1b9c62-99d1-4b28-9062-ffd25ec9a1fa",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "247ccb31-6a9f-44fb-8346-d1f56657effa"
        },
        "item": {
          "id": "a37be4c0-ed2d-4e20-8139-39974548f675",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "1f15a815-7a4b-42d1-afb7-6d07ef5ec591",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c1be4ad-9803-45c5-b320-54d745446d13",
        "cursor": {
          "ref": "af08f935-463c-4939-8b69-e7567f031097",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "48ce1bfc-8882-4672-8bd4-c84418c0c53f"
        },
        "item": {
          "id": "4c1be4ad-9803-45c5-b320-54d745446d13",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "910cab2e-4814-4e19-ab94-d7690604b384",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "120c6722-a0b2-4ac8-a640-d53c78b8d027",
        "cursor": {
          "ref": "dd905387-d605-4cf1-9746-469c726cc4ae",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "5b937c50-2a8f-4387-97ff-c812d33a2bfd"
        },
        "item": {
          "id": "120c6722-a0b2-4ac8-a640-d53c78b8d027",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "af085fd3-2197-4229-af91-c9d1de3da40e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fba7cef0-3cbe-41a0-8b55-435d8d954a74",
        "cursor": {
          "ref": "49dcebd9-cd78-4f7a-98cf-b96b6e965026",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "5ab75378-2fc8-431c-8437-2eda03ae2e60"
        },
        "item": {
          "id": "fba7cef0-3cbe-41a0-8b55-435d8d954a74",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "67e12ed7-8bfd-4111-9fba-df2da93a4388",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bff740a-8084-4c83-8788-a367d0ca2da3",
        "cursor": {
          "ref": "05428968-0716-46f6-a41c-07c1e70ae3dd",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "8286da58-e51e-4a24-8987-824cccb7c110"
        },
        "item": {
          "id": "5bff740a-8084-4c83-8788-a367d0ca2da3",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "5463b525-3c9a-4b9c-9c1d-b001446f17a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c5e131f-3680-41f1-968c-a6fa7a3f861a",
        "cursor": {
          "ref": "df254c4a-5cd5-4862-992d-726f38480cfb",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "5071cebd-3bb5-4f52-81be-e04050158b99"
        },
        "item": {
          "id": "1c5e131f-3680-41f1-968c-a6fa7a3f861a",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "9b6fe7a9-3570-47d7-89ed-e86eea485837",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b5997c8-e0fb-40ac-994c-4bd5d8887b81",
        "cursor": {
          "ref": "aed80c3b-340f-4d05-a839-5d9d7b080d75",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "aae5dddf-bd4e-4eac-a62e-cccee26b0229"
        },
        "item": {
          "id": "7b5997c8-e0fb-40ac-994c-4bd5d8887b81",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "f089019c-9dca-4bce-a627-f6d72ffb5966",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a3bd376-8950-46d2-8d5d-23c4b8f5de4e",
        "cursor": {
          "ref": "d1bf3be5-6d9e-4216-af63-d5544c7dbb75",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "2132af4a-2134-4740-8ce7-b3bf89be7a49"
        },
        "item": {
          "id": "6a3bd376-8950-46d2-8d5d-23c4b8f5de4e",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "9b43595b-c26a-4f48-95f4-b56f5f5b0862",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5592b42-5461-466e-a0bc-893a3f3ec302",
        "cursor": {
          "ref": "10a9b274-a023-4ec0-9d26-76ea3b9bd118",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "70fc7d2c-1e4c-4a37-85a7-22ad65362440"
        },
        "item": {
          "id": "c5592b42-5461-466e-a0bc-893a3f3ec302",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "a34ad942-d63c-422c-b166-d0888ef72416",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7e2f447-caae-4ac4-af0b-166af20c32c7",
        "cursor": {
          "ref": "fa4711bc-88e8-44d0-a375-642d3ea5b7d2",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "5d0bca9b-bcf7-4883-850f-41d91184c69a"
        },
        "item": {
          "id": "c7e2f447-caae-4ac4-af0b-166af20c32c7",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "91a66d36-3141-40b4-8ad3-4f6e572170d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6927324b-b7b5-4518-a58a-818c9f4d7935",
        "cursor": {
          "ref": "3e0653ea-7596-43f5-baee-3d047cbcee90",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "33774e10-2e38-4be4-8c3d-b33c5fe220ef"
        },
        "item": {
          "id": "6927324b-b7b5-4518-a58a-818c9f4d7935",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "9aefd12f-20ab-4f9a-ac57-171376c9a7f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55fb1983-8b4d-4a5e-b866-adea1d437c09",
        "cursor": {
          "ref": "c7d296ee-c6ba-4192-a177-8312a398e09e",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a9415e1b-c508-4dad-a57b-d4ed55acd0f3"
        },
        "item": {
          "id": "55fb1983-8b4d-4a5e-b866-adea1d437c09",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "14a2deb7-40bf-4ff6-8a8b-9e284ed344d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32243a9b-b58d-47c1-9678-836366659b69",
        "cursor": {
          "ref": "13baea13-0b23-44c1-b557-d4b42ecbf3c8",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "b8d6b8a5-6e92-4d99-8fca-04fc35027311"
        },
        "item": {
          "id": "32243a9b-b58d-47c1-9678-836366659b69",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "6f887fd0-e445-41fe-9cd7-f2a7551a0153",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "517c0606-eac7-4bc4-a803-37496761c870",
        "cursor": {
          "ref": "2d5510e9-87af-4fbc-accb-ad6144aa5689",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "61bc58e8-a507-464e-975e-e2a45608fe10"
        },
        "item": {
          "id": "517c0606-eac7-4bc4-a803-37496761c870",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "188032a3-0c0d-41ff-81be-c40d80f813b9",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "5d7178c7-ecb6-4b3e-9c6f-e474f5bc315a",
        "cursor": {
          "ref": "107ee83a-1971-4f38-b296-2af52a3857c2",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "bb0cfd5e-4cc1-4df5-8918-dbd954d3d143"
        },
        "item": {
          "id": "5d7178c7-ecb6-4b3e-9c6f-e474f5bc315a",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "84ec15c1-75db-4f2f-9ec5-5f3c63393a3c",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "ac5d4d57-a7e6-4081-884f-7cad07f178c7",
        "cursor": {
          "ref": "068e9e59-c653-43f7-81c5-231701a0eeff",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "17ee0b67-abd3-4b5a-87a5-d923437c0a00"
        },
        "item": {
          "id": "ac5d4d57-a7e6-4081-884f-7cad07f178c7",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "1e1a6366-8047-4d1c-bdf9-a224f39c5e4e",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "cc3eb184-691c-4975-9bfe-b53d6da55a00",
        "cursor": {
          "ref": "5d907cc5-e2d6-4a56-aa76-a2ebaf9ec498",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "9d7e2ebc-788a-40d0-a806-4206533f0e51"
        },
        "item": {
          "id": "cc3eb184-691c-4975-9bfe-b53d6da55a00",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "c87d1f82-499c-4c71-b695-d8a0ebe673ca",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "9c76eda7-9a57-416f-a000-605871da9ef2",
        "cursor": {
          "ref": "c9970e3e-e489-4f85-aa9e-b4b39507084e",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "32709b19-da5b-4542-b88a-b2e3ba980cb6"
        },
        "item": {
          "id": "9c76eda7-9a57-416f-a000-605871da9ef2",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "3a139a32-cb9a-4d94-bfa5-0d4be461275f",
          "status": "OK",
          "code": 200,
          "responseTime": 193,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "b48886f5-dbac-46ef-9e08-cfc750fc3f5e",
        "cursor": {
          "ref": "1f48c5e8-3f13-4e55-b944-595eca171c08",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "21ca06b7-9511-4f68-b8fa-361d16de2ac1"
        },
        "item": {
          "id": "b48886f5-dbac-46ef-9e08-cfc750fc3f5e",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "a7814109-3f3b-4b08-a7e0-05ecb2730d72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29d09948-6957-4988-adf6-2efd4b4e5b52",
        "cursor": {
          "ref": "f24b4a44-1e46-43db-bd64-7d5ea356a888",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "ca100fca-ca7f-48f1-b345-6726e6f62056"
        },
        "item": {
          "id": "29d09948-6957-4988-adf6-2efd4b4e5b52",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "8b9f0137-094b-4dbc-8b4a-01f452f0f066",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d39d762-3032-4afc-aa13-cb2e43200fe4",
        "cursor": {
          "ref": "936e8e98-a782-445a-b74c-4ba38c3a03ef",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "2ff4a614-83f3-478f-b6e3-0557239d99b7"
        },
        "item": {
          "id": "1d39d762-3032-4afc-aa13-cb2e43200fe4",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "1e683b8c-3e86-499b-94e4-c00deebb85cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4609dc12-197d-49da-b76d-ecaaf0b3e0c4",
        "cursor": {
          "ref": "b83e9f2f-d91f-42ef-bf88-c82759cb309a",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "9b2d194b-a7ed-491c-9c23-5035388247ce"
        },
        "item": {
          "id": "4609dc12-197d-49da-b76d-ecaaf0b3e0c4",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "7f316122-c2b8-4310-ac83-cca901090103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fe69a7d-c7fc-4902-91dc-1fa17cb9c3c5",
        "cursor": {
          "ref": "d274f025-0b80-45de-962b-3a41ae5c4ed6",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "7a627c9f-2113-454b-8d46-77867c31e755"
        },
        "item": {
          "id": "1fe69a7d-c7fc-4902-91dc-1fa17cb9c3c5",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "1148131c-c5fa-4e19-916d-c268fa0d0ea9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58af84cd-acf6-46f8-be45-480aae5a588f",
        "cursor": {
          "ref": "00b3e46c-4455-4cfd-9088-60a6c5792f63",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "063f1823-cbcb-41bf-97e1-9cbc3e655763"
        },
        "item": {
          "id": "58af84cd-acf6-46f8-be45-480aae5a588f",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "2d2d4d76-dada-4d24-8a03-efc9799639e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdf78a52-4db6-4845-a5c8-af4a81ad29af",
        "cursor": {
          "ref": "0b22dde2-4f10-4c3f-b80e-94e329f61abd",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "c618edb4-06aa-417a-9440-48654a249945"
        },
        "item": {
          "id": "fdf78a52-4db6-4845-a5c8-af4a81ad29af",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "73db19d5-98e2-412c-8510-7afa157efc4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d6b3cc9-9337-4ad7-b3c2-f244389a638e",
        "cursor": {
          "ref": "05e2325e-35cf-4274-b263-ae621c2bfc02",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "f41222db-3655-41f9-97fe-6bf82028f64e"
        },
        "item": {
          "id": "8d6b3cc9-9337-4ad7-b3c2-f244389a638e",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "0417cbba-687d-484d-b88f-3b7d3b472a61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c64b578c-bdfa-423c-8b67-2f0ff0513998",
        "cursor": {
          "ref": "5ea1921d-30f1-4e61-a234-8908eaa019f8",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "de91e989-3e5e-4c5f-aefd-a64779eaa3fe"
        },
        "item": {
          "id": "c64b578c-bdfa-423c-8b67-2f0ff0513998",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "ae790e80-d664-438e-aefe-c2afb9561cb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf829313-d236-4cc7-8f9f-714b5ff99469",
        "cursor": {
          "ref": "c16fc193-8fca-47a9-9f71-643238f4940a",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "d7cbb539-1540-4d1f-ada7-41a610b9b3aa"
        },
        "item": {
          "id": "cf829313-d236-4cc7-8f9f-714b5ff99469",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "8283488d-c16a-45fe-9f31-5dbb6f656a9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6289f6a9-5e33-47e2-a6e8-79a08cd79c34",
        "cursor": {
          "ref": "c50dfcf9-ad89-4809-89bd-6525a25b419f",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "1a341252-89f3-40ba-952c-9cf2fe4ba5b6"
        },
        "item": {
          "id": "6289f6a9-5e33-47e2-a6e8-79a08cd79c34",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "6a9dbc52-b453-4b6c-880e-fa2b1462a5b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "058e9871-f5b1-42be-b267-4ef1f4273543",
        "cursor": {
          "ref": "4e81548e-a360-47f1-8e96-c766a6ebd6b3",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "5549844b-34ba-4f97-afb4-6a8608a10ba7"
        },
        "item": {
          "id": "058e9871-f5b1-42be-b267-4ef1f4273543",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "389a02fe-d956-4b72-9646-050e0a6a99cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92d431c1-099c-47c9-93cd-d69adb41e5bd",
        "cursor": {
          "ref": "e61b7f40-212c-481b-a6e6-1d5582bb683e",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "b03ede72-4cd3-4fb4-9ed1-dd3f3036b252"
        },
        "item": {
          "id": "92d431c1-099c-47c9-93cd-d69adb41e5bd",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "6f355a29-0595-49b2-9a75-641f76f06865",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e95f0f73-681d-4832-a5f7-6a289339d5c2",
        "cursor": {
          "ref": "65261022-bd97-4e9e-9a53-174c09671271",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "f7672427-cc77-4f8b-8e60-a417a441f3af"
        },
        "item": {
          "id": "e95f0f73-681d-4832-a5f7-6a289339d5c2",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "4f9c28a1-aed9-45cb-8da6-20fa2f46df7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "725b4d70-33e3-499b-b15c-6a7b03f76655",
        "cursor": {
          "ref": "8c7e3171-3d39-4319-9e41-5411c2deefc0",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "6a50f147-9b60-4510-9682-94326f42a45f"
        },
        "item": {
          "id": "725b4d70-33e3-499b-b15c-6a7b03f76655",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "fdc3fa82-3db0-493f-bcb7-22b189bb526c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "651a25b2-bf9c-4857-b356-b5e1ee67789f",
        "cursor": {
          "ref": "67dc02cc-86c2-4a88-8b70-750440a998bc",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "13c85989-95ac-44f0-973b-c0e7b6201c29"
        },
        "item": {
          "id": "651a25b2-bf9c-4857-b356-b5e1ee67789f",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "0accec4e-d113-4c6a-a786-c86594dc9ca1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f6ead8c-a68b-4d18-a928-3f2158e38055",
        "cursor": {
          "ref": "e25963b3-67ef-4c7a-a14c-56c951b9898a",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "dfccc5ea-1ed0-4b57-8bb3-fab16e51e9c2"
        },
        "item": {
          "id": "3f6ead8c-a68b-4d18-a928-3f2158e38055",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "81a9421f-ac8b-4aad-ba08-0de0fe8e53f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdf0759b-9c55-49b5-b0e9-272d34d20ad1",
        "cursor": {
          "ref": "4a2aa1b2-f1c2-4a4b-8e9e-e9a868d48291",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "09189776-52a2-4af8-811e-2699e3508aa3"
        },
        "item": {
          "id": "fdf0759b-9c55-49b5-b0e9-272d34d20ad1",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "fbb58fb1-38ff-46fd-82cd-ae27785727d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a772cf61-1c5a-4177-aa59-902b4f2208a8",
        "cursor": {
          "ref": "200a637b-710a-4f1d-b862-5a13e9699b7a",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "9910e4ed-66c8-4840-8a0a-738c2638e90e"
        },
        "item": {
          "id": "a772cf61-1c5a-4177-aa59-902b4f2208a8",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "876f65bb-11dd-468c-a95b-eeba4257f5f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ef6d51f-c78a-4f8c-921f-5864bfd26f4e",
        "cursor": {
          "ref": "0dd69824-4433-4b1c-84d8-68d02238923d",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "a37f0f2d-f6f8-4559-b4ec-e9470324873d"
        },
        "item": {
          "id": "5ef6d51f-c78a-4f8c-921f-5864bfd26f4e",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "9e9f1588-9455-471f-9d96-47059a9e8de7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8dae84f-a27c-4a9d-bc6b-3d6d603582b5",
        "cursor": {
          "ref": "90439c2e-c751-4187-b785-396ffbff2c2e",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "d18a4312-d26a-4605-9399-47d390ea30aa"
        },
        "item": {
          "id": "b8dae84f-a27c-4a9d-bc6b-3d6d603582b5",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "e1035d9d-75fb-40e6-aaa6-44d877b40c60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82362298-7ed6-40bc-b4b5-fb22335479c7",
        "cursor": {
          "ref": "f54b33b1-1c7c-4c65-9147-328c20744456",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "95114e03-1e5b-4288-8745-0e515064bf2d"
        },
        "item": {
          "id": "82362298-7ed6-40bc-b4b5-fb22335479c7",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "9af982ac-9324-4497-b71a-c8c8688feba6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87318b50-fd9f-4b6b-ac20-1117637b4152",
        "cursor": {
          "ref": "d94438f6-5f79-427b-917d-074f8dc06e87",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "12f43d14-5efe-49fa-96bf-55f385f6b1a5"
        },
        "item": {
          "id": "87318b50-fd9f-4b6b-ac20-1117637b4152",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "329e1575-198c-4d00-94b3-8bd78de37a78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9afe858d-eefb-4a8c-a817-ecda9c47b81a",
        "cursor": {
          "ref": "bd572c14-cdb5-496a-804c-c78f723d6b91",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "cc68d1cf-1b8b-4e41-b865-6aa39eb8dcd7"
        },
        "item": {
          "id": "9afe858d-eefb-4a8c-a817-ecda9c47b81a",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "8ddfb79d-8ead-4814-9e73-9730b7a86452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9478a74a-edd6-41ef-8436-859652134605",
        "cursor": {
          "ref": "6a98b857-3c81-4221-a80d-cbe1621d4261",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "00a66783-a1da-454b-8298-4f454ec8aa25"
        },
        "item": {
          "id": "9478a74a-edd6-41ef-8436-859652134605",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "233e1e9d-8a4e-4098-95a2-ecd13b836ecb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c926dd53-c0bf-4b30-a53f-92f8a18b148f",
        "cursor": {
          "ref": "f760436d-3109-43a2-933e-6b4596701ae2",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "3d97b90f-6dd4-4856-aa5f-1623a3f7710d"
        },
        "item": {
          "id": "c926dd53-c0bf-4b30-a53f-92f8a18b148f",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "aaecc30b-4776-4755-9982-120f6e02f02f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8910afc6-3d97-45aa-81bb-3bd7aa034dc3",
        "cursor": {
          "ref": "a882f6d3-44a4-498b-a367-94a7963ba826",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "bc748df9-1f8b-4524-9156-ae1b0235b322"
        },
        "item": {
          "id": "8910afc6-3d97-45aa-81bb-3bd7aa034dc3",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "27206a28-84c8-4ecd-bef9-0ce185c542c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f4444d3-8a37-4541-9d02-8e92d4602ee9",
        "cursor": {
          "ref": "86faf57d-c8ed-4a40-999e-cba841d8f58b",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "7cb598b8-df64-4450-be37-325587291c92"
        },
        "item": {
          "id": "3f4444d3-8a37-4541-9d02-8e92d4602ee9",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "453e6387-58e2-4f11-b9ad-89dd4ca51cc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a27dd55-6584-4a06-a336-effa5ffbbc16",
        "cursor": {
          "ref": "1832e795-0dee-47b1-9161-3fd7401233d2",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "5fba4c88-2a99-4da5-85bf-abab93818af3"
        },
        "item": {
          "id": "9a27dd55-6584-4a06-a336-effa5ffbbc16",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "d67405fb-3c98-4671-86f4-80edb01bdf61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ce1c99e-4477-4c1f-8de4-d20770afab7a",
        "cursor": {
          "ref": "39cbbeb5-d700-44bb-b336-2fe088050dab",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "520ca398-98d8-4dc0-80a7-ea7482ec0300"
        },
        "item": {
          "id": "5ce1c99e-4477-4c1f-8de4-d20770afab7a",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "3e56ec2e-46b1-4ef5-89c8-10f5c46d8a91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14963080-0231-4d7e-9890-e2042bb364b2",
        "cursor": {
          "ref": "e60534ec-6101-4d2a-a602-aad30e57cce2",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "06b605d4-12bb-4c86-8c41-bdbad9a765a1"
        },
        "item": {
          "id": "14963080-0231-4d7e-9890-e2042bb364b2",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "9cb6954a-6539-462f-87d2-d74ddbb1b5f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e73dda7b-8ab8-4d0e-86c8-94717fda5bba",
        "cursor": {
          "ref": "1fb8e912-ee8e-4566-a64a-45bdec691ad2",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "c18c0877-6006-49e1-999f-cf0601f7bfd0"
        },
        "item": {
          "id": "e73dda7b-8ab8-4d0e-86c8-94717fda5bba",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "3ade50ca-8fd7-434d-826a-08a780a80071",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08f2848c-e7bd-4e37-8ba5-b986d04cfce1",
        "cursor": {
          "ref": "4612fae7-7362-469b-b77c-36c8d376d6c0",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "d0f78396-2213-478c-80b0-390dcad921e1"
        },
        "item": {
          "id": "08f2848c-e7bd-4e37-8ba5-b986d04cfce1",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "07686403-3ec4-464b-8bac-2da46397fade",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c678512-2c6c-45a3-919f-55d473067ad9",
        "cursor": {
          "ref": "09bb64c9-31a0-4ce9-80e8-91ecdb766227",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "3f8ae926-7e96-4d6b-81d7-1d9b577d6e89"
        },
        "item": {
          "id": "6c678512-2c6c-45a3-919f-55d473067ad9",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "b5d791d9-6b04-4007-9537-11980aca4af2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f376e2d-88c5-4791-a5ce-1f8b7541f939",
        "cursor": {
          "ref": "bdb2c868-b20e-4fce-b258-efb103503da0",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "97e852a8-e48a-4843-9b57-4c4dc3f1ebbe"
        },
        "item": {
          "id": "5f376e2d-88c5-4791-a5ce-1f8b7541f939",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "4ff5dd45-d03f-43dd-b57a-74ef5e96c6ac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "383080e0-7413-453b-90ec-b0ab0afaa368",
        "cursor": {
          "ref": "105ec40d-cd01-476e-983b-3892fd93bf11",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "47dd35c9-0a3a-443f-91f1-09ce4d94e10f"
        },
        "item": {
          "id": "383080e0-7413-453b-90ec-b0ab0afaa368",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "6b0ec8aa-a12b-4251-906e-4e5c1b62a141",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "b84a3311-1a2a-4527-bd62-d231c30cbf2e",
        "cursor": {
          "ref": "4f8dadd3-f3e5-4a2f-b6af-d787cc5adb33",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "462d9899-525c-4d5f-b2d1-9d51e44505bc"
        },
        "item": {
          "id": "b84a3311-1a2a-4527-bd62-d231c30cbf2e",
          "name": "credentials_verify"
        },
        "response": {
          "id": "683cf540-a0f7-449f-a43c-113e83f39035",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "beb95283-ff47-438c-ac48-67b057649f74",
        "cursor": {
          "ref": "0287222a-16a0-46bc-9463-d72dfbf74257",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "111cb453-5a2b-440b-a9c3-ed3a4bf73ead"
        },
        "item": {
          "id": "beb95283-ff47-438c-ac48-67b057649f74",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "1bff086c-d9ae-413b-b9f0-81c646914e51",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "969e018b-3613-4167-9de4-f6b344ed60a1",
        "cursor": {
          "ref": "1c03d137-fae9-4f7c-9d98-3ac389e0fd6a",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "19828ac2-d91d-407f-b434-c3d390dca8eb"
        },
        "item": {
          "id": "969e018b-3613-4167-9de4-f6b344ed60a1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "01cd976f-4a46-41ac-91fa-07f7b000e158",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "969e018b-3613-4167-9de4-f6b344ed60a1",
        "cursor": {
          "ref": "1c03d137-fae9-4f7c-9d98-3ac389e0fd6a",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "19828ac2-d91d-407f-b434-c3d390dca8eb"
        },
        "item": {
          "id": "969e018b-3613-4167-9de4-f6b344ed60a1",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "01cd976f-4a46-41ac-91fa-07f7b000e158",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "592071e3-0cce-45cf-98b9-af859af4cd91",
        "cursor": {
          "ref": "2f4cbdf2-a954-4e68-aad9-70d8189ee90d",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "5a27a67a-6484-48d3-aafc-d0f73a47419c"
        },
        "item": {
          "id": "592071e3-0cce-45cf-98b9-af859af4cd91",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2e3d1f02-88fc-49ed-b2b9-7b37f15bbd3a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cebad6a-ee7c-4ff0-93fd-dda625b34ca5",
        "cursor": {
          "ref": "fa7e593a-6785-4e24-8d20-041970e28bdf",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "7920e43d-8d05-4cae-92db-394eaa49e480"
        },
        "item": {
          "id": "6cebad6a-ee7c-4ff0-93fd-dda625b34ca5",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "e146e6a2-4808-453f-87f5-2ef6e3862ba0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}