{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "7e96d0e5-e683-4db2-9996-ab7c49e5cb55",
        "name": "Clear Cache",
        "item": [
          {
            "id": "6cd322f8-88b9-4d67-b4ac-d7cc6d9b620a",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0bbf5152-61cc-4b39-8814-28a3a74abbd4",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "db1b2970-6320-4ffb-81e5-e74dfb295c0f"
                }
              }
            ]
          },
          {
            "id": "7ff24509-5238-4290-ab37-83bcc8450fa8",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b04a2277-177d-46e9-98e6-0aa7c8c83114",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "13aef5d4-701b-4549-80a3-af14d5291c0e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "3b8585de-7d6f-4238-9b2d-c689186f9537",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "14a53e6c-e4b5-4994-8518-d320321a5bdf",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e3908b9a-191a-4483-9674-ea9d38b7f1d6",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2cf533c0-9cf1-4a1d-b593-7b8576bb477a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a60246bb-ef6c-4183-a9c4-a2c4de5a14e8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "54da5011-4c00-46ed-8164-8e7106ba0f3e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9851f7f7-3cfc-480d-afd0-d66da9cf21bf"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "cb359c74-b62f-44de-8289-6affaf0f3d9d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e64e6190-46ba-4eec-b45d-524e22eb62bd"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bddc9220-e45b-401f-98c9-1f2c8eb5ca44",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "14ddedf5-b3b1-4970-8bea-2240409de1a3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "382b3e46-8cdd-422a-b5d6-811760b268ec",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c5718cf8-853e-4717-a754-fcedd79d5bd3"
            }
          }
        ]
      },
      {
        "id": "fb512b64-9167-4bb0-8bb9-54cbb2e01595",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "3b66f826-c498-4b72-b989-e7512b5d9a29",
            "name": "Negative Testing",
            "item": [
              {
                "id": "25e32878-5b6e-4496-b80e-f9494198fcd3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a3c86c42-7aa8-4c8e-8d2d-a8ee7e65dfeb",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb05f495-1df7-4059-ae3c-ac61db202bfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "047359b5-d63e-4655-9560-77daad8c1877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e06528d8-80f3-48cd-adbd-81508ff641fb",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a03e53c-bdae-4ea0-877e-3ab37ffdc140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a97876e8-08bb-4dd0-a1c5-261bab258c0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e46f87d-dc60-41ef-b311-532e42d8cf89",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0afff324-59d4-49ec-be3a-4b6d7538f9e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a16358ed-1d4e-4e56-ba87-50c8821950d3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4df02d10-fe64-43a0-965d-552039fe7ec6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ba5663d8-417c-4879-9d0a-2d9545c9fcd0",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3dd0103-5deb-4a63-98c4-368a23d68baa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6bb55cd4-020b-4567-acb5-4ba79b99c019"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "099bb1d9-383a-4846-bb45-1155e1cea39c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "249c7d46-826a-41ae-b541-fe63683b04c7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "608c3ca9-d660-44a5-93ed-30160dbf4a92",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f3f872d1-d577-4f53-97a5-4b3234c72832",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e6cc3e44-e1d5-4139-8fa5-3d0cfdeeefb9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "e7d71de1-1467-4af7-8d9e-1dd392a71fd6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "83bc6295-6c9b-43df-bd87-94c6385b272f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "4ba0dce4-3073-45be-95ec-d70c2334a97f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "90af0196-a2b2-450f-8439-9b47d9481aa6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3a1f8518-7fc6-470c-bf1e-414f79db4b40"
            }
          }
        ]
      },
      {
        "id": "29291b70-5c0c-4b29-9250-d6f3a57e1d38",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "b91e5489-04ca-4cdc-a291-f83caef31546",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ee19f92e-ddb6-4d68-bbf3-7446bdefd729",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "c47af431-56f3-4657-93eb-c00e1115a623",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bae71d9e-5034-407a-b792-4cc40e2bf7e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f83c2b7-539c-48b7-b314-9007e51cda3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44ff5059-7767-4899-b63c-12a18ff7fac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "131d3357-397a-4fa6-97ea-93f3cd603a6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2da1a6c5-aaf6-4b35-a960-d8b28459314a",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4493b73e-8147-4c34-877f-8478d8f22b35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9e02e38-1f61-486b-8197-5e00bbedd73c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3e12a74-699a-438e-835e-5040803adf7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7210ef64-8ac9-4ac1-b0a7-7b1c1338c3d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05a9e730-ad2e-4815-8a61-b2c9a8dc2ba9",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "343a5d88-fdb5-4239-9b96-b2a359736c70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bba490d-91f8-4368-b025-1f7b5459ef41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "624ffe69-9a66-44e8-9dee-00c925e44bbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aa198bca-e94f-4cea-8812-17d03baec4c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "596c89c9-eea3-4036-b93f-5547e07ed358",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39d99d76-0c00-4217-88ae-d778d405dcb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23c54828-b24e-43cc-b51a-8fb4830d4032"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3711021c-9f53-46d2-b2df-c1a9ff33d142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1ca9cda6-e29c-4a93-80e6-c66674772430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f129d71d-48b3-460c-9859-23661a0f134e",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07b78cec-2e5d-4d8b-bee5-b90e82eb0944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fb723ba-5941-4480-aefa-fd71244f08ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03abe500-84ba-4b2a-aa2e-460aa36b702e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "968b6cd9-7028-4c9d-9d7c-aa6d4ca76994"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52c0c769-c6ca-4993-94d5-e28a16400dbc",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eb6d60c-a6a8-4a87-804e-260fc5f70334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9155c0cd-6653-43d8-ac01-073b1833c9d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ff00941-fdaa-4ac6-bbb2-4286b304d483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "88d542b6-65cb-42c3-94f6-a5b2fc14d2dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35f33ae3-d1d5-46f4-9d64-c75b19fdbc34",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17d885a0-9d2b-4cd8-bda5-692bc5705a52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb425d9f-18b2-4f3a-9b34-2a7fbc5fbee1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29f03903-ba27-4dec-abea-04cd4e943a09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "96e3cbc7-d13b-4392-b6bb-c3b061fb8184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a5d2993-9a2a-431b-a809-a7b9c91687fe",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a1d1403-2166-4b4e-b93f-b4e9e868f5cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "102c84e2-1836-4f82-a959-4eec2ac87635"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82bf7d15-fdf7-44fe-92a9-8624d034ef46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e8bac380-ebf9-4949-8c94-7b2b1960310c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93e9a782-0d97-4845-8d52-72f00fc158af",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "007949ee-253a-47ed-ab56-9add24cb4c77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d701376-072e-4699-a289-9c986136c727"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40a34819-d359-4fa2-b308-669861b9b670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "176dec8a-291b-4015-8c37-d3e60850803d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e1f1a60-db17-4408-abd0-4b69814856cd",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2218e2c-531e-477f-8295-717170bd6053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75585b29-75fe-4c90-8ee7-5af4d4a92788"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcf88bbf-4ffe-461e-ba9c-2cc5a68f4902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5aebd6cf-0d02-4b5d-94d2-97d5c7658837"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31138948-83f8-4345-87c2-4f276309356d",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bff67bc2-713e-48d4-8778-dd7d49ad9bb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e62baf5-364f-4c7b-8b45-2c698944b497"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a70f5a6d-bd84-4271-aa25-a08615a6528f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a5b82a1f-34fd-4afa-9317-9938ff4b6faa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb69209c-63a8-4df4-a7e9-3eabe3cebe9a",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b926362d-9401-4f11-9913-4b308bcb23b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a009cb7-ccdf-4f18-85e0-8cdeec759b9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "658ad88e-17f7-4688-adf1-867b9451a623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1eb74374-ba32-4b6f-9e70-08933e3151de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2dbfe6e-e92a-4d79-a3fd-bd750fc42256",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "590af0cb-b95d-42a5-a15d-ee41a9a350d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27dbbf92-da39-4723-8651-cafea34ef0c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa809351-1311-47e1-a600-ea27a29f65ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "db7afa0b-2eef-4e4c-ad78-a27baa3d7927"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e05cc98-6fdb-4cdf-949a-7be331437785",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bd49943-df2b-4b1b-a7e6-40764d648cf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42875f40-0075-41c8-955d-b818f7cbb1e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "991210e8-2ac3-4e3b-89bc-0f2bf041138b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c87ca247-283b-4e0b-b7c2-2f1163498ed8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "731073b7-3b5e-4417-8856-56888e323869",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf03b149-4e72-4160-92fb-e99750af42cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4eb187d-d5f9-43a5-a3c7-a8eafe8741a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "930becd2-3ded-4211-87d1-727f94da5f68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "df21ee60-036b-4690-bb2c-3fdb1c258189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "920d8498-4e10-400c-871d-06ada6762d66",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "593eb248-90a5-4134-af83-d222df4c7aca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dead4731-d364-419d-aefc-7461babaaf53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cd93494-bbd7-442d-bd38-a269876d1cec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7a459d51-6c4d-44cf-ae20-b269f5bdde1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd30cf6e-3d31-493f-9d48-3e126996b57a",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16b7ee17-878a-43a2-bd6f-a307d6607c21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14090b07-7f9a-4a4c-8919-799dc9750207"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abedf5a6-9666-4a1c-97df-3bafb1acfa92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "affbfdd1-e140-4446-ad6f-53e166912498"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47fbf200-2c19-45ea-a126-20e4bf101bb2",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9178b3b0-e2a1-4d0c-8d92-03462b7fd79f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f502308-3a10-4521-9ef9-2614eb7e95d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f16dab3c-c9c2-49cc-b5da-0416a39f921c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0214351f-79f2-480e-bfb6-52c9ccb5954d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "610df337-a3a1-417b-83f0-6d46d023e9f2",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c4425f5-b23c-41f4-afd1-33b516b851e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcd6f5ea-3100-4eac-b87a-0c1ba88bf429"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfc8ac8f-3046-48fc-a395-a11f6bee3ad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8364a880-d17a-4a6b-9aa7-57f14eb18c61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5eeec9d-f4f9-4b24-baff-6f2d28de2d30",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f594d9c1-b9ec-4ce0-8b5f-f630e9bebdb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8504ced9-3e28-4b6d-ae91-1908d38469af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee994849-7fec-4765-bffc-470fc8ac6fdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "909a4b8f-448b-44a5-92dd-e98256b95ab9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6414abe4-98e8-40d0-8ca7-4dcbd89bbce1",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7b21a1c-578e-43a4-a530-64aa0457859e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d16ca2c1-3f1c-4168-8a91-e4651ed0f240"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f5dcd33-34e5-4bab-8d26-a9529d586af7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "411024dd-05a8-4fee-a1ab-86584c2a084b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d826ffc-4ac9-4839-ab24-8904a64344bf",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56ab5bd6-d6be-4a5e-8685-d318cf81e2ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92fdc87c-c084-4516-8357-328a7523628c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33723180-f55d-4c51-9e7a-ac3187a7e546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "245c1ac4-b22f-4b66-aef0-5a4a24cd018c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32189f40-f430-4bd1-86d4-d6529804f24f",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "763465f0-d3d4-4481-af6e-e43d23433bd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07f7bceb-5842-46cb-b0a1-f4d496023121"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10a0f5f4-4f1e-4ddb-80a7-a79e37311a0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b5a5108e-8f2d-4d97-87c7-62fae6e8962e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b49019ab-7aae-4f0f-9f94-54ba8266787c",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ada2c221-34dc-4785-9bb1-751bcd6e2a15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8df06e50-8713-46bc-82d8-8b9748c126e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deec9ba0-168a-42c2-91cb-5c39d9bd132b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2d69416-0e8c-4535-8de0-fb5d8d3026f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fe4c1a4-048a-4663-af8a-216c9d1af2de",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b6df1c9-d8ea-47dc-8148-a4ade2b88198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18b97631-3b06-47d3-b150-7b08d29ecbf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "909ac244-5637-46ed-814e-8ddfb9f34453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb0787fb-9c6b-490e-b15e-f95c8ed3f3d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d7c5db1-d602-4e00-97d8-f3d6a14ef795",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98d2a92c-841a-46c7-a5c0-5dd7968086a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d76ac5b3-69b6-46e3-b645-2d0c2b5138fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "300adf4b-5f9e-4311-aa43-564840cae9d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f758625-0665-4af5-9b80-6f63ce3784a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "124545a5-5b19-4683-9564-df2d14616876",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a5ce228-46bc-4f6c-bc65-1ce67bea20c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78dc46fe-ad91-4b53-8f22-f16985c5b094"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba13c244-c0e8-4ca8-8c37-1c7e8ded3bfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "09235f3d-f540-40fe-8f9f-5a51c831093d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfa5aee2-3d62-4393-bcea-ae10cff38b1a",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7926b4bf-2fae-46ad-a7f1-9b4d15f49b43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a4349d8-f015-4dd6-9969-4a6d670f9207"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcf59d7f-e9b3-4379-a6d3-ed40b452ee83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a18013c2-9c16-4d3d-b820-528b8b81e41e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7074ee06-6c06-4633-85f3-a9e8a4dc31d5",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf0842c9-cba2-40a2-a716-d18cdfcdcbbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c576ddbd-79c4-4776-aedf-f0c94446c564"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68e3accd-e012-42d0-9e98-7943adc7f434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0835fcf8-d60c-4a0f-8419-9bc693357a59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2792de89-fd29-451f-89dd-24dcaee89a96",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1656532-17d7-40a8-9b79-e75cbac67c55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de79b321-01a1-41e0-9f27-59b68650b019"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f3bab45-8e30-49d0-9d2d-fbb7c82685ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "96bd64fd-c25a-4744-a138-6f7c78837abd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "607f1487-aace-4360-bab5-f6bed6b434fb",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbc2d997-2ce1-4d87-ad4e-a95f3203d6ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "853d3613-d2da-4a4d-b3db-4b559149b0c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a883371-7310-43ab-a2d2-0ff0ef8812b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c35f54bc-b215-4014-ba0c-a6917dbfc0ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89f30047-9319-4e3d-8b42-26f186a43faa",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9770c242-3928-42c9-b437-221605182c97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02cb1a40-647a-4723-aba8-4ec3a720a96f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2d48665-8841-4bca-ae3f-6b5359d073fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0bb08962-ef9f-4f27-b088-17c72b606a47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6743d0cf-b81e-4c95-87c8-b1df0402dca2",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29f718f0-6c8a-46a2-93aa-df0db7f00a3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bfc6292-626f-4dc3-ba3b-0117be3dbcc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16f8279f-4921-444b-a345-f5f9f4e4827a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e22567a-8903-4edd-8cbd-dd409c2841b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a5a1f85-82e7-4c05-b5e3-17f53c08a3ad",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1b488de-c9c1-4ef5-a95b-ea3f550d72fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7007ba50-9edd-458f-a711-b5d07a95d47a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae0321ce-7f6b-49f1-b346-a4ee58556e12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a3069b0-127c-4538-ab6f-db31b4f11954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "333b62ab-d25c-4384-bdb5-c21d85d0cbb2",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6ba77cf-ebf0-4bbe-ab85-57c078703959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab52a731-46bc-4c2a-b205-c0626cee2687"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "805d3935-e3a7-4272-99f6-d94611abac88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "52927cac-dcb0-40c9-97a0-9eccfcd64589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2314a01-8ac1-411a-b9f0-942efdb5e9f4",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15b516a4-1fb3-498f-a8fa-918eb8483343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "59fae6dd-ad71-4f9b-8395-87d05551a9d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40eea8c4-d69b-4970-a775-cc0ecc83a549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0646c074-e614-4518-aae6-20fa753de2c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9ba53b3-1373-4874-90f8-8e6a20898eee",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e1e024a-d6f9-4f67-999a-1562fc892dcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "558a8f05-da54-4c3a-ae90-fcf58718f440"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f0222db-631e-4885-9d6e-d8a65b5e0b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b5ad718b-3eaa-4630-82f7-656066dc8aa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f52c93a2-59d2-4aa3-8884-1945bd205472",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ac2e431-ce4a-4bd3-ae4d-4be193e7f2a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08187409-655a-4472-abe3-cdd0b78da874"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5788f2ca-e823-406e-85e9-e8d8e28f8b27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "add8b48b-69a5-4db7-b7ca-044f8d5223b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "211b5ace-dbd2-41cc-b976-7cfb88e2c66a",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "262a6799-0c0c-4f12-adef-68c8c3edd0a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb7d659b-49c2-4106-8b79-f37684f17ce2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4ba6ff8-2210-4bac-a81e-a3bc7bf4ea03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0b38ff3-ccea-4e23-ab4a-605e45262baa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7ce5238-b50a-4663-b941-df0aa0aca0e3",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b8ad06e-6d85-450b-b396-2b7fa9f4e0b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c33104f2-4fba-4628-9c97-9acda0a78373"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fbfefbc-aec9-481c-8f6a-f3994b7c6051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "dd5b8440-1d4b-487a-858d-a7b3faf018f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dbc43e5-fb07-4eec-87f7-95cc87831f00",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f269223-ce9b-48e9-9e95-512460e13ef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4a71362-cf04-44a7-b0a0-deff318bfdeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b94515a4-1925-4f62-8ef3-dfe0cb6a95b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "72db21aa-a695-4bcd-8fb0-80ecf273e302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70b7490a-852d-4ddb-8eb4-9f56151b2ac7",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a31f47a1-aeef-40b0-a143-d8e19c4d4e06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "747f56e0-bca6-4afe-8e06-576471fb9601"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1819fec0-00eb-4abd-97cf-2685b0b5db83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "df988f97-2550-4fb4-9b8b-1fa572febd35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3a6dda9-b437-478d-b340-1321df80b225",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ea44293-e55e-4d22-98ea-6ac740882c15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c8f23ba-2fd4-42fb-baff-cc590c38bf89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78a55268-ca3c-4b88-974b-05d8aac150f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8d81f8d7-329f-4e98-b8a5-7f17f59ac394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "758dc6df-00a5-447b-acf3-bef96c3322d1",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e051693-57c5-4402-8441-6fb759cb749e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59e9ff58-3148-4001-b0eb-b0aac648f287"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5d5f8c5-95c1-40fa-9ea8-e500269d0d82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae33858a-1475-4a82-aad9-662300e7a36a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e13c3be5-90af-42ae-81ec-c04f2826d8e3",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21d42d7c-82dd-426f-9e57-e60684e7889b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5127fab-3a73-495a-87d2-214dd7b4062e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9923f86e-6987-4065-ad2c-b3ebdb72d958",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7e365d0-2b10-4a22-b0d7-bb70fb2dbe5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecc73fcf-42ae-4c52-a6a2-5d4dde559cd6",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "927c74aa-922a-4384-b368-b4bdf710322f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65280bcf-c821-443d-91f1-5644d924bbb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cda9ddb-6fc7-43af-8fd3-934cdb26f7d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1932a490-77f4-4d4c-9f61-06d3de1ba52e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9281bf58-6231-4ae0-906b-70892be61acf",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0395ba87-646d-45a5-aad8-96de2ab80217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcad6a20-8f9d-4a4e-81ec-aec5dcd07361"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a84eb8e7-4580-48fb-b806-f1b7be949f57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c036ff3-339b-45e8-8274-6e7c460268f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edaf3b19-f8d7-4b51-9f81-c7f94ca0e1ed",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f02504b9-c07f-467f-929a-21d91daca732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c39ac57-6f37-410b-876b-eabd24c461cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83465e7e-5266-4ee9-9ae5-c349432c5f85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a84a13bb-22b6-44f4-9b2c-28f2b1160b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "626236ba-09cd-47ed-9977-682e7e1d90e7",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05cc59e9-4b39-4be4-8017-7d5db68c6711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c95c51d2-b8b5-4bf7-a44d-8159bc66e9b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e93570a-1fe4-42f0-8c52-976070de3191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "801ac7f1-06d4-4da9-879b-f6f935a44815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1d03309-6e99-4dce-aa23-3f7595f094e5",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adac38d5-31f7-45fa-b9fb-99ed66956ab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "153c6876-6533-43c2-902c-cb8678bc2b20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1615897f-d605-4c46-9874-658f33ca9736",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3466fa47-4965-42ed-803c-c75f1b0071be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72c79e10-810e-41a2-ab1c-73463d7f38a0",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6936105-37b0-490e-bc97-accd767354fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d72a396b-3db0-402c-b722-e1aa1ae92d3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c643c2d-1834-4e26-87e3-da9b54e677b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "8d156d20-e58b-4dcd-b41a-838c8e9825b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30e13534-9e12-42a6-9246-2c76cadab0e3",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca9ed4c3-9bf1-4e79-87de-5f45b5e89148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df5b0350-9c4d-44b1-aeac-867ba2d8571b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d9a6b41-bea1-4df2-887f-dcf718234136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4cb38e3-4c6b-4d43-b388-2e8c0125caef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88a2ea4b-ea07-477e-b9ac-f55ff3ee059b",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74946c68-0601-45d4-89da-0ebea226af40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4439634-e06b-40f7-b301-5ce7c7eb5bd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a92d375-be6d-4eaa-95dd-56b9b2fdb229",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d403e0b4-81c5-4830-9f87-20767bf68aed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4e2a290-6c30-488b-b4e2-523800dac649",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f520c658-95c2-4891-a967-517f842d7fc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d9c2063-dab2-482b-b40f-17c11b365a2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08771302-f9e3-4f03-903d-69feff1afc40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d6b3e03-d6b9-4905-bcd3-7771d26b0908"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c63e21f3-85d0-4058-be88-09da8b1f41b0",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fe69419-fc34-4c77-9055-8c3c10d778b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b78e2ed-485c-484a-bb3c-772395e50ae5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a340c25-bf40-428b-8cc6-1ff87f9ce7c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f108dbef-2780-4cc7-af86-f8b71f382509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be685656-8406-44e0-a300-85ee15c3cf4e",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdd5ddc9-7b8a-4335-a086-f592a1cb0173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c1abeca-6d1e-4845-bc7d-02c113ac9964"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5756dcbf-105f-48e0-9ac5-621091df26ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "247b1140-13c8-4093-b07f-06e63f724933"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fa433c7-2e86-4427-b4b3-f81ba45b4d6e",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b473acf0-ca69-4c8c-a5de-fc227a0dee90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aabee27b-21a5-41aa-b7e6-4a73552a99d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f8cc37f-96a8-4b44-8ea2-9d1d91e1aec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "36fd9eb2-6f97-4b2e-b55c-80b6297e67a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ec6469d-d899-4224-86aa-71e4b45bae70",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1153c81c-73f4-4f90-b309-9bb2381725e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7072b71e-7b08-4025-b0ac-a5860f17493c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d79fa2c-c72f-4181-8b69-f2a3981b5674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1dabae15-c3e1-4048-a503-55b03bdd8674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97b0c8de-a10d-4f90-8497-7bb94a92947c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aacca12-f68d-4710-a631-b71c80f06b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84b3814d-f340-4b34-af19-cde3a426c040"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "000106c8-4c10-4a2a-a3ce-3674fcc8658a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4bf44547-9234-497f-a36d-89d37a8e1670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15146748-6e5a-419c-bc4a-c5ad44ece863",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ff5eb4d-cbcc-423f-bb76-88a1e9fc1883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27f539d9-7853-4a30-85a7-f114ac556b49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee24b0ac-561a-4657-a5b0-903faac89391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "899c0af6-0c31-42f0-bd15-dbaa90390334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8242f12-87e0-48a6-b5b5-68e6f2586074",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a720cb4-1e3b-4653-8c87-5b72d962db95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "426d6396-b45b-41a7-ae3a-4b34ff8ed541"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec313d0f-bdea-40c8-afed-f5ebf97e90c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "91822734-b60a-4bc1-8427-70abfb78b6c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "147a2e57-2b03-44ca-b0da-07b1569f897c",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab6709e3-8fd9-4791-88b9-65c9e146cb84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "220df188-178f-4797-92c2-ff5bec964f72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0e166e7-8651-4870-b03c-96355515283e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf0cbc93-9d98-4e55-beac-56e2373735c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15ea8140-4696-493d-a98f-d18e84908028",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96f828b0-9125-4cd7-b0b3-0af59ff7dee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d91428f-0b52-4a31-88e9-3d7e32cb7cd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66a5aaea-95f8-4045-866a-e799f8e020d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc691cac-c4c1-4f54-bd98-05567e2a9b1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d5a8aaa-c0f3-4582-929b-beeb5c509910",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bde4d6c-03b7-4c92-a5a3-c601342410fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b456d9a2-2a4c-4d3d-8369-6ec882e65268"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "248a68cc-44e3-4094-b6bd-67fd1ec60e56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e76bc806-8942-4b9a-8767-904c284b4f87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dfa5ff5-6ff4-41c4-bef4-91c5def21090",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88c87df3-2261-41cd-9f2b-385f5b563e8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a86b2f10-3848-4d1e-bc9d-5942ad1f597a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6ad96e4-b777-46c1-9692-9fa638975524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b5ef7cd-3cf7-4b6f-9338-a9a27cdde1d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7536cad0-3aac-4bd3-b850-d26d2042d99a",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9336049e-8c49-4736-b530-691dd55accfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "471f733c-cf4f-41d6-bfe4-a3717c297912"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45bea7b3-01cf-4b36-ac27-ce735b3ff520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9cd13161-1966-4702-bf9f-374a4071026b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "870835ec-21f3-4c32-8f37-9df6a84eb114",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88f5e684-93c0-4304-8051-42fbcadc0114",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04431218-ae13-4d39-8c7e-d2f85b5f538c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cd51e16-e101-4764-84c1-6eff65de3b22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "558f0856-a3d5-46b2-bd86-0c2f3e7c7772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e21fbc1e-8fa1-4721-80be-46ab47f4d896",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50e59a19-3329-4204-902e-24af234c30d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7906c851-9fb3-452d-90d3-4845566b04bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8040ef7-1e8b-46eb-a5a1-fbf07f263415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8beb1aa-d15d-487c-898d-c9310075231e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15158472-3d2d-4771-b845-6ef759118462",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb4a5254-2b2f-4ccb-b3c1-13bd765a3728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91f1cad5-27e5-4405-bebb-723d2902ceb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70b1b3b7-a0b1-4d81-9fb1-841f6d27f509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "463d5874-3742-44dc-bf99-b65144d27600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "943c892e-fad5-4c41-9a36-5d85d596e6be",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "248670c5-d87b-498c-9f86-b426203b60d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b0c4d12-0b05-4af6-9848-41045276e730"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77e24e5e-488a-447d-b142-7768b2beb970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "74f3dd4a-787b-448d-990b-6415f334ca0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "555bac6e-e16b-497c-9bd9-fc41bd935554",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30650b7d-598d-4e61-b4c4-722d5f2d93c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b483a701-33a6-4c6a-9e1e-c3792e5777ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1d975a6-7966-46e3-931a-40ef1a1663af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b12379db-ada5-419c-acfc-059eac4e6338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93f62ac1-ff1f-4699-8a3e-500548a75259",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "244d6d8c-5b0b-4b9a-a984-97633b7d854d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4963b007-594f-42f9-b789-148c9e3a35f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c97e52bc-8dfd-402c-a327-1d427a04e6d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "abb59a50-3470-4c69-a329-e521620b6e1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5be4988-1478-441d-b60c-5e424b94720d",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b97698b8-8aee-4508-b028-197bfb0798e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cb6056a-472b-4d14-94f1-0a55a73aa21d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a5203a0-a151-435b-9bb1-1a884c462b0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b2e5c4e5-7977-4466-83c7-46dc3053845c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5b46526-31e4-4d9f-8505-734e18116d1b",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c0494fd-9436-4992-808a-d6fda450c1cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c0b290d-cd74-46e2-8101-0473462711bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34121f08-e784-412e-84e3-d60d0b76cef1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cf0c4eda-7de3-4e30-884a-e754e7dcd3c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ac8594e-613e-47b9-b0da-2cecff07ee58",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dd06398-dbcf-4866-9d0d-62701ac18b9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92b7308a-e224-41ec-9a48-7b93a003d3af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54fca1fd-05a1-4f89-bc6b-4e32f48b304e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c81d6b7-8bf9-4ec0-abdd-fe6d901bfbd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d0dac71-ff33-4061-b5cb-9fc488c1065f",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0045ad7a-0c4f-440b-a60d-3dfc31e08c8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eef19af7-68fd-4971-8e54-1b0221eec2d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c64f620-2316-4a82-a2ed-5da827a11372",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c866bc7d-7a05-4f9b-95b7-037b6c9ec54b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fff5841-446b-40b9-88f2-ad57354c88bc",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd2bad98-722c-492a-b96c-0b04649a218b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f7a12ed-d689-4fea-8335-e8ad9c6c44e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67b89f04-8f43-4817-a009-714c4c695f8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "da0913a5-d7e9-4ebd-9bb5-5d33e8e91dbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "561f5637-4985-4a2f-bde4-9ed5421e86c5",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b635a68c-574d-476f-ad5f-4a0cc5ca4971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49dab684-bb44-4f4a-a369-646d9ba511e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3519476d-f214-4b2a-b072-2aaedca706eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dcb77d8e-481b-46c5-ba07-051f4d606ec2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8e2edcb-a159-4a40-adc1-9a653c5d2cac",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c0f7cdb-9671-4efe-9853-9237a16f374e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "836234aa-31ae-4e16-9d48-4c95eec6bfe7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "636558f5-51d9-4379-a666-07238b7f2a65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b0391977-73fe-4d11-9ee8-14dfb5e6a87d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7ab37b5-919b-4836-89be-aed84d04a5e2",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df35a6f9-d2ed-4173-b16b-405ca6f18362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66b2bc90-d067-4c15-9160-71663ffb8015"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad778abc-5583-4b39-85aa-742a8d17a058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "36768bce-9f9c-4e03-a7d3-117d4c01704d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5f70f24-8d62-4489-9384-7be34ed6e727",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f3347f2-f941-4360-800d-46399c533fd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e70d98b8-12e8-4e67-8b20-a0affe7743e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfd9b283-d346-4877-9f75-cdbef2c81200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "459d6698-9f6b-497f-a25f-35377f7cfac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8d9945f-dead-413a-a8ff-8d326f3c9070",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86e665b5-2ea9-46b4-9d9d-d634a1aecd79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cab43f8-85bd-4385-967f-64e1a9115787"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72582484-2a3f-4d3c-af5f-dd3dfab86bfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b69c9b5-4291-4559-ade9-6493a91f5915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "960f9312-7f44-4e3c-b8bb-695c01ebe3cc",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3f253a0-8c78-44cf-ab54-17daf6dce9ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5b23409-6d05-428f-bd51-0a2e6339a714"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51ff988b-a319-4b7a-87b9-6ab607f75213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a302af6d-0465-4ed4-b57a-32e0a9106366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9abbb455-aa72-468d-93b8-04c577fc3b1c",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad9b59ba-f43e-433d-b898-aac223bd517e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06aff195-f887-42fe-98ee-0dfc096eb635"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a52cbba2-4b92-4261-aa52-6bce9a3bb37c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c9dd618-6fd7-4466-b60c-ecc5962cf59e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5da28cb-d5d3-4466-b96f-2b3e06af9068",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5353ad41-9ddf-4c50-86d2-09871c3972bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a7a2eda-4b1b-42b2-a03d-5f2066f1d707"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "071cab78-fea6-4557-905a-d1d3fc2095be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "adc7ee21-304b-424c-baad-9d5f15586b8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f99cbd38-9fb4-4074-a3bb-2f4143be3c07",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9005cf79-767f-48fe-976f-1537c854e134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01d8b2d1-cc24-4da8-a3db-29d52dceed05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0467102c-fc03-4f79-8554-f9a2e43af90c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "694d1461-bd99-472c-9665-bd230861d56c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f55e6d6c-9b4d-4cad-8b5d-38e9034f5929",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cce8e4c-0de9-48e7-a539-4b9c4dc67130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3545c3e-6474-4d17-bd4b-de86fcf8d161"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3f756f7-ba2d-4a13-963a-1c3d6317a122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "347479dc-83ea-498c-98a1-aada7f02499a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ddbdb94-859f-4f2b-bd37-52c8e08cb4f7",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fd25675-a41e-469b-a6ee-df59c6eb3bed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4a232e5-45d5-4332-8508-ded3ecb0962a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7692164-0e15-44ec-811c-95ff77973e6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "68025518-7245-4ec9-8e2f-3f4b018d4c16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4625225-b842-431b-9a9a-37497c2c67d1",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0ee7538-7379-4fce-ac7b-11cb010dfed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae9587ee-65f3-45d4-9a21-48a28d9b79ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d4edd9e-1f9e-4809-933d-7ac07c13a2b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0befa2ad-fb5b-4813-b144-970289e3d2c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4952362d-ad1c-43ad-b3dc-b8d406006210",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e844b8b-654c-4f7d-b23b-85365a34427c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "591aa3a3-de41-4267-bc58-ec5287b85849"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "866251bd-5afa-4ab0-be97-1eff7fd773fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "baf9fb4b-c5d3-4c38-a9e5-73fdf68df644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a3bbbca-7a60-42cd-87f5-4bc4badc5180",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd22eeeb-8221-4a1b-aab1-eb8ebadb1286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41c301cb-fb83-4a1b-8e2f-7d52cbb55ea5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c29b89a-2c68-4dbd-bd0d-03543a861c19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "dec98ca6-e085-4aca-889b-a509802b5718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a94333ae-bf5d-4402-b54c-811d7ed502b6",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88905d20-fa12-4144-b729-a83c54bf06fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "df6837e4-da74-4e9c-8864-3c0f9bb32cd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5025bf29-b852-4d38-86e1-10f257400f51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "6516ca91-2147-4ff2-b1ea-85ff151aeb8a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "650871f0-016c-4641-9658-e4292909b9bb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d657181d-8593-4b8b-8476-9122e847b518",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "739554e7-ba6d-4e3b-ba61-ecf3408ea247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "df6a1272-6bf9-4edc-8403-6293d9ea65e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e87b714-d6ca-486d-987f-0f72468c2a50",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "47904ecd-3529-42da-a6d6-e3a09fb77760"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3c112b40-6984-4a59-beb9-6276c101eed6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3f1d1459-91ef-4c0e-bcc0-3ac5164e11b8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "27635796-c9ca-4309-8e92-beebc8575c28",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d62daa70-fb76-4817-875e-ad6ad12d595e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4c5be4a8-49bd-46be-8d01-909d52afe50a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "36fd7bec-6784-48cb-a958-e3af7f71f3d8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ba71351a-c553-4c72-90b3-e83baa91e830",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fe774fa8-cbfc-4181-83f6-fb28d20ffe26"
                }
              }
            ]
          },
          {
            "id": "358f3011-624c-4ccf-b1d3-d53f74c6837e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7a8034da-1c7f-45a3-89ff-9714fb764976",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "b214a128-8d5a-4d98-b881-42a435351a40",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccbf1740-a2bd-44b5-a45d-edb724eb165e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "54c97d48-b159-4407-92bd-1675844b4456"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f6a3992-4672-4d78-8eac-ae2409a852d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b507e5c9-0331-41b5-9f24-725205ded11f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "eca25045-ecf3-4301-a3ee-9a7685df8593",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0f2886ad-e7b0-4061-ac01-e0fd41f767d3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a3636008-dd1d-4230-ae99-b25882ad9f9a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "127e5482-f318-4445-b75d-19334ef2b79f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "edd6c3fc-4f2d-4fef-a9e4-1e852c936e1e"
                    }
                  }
                ]
              },
              {
                "id": "192b9b3e-e5e6-47e2-888b-be4454791550",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b9cafebd-87da-41a7-9dbf-d2114d29d222",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3c693a1a-5894-4598-9821-48f5f60b73c9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9003a166-e2d0-4989-8e86-86a37cefc1ae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "25468be6-a433-45e6-82c8-51ffbb521097"
                    }
                  }
                ]
              },
              {
                "id": "957459aa-927f-47ec-aa65-81ec572bd491",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bb67a528-cd1b-4d12-9cd2-fe9fa05cfe3f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1a83cb35-966c-4951-8149-6ca88742e06c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "877cff17-685e-4c2b-8af0-b33641820931",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8d87791d-e896-4d2a-82c0-f62fc6723a85"
                    }
                  }
                ]
              },
              {
                "id": "c5258f2c-e835-41b5-9e6d-0390141ec98b",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1f6df33d-a956-480d-867b-c45f1874bf26",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7c9f7d72-2865-45eb-943b-8750bdbf3eb2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "44434312-9509-4e04-9bf9-afe3b2456c64",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "4e0d9aab-7c1b-4b99-bf02-44280daf50c4"
                    }
                  }
                ]
              },
              {
                "id": "a1ac737d-9e5c-4be7-bd76-d477352f8166",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "314a916e-f308-464d-9810-77030970ff20",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a81f510f-ec09-4a62-baf2-c05e5d991364"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a6df09f1-dece-4a48-bce9-016e051ae3ed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "ea28028e-8c36-4284-b1aa-49d1c35bba5b"
                    }
                  }
                ]
              },
              {
                "id": "33ce5167-eea4-471e-8eaa-db1a13644d3b",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d0cdd8cd-836a-41aa-9e5c-fa63ebfa5a21",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4b088f49-40a7-463d-8f4e-0266c6536b35"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "139f37f1-ebc6-4475-8005-613aad9ea5b1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d10f87ae-0501-4116-827b-97b6f1465e3b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dac35b40-4929-4bb8-8744-9ff682da8e0f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2db66d04-2027-4e33-9a0b-2270c66a08ab"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1835c03f-09a2-481a-85a5-e47fda2e2822",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1274fd20-065b-46d2-b7ce-d1a848363ea3"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "02cf3cd6-9188-42fa-b0bf-31ff98050017",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "49222017-50ba-4016-8b13-1b58556205ec"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a3183095-383e-41ef-98ec-dfac362a9ae1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3ab0dc1b-ce44-412f-89b5-5998f3913fbf"
            }
          }
        ]
      },
      {
        "id": "561a0bab-6a8e-4610-a7f9-d49c83c51696",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "dddacd49-3967-4a89-b0e9-3d186b894115",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9a7a6c68-c685-427e-b9b7-4e499ba99d01",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4879fe06-4e23-41e3-be60-02ba58d849a4",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c45e4b4-415c-410c-b238-4ded6c5cc173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7afbca4d-f4d8-4565-8277-f03884514b92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d487970-12a0-460d-b456-50b464269881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "12bde703-302a-4e9a-9475-a9231c663909"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61ac7c10-48f7-4e77-9eaa-2289fdffb47d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "251be34f-e9d8-4260-b9d4-f4104d7fd862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb3c2258-b29c-46fe-afa9-2d23ed53edd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b59b88aa-600c-4756-84b0-b97520e2c7a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa3dd3fb-c2a3-48b5-a83b-845424f8e595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49ed71c2-f55b-4c9c-be84-a8bf1710f0a0",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "670abb62-70f0-4b0f-aff2-543b2258f85c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0f1900d-55f4-49a0-a789-e089ae89783c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9c928b8-4889-4a1c-af0c-d4c5bdb0f983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9afde49-88b8-439b-a128-eccfc9833ec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "732f629e-21e9-4593-9c25-b6239db804ef",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6acc973-651b-49a2-8156-6f0d6c8d6bba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f1cbb58-2a41-4a43-89ce-e2534d72b497"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf8f336b-0509-438c-94ba-b8033a6c1dc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb0e6b50-fe40-4a00-95af-733368bc9f5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80d511fa-d554-4ab5-b428-c361141ad8d4",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d78bae64-3327-4045-b132-2f586002cea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30b739c1-8f47-4eb3-a430-85433fec47ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2f19889-54e2-4781-9e1f-cd267e47ea3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "45f5aad9-c06e-4695-bf25-ddd2ac531e2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3980b6b0-fa16-482a-b6c2-1ba81294a615",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "453a74cf-387d-4d62-a0d2-fde2c7bcf158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e196dfe0-b4aa-4bb1-bf2b-5ddb765de71a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea78c869-41d1-4144-849e-d066d73a4b9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e11dd878-1ae9-49ae-9869-d36231676da4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22e01147-80ce-4707-bdc3-643a597514c5",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb7668c6-3281-4353-87c2-4c9f50cfb621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "544f21c0-b64e-479d-a0ff-6fe67e37005a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a02f00d-1bc9-4a6d-9af2-56997915ebb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "032acede-7fad-4346-8896-9f1111f70424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5f59cb2-9dee-4f75-b84e-12900b6fb516",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f36d810f-c2c3-4d4d-b503-ea0973d01747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d578bf53-8e0f-4b99-a336-d09a8fdf5967"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e015b8dc-22cb-491c-8783-a81ff4a0e21e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "db67c348-ed24-46d5-8748-4baa5d232e4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5b2e6df-ab27-4f68-b673-2def5835f292",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86394fba-3f15-40e3-a868-fa1867d04215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7192403-6d65-43df-a581-97eb9f532975"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e66b5cf0-a587-420d-835e-8a1d475fcd62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6be89666-bf0e-4aef-aecf-0820f4c64bcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0d6a3cc-d4db-4277-836a-c1dcc4887f8c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26b25212-f445-42f3-8318-fe1bdcc92b27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdb72467-e09d-40e9-ab3b-b1ffb6836981"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e18b1240-1e92-4354-8b36-cdc03fd4851e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f69f444-b63e-496e-918b-7b5b132f35ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9307595-43bb-411c-92f7-840fd66943b5",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "194fd565-e290-4e1a-8a8f-8ad12b4a98ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f420505e-bec3-4ce3-aece-5608a82d3161"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d345807e-dbdd-4317-96a7-414d3372ba83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "ebe81380-05c8-467f-861f-65b45a989385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94e8dd82-4d36-4190-94b1-ca5ae74a0257",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ab4dd82-d2a0-436e-8ed2-a9d5ca6a5071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef8b2b51-c9ed-4dc1-8ed0-4ead4b31e4b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fd1b3df-18a3-44bc-a27c-b49a226cfffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e204758f-dee3-494b-afcf-36b18b303a59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47a5d6b5-c7ed-43f5-87af-6ca4ba4d2fde",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0820ff9f-b7af-48f8-b9b8-4bd0e307376d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9bea36c-ab57-44f9-9f62-f0870eaf7e43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bc86ae1-82d8-4a1e-a417-5b8a5dcdf93c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "13e794c7-b177-4a31-987f-046b85bec5d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b913f3b0-6dc2-4e6b-a407-7243a7725680",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "443f8f33-7498-4b59-b6ca-b15b001ced15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bde0c89d-bb7b-4ff0-97e5-14734d909420"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a89e3818-7daa-4ef6-a7a1-aa2a3344b527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "781fd918-bcff-491d-9798-e6ee45be5b27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ddb738c-1b2e-4218-bfab-ea5c10a20a78",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4f2f1ee-7ae2-4070-9e32-484b3fc8515a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a80cc98a-bc67-48c6-b86e-587bf15a6bd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55531e6d-b506-4427-81f0-f89c7ebbb62d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "875d96a4-7a1f-42b2-9a00-de1008dff097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "476de83b-f233-4314-957b-1cee86fa1f29",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60ed0d20-46d2-4a8f-a22e-7328fd894986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3ea9777-944d-4427-b81a-20cfe2a3e3fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cf047ff-e08b-4d1d-a381-37e28d1a918a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2c9c171-7ed1-4c1d-b2b5-579edb3ebc2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "874e163d-e9db-4d3a-b094-e871108c8dce",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "406fa087-2efd-48ad-b040-130db4fae6b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eab3d3dc-8765-42cf-9e8b-3c50cea3d24e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56d37f1e-470c-4f7a-97e9-31c6751f6d98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "46eb10e7-2123-4992-8aab-8e6154f4d9a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f828e243-5e1a-40a2-acc3-9dc9ca52d5cb",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9ab9b82-b2d1-499a-a765-4b2d0d292a22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a15eeee-a6ed-44a9-af9d-a1d3c514439e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "510ce330-f110-4bf7-8cde-e101bd7f4009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "34207f10-66f3-4d49-99ce-ace444da7c16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "021d3742-7d16-43ed-8fb6-137e0d36ef43",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "384a9be9-87dc-4fa0-8745-95916e3577a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f7319a6-264f-41f5-8783-51793e73330f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea102459-37ad-4320-b523-2813593d387a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee2d7524-4bf2-432f-97ac-fd78242b3a66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13a325e4-d393-4619-8d96-104132aa5a47",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f69402f-ad4c-4cc2-a8cf-ca47ccb44812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a61747e7-28e2-4b1f-87b9-5bf6417f0428"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85d65d16-9716-43f3-b670-9b254745beee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "72d486b6-7a8c-47d2-92cd-5160a7cb0501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb9cc287-96b0-4c05-a48e-f7e326be5f24",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09ae0217-ab6d-4e37-aa64-8302f9376a63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0b6bf2e-14af-4d34-b8f7-990456d12eb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f2744ff-59f8-4eb3-9858-12e962461100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dfa7bdbc-632b-41d4-b88b-b89048bef5cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd490b75-0b60-4dd1-98c2-b49b889cbd6b",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e768c5a9-8ba2-4943-b563-cca7d01c3a31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2fdc294-e7ec-4942-8f97-d480ba097116"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16887bf9-9a71-4264-b31c-a1674b9f9ea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7d028dd-e819-4f3c-93a8-16b7d39abe01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae45c9a0-6128-44bd-bbeb-64619bf67f18",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f86f61d5-7509-41e4-b7b4-838274274ac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f3ac128-a632-4136-885c-6e3f143d8518"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8b115ec-c962-43c0-a95e-7a49df0bf1f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db6af5e5-f733-48a2-a582-a5e1d44483b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c1d3a93-3979-4769-bbee-e6e4aa600f42",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83a9a8b6-047a-48c1-ae2a-1acda4df9053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d9d00fc-fd62-46dc-96c7-4c0045932c27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b1647ca-4ca6-4135-b83f-f1b9d9a5657e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1cf848d1-797e-4eea-9a68-351ff9323d29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "961410fe-5c85-4b78-ac57-7fec6e469672",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc1db194-f4bc-41e7-b527-3c5cbc022955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13ac4c60-758d-4112-a69c-d220ed09295d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aa63988-cfb4-4db0-b435-fa1f955a9202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40a0f5e5-811b-4374-b7cf-92932240f480"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97cd1ff7-a838-4949-b598-e5b44b8bf9b8",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ff2f52a-0fad-47d9-8b6b-9dc9b5ebe107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7216231-4fa0-4e82-911e-fe4c976c5ade"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c44f80ab-754c-40c1-a5df-8554d8f0c5f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3628413d-bb1c-4027-9f62-79211390fb10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5320932-a366-430c-9fcd-f2543c53f7ee",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "409e868c-e6fd-4c4a-a4d8-5a62557380b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baa60703-7f4c-4e51-9d03-544e36a5cfed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bff4265-6ef2-4e24-99b5-612d269f6046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6af5b54-2074-4b20-bd17-d97938837bd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86bd637b-a91e-4c8d-aa42-8d485f17e305",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3b914cf-335d-4066-b93c-83979a0f6ffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "857da469-73b1-4bfd-87bb-78efc69abdb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35b74043-ea9a-466a-bfc0-b0f4b5cf6e38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d45b9353-47e2-438a-a4d4-4131081eb4f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e87db961-9957-4080-aabc-2638873ae5c0",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "208b4c79-48c6-46a5-ab86-a4d674233dba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bfd7ed2-9e92-42d9-bb99-2bdf948aec03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ad0b591-7f69-402c-b551-4a4849eb916a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f1e2774-9b09-4e72-8e36-eb5cdbec0aa3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26ae9299-92a0-4b24-af24-fcd7f0cbb88d",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5b4e70a-0557-4d88-b97e-117d4f6b65ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8889449d-9fe2-4943-a180-ee8cdbf990d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23be76b0-be94-4543-9669-25f2ce8990ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "788bd56d-4af8-4e4d-bd8d-2e062a89064f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "898a94c1-5cb6-444f-a7e6-6eff947fad5d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f4c1923-100f-492c-b509-40f5a99b43c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40ada7a3-5d47-4032-a935-75f9dcbc884a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2574a062-862d-4afa-8014-4ca05deb3576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd4dedf0-2fea-4ec9-8cdb-825b95832bb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02adffaa-a8f0-4d1b-982e-e48d57b15386",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dc028c7-81a0-40d5-9ee0-01c58555d3cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3658ce4c-64fc-4008-89e6-d06448de72c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a6bc826-61db-4a25-bd6c-f781a06bf89d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "22b81f77-ddf9-4eea-b01a-543394a16443"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a78f276b-d163-4d3c-b42b-79491a65de91",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d9f4a3fd-7987-42f7-a505-a614f03ff5cd",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47bf1d58-6a0b-4f41-949b-d1e6c29e6000",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "32c8e444-15de-431b-871c-f7afab62bf09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbb9ef55-9d85-41fb-abe0-1ea7b9b5ecee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d0fdcd1b-2a4b-4e07-bf0b-22af819ae9d7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4e369ff4-7509-4578-8d50-1f1c224e6f64",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4597ea96-faeb-4f09-8bab-10c0c5cf4cf6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5a2b90e3-9959-4a69-b271-3f594ba915c4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "051d32d2-581d-4223-b821-35ff8d5f4a5b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eb18568a-c2eb-4761-9f20-578cc9ae3d66",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2979364a-b390-4057-a989-c279375fad43"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "98133945-1a9e-4f52-8605-6aec4e6b68b5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f21ef142-f5fc-4f4b-b0d1-7fd79c3c43ba"
            }
          }
        ]
      },
      {
        "id": "7a9a9d33-c1ad-4c90-902f-5b2324b21aa6",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "3282f3df-c6ee-4204-ba1c-467b20c0be9e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9ce73c57-7934-48d8-aec5-15f43e0e0e72",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1a35ed8d-6af9-463f-9c98-f469a005691a",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec76f081-60e6-4d0b-8f5c-c3f8d68532d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d3cacc2-8046-4d15-b0f0-731b62f93bee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1540008-6b43-4613-b8ae-080d2969fae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "e44da79e-6362-4270-92d8-a0e17c145e35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6225d3c9-a60f-4a39-ab08-77ef3c64e901",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "609ef171-b65f-4d9d-816c-6e14a3004434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a0cca09-d279-47ab-8b52-106ace0a58f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8a4142c-c14e-49bf-a756-6aefc681ffbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab3f6361-77fb-4de5-baad-15fa45020d68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bb3a55c-371b-44a0-9aea-b739e160ba06",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "095703b4-f34b-41c9-ab87-76b7625839eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76e87e9d-9693-4e55-ba7e-3b71f155d802"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3fd4aab-2c3c-4423-83cb-a8a8baa16288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab06cdfd-e376-4580-9fcb-4970bf32f375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "099ea927-ee8d-4f4c-887d-26660a49a613",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "922fb6ea-2ef8-4cd5-9af9-970889a6a32e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1383f769-0bf6-4420-be16-a40d27067458"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ccb2a74-dadf-4c34-a2c9-1af80e6d84c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "68fb5830-8c50-47c0-be76-e2c46db284b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f0b538a-da4c-4a31-ace3-7757da0b487c",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6aec06b-c617-406b-8493-1d30ed974a36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4f959ec-d072-4c8e-b650-9dafdc4f4400"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4abf3779-a5f2-4648-b381-4f5ca23e1ab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f65c7424-8874-4091-99c3-b00123410528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a59f803-dc00-4871-9bc1-6f7db9ec33d4",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e15a6ee-7eee-47c4-8d5e-6f59c7576a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5f67b84-1efc-468f-8456-607ac5846a53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddd10622-bd1a-49d2-9c8f-ebafcb880dd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8758ec05-05da-44f6-9554-43f00982f9a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec241c01-45ee-44c6-9b9a-b38d78de5d90",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0be2219-454b-41b7-a66d-8f6c704a9968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe13319d-1d61-4604-ab72-eaff5c6e91c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7eb13c3-7ddf-4c12-a268-b57536ae3fea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "e50b96ab-47c4-4e12-bb00-140ceaaa342f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "043026b0-f69c-444e-a3f9-4ec954d43cc3",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79311cd9-191f-4ffe-a608-aba2926ef907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14727f9c-3fc2-44ef-b5f9-9840199fdd20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89bd97e7-9cee-40b0-ae7e-9f53fe90bfbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "67509fc4-4f50-4d87-812b-a4d77a16b4ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee2b973-851c-4c00-99ce-34667a657d32",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c84683bb-f85c-40a5-8d50-a088aa05f600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65330c60-ec6d-4a0a-a075-18931350d571"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c3e7d8a-62ca-431f-96f9-661ebb12c77f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b68e7647-3109-42ad-9a57-cc7b295d1b53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2851b1da-865e-4b3c-80f8-1eef0a46a62c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71b19aca-a03e-449d-8cd9-ccde4bb03666",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5653cc59-c2e6-4d90-8782-a22e514a9cd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19bb6db8-9ba3-4b88-bf81-b96f81dfa81f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "af09c115-98c7-4120-b998-62fe35ce090d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9e83709-6d02-4252-b4cf-9a3810ab5cea",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fa497c4-2a44-424a-b226-ba4e5fcd97ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41c2a159-b1d4-4c79-ba5d-d92928248317"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "644ded9b-aa3a-4f0f-adea-4b6322ffcd44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "936be21e-1bfe-4040-b108-620d25a65115"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97586ac4-565e-40d5-9fe4-4188343cd9c0",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cec96a8d-5a7f-4e1c-a170-612c83a4b72b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59e73bb1-32ad-4f8c-8503-0c5fbc9064cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f96411e8-e514-4649-be64-4228ed7de755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f3f9810e-cd06-4b98-adbc-65ae8d075e54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d668041-426c-4a1a-a3be-c13057ddecb5",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cab74740-a5ba-4091-869a-f8be65f35017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b9b1730-32e2-4c11-bb69-8513b12cc027"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bad8e589-145d-4f69-8791-c9a27eb21f68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbafe41e-5e3f-43e1-8b67-323acb949ec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "745b0eae-1fa4-4f8d-9a1f-7d22af30438e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29734917-0a45-40cd-8c93-2a60825d6069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3fb3d82-7e51-4b68-ac2d-14d481b01b08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9439409-f6b3-4c52-810e-3e3c019f6e52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ae17a81-6115-4a1e-827a-78fb110fc386"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fe07bff-988a-4c7d-981c-8e2154d5b475",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35780755-78cc-4146-9d13-d99e187ac752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8bbd422-36d4-4afe-a3cc-87296b48a7ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d2261e7-dbc0-4fc1-989f-3794922b305b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "2fe7b26a-387b-41f9-86c8-4904e5f0d6d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c01200a5-6533-45c2-ab94-420ce33d0bfa",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6efd3780-3f05-4094-a2a0-6f14b277fca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "979ef47a-4e5f-4db0-bcd1-669129068b35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c96fc9ae-daef-456d-b74a-369aa5931720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "92897c79-2062-4cd5-ad4d-19ce097ba4db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b6114f5-e32c-4b42-81c1-617646837a08",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d02bdd29-2863-4aa6-840f-c42a66b2dc6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a53aa002-fb11-452a-9b27-90e7e52e6e49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3446166-d16e-4407-a4b2-c4e412ec8abc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "fcef99d2-4298-452f-8e6d-11011beee47d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c76f27d6-e4a0-4569-a4b2-f2eb5ee0fdd5",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4a13715-e1a6-4d63-ade0-559eb4d382f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9e45751-bc64-4d7d-8093-cfbc734fcdac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f11f60bc-860a-48eb-9f24-b6cbe7d26ea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c07a740c-c4e2-40c0-8c06-9f43ec542c5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbd154be-39a0-46fb-8dbc-3ac857ae7790",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e3ae026-90bf-4e7a-aede-91cc31f8e0e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b53d6b19-e925-4e0a-99d7-97ff56af13a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8a7bc94-d5e1-4889-a613-3da71d5d6e66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "345b096e-2691-4616-b56e-86cd34eca9dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f15e010-1ee0-40c2-a3fc-2902590c38bd",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f1d59bb-a628-481c-8c28-3ab4209c8bfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "965297d2-b36f-490e-8d52-4ab76fd042a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e96c6c2a-6f05-4b1a-830c-7c1792d193e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "02cd6e16-bc27-4342-bee9-7d113b8048d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f80b5d0-43a1-4b30-a1a1-4c9a9f12b56a",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46880be0-ada2-4e08-ac13-26409b9609db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bbe2809-2b19-4b29-8843-ef632272cb3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2860fbfb-83af-4d5b-8578-4c83f85d18d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f67a4c52-65dd-49d1-9a54-4ed563401433"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74d60c3f-8d4a-4cef-b19f-9d0a9771e727",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9a031f9-5ca5-46eb-b276-107b35a124da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da7edc1a-915a-49b6-b2ae-4e62df39fad0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43561125-8a74-4781-a0be-b4eee16846fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "427cbfb0-9a6e-437e-a20f-84d1adec33e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57839e8e-a93e-42e8-a740-58530c5b69ad",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f9e849d-7aaf-4bef-ad3c-4a0708308b60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "690b68d3-0295-40b2-97ff-b4dc8d2d39de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47cc4f34-32a0-4c28-b908-788bf407da98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3cd96814-9017-4fb2-bebe-3b6e8fceae50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a02f523-8ee0-4a69-b276-1ed43fe7811f",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3a0ffec-ed1c-4110-8853-0b90ff8693ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6347c75-f071-4ea1-ac7e-52c0861adb2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eae827f0-9084-45a2-a948-aee997cfee8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6051bac2-47d5-4d38-8260-8e293591cfde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1c912e3-1f22-429f-bb9e-9727da594a71",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "190a7ff3-2de8-44fa-9c46-3d8c31b44ec7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4de012f4-5e28-4e70-847a-654a46442d73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c83d859b-a5e1-4bdd-89de-fd6e49791d14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8be0a81-d34b-486f-b54b-ae1ef0d4c2ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b458739-0dfd-476e-9393-9f7a561dff98",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7bed416-3a8a-4ef2-88f1-9f6c85a1728c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6737d345-dd2d-4099-9d49-0642aa41fed3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f11c4ee7-dade-4cbd-a488-5bc50ddab8e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1812b678-6807-4f48-8df6-ac252271cdaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f29a325b-e5ce-45ba-a465-fea5f9a56658",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe05cc2b-a963-4dcf-8734-38bf8e3f8eb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a630aab5-7617-4963-b1f0-a601ef0a9824"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfbe5144-5ee4-4f2f-ae20-83f3727ba4a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e9a91a7-5dfb-4914-b10b-2dde7b831179"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7357f596-43ac-41e7-828c-7e8bf0ca96ff",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdb46972-53fc-477f-a9d7-6b8ed0ff1be1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95177ea0-d6e5-4dc3-a704-bc2f6f768fa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6afa988f-fbc4-474e-96c7-19b75d8f4c9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "26744f0d-e005-49cd-8d80-9d1c75969981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35edd1be-bb93-473e-bd7a-15053e684197",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99157d19-b3f9-4980-b784-75cbdd5be854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5252a20-ed56-4ca5-9663-97715bec8311"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afa400d1-2684-408b-bedc-ea2c8be1c1cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b0ada4b-4167-4c8b-aeb0-c60e7dc2fd4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02e25df5-cfb0-4726-bace-897e70da2eca",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "704cbcc7-d7d5-4904-ad03-8cef08fa4773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72831da3-4355-4b0d-b360-d294b4fa8651"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f73d1f7-166a-4c33-a32b-075ff8b71d71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "341bc70a-b8a2-4d8f-96ed-a787073679d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2705684-76a8-4296-81d4-d07f8a7f7679",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fdaef7e-97fe-477b-9c7f-c8d09c35ff95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83a32ac1-e931-4dd6-9317-a52bc4e0acdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be22515c-7540-4fc3-93c3-41b63aa20b08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e9f44bc-40f7-4ec4-8777-f6c8ec4c6970"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4fa8b1f-969a-4ee0-9e71-aee9594ad759",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "926a638c-5309-4f85-bbc7-5a06b1d88912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19b1c0e3-c746-4fea-817e-90784c1f25cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5179135-da81-40b2-92f4-34e620015209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8225e0e7-1ef6-4bc6-b891-3253c27a81cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e88fd440-2fdb-44aa-9402-0de42c916b33",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fe19c5b-ba04-4204-a36d-2f3d66397d94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40a0d302-47b0-4a0b-a2e2-3d63781fae2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b81a4103-5b91-49a4-b4c6-994a877823cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "46a0e5c2-a700-4587-9aa7-eb5f452e21a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e1075b0-a1e5-431f-a8a9-f8a1520495e2",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6257126-71c6-4a67-adbc-4ffbc8d5b891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a404518f-3e93-4676-aff8-a7978a113679"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c714887-773f-4ca9-8d04-4d20234a754d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1432a6a5-e46c-4452-af40-a8d4c0637c87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da0026cd-6fe5-427f-a3b7-d2bb876540a3",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf28c690-544f-4780-a755-d4b4e0ed9827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c09d48bf-c5c2-4482-991a-94126e59d6c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63cf7fcb-ebf9-4294-b1ba-bbbba2ccc22a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ede5876-3ada-49f0-a174-5a694e3a0d36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5b9aa77-cb1d-4534-857c-f21d00e98019",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52f94643-f110-4004-8d09-8478945e281f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a21479d-610b-4682-9678-0459037e930b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22aa759a-0821-4c0c-b222-3861cb6a2e4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d992d33-57ee-487d-9869-af4fba51702f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e89a6c1-2cfe-40c2-8c90-b9f5109f8704",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c966d491-2a25-474a-b121-9e02d0bb57be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5f3cf32-4511-4aa6-99ac-2ee1e4bebe2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0def28e3-811a-4783-b33c-0ad40243b8f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "adbaef55-1bf8-4a31-9218-0b897707af7e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f5baf365-d2f4-4f61-8927-af247b1492b8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4de3e232-7053-4d49-9774-bcee34b6c241",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01d24324-026a-42d5-8bbe-7e2dd6806895",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "7daa8fad-a5f5-4294-95dc-b3709aab5522"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6b29950-bfb0-47bd-9a16-eafd23251117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "101b0747-90da-43e3-9968-e9de2c61c18b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "992cd33d-08e8-4ea2-9eaf-bc6e0295af09",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fc3fecd5-010c-4126-b9b0-dc3c0f799655"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c9fe9893-283d-476f-ac8f-287b8ffa3f1d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ad6be066-7a01-4289-9c37-08b1b9fe69c9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ae9ba41f-f430-457b-8eda-24ba8080c881",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f46aea3d-12f6-4afd-8bc6-d62be9a8b72b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7276eb4f-f9ca-4ae3-81e5-b4fb1ded6f6a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "94fe69b7-fa7f-4a58-93a2-71eb16d16015"
            }
          }
        ]
      },
      {
        "id": "b6985d33-43dc-43e7-b6a0-40734cb4ae46",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "146459c6-5143-4a93-ba92-316cbd820b78",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d4231fe6-b3de-40fb-9127-0ac921583402",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ae7ce897-12a8-4693-bdc0-dbac2877fa6d",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c73b5cc-53df-40d2-aad5-70429a7cf4f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee0588ab-0fed-4335-afde-4f633a3ca121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f7a1b70-458f-413b-9624-862dc775a45e",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acbd5804-2d22-42c2-ad06-0dce8e6d5ee0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5360772-6e28-45be-9ef5-af217778e68e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59d7416d-e271-4597-b7d6-8b5fb32400b8",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ed171a2-225a-407c-9929-9a2af7ad9b9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44642b84-cd93-4b40-9dab-08281339e820"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a76e1cb-dbcd-42ea-a39a-f428aeef1c30",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8211fd6-b028-4fe9-adc1-88e5cffbb8a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46ef1bd8-3e01-4467-8838-338a4f90ef32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9adfd4bf-0c4c-46b2-8e9e-17e745d09745",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "027115a7-e197-4a66-bc19-1fa821e1ad3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f26912d-5d5a-42a6-906f-1d303ee66551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2a1c41a-60f7-4367-b150-e15910afd289",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf89ba1b-284c-4363-9997-dd52b347a78c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2608c02-1691-4876-8b09-7dca8f51439a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e1d3e02-0ce7-48ec-a4a8-1dbcd86e1b89",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43251def-f92a-4233-9148-163aa50e43bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b93013b0-f7ba-4efc-be97-6b5d8d99a463"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3281ad22-4dea-40aa-bc65-336f154332ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "267c5bbf-12f0-4444-bce6-a765304360e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "974cbc13-3c0d-4425-8c1e-c8850cf451fc",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b9b5ba9-4a78-4159-9048-ef01e77a1bf1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e532de5-2528-4e65-bb0f-c010227e4a9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1a6f631-8d10-4c0d-a89e-9bece7c622b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a70b14c3-eb32-406e-959e-f05d7b2e7701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5da1c7b1-72fa-4469-8020-f485330e262e",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08900b51-e57a-4a2d-9e81-16ccff8ce4ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca79a0c9-0a57-4ccb-80dd-d5663ad0c824"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b72b52a8-0794-4b84-b89a-142626d533bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a05d450f-4a2f-4e63-9a7e-7fdcbd5675f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b78c486-863b-435b-bf03-3e5e773fc0ff",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0026a54-f8d9-4303-b14b-a0416984a31e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04bd6e01-93d5-4f1a-8a0a-3153fa93cd93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aad9b598-5580-4c7e-afde-571bb8967c65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6155a449-198e-4b50-a488-6c4ef2f89f76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63cdc96c-7185-4305-aa33-c176ceac7998",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b747328b-3f89-4be8-af16-3caa97a16a44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d460b2f6-2eaa-40f6-aa94-5d0c66f2450a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3b411bc-f0d5-45c1-956b-909e61ce92ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17cdc8c2-d9f0-4fe8-a097-c90789d9bcb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82f971ca-c1d7-4b8d-9225-46362e385996",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc0a9dc8-b435-4849-9407-ce655dc88f49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5309481-f0ca-4e0e-b02d-1b0874a76495"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ce540d3-d7df-476d-8954-38bb41e86a66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3577c027-3164-4045-90c6-e362c316746e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eb005bb-ead8-488e-b7cd-2448d45c2959",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "973cff21-cb08-47c1-8a69-bae16a828135",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ebba79d-68dd-4f82-bf7e-38408686dec6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9e1aa7d-104e-46ba-bd72-a793b15b9948",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "766360d0-0915-40dc-9ecd-073eb29984ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42b23a19-fc61-4166-8c1b-edaa939668bd",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42d42164-b558-49cb-bba2-ffa068177b3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86104c9a-9576-409e-976f-b7002d8774af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dfd65f6-0383-4598-babc-42c9c3d5de48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73e560cf-b839-4e46-a534-1fb6a2634c82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0a970de-424d-4c30-9896-b5154bb70539",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e4a2e1e-1499-486d-9e4d-2869d1a1914e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f48cdf88-ec1d-4d91-a943-d12e44e0ae40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc7ba5d8-cbf4-49d4-99e2-e6291da2a8f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "028969d6-c874-403e-aafa-15bded5767a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1034cb76-0ec3-4e67-a924-795fba30a38f",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80918843-630a-4140-a62e-4a06e70c61c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9e3dab5-0e54-4e2e-be7c-0ee9280e3938"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33f0d8a5-60bc-4707-8ae8-91aab1de9c90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e770746c-3bf5-4bfc-8384-19a55c945b1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8abb25ad-d364-4b58-9346-091f0f43f51b",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fee446ec-0e9e-47f4-b2dd-140b52c7be5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8722ee2-d148-47bf-85ce-7dc07ef97364"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fab5a0ea-36a4-4199-a325-d592ed0fd465",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "babf53fc-d175-4b8c-9c90-49a28c97b68f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d739db93-0b57-4053-b78f-276f35342888",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1298d688-4476-4077-8c03-f6eb99eed047",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31467c0a-9bc8-41e2-a95d-98bca5e09ca0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0614f0f-8623-47da-a673-13a05b8170f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd4807fb-14fe-4251-a5fd-ea51809a07ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f718d11b-5328-46eb-9257-6b41718db421",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "506689d3-6256-4f22-9c77-4a14c0e84e61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a33e844f-d4e2-4d1a-9ba8-74632a2cbfd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c9a03b9-006e-43da-84ca-7c21db90e57a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03ef7e95-50d2-40da-a80f-2c1f0a3b4ca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9cfe149-047b-4189-8d69-08f37a060d0d",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6b8b4dc-153d-4154-ad00-4607627bcedb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4042e67f-cea2-4fa9-b4ac-10c4d7339e78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90d466df-3224-4e5d-941f-b78079e13ab2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "244ccf39-ef68-487b-9c76-65536b411428"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e83be57-fec6-4685-8a3a-6008e39f8a6d",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "088fbbe2-ae40-4163-992c-429376391548",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e7b9898-5b5f-4f87-94c4-b5af7bf3226b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a4f29b2-7afd-4515-9340-377774eb6c3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e034ef0-1c8c-41e1-abff-aeba81bfeb61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d58e77c4-3b2d-4d22-9293-c23838f7f565",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "852ac03c-d1d2-47de-be59-4d6306877f9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b79ef175-b344-458b-ae8d-4b2ec2bf3aca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e53a03df-b4e9-4cb9-b5c8-89d893c44998",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4a5f1f2-eceb-4911-a54e-63e2033721e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f5ef589-fb4c-4a15-9968-605da5134116",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c12f2b4b-540e-4007-ade8-6fed68bc22ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b17ea8a-1ccd-4e01-a1e6-559aaac40441"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3271d5f9-c056-41e0-a80c-3859cfb586cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c25d9fe-943f-485a-adac-17fa16070995"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58ce21d1-b98e-4366-9a75-d08eadefa386",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36357f84-7bec-4727-9e88-405980e0e043",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "081bb4f9-aa95-42da-9c07-9ac202977608"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89f7d9e1-c514-41c7-a7bd-8b19d0190b62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3aba083-532f-4d81-a289-d155438e7202"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bec0995c-1157-43f4-872d-586947783a4f",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d5980ea-dfd2-4028-bc7b-6bc1ac15dee4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6cb3918f-eff7-4955-960a-a601f429e705"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cec3cf6a-806b-4b67-a72b-b62dbbb98dee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14a14313-ff88-465a-8077-0712bfe75491"
                        }
                      }
                    ]
                  },
                  {
                    "id": "265785f1-39d7-41d2-9eb0-a0791a623d6f",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4697b0fd-fb8b-4ccc-9300-99bdcc6ab033",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75cf6304-810f-456c-ace9-245ce7190e61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ac3f65e-78bb-4e4d-89b6-0c8d1796dfb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36901f30-484f-4072-8e19-885501e1625b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf05de41-e7d9-479c-b4eb-25518244fa69",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da6b322-c5b3-4c54-9264-b17bc7827711",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43006412-7e12-492d-b95f-dee0d45724d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e25ef0a4-73d0-4ca8-a72f-4e799de9ee33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "959dbe92-c65e-4ff6-a908-0d658f0cd411"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c2e442e-5ab1-4483-8c09-3c6d2a5017e1",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93e492a3-8c47-4729-b1e8-ca709a22e4e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afa1e8b3-1a70-4d44-9b8a-ed6f60bb3129"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5f31de3-c65d-4877-9c5f-9a0bffc7a66a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6437dcf-e1cd-4462-8fb4-05af126c14f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea8952a8-8b20-4437-9c32-f518a949c680",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc4ff5f3-d961-4136-b2c3-f03728e86aea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6483ca95-9584-4d7f-afd1-7beb0a646616"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3eaecc0-42bf-4af8-b72a-b4207d45d528",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6888f70e-d1cd-47e3-b107-b5dd1924f14d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb594a50-04d4-4d6a-bad2-a212d7eb9d7f",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e236fcb-70db-433a-bcd0-298247eaa05f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0796e827-bebe-4fb3-958a-89f7e94e0b58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff246b1d-4abd-4cd1-a5e8-4c522e1e6433",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8ac585c-60f2-469f-a0d8-97881c7f0a5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a622a3b5-9fec-4441-9aa4-247815a5da7a",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f80d91e-0b1c-4df7-8298-1da80ea626ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a2aa852-3068-4568-86c5-07b7ba725f31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a26bbb91-662a-4cff-a409-04963e45af93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1141e1db-fae1-40fc-9de1-657be51d5c42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a56b9bd-e8a5-4264-939c-d64862a3ddff",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5422e5d7-c48a-4b88-b34f-94a510689a0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e9db6cd-c7a7-4c54-9539-8425bd562b5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c5918c5-4177-40c9-b180-ced696e00b71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "375ea649-2fcc-477c-9ecb-7bf0efc995d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88bfd580-f016-4b9b-a0a0-9576df87b96c",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5174882-8506-4813-878d-a4f054a446f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7f31102-9858-4e90-a17e-efa5d926412f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9192e440-0d10-4a4a-a13b-246b7289cb3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bb16393-5ce5-49e2-8966-2054b775666f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7580128-a607-44dc-97fc-e29bd42bdcf3",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca4a40ba-d2a1-40bc-809a-e1336f815321",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9439026c-e14e-421f-b117-9eac3b1b07fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03c69029-7051-498b-86cc-0d38756a31e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f908e847-0d8f-4ef2-9d8b-e91bed5c82e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e3e9e34-e890-4ac3-a44c-96b7d785b50f",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08dd0087-8c4f-4fab-a57c-d211a1cbbd4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a34cccab-f8f3-4df1-888a-61cab774463d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69d82809-eb56-477c-8e15-4733df662808",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37db0a61-bef1-47d2-8294-a62fae4c51e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ea98811-c876-4f94-b832-5da00504cfb2",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3d85b61-5104-4b67-a0c9-961af7449c6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8645a239-3c64-4891-b462-6de0084d506d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "869d6468-af81-408c-ab21-1971f779565a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "969e2b01-2db7-4c06-87ad-c5a51dd70d7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e27fa642-1cf0-4860-ad52-7d5e67000a0c",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45fd7d6b-76b5-4a8d-b107-1eaab731d65b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c50ea7b-aa69-49a6-890a-1c247dea8c8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "056920a7-7396-4576-8980-9a62e1907ca8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2ac5437-f47a-4d9c-94a5-c631b6f8442c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "746312c0-90f8-4909-a4e7-6daf4606ba16",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c8fbfb2-fd2b-499e-b447-9ed0b68002e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91873399-b519-4c2e-8ac4-5a8cb6c5ad94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12f20b65-10ec-4b32-8950-3c23c9d5a076",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0be2fdc6-d176-4d06-947a-e89005d1f8e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae836aaf-fe4c-4841-8b5c-bdeaf76d980e",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2848b899-1b98-4fb0-bc41-330a95838ac6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1b33f98-8910-4319-8cda-3bff89ebdaae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f95fd52-701f-4ca4-a037-14a463e74f4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09059911-ef04-4ba8-8e45-7aad021d05cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59c57aa7-a34e-4b3f-841a-14cbbe34a9bd",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48307c45-67dc-4f71-aa3a-cbfb04b3786b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cab60bb0-96dc-4a75-b888-785efa206f53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80d19051-ab7e-4cbe-bf77-2e8fa48571f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2277c7b-c4fc-4530-badf-b312dc00dff8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08e660e3-aedf-45ec-a3d1-ec660b0e745c",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "990434f1-67dd-42e2-8d15-60786e72c322",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a26bdf89-ab63-4013-bea6-cdf4b0e7df07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "659bd4ff-5664-4350-9573-f8610ae24d7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4616aa6c-e37c-45d3-8994-d3ba09d9d867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d955e1f-40ac-4f86-81f2-9c8ae230cccb",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dba64ffb-9fe1-4f32-9708-4aee330faa15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a950337-acf0-434f-8352-e42a090bb4ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23eb65f9-2047-4c02-88a9-a51be8118c06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "957cc100-8c25-483c-9eeb-57a0ab54c48b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe8401a9-3032-4e07-8168-281087a0139d",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49e81180-6e3d-4421-aa2f-036e81e0c731",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27fef7e3-2902-403e-9013-4bbf91924cc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eb2cf0e-839a-400e-9487-6628a650d219",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83098ee7-e1c8-4726-873e-4bbb2c1154ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ef9116a-4d4f-4f65-b881-8be964ce1bf7",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5732951-6439-472c-8d22-78a25fa6bf7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "094b21d1-4bf4-4ca2-ba1e-2ae36800286e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72f1068a-3dec-4ff3-b0a2-44bd2506fb7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb225553-995f-4ea7-a2f3-e2cb37a79ca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12e60dc7-ae3e-436b-82a0-450ba13e5f68",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0db36bc5-2743-4e3c-a8ec-fb1e66f9553e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc51ae16-a915-432a-9c86-9a0419ddfd55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76b540d4-4846-4a51-bafa-3a0c0e952e3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04881be2-81d0-4a6c-9772-f8ffa9861008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a5c7c43-5b54-42d4-9391-7174effb2ddd",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eb8c7e4-b272-40de-a7ec-c90819440866",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b2c2840-9365-4880-8ce8-4c317864d911"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f01f09c0-6c6d-4d0d-88f2-1ceb8675b2d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48c3462c-4c97-482c-a3de-64ae64d9e24d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec8d8ad3-2883-4c7d-84b0-1df77e45279f",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d54acd4e-7c63-4465-9464-7e1d254dcfd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfe0b993-a673-4071-9476-4d73677e7b4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21a01d9f-fc7c-4860-886c-f4efc8fea0c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd731d30-515f-4f34-9643-f79c55e9cc7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d511eec-6cf2-4650-a97a-3397ec505e9e",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbc0ff01-d456-450a-9d99-17ddf1c6418b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20789680-6285-43a5-826b-27d8907bc7e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9292603-e86c-4303-aab3-6b28aa1abc13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af8a6a0f-473c-47d4-b21d-87d9a0d4d7da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74f350a9-897a-4911-a979-a345b819283f",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1ad9107-eff1-49f0-ae80-87e2de1ae92b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7c35ba2-9ed1-466a-91f4-702247b31ae7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4a2940e-e86e-41dd-ad09-ee79ea9517c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6b144b0-6589-47a2-992d-2599b2be7d2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7021efd8-9c77-4b32-a352-0d0d55aacd56",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01eb6cef-bdc8-4d03-a62b-8181244137a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9b8676c-22c2-46cd-a0d9-b1e5f2618e05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64b7c3ce-e25a-433a-9915-c1646ab047e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e373f6a-4376-4df7-a01c-5976eac94a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d09f5ad2-5f71-43f5-b577-61344ba38c3c",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebfda0fa-4d44-4c32-b81f-dfab9975e882",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dc8cbaf-bfce-4793-92b0-ca0844eb9ff5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41e27dbb-cd7d-4aaa-8e3d-4763e7310bbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "879c130e-57c2-4928-8f7c-59c1997a7462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7b26b6c-ec62-4cad-994b-53ba2011045f",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93927523-38cf-4aff-b47a-887152dd58ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38d910a5-7b6b-465a-a353-229a81524691"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58b05a6f-257a-4a25-a94b-42682abf0dd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d7202b9-bd0c-4a15-9956-8c62e13c1bec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5606514-9ee0-4c3d-ba90-81d323fee99a",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4147d057-71c3-43ad-9851-aa0c881f6781",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "692d7e3c-ab27-4cda-8ea9-72d7d9326e7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8209d07a-4a6e-4cce-a1d5-31927396d4e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2cf124e-67c8-4ee4-8197-254fde1c56ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "047e85f8-79c1-45bd-b3af-0152043cc854",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cc5b512-41d9-4380-9250-da89abd414d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0061551a-5103-4ff6-b54d-d03244ae6b33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a844b5ae-8117-4361-b161-ff4015c4cc4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9eb2a14a-1e8c-43dc-afb7-b4429b39e115"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cdb3b17-fd5e-43b3-8b70-d11dd8efcbd5",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c8dd27d-f742-44d5-9bbf-987fe43a707f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecf9fac3-d597-4f25-8725-b8b803787abf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c28bc7b2-8f95-4ddc-99ad-bfd99de352db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f1078dc-808c-4ad5-acf0-083d7136cc96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d634a38e-f065-4d50-84c3-fdd62aafd9cb",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "664f8044-623f-444e-b5a9-2a8d2557d2f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0891e724-94b4-4083-aaf7-f19ab34e973c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7da58d46-3204-4e3b-bbd0-f22e20b21b23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97a385f3-f56c-43fd-b208-faa9c75f37a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67674566-54e2-449e-ab9c-95c1958ba13a",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b378a852-de24-436f-9a3c-e994f7d9d937",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71ed1348-a7ac-4fe3-b9db-7ab326723aef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c61d987d-644e-4fd5-b8cd-8a868db6ab57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8469ea46-325d-4c13-ac95-d89280a460ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1350612-f7d0-41c3-8700-7addb8cf0605",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d91e160-6c66-4829-907c-09d30f83cc67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "540c0c7a-b088-4482-97ef-3ba0f4e9fa6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4447d78b-4d9b-4c74-be71-eb3c86c54e2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2887bbc-5e69-426b-948f-432c8c2e99bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3940a39-93ba-47bf-bc5d-e323c3e0bfb9",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "142beb96-61af-4a8b-9a20-bf41d2aff51f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d0bf787-587b-4f3e-94e6-5a4ac1dd8ceb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c255456a-d64b-437d-9b9a-fd9e5bbeae68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d908e8a-8b15-4f65-bb52-b27192a2d515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "062c32aa-3eb6-49ae-ba3f-3448e769af8e",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "299cf80a-0b2c-4ec8-a7e6-1744473cf36a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "221e3503-a17a-488c-b724-f0193252086f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9571b493-5756-4d30-9e45-9e740fab5330",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a75e4f8f-2df0-43c2-b009-eacce51a2624"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05d384d4-e4cf-43f3-b49d-2a00c49b286d",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d30a4e41-9256-405a-a429-bc4087342d62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fb6a762-476a-44d0-9803-b0e48e2c6698"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "107aac66-d516-4235-b764-a598e0930796",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25b2b569-0db4-4ad4-90a3-79f7fa6b9418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f1466ab-20f4-4a56-a52d-2f0065f0608a",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6c3b89a-40a7-420c-9405-01562e8b6fa7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fb42cf4-3fc0-4459-8e7a-6f3c6605ff1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01b46903-8020-4f4d-8bb0-43ec7cb54d7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec349a31-b545-42aa-a34e-273e5a881d8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "183c4301-5a84-41bc-bb11-a588aaf87de8",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5db20fee-578f-44ce-b796-e1f35214cd07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a256bf2-c275-495d-8fba-6250021af173"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41280fa2-c480-4d08-8865-761f7eb8944c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4cfb353-7c23-4e78-bdfb-b2e8c39f0c48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1f38c81-95bd-4923-8ee9-62c07ac6c694",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e5d0adc-4205-4898-bdab-a7a0f23b7648",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec04c631-bb50-4ce6-9dd9-7aad96763715"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da2c0a26-2442-447c-bd88-68c0b22ace6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0c341c8-1fc1-47a8-a794-693f34a905bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9de3c0b8-8746-41de-848c-29bdad4c03ef",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6178bd4c-5631-4f7b-a8ae-c7df47565f3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce627e18-c484-4cb7-bf2d-5c87bbb638b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8514fc8c-902e-42f5-bc0a-43310806e4c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9319392-4eb4-4ce0-b87a-940df3426367"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76e47907-60f5-44d3-ba07-f0e1702b011c",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33868536-fb00-46bc-aa4b-5761c5e35cb8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "745f2281-bd9e-4471-a7c8-234b8c7e5a9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3d5ba9f-3ee2-436d-ba34-cfc74a49e218",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc668c45-3e22-4c49-a98b-1441a845925e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a58d06b-7c8a-42b7-bb0a-c4fad53df5b8",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e277e858-74b8-4b00-a7b3-ff867f5c48a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9eadca4-75db-4430-a803-b56bd768a5e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4030ccc-600f-4dfc-aa42-7b6d9508223b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "031f76fc-61df-4546-b646-3e9236015dd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32d8e57f-6777-41a5-862d-76df5a1624a6",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bdf3afc-aeee-4520-8568-998275bd4583",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2870d192-4537-49be-b1ce-f37338acf6bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa27c3bc-f28f-40f2-81cf-af1d4ee8c72a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39e51946-0dbe-48c7-9ee2-d9575c95a1c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79bf7e83-1543-413a-9c1d-9d465f508d12",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72f019cd-11a4-483e-af8c-3fbae8f72f04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b03e91b-1018-4bc8-8b24-95874c82e2a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d38c930-1e3c-4d28-b7a2-bc1a1f51d994",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c87c4897-f395-4b5f-8efb-8b7971487562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54a5b745-4f52-4ebb-8dcd-f0bc7e0de989",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9df434c5-ff68-4d8e-9cec-e5ce336df046",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92f558f2-9d06-4c6a-a9cf-d33994ea1f8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd08ab8d-ea9e-4040-8f34-17887e196904",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd21cd2e-bfa1-4c30-a11e-658ea2c29cbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeeae6d7-2f85-43e3-bee5-65107fa0e87e",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5223031-8b28-4984-b6de-de9dfa87beaf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01006041-6662-4cfd-9bd5-03cb4fb6fd93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f53502b-c2ce-46fa-a9db-42b4b3d3790b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad4d1d22-6948-4aee-a386-d5a4b43c5cbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "016b1166-845e-4ff6-aceb-b87e9f42d648",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de67dbd1-f98c-48e2-960d-1755976c5e63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b1be1bf-be62-4403-8324-7bf2a9e8c3e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a909d508-7310-4768-bdc3-b54c5341092b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63e90e70-a412-499e-98f6-fa45c893fa13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d157516-1262-4ad8-ac09-0dac80501d1f",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a2138e5-8edc-4aaa-9aaa-4be54b3ce621",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "469367fa-b796-402a-9961-c1127874b21d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cc4065a-a06e-488e-a298-21fb74b8a246",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fc5ee6f-db43-4320-a6e3-6fc3bb2e7a8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4ee9485-1160-41be-88ce-5e168983e61e",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfa24cf7-0b87-48fe-9a82-49c28a119a49",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50307f47-edd4-4a4e-9280-178d7fcb3812"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65de827c-9dab-4372-81bd-5af84c903cc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbb626a6-e405-4ef7-8dc0-8ed57e5f3bab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fae7da7-358c-4806-a88a-fe721fcb1973",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e0063a2-2a41-461b-a5a9-4d1e5e67687d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "025843f9-3f4a-43bf-aa58-52fc3e7b7a73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b108ab16-0ca0-4664-9a3d-070f5a0af96d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17496e86-b943-4219-b422-8a826b352266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd664295-c9ef-4435-9cd5-64cb489f1ab0",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b21f440-603f-4975-a156-4e9e427f438a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06720942-3d16-41a7-ab7a-0fb552295f72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b2fff35-c3ad-4722-b11e-01387f0a163b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b51911b-8937-432b-9bb2-5bb92292a9d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b642190-5cf1-46e3-aaea-714c34369334",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33509646-ca61-4697-afca-9a6d82a100ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dcfde66c-9339-41f1-bf96-d25a832815be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d95c70ef-62a5-40e7-94d2-484774806ac6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1c1425d-8f1d-40f3-a6c6-cffa0a2e1437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12e35813-ed6a-47e4-9581-055a428d97cc",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92f1f2dc-c4f6-4dfd-9807-f79d3a63b546",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d65f6ab-17e8-44f0-8ed6-a6f942a16f76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d0c9460-f58f-461f-9064-2f72d30692e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6db172fa-2f8f-44b1-858a-d2202d2aae94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f70438a-e1a8-423a-9ea6-2a85ca7b6c6b",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38797531-060f-4ad9-aba4-bf76768b044a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc951242-f47e-4d1b-bd93-d9cf3e913349"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba047421-325d-42fe-b2f1-40d2adf1b36b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9264adc-5180-42f6-b2a9-2467141de995"
                        }
                      }
                    ]
                  },
                  {
                    "id": "130d562a-5e68-406e-9944-716e82572aa8",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e646766-89c9-40f9-8fb3-0ef21f8d5c67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83947b67-35ab-45b2-a15b-2c7ae684243c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99e89d01-045e-4b05-a688-df232de33a58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc52d471-5d2b-4bda-99d8-c1c1211e2153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7f70ed0-9114-4629-9384-dc475c16b4e7",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6719e1de-e6d0-4098-a7b8-398c132bd8de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "915aeb33-32c1-4b2b-9067-d36bb0c957de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1559684-418a-4d11-ba36-e117da7b0c83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba4e7ac5-8752-40eb-acbc-4ee3f2f22bd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbbce05d-a826-4fcd-a8b6-8f14093a6749",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62bbcbd9-bf80-485d-8c08-849fc7a08929",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60fc0eee-8655-44b1-a56c-b1b6ca141f6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0602fd2-ae67-487a-be4a-ddba8edbb175",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91811093-fd99-4f1f-819d-5588b797c8f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "540e2ef3-7aff-4bdc-946a-1ea3177b6c38",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bd1e1ec-419d-4812-9ae7-09cd62988e0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99be1e29-f580-483b-b719-9054f03633e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dba1572-8305-4f54-a0e2-ba412bb299ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77881307-3907-4e66-b1df-3158e74cb07f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "636fbc5d-928e-4baa-b9bd-823e75ebae6f",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f72ad418-fd02-402a-b9b0-a5b994fd1ce0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8617c7c2-afeb-4a8b-a27b-085f69a2dde7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c43b7448-e7f2-4b7f-bb4f-82dd10de6a81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65eb4851-3531-4170-a5ee-728450229ada"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc489d58-e9c1-444e-8275-4a51fc4e65ef",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "755d4c95-0fa5-4378-a824-dbe902e6a3cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5b0f996-3346-4cf0-a31a-20c17f682cd3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91151739-a8c2-4795-8d79-bca72e92b572",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe1d1458-8a22-49c6-8df3-837a21f60d14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62eb2f70-b8b0-457f-8859-0675cfecaba6",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21b75420-c5b5-4ffe-b2aa-95eec2ac5f7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f93bcabf-8553-402f-84f8-6bea4cf07f6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8eb8068-4697-4a4e-8c7a-9df5df3a5f62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44f7147f-80d1-4493-81eb-28f8aa75e601"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65925415-3cf7-4bda-857a-07ad45944769",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c50ec622-a514-447f-9861-51f0af7879a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d3538ee-f292-4e27-a31d-fe99e9448a99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82ea5d2d-ae1c-4b9f-9376-40879edf093f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55adb9a7-0848-4f9f-a441-cb631e969c04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0620195d-eb2f-4f25-8574-8cc5268949bc",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fda59fc-3b60-4386-bfc9-32f96f6ba37e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd7b66d5-1656-48c1-aebd-07e6500db539"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd06c93c-6410-47ca-91af-412956d9e780",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3af59e31-0817-46c5-bd05-136a87151208"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4d33dad-a52c-49ae-ad9a-cdcc7766c972",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f05e949f-7558-4af3-a63e-2fedb7193fe4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc0815c7-bf03-4bce-a309-623d3b5215b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78899025-b431-4ea3-bf7a-7247193eb750",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c970b544-fa88-4fd2-b6e6-bc54207107b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63141feb-59f7-4243-bf7d-ebce4e73c13e",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b39644d-f3b2-4fa7-bb7b-6fdfc587bb53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3dd41d58-cf73-4b21-9af6-afec0543199d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9617b84-1a40-426b-9236-f9a01574e6df",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5655e851-b65a-4587-9de7-a81228d96e9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53ae2ebc-e96d-4ec6-934c-dd8c07bf0d5a",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd5bac77-1c20-44ff-a00c-ff2c3e7dc1aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd901e5d-8ddf-4de7-8e9f-27e1a3b84f15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5b6fe80-bd5f-4de1-bf7c-6794561ecaa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5091f7bc-6835-4ede-975d-0976030d2be8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "815825c4-433c-4189-97da-9f5fc5257501",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "835fcd39-f6d6-4d9e-ad08-1a612d191bb8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "776a3e1c-564e-4dc0-9280-7d0ee0495564"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f58ac7-6923-45bf-b2c1-a170238c5e0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4922e841-5e43-47bd-8c4e-a2ed96433220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "456de16f-0d0d-495e-94f1-38c65fbb32b0",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95d14eb3-ee23-4493-8aa8-88a045ec40e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7309e40b-12c0-4c7a-a646-0b4f33c35874"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1a33344-7983-4037-8084-bb1f4e85eab9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60dd33ad-6408-4266-b2c7-7825cc1357dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "175c5b1e-84c4-4e52-a652-1c5be3a01d2d",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "754ccf88-7e5f-4c35-bc6f-73176ddb18ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c31d7f92-9571-4e7b-a8e3-58510484d79a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b0a7be4-adc9-4bed-b6f8-4299faa4c299",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9f4e339-4906-4e1b-bc6e-7e10ee5db319"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9accdc78-3619-47c8-b5b2-5e20a7cdc8af",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cce86d39-ab23-4d00-8e54-856523b5b163",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98bd53b2-ec48-425c-a0de-f707076d8d32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed9ccbca-3fcf-47d4-b573-05a747a2299d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8979ac50-e93b-4253-b287-34a119bef9e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2457b9df-2540-4818-b5d4-423c904f79b4",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c50bda8a-181d-404b-80dc-ac8e26f6253c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e03b88b-44a3-4df0-8557-7503b43aaa50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ace9d1e-0a8b-4820-84c9-df35e6130249",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ca0011f-61dc-4860-af7b-4f8266d67492"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e9a488c-3e39-4dc2-a06e-c025736519fd",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecc69c20-1c33-4060-a40b-5b34a2bb51dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2df14ac5-566b-4ed7-bc39-fa0227e9a712"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c91330a-7d96-46bf-b448-404d0a5edf1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7978d0a-1227-4e6a-9b26-e42d17351ee4"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1fb78a55-5425-415e-94a3-7645b8b4a2ba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9bc8020a-0da8-49e3-8764-6ab4f8fbce6b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1f916590-f5a7-4a2d-986f-18fcd91f266c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1015e47d-46ea-4e99-8c03-fe765605d7ca"
                    }
                  }
                ]
              },
              {
                "id": "89e7c25f-996f-4404-b949-9dcdcfee378c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "32f4ecbb-50e2-42c5-8566-3211f45071f1",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1b9b3df-cc21-4164-8fee-e88b9a0a58dd",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a01d778b-6ee0-45a6-bf02-0a7fcdd92d09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad62d661-201a-4199-ab33-6c5f5cbb9717",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "18f392b4-fffc-4094-a18b-8207bbd80b66"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e31c3204-5a9a-4654-94f4-c2579b920f23",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "27ea7b77-e2ca-474b-8789-4a8358932f75"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2420dfca-c8a9-4b58-b98a-2e55ca6050a8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "825ef10f-74db-4ff9-ab6b-c819fbf8f7f1"
                    }
                  }
                ]
              },
              {
                "id": "73ded16b-1390-450f-890f-bd476d41e24a",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "51e49cd9-f8fa-4aff-9f36-42c514197fb6",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05687305-b258-4d1f-a0d8-9d153ba689bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "fd65d1a0-5652-45f4-8b38-4552fde04cd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d72e9a9b-55ea-4ae5-9830-dbb9ece4050f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea30cf92-70e6-49fc-9df1-f7615cfbe4a4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a4f80c80-09aa-4b86-957f-833450843603",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d4590c0d-4bd8-4334-b0a5-1c7ead756347",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "97ba8e4f-24e2-4b6c-a862-4e046b484ac7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "a9441775-0340-48b4-b170-a0e36bef8a55"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "16514ceb-4943-44ff-8bf3-fe384265f252",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1a665e4e-672b-42d5-8335-098c93700889"
                    }
                  }
                ]
              },
              {
                "id": "bcf58125-87d4-4307-ba51-729de0613afe",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5a4c57f3-4ba2-417b-8b76-2c76f44b01ae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "efd9762c-4758-4210-9d91-a74b57d414b2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "10697449-a3f7-49b4-b683-a283e92e44e1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "55154b52-45cd-4d63-bc72-1ddb6986a64c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "733eb6de-2edf-435b-820b-580c6c16eb54",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "aac781e2-6e1d-469e-9120-1c0b1756b715"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "34ec6fcc-3fae-43da-8e92-96625f5b038d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8f5fed8d-5774-40d7-9686-a43d22312b3b"
            }
          }
        ]
      },
      {
        "id": "a623db66-63d1-4cda-9f85-d36e279cffb5",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "99f0496f-5fb5-49d6-9d2d-9d60f19daff4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "af2dbf91-dbd7-4213-b859-32a953a9080b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7cd4d156-4af0-4114-a132-cfc7ea3c35eb",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "613cdbda-2d5b-4a69-a6f7-7884b3ae7919",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a6f0a614-c0a1-49d7-a90a-34ae5d11d652"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd02cf21-cfc2-4c4f-a1e5-4a6e511639f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "146f1dcb-67f3-4789-912c-faf93536b084"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "145d7cd0-85dc-4ead-8b96-3bb42d2f1298",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c9eb9ee0-13fa-4842-9546-d1972c9cba38"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cfda8ef4-f1c2-4e2a-a5bc-46508e834e47",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ff28b050-979b-495e-87bb-1055f81a2185"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a8e069a0-1364-4766-9c5e-cfa23d5a3a04",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "5f000bab-5825-4def-a29a-a1c76d6d13de"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cf5dca5a-2592-413c-bb94-a3534718d7b4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ef48db4d-6ae0-4a96-add5-91e1b0a033ef"
            }
          }
        ]
      },
      {
        "id": "c6b8ee74-96d1-4ec8-b006-b9c8a9bb97f9",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "d265a317-ecf7-4f10-8d24-8c62a614354b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ce9da8b9-8706-4f7e-ae66-9405faf322fe",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fc5e91b7-e748-4f90-acda-54a1253d72ea",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da1212c7-cbeb-4a7a-96d5-52e8b37c7fb3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2e163130-2e8e-4057-a67d-92bd28561371"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "305d0f13-d761-4a25-b17e-7e7e3c066d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f72a20fc-1b55-4815-9cbe-86a7dcfeb8d6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d651cd15-788a-467f-b0b5-5774f7b65a7f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "78e0e691-e7eb-4f38-a628-fb9e3b1165bf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ea18cec0-eb0c-4430-8180-32cbd4942da8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fff3090f-7212-4951-bf99-923f7089791f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b1a4184c-dfa5-4cca-a55f-0412d743f09f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a1f7610e-8f93-4dce-a855-3cbb240b28e2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6c4c8677-c9dd-4106-8b7e-b441ee4f8103",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "89b28cd9-e56d-4ef2-a3c5-81e332d3b195"
            }
          }
        ]
      },
      {
        "id": "44a5472e-0e88-4d3c-b544-e6f6238e7f83",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "a52d1d57-ce20-4009-873d-7dcf68d6a51c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0491496e-fd48-4d06-9103-6018f67e301c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fbb049ab-a9f7-488d-a405-c4947288cb05",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8633e9e4-abca-47bd-b6ca-b1d50229c883",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "68ce6317-2094-465e-b997-706232af60a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3111f08-3904-4b6a-be4e-94cee4887017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1b2cfbb1-3387-42de-9825-aa658cb54075"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "efd6fd97-e26d-482a-8c35-baccade7a3f9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3a7b0e8e-594b-4fba-91fe-f63085fdf0cc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5ee337e7-8b49-4032-84d6-569ce86971c8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e65e9f92-43e1-4942-8b21-cd194907f011"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "857d9958-c977-4014-aa87-154bc6322a7b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4f771b40-c80f-4afd-ab22-6aef989a861c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "61dd5bdd-7d26-4541-834c-8aa21e0ac8f0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f7cc375b-4fe9-4086-9d0b-4a543bc08333"
            }
          }
        ]
      },
      {
        "id": "da847f5c-6d6c-4fed-9c80-ef2ad7697a07",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cc12a688-9389-4340-ab4e-9f67e16e6c99",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "32a1c009-e804-4ecb-b79a-219681195e82",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "a44922c3-23b9-44c4-85a0-4c758dc47d1f",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4cdbdb15-84dd-4ade-87f1-0e59e270fe1b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ed66bea2-5f75-42c9-af1a-24bd4a51cd02",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 62.52631578947366,
      "responseMin": 6,
      "responseMax": 555,
      "responseSd": 67.33396871243332,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1702168729761,
      "completed": 1702168757220
    },
    "executions": [
      {
        "id": "6cd322f8-88b9-4d67-b4ac-d7cc6d9b620a",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "08f76ec0-664e-49a0-b430-14c1fe466e1b",
          "httpRequestId": "ed5203a3-9df2-4f6b-a93f-a937e5544564"
        },
        "item": {
          "id": "6cd322f8-88b9-4d67-b4ac-d7cc6d9b620a",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "1d854afd-2ec3-4071-970a-3ccbef5e9f3f",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 0
        }
      },
      {
        "id": "7ff24509-5238-4290-ab37-83bcc8450fa8",
        "cursor": {
          "ref": "fc41cf35-8416-47dd-b6f7-831744593ef9",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "db0d1fe2-197a-4a22-ab08-097cb7b6fbf6"
        },
        "item": {
          "id": "7ff24509-5238-4290-ab37-83bcc8450fa8",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "2afd132a-736f-49ec-9f77-7c3deaea8b60",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "e3908b9a-191a-4483-9674-ea9d38b7f1d6",
        "cursor": {
          "ref": "35534083-d9b2-45cd-a70e-f49ee588900f",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "58632688-1db3-4e4d-8ba3-465abad8e65e"
        },
        "item": {
          "id": "e3908b9a-191a-4483-9674-ea9d38b7f1d6",
          "name": "did_json"
        },
        "response": {
          "id": "589ddbb0-f41b-4cb1-8927-83a280198dc9",
          "status": "OK",
          "code": 200,
          "responseTime": 279,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3c86c42-7aa8-4c8e-8d2d-a8ee7e65dfeb",
        "cursor": {
          "ref": "9e4ffe6f-32ce-4a02-a545-1151db32feff",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c74d7a16-dd31-44bc-81b7-bf70d12b29ed"
        },
        "item": {
          "id": "a3c86c42-7aa8-4c8e-8d2d-a8ee7e65dfeb",
          "name": "did:invalid"
        },
        "response": {
          "id": "66e008e3-417b-4da7-ac0a-e47cbdadfb44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3c86c42-7aa8-4c8e-8d2d-a8ee7e65dfeb",
        "cursor": {
          "ref": "9e4ffe6f-32ce-4a02-a545-1151db32feff",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c74d7a16-dd31-44bc-81b7-bf70d12b29ed"
        },
        "item": {
          "id": "a3c86c42-7aa8-4c8e-8d2d-a8ee7e65dfeb",
          "name": "did:invalid"
        },
        "response": {
          "id": "66e008e3-417b-4da7-ac0a-e47cbdadfb44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e06528d8-80f3-48cd-adbd-81508ff641fb",
        "cursor": {
          "ref": "b752104d-5ff7-46e0-9bad-f51a16b0cbda",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "7d0351a3-a836-442d-b56c-fcab833094a0"
        },
        "item": {
          "id": "e06528d8-80f3-48cd-adbd-81508ff641fb",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "c9a41e78-fbfc-4d22-8219-0671cfc26015",
          "status": "Not Found",
          "code": 404,
          "responseTime": 93,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e46f87d-dc60-41ef-b311-532e42d8cf89",
        "cursor": {
          "ref": "40d6e4b6-956a-4b38-8d9c-e73eaf2cb0f2",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "ea6de161-61e7-41c4-a216-d8905702407d"
        },
        "item": {
          "id": "7e46f87d-dc60-41ef-b311-532e42d8cf89",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "031c5c2b-76f7-4eba-aa02-4b620eb8493a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 57,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba5663d8-417c-4879-9d0a-2d9545c9fcd0",
        "cursor": {
          "ref": "b95bb7a1-5c3d-407d-8eb2-255469540805",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8deb0579-fa25-4e03-a758-aeab01830e83"
        },
        "item": {
          "id": "ba5663d8-417c-4879-9d0a-2d9545c9fcd0",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "5df507c9-b54e-47c5-bb95-264a495e5481",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3f872d1-d577-4f53-97a5-4b3234c72832",
        "cursor": {
          "ref": "dd8823ee-26f1-4b9b-8250-13a46904d181",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "5fce35ad-b3cf-49b7-b08a-63dc10b172a3"
        },
        "item": {
          "id": "f3f872d1-d577-4f53-97a5-4b3234c72832",
          "name": "identifiers"
        },
        "response": {
          "id": "1b92f90e-52f6-4c92-9691-825439de98ee",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c47af431-56f3-4657-93eb-c00e1115a623",
        "cursor": {
          "ref": "660b7aa2-d474-4b43-817d-8707039b6950",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "bb988828-07f2-49e1-a785-53b2eac70f62"
        },
        "item": {
          "id": "c47af431-56f3-4657-93eb-c00e1115a623",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "b61eb423-16b2-439f-a3ef-19c35c645493",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2da1a6c5-aaf6-4b35-a960-d8b28459314a",
        "cursor": {
          "ref": "c6db6915-2fe8-4ec0-9edf-ada1262fb5a4",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8c47bbb6-fb5a-4bf6-9d1a-a4e59eedfa8a"
        },
        "item": {
          "id": "2da1a6c5-aaf6-4b35-a960-d8b28459314a",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "90229ff1-e15f-4a52-8ea6-58b7ed4cbb84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05a9e730-ad2e-4815-8a61-b2c9a8dc2ba9",
        "cursor": {
          "ref": "65f7f651-db50-4ad1-8fb3-87b8f4c379d8",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "8ba3cd54-2b90-4faf-a6f3-6c889d81f08e"
        },
        "item": {
          "id": "05a9e730-ad2e-4815-8a61-b2c9a8dc2ba9",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "7a383f87-59e9-4cc2-838e-0905684dacb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "596c89c9-eea3-4036-b93f-5547e07ed358",
        "cursor": {
          "ref": "0d70d8a1-11b3-444d-818e-44911d978b98",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "de466a8a-e34b-4130-8470-e87bdcfa260a"
        },
        "item": {
          "id": "596c89c9-eea3-4036-b93f-5547e07ed358",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "7ce699fc-993d-422f-aefc-1407fe526655",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f129d71d-48b3-460c-9859-23661a0f134e",
        "cursor": {
          "ref": "02fdc5a0-7236-4ff1-b26c-bc2aad09b487",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "552ba2b5-8569-46ad-9e43-eb1e5e6eed70"
        },
        "item": {
          "id": "f129d71d-48b3-460c-9859-23661a0f134e",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "d24348e0-9d33-4105-9f88-cd615d609b72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52c0c769-c6ca-4993-94d5-e28a16400dbc",
        "cursor": {
          "ref": "3ec32233-421c-4b8a-8144-dcd9f6eaedc8",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "6dc29487-bc4a-4f95-a06b-e098cc21f5e8"
        },
        "item": {
          "id": "52c0c769-c6ca-4993-94d5-e28a16400dbc",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "51b57516-47ad-49c2-aa1a-9abebfa9115f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35f33ae3-d1d5-46f4-9d64-c75b19fdbc34",
        "cursor": {
          "ref": "506923f4-0ea5-4830-8a52-2f652d62839d",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "b7545972-345f-4371-bd5b-d1ff54cb5211"
        },
        "item": {
          "id": "35f33ae3-d1d5-46f4-9d64-c75b19fdbc34",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "3f8d8763-d123-4d46-bad2-ce20c992a53a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a5d2993-9a2a-431b-a809-a7b9c91687fe",
        "cursor": {
          "ref": "b5f4e77e-21f5-49b0-960b-5ddefb8b4533",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "33f00596-a1b0-4277-91c2-acd89b0df86b"
        },
        "item": {
          "id": "2a5d2993-9a2a-431b-a809-a7b9c91687fe",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "240ab400-39c4-4df3-9d6f-a1a398183f28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93e9a782-0d97-4845-8d52-72f00fc158af",
        "cursor": {
          "ref": "ca9157c5-b021-4f6e-882f-040fdca2c46e",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "8e82c7f3-380e-49fd-9222-be869c0d454f"
        },
        "item": {
          "id": "93e9a782-0d97-4845-8d52-72f00fc158af",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "1f608ed0-e329-4a14-aa33-dfed93e7ab1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e1f1a60-db17-4408-abd0-4b69814856cd",
        "cursor": {
          "ref": "302f13d8-64b3-47bf-93f5-778fdc3facd6",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "fc0b4baa-dd5a-488a-91bd-eebdac82291a"
        },
        "item": {
          "id": "3e1f1a60-db17-4408-abd0-4b69814856cd",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "b14b4f23-f528-48a6-af25-b51b313b9a06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31138948-83f8-4345-87c2-4f276309356d",
        "cursor": {
          "ref": "59139b88-b0ea-4e49-83d4-214a88b544de",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "6f07429f-f1a4-456c-ace4-688b734ee301"
        },
        "item": {
          "id": "31138948-83f8-4345-87c2-4f276309356d",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "245cbd22-a2e2-4778-acf5-37c9358671ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb69209c-63a8-4df4-a7e9-3eabe3cebe9a",
        "cursor": {
          "ref": "0dcd1f2a-a699-4efd-833d-4996c9df8e27",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "2d9e8cb6-8833-430f-b1fe-9c6e308d37bd"
        },
        "item": {
          "id": "bb69209c-63a8-4df4-a7e9-3eabe3cebe9a",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "04b70c1c-c27b-4dcc-92ab-6417af17b610",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2dbfe6e-e92a-4d79-a3fd-bd750fc42256",
        "cursor": {
          "ref": "e5d352af-cd69-4e21-9275-976015501a78",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "67ef5210-b6f5-42a0-840f-2bd0f16a8a4d"
        },
        "item": {
          "id": "f2dbfe6e-e92a-4d79-a3fd-bd750fc42256",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "6ee5e749-c4ba-4c85-af4b-ce5d1335425f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e05cc98-6fdb-4cdf-949a-7be331437785",
        "cursor": {
          "ref": "50b31893-e829-4beb-9476-029074c60546",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "46a8998b-fcd8-4b15-a461-afbe1ccd5833"
        },
        "item": {
          "id": "5e05cc98-6fdb-4cdf-949a-7be331437785",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "6eb64c22-c81e-43bb-b0dc-95a4784b65af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "731073b7-3b5e-4417-8856-56888e323869",
        "cursor": {
          "ref": "dc483a8f-c2d1-436e-9333-60cb2c6bf398",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e1803602-78d0-4e86-a23a-5bb5500546d5"
        },
        "item": {
          "id": "731073b7-3b5e-4417-8856-56888e323869",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "f57e65ca-a27a-4f86-b901-2cda8d74b487",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "920d8498-4e10-400c-871d-06ada6762d66",
        "cursor": {
          "ref": "c501fb89-260c-4add-8d93-da1cea4b90ac",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "44b909e2-b13e-42c8-b1e9-120f99fdef01"
        },
        "item": {
          "id": "920d8498-4e10-400c-871d-06ada6762d66",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "56fb8d22-fead-4da5-b682-ec48764261a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd30cf6e-3d31-493f-9d48-3e126996b57a",
        "cursor": {
          "ref": "e7d19ad6-3a68-4d18-a529-dafe7f18d05a",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "2be3f81e-cd66-47cc-942e-e20661c4f641"
        },
        "item": {
          "id": "dd30cf6e-3d31-493f-9d48-3e126996b57a",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "3d5f9e38-73c6-4aee-b6ff-e0f1221d03e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47fbf200-2c19-45ea-a126-20e4bf101bb2",
        "cursor": {
          "ref": "f1c7c3d0-b0cd-46dc-aa1c-3aa58b25f214",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "1d9a4967-42a3-4aa8-9e43-638522aef34f"
        },
        "item": {
          "id": "47fbf200-2c19-45ea-a126-20e4bf101bb2",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "03abe768-d33b-4a9e-9549-256e14823f54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "610df337-a3a1-417b-83f0-6d46d023e9f2",
        "cursor": {
          "ref": "4cda5cdf-0256-456b-bae0-b8b931cd245b",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "3c536ddc-fcac-4ca6-ba2a-e8b0baf10c37"
        },
        "item": {
          "id": "610df337-a3a1-417b-83f0-6d46d023e9f2",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "cf3b8722-fa89-494a-af09-588af863b70e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5eeec9d-f4f9-4b24-baff-6f2d28de2d30",
        "cursor": {
          "ref": "171a5221-0e76-427d-8b10-c74f40799605",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f2788010-b810-4ddf-b752-35f18b5c60ef"
        },
        "item": {
          "id": "a5eeec9d-f4f9-4b24-baff-6f2d28de2d30",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "687ef78c-d58b-45f0-9427-059367a02751",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6414abe4-98e8-40d0-8ca7-4dcbd89bbce1",
        "cursor": {
          "ref": "bda96c7e-3e9a-4d25-81ac-71989d8b50cd",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "5e854426-7dff-4395-99e4-f15f56a34bb2"
        },
        "item": {
          "id": "6414abe4-98e8-40d0-8ca7-4dcbd89bbce1",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "48a59a15-f8d5-4d71-9fd9-519d84988581",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d826ffc-4ac9-4839-ab24-8904a64344bf",
        "cursor": {
          "ref": "e510d895-a1cc-49b9-9e09-0c172a331d7b",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "5b807cb6-6f2c-4dad-ae1b-8798fa891991"
        },
        "item": {
          "id": "0d826ffc-4ac9-4839-ab24-8904a64344bf",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "c77a6750-eacf-46de-8f0f-f7d786064cc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32189f40-f430-4bd1-86d4-d6529804f24f",
        "cursor": {
          "ref": "ae2238ec-8054-493d-8dbe-11c4f28f827c",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "060cda0b-5bb6-41f3-92e5-0aa7bbc32df6"
        },
        "item": {
          "id": "32189f40-f430-4bd1-86d4-d6529804f24f",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "e3257e33-263d-49aa-86c4-3ffe946ccb92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b49019ab-7aae-4f0f-9f94-54ba8266787c",
        "cursor": {
          "ref": "6bb88b58-dfb4-4461-adb0-c5a38cf684f6",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "868f5403-eb3c-49bf-a2bc-75a865dfbe67"
        },
        "item": {
          "id": "b49019ab-7aae-4f0f-9f94-54ba8266787c",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "d82385d4-341c-436c-a143-c182421a4d41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fe4c1a4-048a-4663-af8a-216c9d1af2de",
        "cursor": {
          "ref": "a7110cb8-7e66-4556-8265-9b13dcb2fede",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "1ea1fc58-ea7a-4c17-adfd-ab782ffb6f76"
        },
        "item": {
          "id": "4fe4c1a4-048a-4663-af8a-216c9d1af2de",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "43d99635-36ef-4a9d-8671-21569a852778",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d7c5db1-d602-4e00-97d8-f3d6a14ef795",
        "cursor": {
          "ref": "6d83435e-80ef-4b72-9fba-3995cd0c6b13",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "47fbb274-9a79-488b-9a61-930f9b3ab53c"
        },
        "item": {
          "id": "6d7c5db1-d602-4e00-97d8-f3d6a14ef795",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "78e06306-3128-484c-b4ed-53a572373d1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "124545a5-5b19-4683-9564-df2d14616876",
        "cursor": {
          "ref": "f9a5aded-5c8c-49fc-8c95-5bf38b534397",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "a7140ad6-db69-42bf-a3d1-3680abb62256"
        },
        "item": {
          "id": "124545a5-5b19-4683-9564-df2d14616876",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "07036535-d9f8-4606-90f3-ae406a80d757",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfa5aee2-3d62-4393-bcea-ae10cff38b1a",
        "cursor": {
          "ref": "d64d1c93-2b01-49ea-ad86-2342822f3925",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a272f351-cd49-4094-bacd-e759a5420c99"
        },
        "item": {
          "id": "dfa5aee2-3d62-4393-bcea-ae10cff38b1a",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "3a4c7ca9-62eb-4c8d-aa4c-593a7e9a0557",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7074ee06-6c06-4633-85f3-a9e8a4dc31d5",
        "cursor": {
          "ref": "891a384f-8d91-4c47-aca4-97e41f529d2b",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "cb9b4dec-c01e-42dd-bae4-da6bcd64d1ad"
        },
        "item": {
          "id": "7074ee06-6c06-4633-85f3-a9e8a4dc31d5",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "9c318852-3bb9-4876-89c8-afa4698b1a5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2792de89-fd29-451f-89dd-24dcaee89a96",
        "cursor": {
          "ref": "51ada71e-b252-4ee7-915a-f3c8a6c34349",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "93ba5418-41af-430e-865a-3d5e0b4a8588"
        },
        "item": {
          "id": "2792de89-fd29-451f-89dd-24dcaee89a96",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "adfb5f67-f3b4-457d-943d-4d0ab60c5fae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "607f1487-aace-4360-bab5-f6bed6b434fb",
        "cursor": {
          "ref": "adc56347-360f-4c5d-a130-5bd4bdf0b6c4",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "a525a43e-4517-4f17-a37f-aab6e6667973"
        },
        "item": {
          "id": "607f1487-aace-4360-bab5-f6bed6b434fb",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "a34c92fd-f036-4dbd-a852-2a6cb390a37b",
          "status": "Created",
          "code": 201,
          "responseTime": 555,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "89f30047-9319-4e3d-8b42-26f186a43faa",
        "cursor": {
          "ref": "37997406-fcf3-4c4a-8917-9aaf32308ee1",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "8531a8ae-d368-417c-aff4-b3dc08a7bafe"
        },
        "item": {
          "id": "89f30047-9319-4e3d-8b42-26f186a43faa",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "3ae5e90c-aacf-450d-bf88-8dcc168cb115",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "6743d0cf-b81e-4c95-87c8-b1df0402dca2",
        "cursor": {
          "ref": "8b21f2fd-61ff-4b31-a227-8dc599032373",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "fb66439d-f04b-41a5-8993-08b3c2708ef9"
        },
        "item": {
          "id": "6743d0cf-b81e-4c95-87c8-b1df0402dca2",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "c1068054-1607-4125-a4ca-fe3ff01e0acb",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "5a5a1f85-82e7-4c05-b5e3-17f53c08a3ad",
        "cursor": {
          "ref": "cf7c23fb-40eb-4912-b2f6-bd8692e00f2b",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "b7359da8-9c34-4bf1-829d-6bb0788b1c99"
        },
        "item": {
          "id": "5a5a1f85-82e7-4c05-b5e3-17f53c08a3ad",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "cf4c2bfb-526b-4068-b0c6-e33639a1ad5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "333b62ab-d25c-4384-bdb5-c21d85d0cbb2",
        "cursor": {
          "ref": "df4b496e-4d87-44ce-91b7-d03f60fbfddf",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "eefb4185-3d24-4b8e-9144-8b60d48cbcb0"
        },
        "item": {
          "id": "333b62ab-d25c-4384-bdb5-c21d85d0cbb2",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "6c230739-5e53-4ef4-bca1-027cd87bec12",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "c2314a01-8ac1-411a-b9f0-942efdb5e9f4",
        "cursor": {
          "ref": "8f472333-2e32-4ccb-a7f4-0d656c14e04f",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "aa08b203-4552-4c8f-b724-963757b12008"
        },
        "item": {
          "id": "c2314a01-8ac1-411a-b9f0-942efdb5e9f4",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "f036f07e-ea1d-4086-9ccd-1b84a72eacf8",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "e9ba53b3-1373-4874-90f8-8e6a20898eee",
        "cursor": {
          "ref": "cf0909d8-94a7-427f-8426-a6681228c289",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "3a9de4af-afb3-4918-896c-e7f7b3676fcc"
        },
        "item": {
          "id": "e9ba53b3-1373-4874-90f8-8e6a20898eee",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "21bbd6b6-5adb-44d7-9105-4e70f4ce7dbf",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "f52c93a2-59d2-4aa3-8884-1945bd205472",
        "cursor": {
          "ref": "b7061ee8-f837-4323-b904-b5328c6a41a4",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "263f885e-b66f-4c31-a192-18a2add2ec3c"
        },
        "item": {
          "id": "f52c93a2-59d2-4aa3-8884-1945bd205472",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "f47b47df-8ee2-4825-9191-d160e965670d",
          "status": "Created",
          "code": 201,
          "responseTime": 245,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "211b5ace-dbd2-41cc-b976-7cfb88e2c66a",
        "cursor": {
          "ref": "49b9755a-e679-45fb-b713-e151adf6152c",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "6f592204-99c8-4059-af1d-4e49b5548963"
        },
        "item": {
          "id": "211b5ace-dbd2-41cc-b976-7cfb88e2c66a",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "5728629a-8c3d-42d5-8599-3cbe74d3328f",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "b7ce5238-b50a-4663-b941-df0aa0aca0e3",
        "cursor": {
          "ref": "6ca8feb5-3cd4-4071-8dec-139f1500260f",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d7d7fdf1-5f28-4367-898e-fc7668ff56f2"
        },
        "item": {
          "id": "b7ce5238-b50a-4663-b941-df0aa0aca0e3",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "f55629df-fea2-4d43-9e4b-622ae1e3d184",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "5dbc43e5-fb07-4eec-87f7-95cc87831f00",
        "cursor": {
          "ref": "2b3a672d-e3b7-4945-b367-2c1bd5cbab9e",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "a0960576-2d5d-437f-8e28-b0b54ff6890c"
        },
        "item": {
          "id": "5dbc43e5-fb07-4eec-87f7-95cc87831f00",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "958bbac2-a160-4625-bf6d-22765f713090",
          "status": "Created",
          "code": 201,
          "responseTime": 231,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "70b7490a-852d-4ddb-8eb4-9f56151b2ac7",
        "cursor": {
          "ref": "23debd0d-5719-4ab2-88b8-01c349594313",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "a470c44a-7b08-44d0-8140-a95c0cf78985"
        },
        "item": {
          "id": "70b7490a-852d-4ddb-8eb4-9f56151b2ac7",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "b1d1c31a-8216-4bb8-83e5-4c0e825a9db6",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "d3a6dda9-b437-478d-b340-1321df80b225",
        "cursor": {
          "ref": "a79673cd-5756-43e1-8b8a-10a75093c04a",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "7fd7b0ac-4b2f-4dfc-b272-380bdde8409a"
        },
        "item": {
          "id": "d3a6dda9-b437-478d-b340-1321df80b225",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "64a98ebb-b17f-47b9-ba3e-01dea72ffce6",
          "status": "Created",
          "code": 201,
          "responseTime": 246,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "758dc6df-00a5-447b-acf3-bef96c3322d1",
        "cursor": {
          "ref": "b3376de2-3a23-41f1-9735-60c2cf6019f6",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "78f05a30-7003-42b9-a58c-d97728f0be05"
        },
        "item": {
          "id": "758dc6df-00a5-447b-acf3-bef96c3322d1",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "77b193d5-8c8a-4fb2-9dc9-40c8b2228503",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e13c3be5-90af-42ae-81ec-c04f2826d8e3",
        "cursor": {
          "ref": "3e721856-89a1-498b-8f66-86827389e099",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "5b53dd81-1ed9-496f-99e4-693170cf2f8a"
        },
        "item": {
          "id": "e13c3be5-90af-42ae-81ec-c04f2826d8e3",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "191f826c-5f9f-4e6b-ac51-d0d07d1a8736",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecc73fcf-42ae-4c52-a6a2-5d4dde559cd6",
        "cursor": {
          "ref": "e9943ea5-ff09-4efb-b336-5c25166e729e",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "1e890a8a-f829-41b7-8773-fc6e2347fe60"
        },
        "item": {
          "id": "ecc73fcf-42ae-4c52-a6a2-5d4dde559cd6",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "260ebe7d-79f2-4ca0-af50-aa05f846c912",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9281bf58-6231-4ae0-906b-70892be61acf",
        "cursor": {
          "ref": "c15a64e2-6c4c-4451-94fa-66bdaf77c677",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "133e90d3-ce92-4efb-b0e1-67cb72da0d02"
        },
        "item": {
          "id": "9281bf58-6231-4ae0-906b-70892be61acf",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "1cd1f8f8-c596-4a5b-92d2-ef48d66cecfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edaf3b19-f8d7-4b51-9f81-c7f94ca0e1ed",
        "cursor": {
          "ref": "8b5a0046-ed91-4cc6-8e62-f9c7b3db3d9b",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "89bdefde-1fff-446f-9303-051ee96aa9c6"
        },
        "item": {
          "id": "edaf3b19-f8d7-4b51-9f81-c7f94ca0e1ed",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "7068eb55-5de3-4bf6-b879-28fb666c264d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "626236ba-09cd-47ed-9977-682e7e1d90e7",
        "cursor": {
          "ref": "4a33175a-7ecd-4550-8b37-77f9a8e3eb2f",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "090d0cf7-2a18-49d5-b68f-eb593738e7e3"
        },
        "item": {
          "id": "626236ba-09cd-47ed-9977-682e7e1d90e7",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "6327ca5f-cc78-49eb-95bf-c0ebfd73d7f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1d03309-6e99-4dce-aa23-3f7595f094e5",
        "cursor": {
          "ref": "bc22b305-dfd0-4394-bba8-2bbf3531866e",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "c0468dc4-50ad-465a-b458-7bdb7ff7ef52"
        },
        "item": {
          "id": "b1d03309-6e99-4dce-aa23-3f7595f094e5",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "97920e7c-9c1e-4316-a0b4-0153ae1aacc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72c79e10-810e-41a2-ab1c-73463d7f38a0",
        "cursor": {
          "ref": "44d17b56-d652-4bd1-88d5-df971455058a",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "d8b51774-6cc4-4d26-8eda-e901fc8db651"
        },
        "item": {
          "id": "72c79e10-810e-41a2-ab1c-73463d7f38a0",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "26683044-c87f-4940-932a-3de3169a626b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30e13534-9e12-42a6-9246-2c76cadab0e3",
        "cursor": {
          "ref": "97887677-e84b-4117-b67e-45752febc776",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "018b0d99-2194-4ac1-81d1-7ca030256471"
        },
        "item": {
          "id": "30e13534-9e12-42a6-9246-2c76cadab0e3",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "a6b3b2a8-57f7-4117-8a0e-97db4486c47b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88a2ea4b-ea07-477e-b9ac-f55ff3ee059b",
        "cursor": {
          "ref": "28b77e5c-b4ba-4581-beac-f9aef2240798",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "2821912c-a24c-4984-a614-8096f12a06a9"
        },
        "item": {
          "id": "88a2ea4b-ea07-477e-b9ac-f55ff3ee059b",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "d208346e-6246-4f22-a2a1-d91a9b195502",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4e2a290-6c30-488b-b4e2-523800dac649",
        "cursor": {
          "ref": "8cae0e58-2c6d-4b7b-8865-9f4c135f733b",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "cb6fa8ee-c439-43de-8009-b6786b82024c"
        },
        "item": {
          "id": "e4e2a290-6c30-488b-b4e2-523800dac649",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "3caa07ef-1020-4c00-b124-1d121861e028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c63e21f3-85d0-4058-be88-09da8b1f41b0",
        "cursor": {
          "ref": "fc15dde8-821b-497f-b5a5-2df93423c4c8",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "7c9fedff-9361-4c26-b5f7-d7f5f8884ebb"
        },
        "item": {
          "id": "c63e21f3-85d0-4058-be88-09da8b1f41b0",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "73ca1bd0-9a64-42e4-bf64-769f304c7b43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be685656-8406-44e0-a300-85ee15c3cf4e",
        "cursor": {
          "ref": "0f4390dd-652a-4372-9110-e6bcce688e00",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "44535fee-5d48-42e6-a50a-9b15c0ecf231"
        },
        "item": {
          "id": "be685656-8406-44e0-a300-85ee15c3cf4e",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "acf4bec7-4d9d-4816-9e2b-5ba29d7c2ec5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fa433c7-2e86-4427-b4b3-f81ba45b4d6e",
        "cursor": {
          "ref": "de5dd5ab-4cfd-4a47-8f73-cf5693c6ce67",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "5058a8fe-e234-49af-983e-56db121e29ba"
        },
        "item": {
          "id": "3fa433c7-2e86-4427-b4b3-f81ba45b4d6e",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "8853db89-dfa3-4e22-8615-ba94a293412a",
          "status": "Created",
          "code": 201,
          "responseTime": 225,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "9ec6469d-d899-4224-86aa-71e4b45bae70",
        "cursor": {
          "ref": "90ab1bb1-fbe1-435b-8ea0-d2b59162e79e",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "b02e6dfc-396c-44b8-a5bf-4a3c22337d7c"
        },
        "item": {
          "id": "9ec6469d-d899-4224-86aa-71e4b45bae70",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "9ae74143-a327-44d9-9c97-5e8a54473066",
          "status": "Created",
          "code": 201,
          "responseTime": 231,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "97b0c8de-a10d-4f90-8497-7bb94a92947c",
        "cursor": {
          "ref": "fea7e78c-9b3b-49d1-9b0f-b7447922cc53",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "b879662f-8655-4745-91aa-8955240e3a34"
        },
        "item": {
          "id": "97b0c8de-a10d-4f90-8497-7bb94a92947c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "b439e668-e965-458f-81d9-569769cc25f8",
          "status": "Created",
          "code": 201,
          "responseTime": 242,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "15146748-6e5a-419c-bc4a-c5ad44ece863",
        "cursor": {
          "ref": "7228aa06-001b-44ea-9f1e-cd471854d14d",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "77c58f00-d781-47bb-aefa-8798c839d616"
        },
        "item": {
          "id": "15146748-6e5a-419c-bc4a-c5ad44ece863",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "65bfb7be-5859-44ac-85e8-271fa5ae6af7",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "d8242f12-87e0-48a6-b5b5-68e6f2586074",
        "cursor": {
          "ref": "00d128c0-be28-41e6-b087-c516893a1b9b",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "cd98b7ef-26a4-4918-a1ae-82acbae449e3"
        },
        "item": {
          "id": "d8242f12-87e0-48a6-b5b5-68e6f2586074",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "23e29dbc-46e2-4ad4-9193-bb47d7e267e7",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "147a2e57-2b03-44ca-b0da-07b1569f897c",
        "cursor": {
          "ref": "b8e1231e-3838-4150-ab6b-9c6a9b3eae53",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "3e0f1c35-2ec0-4ee1-af46-44b2adfb64a9"
        },
        "item": {
          "id": "147a2e57-2b03-44ca-b0da-07b1569f897c",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "706fbb57-e9ba-4401-a3fd-3ec8fbf77adf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15ea8140-4696-493d-a98f-d18e84908028",
        "cursor": {
          "ref": "664746ae-e482-405e-a1cb-594974daa407",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "8a932144-44c1-40bc-859b-7bffe98a6ea3"
        },
        "item": {
          "id": "15ea8140-4696-493d-a98f-d18e84908028",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "92f14dc3-a993-49a1-b8fc-9618dfaa9c66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d5a8aaa-c0f3-4582-929b-beeb5c509910",
        "cursor": {
          "ref": "a05b802e-2f99-4aa3-82a5-97b3e34f2184",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "a40bbbcb-97af-4d72-8340-4bb824ee78c5"
        },
        "item": {
          "id": "3d5a8aaa-c0f3-4582-929b-beeb5c509910",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "cf86212a-db36-44ef-be6e-f2659cb6f85d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dfa5ff5-6ff4-41c4-bef4-91c5def21090",
        "cursor": {
          "ref": "19d38b66-612e-4ff0-8416-e40a6bff44b0",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "8e5f3342-3a34-4c93-8940-f9b95eeda454"
        },
        "item": {
          "id": "9dfa5ff5-6ff4-41c4-bef4-91c5def21090",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "01ea9105-5977-47cc-8b87-63f10e05ef7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7536cad0-3aac-4bd3-b850-d26d2042d99a",
        "cursor": {
          "ref": "7eb00e39-5395-44c4-8292-f6fc85aa10dc",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "3d28217c-d300-45ce-8c56-517209603e27"
        },
        "item": {
          "id": "7536cad0-3aac-4bd3-b850-d26d2042d99a",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "e1bf3dd2-88c2-4055-bb50-3445161c240d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "870835ec-21f3-4c32-8f37-9df6a84eb114",
        "cursor": {
          "ref": "95671cb6-5c10-49d7-9b05-c15a3e197cac",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "8632f0f7-a266-49e4-bd78-e3596eeace56"
        },
        "item": {
          "id": "870835ec-21f3-4c32-8f37-9df6a84eb114",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "4a44677c-a782-420c-99e5-00717b8514fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e21fbc1e-8fa1-4721-80be-46ab47f4d896",
        "cursor": {
          "ref": "be026cb1-8de4-4078-869f-c8786171c6f9",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "dd0dc0d8-ed28-4d63-8d75-b8a72e14e473"
        },
        "item": {
          "id": "e21fbc1e-8fa1-4721-80be-46ab47f4d896",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "50b4f637-e6ec-4dc2-8bce-c7c965899fe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15158472-3d2d-4771-b845-6ef759118462",
        "cursor": {
          "ref": "d01f85f8-f8a6-46d2-ba47-4ea4bb209fd0",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "2f21b98b-1448-4a8d-af3e-4f9161b9528c"
        },
        "item": {
          "id": "15158472-3d2d-4771-b845-6ef759118462",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "ca15b418-7539-4f21-a085-c6f2ccd92076",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "943c892e-fad5-4c41-9a36-5d85d596e6be",
        "cursor": {
          "ref": "3f17029e-9333-42af-80aa-49e514bcf099",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "6d9d9794-8361-4806-9e96-00363c188352"
        },
        "item": {
          "id": "943c892e-fad5-4c41-9a36-5d85d596e6be",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "9a6efe88-9afc-42e6-a723-244c1d03f2de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "555bac6e-e16b-497c-9bd9-fc41bd935554",
        "cursor": {
          "ref": "169517f1-1985-4cd2-8418-d9d55a4191eb",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "6dfab5ed-be26-4871-bb3e-27306dba8fe4"
        },
        "item": {
          "id": "555bac6e-e16b-497c-9bd9-fc41bd935554",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "4ee559df-9818-4512-8e34-186ac7fbfe59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93f62ac1-ff1f-4699-8a3e-500548a75259",
        "cursor": {
          "ref": "b7e24c1c-183b-415c-a876-8c85eaa5b840",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "5192663d-c3fe-4014-9dc6-11d48dd1a951"
        },
        "item": {
          "id": "93f62ac1-ff1f-4699-8a3e-500548a75259",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "39073a14-5215-434c-b2bd-d7fb9bcec29f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5be4988-1478-441d-b60c-5e424b94720d",
        "cursor": {
          "ref": "73ad88d5-3d59-4782-b65b-1a4f03215a43",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "ee17ce5f-4cb0-4520-a29a-9023c93521c1"
        },
        "item": {
          "id": "a5be4988-1478-441d-b60c-5e424b94720d",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "c3ad0a2f-d680-42f9-9abd-df5a59e8cfac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5b46526-31e4-4d9f-8505-734e18116d1b",
        "cursor": {
          "ref": "3d451346-436a-4d82-80a9-840b5d650b5c",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "f65ccd44-0bd4-4bd8-a0dd-afd406b39326"
        },
        "item": {
          "id": "c5b46526-31e4-4d9f-8505-734e18116d1b",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "066a1df6-e34e-475c-801d-db3536c5ec4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ac8594e-613e-47b9-b0da-2cecff07ee58",
        "cursor": {
          "ref": "c1c0b245-2f2f-4750-9910-5cfc65982b63",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "ef38c9d5-84ca-448e-8a23-540a987fbc05"
        },
        "item": {
          "id": "0ac8594e-613e-47b9-b0da-2cecff07ee58",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "eb1cb5bd-28c8-407d-a25f-36c35d451f23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d0dac71-ff33-4061-b5cb-9fc488c1065f",
        "cursor": {
          "ref": "7bb30f83-721b-496d-abbf-090bbdf7bb2e",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "e019d7ee-ecbc-49cf-ae50-864e329b1325"
        },
        "item": {
          "id": "0d0dac71-ff33-4061-b5cb-9fc488c1065f",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "66cb2081-b2f7-45d1-b195-705a89c65035",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fff5841-446b-40b9-88f2-ad57354c88bc",
        "cursor": {
          "ref": "5b5e758f-c79b-4e9e-9da2-bb7316227ebe",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "344077ae-a784-49be-966f-828153c69000"
        },
        "item": {
          "id": "0fff5841-446b-40b9-88f2-ad57354c88bc",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "49e06858-62ba-4fb3-9616-749121b22e6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "561f5637-4985-4a2f-bde4-9ed5421e86c5",
        "cursor": {
          "ref": "13513d98-144f-4155-8fa5-0e407e7141cf",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "84f88565-c69f-433d-b1e6-8000fcb0fccb"
        },
        "item": {
          "id": "561f5637-4985-4a2f-bde4-9ed5421e86c5",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "b8a9b353-b463-46f7-9e64-c80b449add31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8e2edcb-a159-4a40-adc1-9a653c5d2cac",
        "cursor": {
          "ref": "e7f75acb-5b96-47ac-9645-769d6351e8f7",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "5519ba0d-336e-4ad0-8bd1-f66692c1da29"
        },
        "item": {
          "id": "e8e2edcb-a159-4a40-adc1-9a653c5d2cac",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "b2cfaf7e-e23c-456d-a631-92d5ba4c57e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7ab37b5-919b-4836-89be-aed84d04a5e2",
        "cursor": {
          "ref": "ac32cafd-cb57-48bb-be73-bc99d9681018",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "afb81c61-f7a1-4ec1-9b0b-38243880a326"
        },
        "item": {
          "id": "a7ab37b5-919b-4836-89be-aed84d04a5e2",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "872841fe-ae4d-457f-af86-fe7f6dc9b443",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5f70f24-8d62-4489-9384-7be34ed6e727",
        "cursor": {
          "ref": "123ab0b4-8655-4b0b-a23b-1a3251e2c93f",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "ca2ad6db-d6f7-4c7c-bb23-d1d70647c04c"
        },
        "item": {
          "id": "a5f70f24-8d62-4489-9384-7be34ed6e727",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "6a123759-7ce1-4573-816c-3152a4c316b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8d9945f-dead-413a-a8ff-8d326f3c9070",
        "cursor": {
          "ref": "6b50427d-4a6e-47bb-98f5-2033f960b61b",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "c7fa55fc-947f-4ad6-87cf-00432a7a514d"
        },
        "item": {
          "id": "c8d9945f-dead-413a-a8ff-8d326f3c9070",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "4c61045c-c8fd-49d6-96c3-383fd27d6324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "960f9312-7f44-4e3c-b8bb-695c01ebe3cc",
        "cursor": {
          "ref": "db41339d-37d4-4c64-a1b0-231652bedbba",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "e075de15-f4bb-454d-bfe8-ed4ee6d8606c"
        },
        "item": {
          "id": "960f9312-7f44-4e3c-b8bb-695c01ebe3cc",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "57d5d8bb-9686-4411-9b8a-e28fcaa2c3f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9abbb455-aa72-468d-93b8-04c577fc3b1c",
        "cursor": {
          "ref": "faf8dcdf-0466-470d-882c-dcd16dd12457",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "4b6a56e8-50d5-493f-8f4d-96ffd2fa4ddf"
        },
        "item": {
          "id": "9abbb455-aa72-468d-93b8-04c577fc3b1c",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "f196006e-3500-4e0f-8867-afc2baf15505",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5da28cb-d5d3-4466-b96f-2b3e06af9068",
        "cursor": {
          "ref": "8f96a920-7c47-44e2-80d1-2847f0ec331a",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "7f8f3aeb-5abe-40dc-abb1-a33b7cb6cd56"
        },
        "item": {
          "id": "a5da28cb-d5d3-4466-b96f-2b3e06af9068",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "f0f3bc59-3c0f-4221-9790-2f60b0b84b23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f99cbd38-9fb4-4074-a3bb-2f4143be3c07",
        "cursor": {
          "ref": "7ac47439-06be-48e2-8aaf-1892584afe11",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "63cc2364-f052-466b-9715-f27ca5c4a9f9"
        },
        "item": {
          "id": "f99cbd38-9fb4-4074-a3bb-2f4143be3c07",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "d3f6f7b7-7b02-4d0e-adb7-a7326fe935da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f55e6d6c-9b4d-4cad-8b5d-38e9034f5929",
        "cursor": {
          "ref": "2d8c7bca-a5ab-4bbc-b209-2ef8df703187",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "a1c8f949-0b0c-4b97-a22d-bd13ee783fcd"
        },
        "item": {
          "id": "f55e6d6c-9b4d-4cad-8b5d-38e9034f5929",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "a656853b-e0a4-4a45-b694-81ff393fe673",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ddbdb94-859f-4f2b-bd37-52c8e08cb4f7",
        "cursor": {
          "ref": "67ad6507-e421-49a2-be99-93d10ff66975",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "d2ca92e9-8d1d-4a3d-88ca-d3c8f128765d"
        },
        "item": {
          "id": "7ddbdb94-859f-4f2b-bd37-52c8e08cb4f7",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "63a44d6c-2d68-4758-b13a-cddd548c6652",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4625225-b842-431b-9a9a-37497c2c67d1",
        "cursor": {
          "ref": "96ca26ed-aa40-4a73-9038-b206c9a3f93c",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "e3b886b3-d3f4-4622-8f6e-8904503373ee"
        },
        "item": {
          "id": "c4625225-b842-431b-9a9a-37497c2c67d1",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "23aae1ad-e018-4f79-9830-5cb80e669a89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4952362d-ad1c-43ad-b3dc-b8d406006210",
        "cursor": {
          "ref": "906cb9a3-92f2-4ecc-8558-c5f890f08b22",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "eab1b14a-1637-4854-ac1b-699bf92a5f0d"
        },
        "item": {
          "id": "4952362d-ad1c-43ad-b3dc-b8d406006210",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "4637de1d-9ed8-4a8e-837e-0a33662d344e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a3bbbca-7a60-42cd-87f5-4bc4badc5180",
        "cursor": {
          "ref": "98d1b2e3-e924-4f9f-b1a7-121d00209bcc",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "1580b638-7460-48a7-b988-4fb862450f03"
        },
        "item": {
          "id": "2a3bbbca-7a60-42cd-87f5-4bc4badc5180",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "b6aa871a-f1f9-437c-9f72-0a54cbe81132",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a94333ae-bf5d-4402-b54c-811d7ed502b6",
        "cursor": {
          "ref": "829da021-5c2c-4f29-93fe-4f41149d4888",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "1d6c793e-a87d-41e9-8df8-9d4d5ec4c6ed"
        },
        "item": {
          "id": "a94333ae-bf5d-4402-b54c-811d7ed502b6",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "cf7a259e-756b-455c-8c72-3ea98a3427de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d657181d-8593-4b8b-8476-9122e847b518",
        "cursor": {
          "ref": "2e055834-8779-4254-9372-c219af06f444",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "3d6d71c4-839f-4bdd-a675-4836994a4cb8"
        },
        "item": {
          "id": "d657181d-8593-4b8b-8476-9122e847b518",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "7f00532f-49bb-4402-83be-8b918d92c44a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b214a128-8d5a-4d98-b881-42a435351a40",
        "cursor": {
          "ref": "57e6d21f-ab0e-4667-b480-d8fc2b768c32",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "ae91bfbc-545a-407a-8c55-267d601200ad"
        },
        "item": {
          "id": "b214a128-8d5a-4d98-b881-42a435351a40",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "42b83274-a07f-4cbf-b1c2-7136c7e8a4ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "eca25045-ecf3-4301-a3ee-9a7685df8593",
        "cursor": {
          "ref": "336b5fca-95c7-48ca-ba01-64e0639e9501",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "e7aef464-58f0-4303-adbf-1d28d4d91480"
        },
        "item": {
          "id": "eca25045-ecf3-4301-a3ee-9a7685df8593",
          "name": "credentials_issue"
        },
        "response": {
          "id": "df69a260-39a9-4959-85f6-34518e01982d",
          "status": "Created",
          "code": 201,
          "responseTime": 359,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "192b9b3e-e5e6-47e2-888b-be4454791550",
        "cursor": {
          "ref": "be2039d7-bf44-4ff1-937a-bea49cf2b344",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "ff8a209a-a5f5-4538-8692-08f40df36118"
        },
        "item": {
          "id": "192b9b3e-e5e6-47e2-888b-be4454791550",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "51381627-5db4-4df4-81c3-558a0fae8104",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "957459aa-927f-47ec-aa65-81ec572bd491",
        "cursor": {
          "ref": "24731a1c-1c89-4594-aa4f-985218cdd4f4",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "9c5927ad-93e3-4068-b22f-d739926bf5bb"
        },
        "item": {
          "id": "957459aa-927f-47ec-aa65-81ec572bd491",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "63497f1e-3144-42a3-9eb2-577631351c15",
          "status": "Created",
          "code": 201,
          "responseTime": 243,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5258f2c-e835-41b5-9e6d-0390141ec98b",
        "cursor": {
          "ref": "c082222d-d07a-4eb7-9f12-78c8e6706eb7",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "ef54946c-a75d-4aa8-92a5-7c843fb92dce"
        },
        "item": {
          "id": "c5258f2c-e835-41b5-9e6d-0390141ec98b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "56975726-886a-4102-88d1-218aa9af25ae",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1ac737d-9e5c-4be7-bd76-d477352f8166",
        "cursor": {
          "ref": "bfbfda29-2c5a-487b-9901-b0d4d0cbe5d1",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "faac37fe-9f8d-47ab-a9ff-844b8b2ed71b"
        },
        "item": {
          "id": "a1ac737d-9e5c-4be7-bd76-d477352f8166",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "109350b7-a455-4638-b85f-fa4eb5fa0383",
          "status": "Created",
          "code": 201,
          "responseTime": 235,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-12-10T00:39:03.421Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-12-10T00:39:03.421Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "33ce5167-eea4-471e-8eaa-db1a13644d3b",
        "cursor": {
          "ref": "89da9a9e-443a-4196-a5b1-9458900dbe0c",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "6114be15-ee04-44f7-88ac-42a180d82eb3"
        },
        "item": {
          "id": "33ce5167-eea4-471e-8eaa-db1a13644d3b",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "ef731d64-5453-41aa-91b0-66297e01d3a1",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4879fe06-4e23-41e3-be60-02ba58d849a4",
        "cursor": {
          "ref": "8806e454-ec17-428e-ae8f-4e87a75ef50a",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "b7311e5b-ae21-4da9-a8f0-c79a7a043a68"
        },
        "item": {
          "id": "4879fe06-4e23-41e3-be60-02ba58d849a4",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f4fd5af5-5c10-439c-a388-b3b4f31b6f8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61ac7c10-48f7-4e77-9eaa-2289fdffb47d",
        "cursor": {
          "ref": "c0458024-d2a3-44b8-9870-203fce08e00e",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "5d08d2bf-87d6-4f69-827f-55b00266f38c"
        },
        "item": {
          "id": "61ac7c10-48f7-4e77-9eaa-2289fdffb47d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "c48e5f84-be9a-4dda-aed0-14444856a954",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49ed71c2-f55b-4c9c-be84-a8bf1710f0a0",
        "cursor": {
          "ref": "95226f8d-961e-44d5-9891-bde93447716f",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "67ea79bc-2cda-47e5-8d9d-a957933ed1b9"
        },
        "item": {
          "id": "49ed71c2-f55b-4c9c-be84-a8bf1710f0a0",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "1ef4f41b-4a69-4b68-955f-8799434d8f76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "732f629e-21e9-4593-9c25-b6239db804ef",
        "cursor": {
          "ref": "36261abf-a879-4922-99f6-c37634dcc770",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "0b36d715-1d93-473d-833f-8c3efbc2edec"
        },
        "item": {
          "id": "732f629e-21e9-4593-9c25-b6239db804ef",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "cda3052d-79ff-491b-a6b5-8401a5d8f547",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80d511fa-d554-4ab5-b428-c361141ad8d4",
        "cursor": {
          "ref": "1c3d856d-9fea-479b-a6d4-ffdc27d19e71",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "e8caf50f-b9ad-46b9-82da-d1d16ed6e865"
        },
        "item": {
          "id": "80d511fa-d554-4ab5-b428-c361141ad8d4",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1204d0ee-5039-4409-9d80-b8a481e850d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3980b6b0-fa16-482a-b6c2-1ba81294a615",
        "cursor": {
          "ref": "3e095639-f20f-4e7e-b7bb-3793ae6678b5",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "12edd854-f89d-4767-a040-cf1bc4cee913"
        },
        "item": {
          "id": "3980b6b0-fa16-482a-b6c2-1ba81294a615",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "919b2d5a-475e-4023-b48f-ab80be253638",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22e01147-80ce-4707-bdc3-643a597514c5",
        "cursor": {
          "ref": "cdf68c39-7deb-486e-b136-123a10537679",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "44cc9e6e-24ea-4ff8-a7fa-d7446a4dbf77"
        },
        "item": {
          "id": "22e01147-80ce-4707-bdc3-643a597514c5",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "3b9eb5d2-0a1a-483a-a5bc-a755d25a19ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5f59cb2-9dee-4f75-b84e-12900b6fb516",
        "cursor": {
          "ref": "8dbe3d91-9f56-44f9-b6f2-b174f58953ed",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "a128e23b-d3ed-494b-885e-abd0eea1058e"
        },
        "item": {
          "id": "a5f59cb2-9dee-4f75-b84e-12900b6fb516",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ffbfb3f1-4e57-4eda-b4d3-8cfe7186e40f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5b2e6df-ab27-4f68-b673-2def5835f292",
        "cursor": {
          "ref": "5211ca58-dc49-4ac9-bf40-78f13a0ef895",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "26eb3ae7-4574-47dc-85f6-12648b90b836"
        },
        "item": {
          "id": "f5b2e6df-ab27-4f68-b673-2def5835f292",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "73be8a2d-7c20-4bd2-a699-eaf552af42e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0d6a3cc-d4db-4277-836a-c1dcc4887f8c",
        "cursor": {
          "ref": "254ddd8a-2bff-4ed6-a8f8-0ae3bf0e8979",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "f8461a09-1744-4544-9236-e00c8eee450f"
        },
        "item": {
          "id": "c0d6a3cc-d4db-4277-836a-c1dcc4887f8c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "12797606-15c6-4afa-9778-8049e7ffc25d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9307595-43bb-411c-92f7-840fd66943b5",
        "cursor": {
          "ref": "cd138a34-6633-4726-bb32-17a924cf1cba",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "cc0de618-516f-45a6-a1c3-b21a861eecbb"
        },
        "item": {
          "id": "a9307595-43bb-411c-92f7-840fd66943b5",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "4f03cb84-c7e2-489d-9fe5-d108ac121d10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94e8dd82-4d36-4190-94b1-ca5ae74a0257",
        "cursor": {
          "ref": "a74fea5d-fe6f-4d30-aa0d-d7075f6a2eaa",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "f21e4a8e-5086-45e6-bea7-249bce284261"
        },
        "item": {
          "id": "94e8dd82-4d36-4190-94b1-ca5ae74a0257",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "24592794-beb6-4132-b51b-62047fe28da1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47a5d6b5-c7ed-43f5-87af-6ca4ba4d2fde",
        "cursor": {
          "ref": "2498a64a-29d1-4ad9-b1cb-390d45b50798",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "d36fc611-5eb2-4a0c-9023-6c6b8294a8eb"
        },
        "item": {
          "id": "47a5d6b5-c7ed-43f5-87af-6ca4ba4d2fde",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "07514dfd-5e91-43df-9932-2bae31bbb851",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b913f3b0-6dc2-4e6b-a407-7243a7725680",
        "cursor": {
          "ref": "aac6985b-ac9b-4b7f-adc6-0a364f8f8602",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "a83da716-3097-42c1-adf4-939f760e8bc4"
        },
        "item": {
          "id": "b913f3b0-6dc2-4e6b-a407-7243a7725680",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "db9f5d4b-2998-4941-b92b-bcb55401f44a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ddb738c-1b2e-4218-bfab-ea5c10a20a78",
        "cursor": {
          "ref": "7bbe8e26-9e00-4d92-b554-145c5e32c35d",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "4ef2439d-df7a-4c06-aaca-b5443e3f807c"
        },
        "item": {
          "id": "7ddb738c-1b2e-4218-bfab-ea5c10a20a78",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "225db96f-7582-4776-8dce-60d555d2c565",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "476de83b-f233-4314-957b-1cee86fa1f29",
        "cursor": {
          "ref": "cb3e2049-266e-4b5a-81e8-d584fc982374",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "c2d175dd-9b2d-4c54-9a21-90f17572dd24"
        },
        "item": {
          "id": "476de83b-f233-4314-957b-1cee86fa1f29",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "940425c2-de7a-469c-be82-916ed0c5c923",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "874e163d-e9db-4d3a-b094-e871108c8dce",
        "cursor": {
          "ref": "a0e19f8a-ff4d-4f16-bfe8-611ba5f770d4",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "d48859da-6fdf-4d62-a71d-77f3629b8cf3"
        },
        "item": {
          "id": "874e163d-e9db-4d3a-b094-e871108c8dce",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "eff0ef2c-ae2b-4425-8dcb-4798e535b615",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f828e243-5e1a-40a2-acc3-9dc9ca52d5cb",
        "cursor": {
          "ref": "00c8e716-c6dc-4e67-882c-41d89d94770a",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "f9f176ae-1994-45eb-8ff8-b4701314d998"
        },
        "item": {
          "id": "f828e243-5e1a-40a2-acc3-9dc9ca52d5cb",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "49cdfcdc-8c5c-45f7-afb4-81e365a96e04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "021d3742-7d16-43ed-8fb6-137e0d36ef43",
        "cursor": {
          "ref": "dd460076-12d3-4587-bb22-351a0592e11b",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "7ddc2c2e-88b9-4ea4-8a5a-70f6093f0a10"
        },
        "item": {
          "id": "021d3742-7d16-43ed-8fb6-137e0d36ef43",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d4aa1f35-93c7-4bf8-972a-9796bf543ab6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13a325e4-d393-4619-8d96-104132aa5a47",
        "cursor": {
          "ref": "6cff38a8-a427-404b-9c9d-2451ab9a8661",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "38a18228-1851-4746-84f1-6e9a9d3dee69"
        },
        "item": {
          "id": "13a325e4-d393-4619-8d96-104132aa5a47",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "2d75ff9e-9e0a-490c-96c4-fc529693e660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb9cc287-96b0-4c05-a48e-f7e326be5f24",
        "cursor": {
          "ref": "2c75b43a-c080-48fd-b3e0-ddd3ea0f3098",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "7f89da99-e7e2-4639-98a5-9b3db543a506"
        },
        "item": {
          "id": "eb9cc287-96b0-4c05-a48e-f7e326be5f24",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "24e0a502-86df-4bf0-a493-a9d7521ebc77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd490b75-0b60-4dd1-98c2-b49b889cbd6b",
        "cursor": {
          "ref": "f26dc970-0b74-4612-bc75-cfe1984f7428",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "9b6bc1a4-2858-4162-9fe0-d31ef025a7b9"
        },
        "item": {
          "id": "fd490b75-0b60-4dd1-98c2-b49b889cbd6b",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "81b4a5fd-50ab-44ae-9304-aae2d97d07fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae45c9a0-6128-44bd-bbeb-64619bf67f18",
        "cursor": {
          "ref": "89f2f731-d8ed-485a-b438-d6a1e7f50384",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "db2467f3-841f-4f41-ae77-3b63da9b18c4"
        },
        "item": {
          "id": "ae45c9a0-6128-44bd-bbeb-64619bf67f18",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "63be3072-f21e-4a2a-9e07-9db8c5018b25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c1d3a93-3979-4769-bbee-e6e4aa600f42",
        "cursor": {
          "ref": "e356a9ee-e94f-43b4-a818-d02da4851f23",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "c577cfcd-2fe5-49b6-b997-585a00b7efe9"
        },
        "item": {
          "id": "2c1d3a93-3979-4769-bbee-e6e4aa600f42",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "e20fff92-e82b-4729-a065-81c252e5fac7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "961410fe-5c85-4b78-ac57-7fec6e469672",
        "cursor": {
          "ref": "c3b05f2a-4d04-471a-b35d-d6199977bb14",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "db463530-34f0-44ad-9ce1-1debdfe65fbc"
        },
        "item": {
          "id": "961410fe-5c85-4b78-ac57-7fec6e469672",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ac8173fe-d4a5-4ada-ab68-5303c930ac37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97cd1ff7-a838-4949-b598-e5b44b8bf9b8",
        "cursor": {
          "ref": "a67519c8-b0ef-42f3-a8f3-061e44f0a24f",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "e8f98b69-370a-4607-8ef9-a39a73134ca1"
        },
        "item": {
          "id": "97cd1ff7-a838-4949-b598-e5b44b8bf9b8",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "4e6edd5b-adfe-4f75-8f7e-e136e9940d2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5320932-a366-430c-9fcd-f2543c53f7ee",
        "cursor": {
          "ref": "639fe65c-57ae-4702-9773-2e3efdbd57a7",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "4865b296-a87b-47c7-a049-6aa2e1bf6f2a"
        },
        "item": {
          "id": "f5320932-a366-430c-9fcd-f2543c53f7ee",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "3e580bfb-9af3-4b5c-b2e5-fece50c61465",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86bd637b-a91e-4c8d-aa42-8d485f17e305",
        "cursor": {
          "ref": "95955155-a1fe-42b7-a83b-c06507fcbf64",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "9967ef2a-26b8-4ab2-a3fd-cd78e4f0ff2a"
        },
        "item": {
          "id": "86bd637b-a91e-4c8d-aa42-8d485f17e305",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "720b6837-2b4f-4a9b-b589-afa75e5c76ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e87db961-9957-4080-aabc-2638873ae5c0",
        "cursor": {
          "ref": "18b1fde4-aeea-45b6-bcc7-2a71e9ce5191",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "e63b82ff-ae79-4f61-98af-2daaa5552685"
        },
        "item": {
          "id": "e87db961-9957-4080-aabc-2638873ae5c0",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "fc65e146-a614-4c08-8d4d-9371742c8b79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26ae9299-92a0-4b24-af24-fcd7f0cbb88d",
        "cursor": {
          "ref": "77766789-c08c-4be9-aba5-fe4b618b77e1",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "5fade168-e704-4101-bdbc-0152c9386a1f"
        },
        "item": {
          "id": "26ae9299-92a0-4b24-af24-fcd7f0cbb88d",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "6b6105f3-fdd7-4ff9-b854-4cf91f3be209",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "898a94c1-5cb6-444f-a7e6-6eff947fad5d",
        "cursor": {
          "ref": "ece0eac6-88a4-45d6-a55f-783f4466d638",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "0f58d2f6-1db8-4f8f-b0e8-dd6ebd83ab74"
        },
        "item": {
          "id": "898a94c1-5cb6-444f-a7e6-6eff947fad5d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "53018852-8201-485e-94d6-89d22122fb95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02adffaa-a8f0-4d1b-982e-e48d57b15386",
        "cursor": {
          "ref": "7dc76c75-1dd9-44ff-83d4-c9bcd17efa37",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "7eb3fabe-1ccf-417a-878a-f2874a4f8967"
        },
        "item": {
          "id": "02adffaa-a8f0-4d1b-982e-e48d57b15386",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "ea28e511-2fda-4af8-bb2f-a3d7832a5fa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9f4a3fd-7987-42f7-a505-a614f03ff5cd",
        "cursor": {
          "ref": "54d92ca8-e7f2-4b49-bfc3-00918171f1b7",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "dcf50505-fa6e-465e-b8f1-c0829434d73b"
        },
        "item": {
          "id": "d9f4a3fd-7987-42f7-a505-a614f03ff5cd",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "afca050d-d647-451b-bb02-9298705f5ae5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a35ed8d-6af9-463f-9c98-f469a005691a",
        "cursor": {
          "ref": "137eae7c-66d0-4f70-aaf4-b42114453c49",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "090d771f-c464-4360-a5d5-d2f565ebf270"
        },
        "item": {
          "id": "1a35ed8d-6af9-463f-9c98-f469a005691a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c9ccb7cc-25fc-4f2e-bad7-1d151d89941b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6225d3c9-a60f-4a39-ab08-77ef3c64e901",
        "cursor": {
          "ref": "b21089ea-e23f-4d58-99b6-c6a7407e77b6",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "7e1fec90-f2bf-4265-a58c-701a067343e7"
        },
        "item": {
          "id": "6225d3c9-a60f-4a39-ab08-77ef3c64e901",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "0676e3bd-155c-40ef-8f1b-2295cb16b7f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bb3a55c-371b-44a0-9aea-b739e160ba06",
        "cursor": {
          "ref": "f7665767-0b79-4f98-99f1-7fd988eac972",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "f7e589d9-83eb-4b4e-9896-2a1738a99046"
        },
        "item": {
          "id": "2bb3a55c-371b-44a0-9aea-b739e160ba06",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "ebaa3416-6ce7-411c-877a-e90867bd014c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "099ea927-ee8d-4f4c-887d-26660a49a613",
        "cursor": {
          "ref": "9bc0e8fa-1a06-446c-9180-0a55b74cf838",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "d2364642-b1ba-4916-9485-901671fbc357"
        },
        "item": {
          "id": "099ea927-ee8d-4f4c-887d-26660a49a613",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f8be3eb6-4bf4-42a7-9d31-c0e9cd9af3bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f0b538a-da4c-4a31-ace3-7757da0b487c",
        "cursor": {
          "ref": "a613df85-e23d-4116-81c7-099ca627d98a",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "38d4c99e-8743-48b5-afc1-4c4c6a23476c"
        },
        "item": {
          "id": "8f0b538a-da4c-4a31-ace3-7757da0b487c",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "e84c3ca0-ba7e-4aa0-8297-c389436cf1d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a59f803-dc00-4871-9bc1-6f7db9ec33d4",
        "cursor": {
          "ref": "bea01920-df89-416f-8142-6e05b3ed4201",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "2e5dcad9-eada-492d-a354-a74a597bf2b5"
        },
        "item": {
          "id": "7a59f803-dc00-4871-9bc1-6f7db9ec33d4",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "aab6ba56-93e5-4add-84d9-d71616620d4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec241c01-45ee-44c6-9b9a-b38d78de5d90",
        "cursor": {
          "ref": "1c6ae3db-0234-40fb-aef4-7a6a0faa450f",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "da38abe6-caa3-41ac-ab39-806e9bb653ec"
        },
        "item": {
          "id": "ec241c01-45ee-44c6-9b9a-b38d78de5d90",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e2ffba58-e6ab-444c-bf9f-c0647fcedc1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "043026b0-f69c-444e-a3f9-4ec954d43cc3",
        "cursor": {
          "ref": "90bf6185-54fb-43f8-bfcb-b1b2975ee89e",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "87b85828-89ae-4514-b32a-b03b53731c63"
        },
        "item": {
          "id": "043026b0-f69c-444e-a3f9-4ec954d43cc3",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "2ea9be90-9e42-480f-847f-4bb4380a6662",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fee2b973-851c-4c00-99ce-34667a657d32",
        "cursor": {
          "ref": "7b25a761-0685-48c8-a5f2-91d4ac873f55",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "79328ef1-8a82-4ae3-8311-c9d4a282d6cf"
        },
        "item": {
          "id": "fee2b973-851c-4c00-99ce-34667a657d32",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f169d9da-d96b-43a6-a6a5-605850c0a3ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2851b1da-865e-4b3c-80f8-1eef0a46a62c",
        "cursor": {
          "ref": "c2b409b9-c699-44f2-bdcd-7b71b6e5e018",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "d376fcf0-5667-4a32-96ef-840fb72dd34a"
        },
        "item": {
          "id": "2851b1da-865e-4b3c-80f8-1eef0a46a62c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "5ab9080d-1f9c-4db8-b59a-9576e73415ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9e83709-6d02-4252-b4cf-9a3810ab5cea",
        "cursor": {
          "ref": "1024f2ef-f5d4-4498-b90a-29db0192dd49",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e7f62eac-7b91-4964-ae5c-0fe7043c13e0"
        },
        "item": {
          "id": "c9e83709-6d02-4252-b4cf-9a3810ab5cea",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "3c581005-ef5f-46a8-8247-189d79e2289b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97586ac4-565e-40d5-9fe4-4188343cd9c0",
        "cursor": {
          "ref": "1a7d9892-561c-45f1-8f51-b4b4d868541a",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "0f235b40-eb8a-4f44-828a-6b2c672bbc70"
        },
        "item": {
          "id": "97586ac4-565e-40d5-9fe4-4188343cd9c0",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "641c6952-3abf-4558-8633-649cd0e5ba99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d668041-426c-4a1a-a3be-c13057ddecb5",
        "cursor": {
          "ref": "3ae2fb64-1dd6-4721-9785-af22e3361c64",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "9573d281-6f87-4b05-baf8-5e24c3e9039f"
        },
        "item": {
          "id": "7d668041-426c-4a1a-a3be-c13057ddecb5",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "2248342f-fc6d-4c56-8e0d-464d2416c46b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "745b0eae-1fa4-4f8d-9a1f-7d22af30438e",
        "cursor": {
          "ref": "9b4454f8-d7db-43b2-8e30-29681d70d18a",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "0744c8d5-e874-436c-937f-e05f36401f82"
        },
        "item": {
          "id": "745b0eae-1fa4-4f8d-9a1f-7d22af30438e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "6cf70341-f9e8-4310-9a9a-6d0e72419f7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fe07bff-988a-4c7d-981c-8e2154d5b475",
        "cursor": {
          "ref": "9fce33e4-3d66-478a-9420-c71b1cced6c9",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "27c3416c-99a2-4215-a632-506639fe6589"
        },
        "item": {
          "id": "8fe07bff-988a-4c7d-981c-8e2154d5b475",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "dc010e5c-55cc-419f-92c7-8283a23793ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c01200a5-6533-45c2-ab94-420ce33d0bfa",
        "cursor": {
          "ref": "76ac24ff-0482-4c1f-9968-451273887b09",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "4a8a2995-91df-4fda-86e1-35a6c8752b04"
        },
        "item": {
          "id": "c01200a5-6533-45c2-ab94-420ce33d0bfa",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c8a2c118-5201-4520-9436-45447ad9261c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b6114f5-e32c-4b42-81c1-617646837a08",
        "cursor": {
          "ref": "57c34a32-4540-4ae2-ad49-fda47eb78ab6",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "de2b35f2-3015-4c33-8f60-5610ee865793"
        },
        "item": {
          "id": "7b6114f5-e32c-4b42-81c1-617646837a08",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "db24083a-cc7b-47cc-8709-5fc3c5104b5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c76f27d6-e4a0-4569-a4b2-f2eb5ee0fdd5",
        "cursor": {
          "ref": "d7771b6c-b744-4dfa-aa3d-5722eb214479",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "19721250-af9d-43c4-a89a-599778df66bf"
        },
        "item": {
          "id": "c76f27d6-e4a0-4569-a4b2-f2eb5ee0fdd5",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "e8925d7f-b71d-4ae2-91f0-a7d02bcd2c7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbd154be-39a0-46fb-8dbc-3ac857ae7790",
        "cursor": {
          "ref": "6afb595a-9614-41dd-85bf-7de53091178a",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "5e3bd496-0cf1-4dcb-b38a-bc24a6d9d2b7"
        },
        "item": {
          "id": "fbd154be-39a0-46fb-8dbc-3ac857ae7790",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "355474f7-0fa8-47fc-b486-e10330d57c9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f15e010-1ee0-40c2-a3fc-2902590c38bd",
        "cursor": {
          "ref": "c2588557-4499-4070-80f0-cf298828f286",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "3b6178f5-328d-4606-b3e1-35ce9187d698"
        },
        "item": {
          "id": "0f15e010-1ee0-40c2-a3fc-2902590c38bd",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "7f6fc431-8318-49ed-b664-4928529c5eb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f80b5d0-43a1-4b30-a1a1-4c9a9f12b56a",
        "cursor": {
          "ref": "ded18719-7740-457c-9127-b9c59ccdc871",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "cc080ecd-f6ed-4458-b734-2e31c2420f35"
        },
        "item": {
          "id": "0f80b5d0-43a1-4b30-a1a1-4c9a9f12b56a",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "8b677c5c-5ef4-45d0-aa42-aed74902d8b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74d60c3f-8d4a-4cef-b19f-9d0a9771e727",
        "cursor": {
          "ref": "60ab0a33-bdee-4878-a6ba-8c5f9ea9cf75",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "c8a7497c-6968-4e7f-95d4-efcc4d56f7ef"
        },
        "item": {
          "id": "74d60c3f-8d4a-4cef-b19f-9d0a9771e727",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "59fe9a88-2f54-45de-9e2e-3c39012bfe91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57839e8e-a93e-42e8-a740-58530c5b69ad",
        "cursor": {
          "ref": "c108e2cb-e3bb-425a-93a2-9444192b4905",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "77df1783-52d2-4744-afbd-31940fa19775"
        },
        "item": {
          "id": "57839e8e-a93e-42e8-a740-58530c5b69ad",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "5571656c-94be-4eee-a334-09a7c4db1297",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a02f523-8ee0-4a69-b276-1ed43fe7811f",
        "cursor": {
          "ref": "e08da42a-f32f-4108-a689-349b1f87dfa0",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "65f86607-c871-48d4-9ea9-8e4a3cf5c70a"
        },
        "item": {
          "id": "3a02f523-8ee0-4a69-b276-1ed43fe7811f",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "4a38c29b-10a1-4d8a-a362-1146c2e7a685",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1c912e3-1f22-429f-bb9e-9727da594a71",
        "cursor": {
          "ref": "b3fca0eb-042e-4abe-9d29-9055d1045969",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "779bfafd-39a3-42f2-b5ac-1bf048aa6cc6"
        },
        "item": {
          "id": "e1c912e3-1f22-429f-bb9e-9727da594a71",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "07a74663-a165-46d4-a9a0-1ac4720f5a92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b458739-0dfd-476e-9393-9f7a561dff98",
        "cursor": {
          "ref": "1aafe7ae-6657-4317-9a88-1c64448bc166",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "745d329a-99e0-4d3d-ab20-2aa1e5938986"
        },
        "item": {
          "id": "1b458739-0dfd-476e-9393-9f7a561dff98",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "6d21cfe7-ca5d-4927-9aa4-0d595d328085",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f29a325b-e5ce-45ba-a465-fea5f9a56658",
        "cursor": {
          "ref": "b2d84607-1100-4101-a4ea-d3e551ef4508",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "0f98d31b-6db9-4b71-9bcd-e4a1e8188032"
        },
        "item": {
          "id": "f29a325b-e5ce-45ba-a465-fea5f9a56658",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "35ff5c26-ddd1-4eca-a7fb-d6797dfbd5b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7357f596-43ac-41e7-828c-7e8bf0ca96ff",
        "cursor": {
          "ref": "c0c97d9a-f9f7-46cf-bb82-a2a11116f75d",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "86547d33-e43b-4364-a95e-0467d7fbda76"
        },
        "item": {
          "id": "7357f596-43ac-41e7-828c-7e8bf0ca96ff",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "91bef6b6-c6f6-4db1-953b-843905f4aaf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35edd1be-bb93-473e-bd7a-15053e684197",
        "cursor": {
          "ref": "b75baa1d-6c3e-449f-afd8-fa65a6c8813c",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "cd2b390e-7f4f-4c60-912f-e0d56c3bc8d5"
        },
        "item": {
          "id": "35edd1be-bb93-473e-bd7a-15053e684197",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "0ce8998b-22cb-401f-9e27-5fdff088cf11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02e25df5-cfb0-4726-bace-897e70da2eca",
        "cursor": {
          "ref": "36db7aaf-cd0a-4157-9dc9-d9ccdc18812b",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "19e85895-9ed6-490b-b321-f889d21c19c1"
        },
        "item": {
          "id": "02e25df5-cfb0-4726-bace-897e70da2eca",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "c829848e-1549-4afc-b04c-f8017a3ca89f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2705684-76a8-4296-81d4-d07f8a7f7679",
        "cursor": {
          "ref": "3cd27067-60a2-47fe-8bd4-caa700b3dd62",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "e2e62acf-1f23-4366-8484-6a97194499a7"
        },
        "item": {
          "id": "d2705684-76a8-4296-81d4-d07f8a7f7679",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "bdc07e42-f470-4aa6-936e-069e28da110a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4fa8b1f-969a-4ee0-9e71-aee9594ad759",
        "cursor": {
          "ref": "20bef40f-4aa4-4c43-82b8-275635b5bdb0",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "592b2e4e-58ad-456a-ad33-52773b3cd121"
        },
        "item": {
          "id": "f4fa8b1f-969a-4ee0-9e71-aee9594ad759",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "15020b72-5a39-4106-b5dc-939c4047bd06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e88fd440-2fdb-44aa-9402-0de42c916b33",
        "cursor": {
          "ref": "5ded2163-ab11-4e20-a303-d0898f7b9210",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "4f986a0e-a567-4ee5-8d50-3c27b8d801c4"
        },
        "item": {
          "id": "e88fd440-2fdb-44aa-9402-0de42c916b33",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "1896152c-3591-4beb-8d80-824ff537a2ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e1075b0-a1e5-431f-a8a9-f8a1520495e2",
        "cursor": {
          "ref": "36cdb9a6-4a03-4b49-ac28-9f0d7959c618",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "5f8f1692-9715-47e9-be77-6deb399514a3"
        },
        "item": {
          "id": "1e1075b0-a1e5-431f-a8a9-f8a1520495e2",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "5da34d02-ff9e-4bbf-8b03-49fa7810ef84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da0026cd-6fe5-427f-a3b7-d2bb876540a3",
        "cursor": {
          "ref": "4503bfcf-2389-4cff-9365-66d3b445c118",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "4a73dd8f-52ac-4fa5-a0cd-848171088f4e"
        },
        "item": {
          "id": "da0026cd-6fe5-427f-a3b7-d2bb876540a3",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "6c747b63-bf3d-4398-9cda-ce6e532ff02c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5b9aa77-cb1d-4534-857c-f21d00e98019",
        "cursor": {
          "ref": "209217de-c9a7-4560-a4a6-18f0f5392e69",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "f198c874-ea4f-4251-81fb-e2b1c223b1e7"
        },
        "item": {
          "id": "f5b9aa77-cb1d-4534-857c-f21d00e98019",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "a2b5a51b-f286-4c34-8e92-1eeb49376b44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 143,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e89a6c1-2cfe-40c2-8c90-b9f5109f8704",
        "cursor": {
          "ref": "274a206a-87d5-46b5-9d9e-4b2510d419ab",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "65062984-1d46-4f08-bf73-5dd42a02b6a7"
        },
        "item": {
          "id": "6e89a6c1-2cfe-40c2-8c90-b9f5109f8704",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "3378bed1-2dcc-4e44-9de2-8c3d46cac0b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4de3e232-7053-4d49-9774-bcee34b6c241",
        "cursor": {
          "ref": "d7f855f6-1238-4562-b7f6-915be7d7701c",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "e8bfa573-d0f7-4697-92a8-4f5cd943efa7"
        },
        "item": {
          "id": "4de3e232-7053-4d49-9774-bcee34b6c241",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "29f76922-73f0-4546-9a36-9c6694703e70",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae7ce897-12a8-4693-bdc0-dbac2877fa6d",
        "cursor": {
          "ref": "d7f3acc3-18bb-4b08-839c-c408dddd3614",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "07571de2-f28d-4355-a1a4-533f080d71bf"
        },
        "item": {
          "id": "ae7ce897-12a8-4693-bdc0-dbac2877fa6d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ac74c897-74b4-4daa-8455-43115efddc51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f7a1b70-458f-413b-9624-862dc775a45e",
        "cursor": {
          "ref": "d1e00847-5362-4930-9f0a-db915c49dcba",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "db9fb97b-4683-4518-987e-ea92f726e844"
        },
        "item": {
          "id": "9f7a1b70-458f-413b-9624-862dc775a45e",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "4da368fd-1455-4a68-89bb-166d6381f9e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59d7416d-e271-4597-b7d6-8b5fb32400b8",
        "cursor": {
          "ref": "66718191-2822-4d35-a590-fff180b85e7b",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "4172c1fc-5c44-4257-9733-a2732c95cde9"
        },
        "item": {
          "id": "59d7416d-e271-4597-b7d6-8b5fb32400b8",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "862896c7-55c1-4685-b714-5b4e7d0d5afe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a76e1cb-dbcd-42ea-a39a-f428aeef1c30",
        "cursor": {
          "ref": "318b54c5-2149-4c7f-a087-adfc39f478b4",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "e8973cee-b2eb-4b35-ac6e-991a4eb58a60"
        },
        "item": {
          "id": "5a76e1cb-dbcd-42ea-a39a-f428aeef1c30",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "e6231490-f605-47c5-be3d-00e22222ffb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9adfd4bf-0c4c-46b2-8e9e-17e745d09745",
        "cursor": {
          "ref": "a78b2f3f-8d14-45c4-ae11-60b934a066a6",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "d2b28b6d-9917-45b1-bd6d-89889542c443"
        },
        "item": {
          "id": "9adfd4bf-0c4c-46b2-8e9e-17e745d09745",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "ea4543df-52d7-4fa5-8289-f64eac4e6524",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2a1c41a-60f7-4367-b150-e15910afd289",
        "cursor": {
          "ref": "1b12c459-9df3-4dd1-b97d-5578b985c259",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "816d7be2-fa83-4300-907b-0d71d5ff8cc4"
        },
        "item": {
          "id": "c2a1c41a-60f7-4367-b150-e15910afd289",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "c3b08aee-cb40-43f4-8181-984195ad7609",
          "status": "OK",
          "code": 200,
          "responseTime": 104,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "7e1d3e02-0ce7-48ec-a4a8-1dbcd86e1b89",
        "cursor": {
          "ref": "f172fe89-0274-4485-bcbf-24f6870f1c39",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "dde56f0b-d498-4ad3-8fcb-eccdf7fa370a"
        },
        "item": {
          "id": "7e1d3e02-0ce7-48ec-a4a8-1dbcd86e1b89",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "a5c11259-1227-4f18-b94c-25bef415bc74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "974cbc13-3c0d-4425-8c1e-c8850cf451fc",
        "cursor": {
          "ref": "9e325c4d-cceb-4827-b63e-3195f55e7b54",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "36ef50bf-718a-4a91-9096-6788f9f1b0c4"
        },
        "item": {
          "id": "974cbc13-3c0d-4425-8c1e-c8850cf451fc",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "a44a2088-59d0-4c2a-b017-ed44a3e09800",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5da1c7b1-72fa-4469-8020-f485330e262e",
        "cursor": {
          "ref": "e001b5d3-4e01-412e-90da-362256f571d2",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "e6a9636b-2022-4b52-b975-10ecc3740954"
        },
        "item": {
          "id": "5da1c7b1-72fa-4469-8020-f485330e262e",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "52689e99-7bb0-4dac-a4a9-3240876769bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b78c486-863b-435b-bf03-3e5e773fc0ff",
        "cursor": {
          "ref": "02620172-1f47-47db-bc1c-17dd1503e7ea",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "7365aaab-8f9d-4398-a459-916aa739fd42"
        },
        "item": {
          "id": "3b78c486-863b-435b-bf03-3e5e773fc0ff",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "b89cb256-6d7a-4c9f-b269-b94c56676d5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63cdc96c-7185-4305-aa33-c176ceac7998",
        "cursor": {
          "ref": "ae116dde-a72f-4927-8be8-b25c45933c9b",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "0a145474-97ec-4933-b357-d675cb286020"
        },
        "item": {
          "id": "63cdc96c-7185-4305-aa33-c176ceac7998",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "269262cd-e3ba-4dc4-9f1a-71b29e3a51d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82f971ca-c1d7-4b8d-9225-46362e385996",
        "cursor": {
          "ref": "d2afa34a-ca82-451c-aabd-1ce146ac0a5f",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "fa94e093-7d4a-4551-b7d1-3facb047485b"
        },
        "item": {
          "id": "82f971ca-c1d7-4b8d-9225-46362e385996",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "0dbac0f8-b434-494f-9921-2f01f7156274",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eb005bb-ead8-488e-b7cd-2448d45c2959",
        "cursor": {
          "ref": "3ad393b4-f9c0-459b-925d-0b18e52d9a0e",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "84b09084-be19-488e-bac6-d47cbf3fe2c8"
        },
        "item": {
          "id": "4eb005bb-ead8-488e-b7cd-2448d45c2959",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "2bf632aa-5b59-4f6f-aca9-bcd2b7ca6708",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42b23a19-fc61-4166-8c1b-edaa939668bd",
        "cursor": {
          "ref": "662edc9c-0654-4e50-8433-1f312fb3ab30",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "2a4df0ba-23e0-4db9-9840-36eadc644a12"
        },
        "item": {
          "id": "42b23a19-fc61-4166-8c1b-edaa939668bd",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "2dd47b5a-8162-4693-b97b-6e6f6bb6a311",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0a970de-424d-4c30-9896-b5154bb70539",
        "cursor": {
          "ref": "21736e7a-72dc-40e8-9f8b-f95abaa2a580",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "24971429-859b-4e86-b9cc-7fa4dac136cd"
        },
        "item": {
          "id": "c0a970de-424d-4c30-9896-b5154bb70539",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "fa1f72ca-a50d-41e6-8823-051886322830",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1034cb76-0ec3-4e67-a924-795fba30a38f",
        "cursor": {
          "ref": "816e4ac9-1823-41f5-a070-48bf6cb7ff0f",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "f064cee0-46ff-4168-82d8-458eae8570c7"
        },
        "item": {
          "id": "1034cb76-0ec3-4e67-a924-795fba30a38f",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "ce465c05-c944-4eb6-8bd8-24b6bd6218da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8abb25ad-d364-4b58-9346-091f0f43f51b",
        "cursor": {
          "ref": "002807a8-0ba8-459f-99b6-4ca9e6eb0650",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "b3aeac0e-6f00-4714-83ea-696511277f25"
        },
        "item": {
          "id": "8abb25ad-d364-4b58-9346-091f0f43f51b",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "d0764e38-d324-467b-b9fb-447f0c8e45e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d739db93-0b57-4053-b78f-276f35342888",
        "cursor": {
          "ref": "ab3c982d-c69d-4936-8c4b-306a5371e1ce",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "92579d8b-5622-4d59-8656-64095a1e9794"
        },
        "item": {
          "id": "d739db93-0b57-4053-b78f-276f35342888",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "125b943a-84bd-43e0-81a4-b7f3ed7cee78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f718d11b-5328-46eb-9257-6b41718db421",
        "cursor": {
          "ref": "9d72143f-a6a8-468d-bba6-dcf848126222",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "999c95bc-15b2-4932-a21a-64f39564f083"
        },
        "item": {
          "id": "f718d11b-5328-46eb-9257-6b41718db421",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "9787201d-e6cd-4143-acc0-fbc5e5c01613",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9cfe149-047b-4189-8d69-08f37a060d0d",
        "cursor": {
          "ref": "801ec40e-4885-422e-8486-4cc56898427d",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "359fb945-cae2-4c1f-97d4-a42cb70a2862"
        },
        "item": {
          "id": "b9cfe149-047b-4189-8d69-08f37a060d0d",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "03158935-9a7c-4451-ad9a-cca3b0394504",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e83be57-fec6-4685-8a3a-6008e39f8a6d",
        "cursor": {
          "ref": "2ae6ec38-44c4-4e68-8be2-f83d6d28679d",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "647c7926-233e-4d32-ba60-33187e6d5749"
        },
        "item": {
          "id": "8e83be57-fec6-4685-8a3a-6008e39f8a6d",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "341fe77f-221d-4387-b544-1a75f2dea55e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d58e77c4-3b2d-4d22-9293-c23838f7f565",
        "cursor": {
          "ref": "70b354ed-1515-42f5-9a35-596dc4ff8f02",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "ec1c3def-062c-4c8d-9dd5-41ea158d8b44"
        },
        "item": {
          "id": "d58e77c4-3b2d-4d22-9293-c23838f7f565",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "81248cc5-23e7-46fa-823a-812964fef016",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f5ef589-fb4c-4a15-9968-605da5134116",
        "cursor": {
          "ref": "4c1d3434-984c-4b86-b28b-74409e606325",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "e3b3b88d-2548-408e-808e-a2cce3d8034f"
        },
        "item": {
          "id": "8f5ef589-fb4c-4a15-9968-605da5134116",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "631b74ae-2246-4902-9be6-89432036c064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58ce21d1-b98e-4366-9a75-d08eadefa386",
        "cursor": {
          "ref": "662d7933-e877-4b6a-bac1-d4ca707aac38",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "48b05d94-9a8a-4a04-99e0-5e830176a9a9"
        },
        "item": {
          "id": "58ce21d1-b98e-4366-9a75-d08eadefa386",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "fdad8cea-e443-45cc-bce0-35b448448120",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bec0995c-1157-43f4-872d-586947783a4f",
        "cursor": {
          "ref": "eb9a6cea-9667-47c1-b6d7-3b836a2feb43",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "2316b296-de68-469c-9c21-a9ae779987c3"
        },
        "item": {
          "id": "bec0995c-1157-43f4-872d-586947783a4f",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "bb10efdb-0c2a-4430-8088-39ef4fa2b7ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "265785f1-39d7-41d2-9eb0-a0791a623d6f",
        "cursor": {
          "ref": "514adf5b-713c-458e-859c-6f2a15d71dfe",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "9a2c618c-7631-4892-bb08-3c52b4605084"
        },
        "item": {
          "id": "265785f1-39d7-41d2-9eb0-a0791a623d6f",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "916aaa74-1c1d-492a-8bd3-698a2df51614",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf05de41-e7d9-479c-b4eb-25518244fa69",
        "cursor": {
          "ref": "0619403e-c7a2-47f2-9a1d-3e13c9666d94",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "e3976d4c-127e-4fff-8619-973d0f3f050d"
        },
        "item": {
          "id": "cf05de41-e7d9-479c-b4eb-25518244fa69",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "78162223-6ecd-4cb3-ab4c-7d33579bbdc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c2e442e-5ab1-4483-8c09-3c6d2a5017e1",
        "cursor": {
          "ref": "861523e9-7eaf-418b-b7de-4309c2e3a44e",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "6e6c704e-94f7-4075-99fc-cac4d62b304b"
        },
        "item": {
          "id": "9c2e442e-5ab1-4483-8c09-3c6d2a5017e1",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "515f3a16-c98c-4a92-97a8-9fbc73e41829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea8952a8-8b20-4437-9c32-f518a949c680",
        "cursor": {
          "ref": "d55b64a1-2be9-4c0f-bcce-de5459284df0",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "24d6ddb5-50e2-41f9-93d5-8081f0fc84d5"
        },
        "item": {
          "id": "ea8952a8-8b20-4437-9c32-f518a949c680",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "88b7b64f-a014-4789-ac3e-3b7d12668fd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb594a50-04d4-4d6a-bad2-a212d7eb9d7f",
        "cursor": {
          "ref": "bb4130ac-feec-4bb4-9a36-a7bccc91f4d6",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "078ee247-f7be-49bd-8a7b-9535ac926838"
        },
        "item": {
          "id": "cb594a50-04d4-4d6a-bad2-a212d7eb9d7f",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "6ee291ac-f070-491b-a498-adeb6d7fba7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a622a3b5-9fec-4441-9aa4-247815a5da7a",
        "cursor": {
          "ref": "9790cfe1-1bd9-4cc8-abf2-552a6c153a4c",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "ae844ce8-bc85-4430-9067-926e826f71b0"
        },
        "item": {
          "id": "a622a3b5-9fec-4441-9aa4-247815a5da7a",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "1602f8a8-e039-426d-877e-0a07e94366d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a56b9bd-e8a5-4264-939c-d64862a3ddff",
        "cursor": {
          "ref": "617c2a3d-ce46-468b-bd14-cc2a22ac5ff4",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "0128f3ca-c0c6-4c22-b7c9-7a2143c135ed"
        },
        "item": {
          "id": "6a56b9bd-e8a5-4264-939c-d64862a3ddff",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "97ce2dcb-37be-41a5-88d3-16f3f1ec5a25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88bfd580-f016-4b9b-a0a0-9576df87b96c",
        "cursor": {
          "ref": "c3ecf69f-454d-49dc-b0e1-d2d31f1b82db",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "1e720843-a3d1-4193-9b02-52c8f450e524"
        },
        "item": {
          "id": "88bfd580-f016-4b9b-a0a0-9576df87b96c",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "30d9612b-6399-4460-aa88-48cf13ff200d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7580128-a607-44dc-97fc-e29bd42bdcf3",
        "cursor": {
          "ref": "3a1f007b-e215-4a32-9a46-499903034e07",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "58b67ef5-8e75-49fd-a337-d75138abfe24"
        },
        "item": {
          "id": "f7580128-a607-44dc-97fc-e29bd42bdcf3",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "bc09798b-c156-417f-99a7-54cad3e5008d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e3e9e34-e890-4ac3-a44c-96b7d785b50f",
        "cursor": {
          "ref": "8ec4d0b5-ff28-4482-b576-b3d15fda67dc",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "79098558-d30f-444c-a5e1-b3c22dcc61e8"
        },
        "item": {
          "id": "9e3e9e34-e890-4ac3-a44c-96b7d785b50f",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "199034c0-e1d3-4092-8fb5-584f3456c982",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ea98811-c876-4f94-b832-5da00504cfb2",
        "cursor": {
          "ref": "2877bece-317e-4749-b383-9dc98cd0b2ee",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "52a95fa0-aa6e-4f6f-99a1-cded0a97f62b"
        },
        "item": {
          "id": "9ea98811-c876-4f94-b832-5da00504cfb2",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "14bc3102-5595-47a8-b954-cc17af627348",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "e27fa642-1cf0-4860-ad52-7d5e67000a0c",
        "cursor": {
          "ref": "11bb6af1-b956-4f77-ba8b-3b862c9a1f11",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "ef6ead0f-ebfb-4368-a61e-d1b68121de0d"
        },
        "item": {
          "id": "e27fa642-1cf0-4860-ad52-7d5e67000a0c",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "13330810-60ec-45d0-aa5f-55e02d3056a0",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "746312c0-90f8-4909-a4e7-6daf4606ba16",
        "cursor": {
          "ref": "09d476fe-f0ec-43be-acfc-6a148497711b",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "8c90ea09-045e-489b-aa5f-b1052d3f912d"
        },
        "item": {
          "id": "746312c0-90f8-4909-a4e7-6daf4606ba16",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "3df3d940-b728-45c3-a7ca-8d8dc3ddd102",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "ae836aaf-fe4c-4841-8b5c-bdeaf76d980e",
        "cursor": {
          "ref": "2d7df2fa-b11c-401e-8cb5-cdee6eb28922",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "2b71e7ee-70e9-4b80-bb55-0ad54c9f5d48"
        },
        "item": {
          "id": "ae836aaf-fe4c-4841-8b5c-bdeaf76d980e",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "40830ec2-9000-4940-a13b-9b8f734159a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59c57aa7-a34e-4b3f-841a-14cbbe34a9bd",
        "cursor": {
          "ref": "8dacf931-5fda-452c-82b2-2695b160ea7d",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "4c98b768-67c6-4c1c-89af-7c80545fb19f"
        },
        "item": {
          "id": "59c57aa7-a34e-4b3f-841a-14cbbe34a9bd",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "c99cc61e-9931-45f0-83df-7b4c97bc7fb0",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "08e660e3-aedf-45ec-a3d1-ec660b0e745c",
        "cursor": {
          "ref": "07e948e9-4396-4547-bda2-1af13403990e",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "a4f0eb1b-ab8e-422e-9fd7-ff6e79dadfce"
        },
        "item": {
          "id": "08e660e3-aedf-45ec-a3d1-ec660b0e745c",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "db00971f-dd26-409a-acf9-c7558612131b",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "4d955e1f-40ac-4f86-81f2-9c8ae230cccb",
        "cursor": {
          "ref": "08a5a5f8-499e-408d-bdca-7a71e618cbc7",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "f0829b78-890c-4cb4-95fe-e52194d00698"
        },
        "item": {
          "id": "4d955e1f-40ac-4f86-81f2-9c8ae230cccb",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "ec3a224f-3f57-45cc-8bd1-a248966c1d67",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "fe8401a9-3032-4e07-8168-281087a0139d",
        "cursor": {
          "ref": "84927c4f-3a0d-4332-a510-9c15e9b68f85",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "9b8b8650-e65a-4316-9e94-d3136c1c8a5f"
        },
        "item": {
          "id": "fe8401a9-3032-4e07-8168-281087a0139d",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "3cfa7185-5511-4dcc-bba7-3c93a782340e",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "7ef9116a-4d4f-4f65-b881-8be964ce1bf7",
        "cursor": {
          "ref": "d801805b-7514-466b-8e06-eef0229b361a",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "64b9f097-0b9c-4e40-8922-3509509c6afb"
        },
        "item": {
          "id": "7ef9116a-4d4f-4f65-b881-8be964ce1bf7",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "b087006b-22fc-4a9e-bbef-5b597e456a92",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "12e60dc7-ae3e-436b-82a0-450ba13e5f68",
        "cursor": {
          "ref": "c5ba3e8d-e3ea-4f89-9708-96db313901ab",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "fcd70ee8-3e42-489b-8a2e-95ebe5673b47"
        },
        "item": {
          "id": "12e60dc7-ae3e-436b-82a0-450ba13e5f68",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "5b7f268e-c697-44e9-84eb-48d8ee97bd50",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "6a5c7c43-5b54-42d4-9391-7174effb2ddd",
        "cursor": {
          "ref": "c6ba976c-77a3-4652-bc89-9a17adaaf394",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "e7625470-e17f-4b06-969b-f0257a211111"
        },
        "item": {
          "id": "6a5c7c43-5b54-42d4-9391-7174effb2ddd",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "5fc67172-09c9-43a3-b9e0-b65d57713bbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec8d8ad3-2883-4c7d-84b0-1df77e45279f",
        "cursor": {
          "ref": "58177173-cdbd-4cd4-8b5b-8d837eb844e0",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "462468f6-b883-4968-b507-27a0c2824f05"
        },
        "item": {
          "id": "ec8d8ad3-2883-4c7d-84b0-1df77e45279f",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "08a8c8f2-12a3-469b-bee8-94619cac1c12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d511eec-6cf2-4650-a97a-3397ec505e9e",
        "cursor": {
          "ref": "34bfb977-c918-43c8-b9b5-16ceb0bf06e1",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "266acaf8-8b9a-4053-a5e4-09cf731d2ccd"
        },
        "item": {
          "id": "2d511eec-6cf2-4650-a97a-3397ec505e9e",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "fc5c6e40-e225-4fbe-a0ac-81d675897338",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74f350a9-897a-4911-a979-a345b819283f",
        "cursor": {
          "ref": "328e22f5-2e9e-4b9a-9240-dc34eb6b9c16",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "468389a8-fa9e-4036-b123-06bd15c5c0de"
        },
        "item": {
          "id": "74f350a9-897a-4911-a979-a345b819283f",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "2b491c1f-cf85-48d3-b1f0-5c13a9ff102a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7021efd8-9c77-4b32-a352-0d0d55aacd56",
        "cursor": {
          "ref": "081736d4-fa62-434b-b192-9332d3a6e943",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "283e0750-74be-4594-8e45-0aeb94678cbf"
        },
        "item": {
          "id": "7021efd8-9c77-4b32-a352-0d0d55aacd56",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "b8e2af38-b5ff-4211-9a05-22bcd64ea85c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d09f5ad2-5f71-43f5-b577-61344ba38c3c",
        "cursor": {
          "ref": "1f9bd3d4-9e37-42c7-900f-d6390f3b05a4",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "854e1807-6726-42dd-a006-8e9f2201a7b9"
        },
        "item": {
          "id": "d09f5ad2-5f71-43f5-b577-61344ba38c3c",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "df5863e9-30b1-401b-9848-d190173db3ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7b26b6c-ec62-4cad-994b-53ba2011045f",
        "cursor": {
          "ref": "3e15a0ef-85e0-4c7f-9d19-51add70aa684",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "57cf169d-b1a7-4f22-87f3-b38d8d16e90c"
        },
        "item": {
          "id": "a7b26b6c-ec62-4cad-994b-53ba2011045f",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "6c7ff29d-7250-4809-829b-fff1a749894b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5606514-9ee0-4c3d-ba90-81d323fee99a",
        "cursor": {
          "ref": "71622bcd-4e3d-46e3-a641-745a25f1bb85",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "a641a026-6412-4433-9fc1-bd1c63427f36"
        },
        "item": {
          "id": "c5606514-9ee0-4c3d-ba90-81d323fee99a",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "5a29aa64-b36b-4b60-bd93-66cba1c3d428",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "047e85f8-79c1-45bd-b3af-0152043cc854",
        "cursor": {
          "ref": "22a94dff-ec5f-4917-8297-b74f611db187",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "c91a585e-deb2-4c5f-8c04-32c7c8153aeb"
        },
        "item": {
          "id": "047e85f8-79c1-45bd-b3af-0152043cc854",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "72c14c5c-f350-4217-aa95-60ec775d314d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cdb3b17-fd5e-43b3-8b70-d11dd8efcbd5",
        "cursor": {
          "ref": "59a14385-2f8e-4c35-aa56-1bc7a27815ab",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "70bf917f-3582-4160-8466-903d3150cf2d"
        },
        "item": {
          "id": "5cdb3b17-fd5e-43b3-8b70-d11dd8efcbd5",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "f4359257-2be7-46e9-b2c0-f563c5f64ace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d634a38e-f065-4d50-84c3-fdd62aafd9cb",
        "cursor": {
          "ref": "44bf7141-8edc-470a-a4a0-b674ae93a1f4",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "55f9f16e-b565-41b5-a450-7e3be0ea2b1e"
        },
        "item": {
          "id": "d634a38e-f065-4d50-84c3-fdd62aafd9cb",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "101775ba-d37a-4e10-a4b0-0c0009b54222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67674566-54e2-449e-ab9c-95c1958ba13a",
        "cursor": {
          "ref": "a401dd3e-4e57-4460-8653-896a5051b4ae",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "f1b3ed1c-aa01-4ea2-a07e-da62bbd53ee5"
        },
        "item": {
          "id": "67674566-54e2-449e-ab9c-95c1958ba13a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "1f01777d-5361-4ad3-99c2-ed2ad5d0a87d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1350612-f7d0-41c3-8700-7addb8cf0605",
        "cursor": {
          "ref": "077f029b-41bc-4ad3-abb9-52e1ab25e6b3",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "7d3b560b-dc4d-4264-bbc0-c1a7864c79b7"
        },
        "item": {
          "id": "f1350612-f7d0-41c3-8700-7addb8cf0605",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "eac3e115-f3ec-4d0a-a711-bde49c411179",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3940a39-93ba-47bf-bc5d-e323c3e0bfb9",
        "cursor": {
          "ref": "e403be69-85d3-4fbb-9349-899e06af8097",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "1b96ddbe-f816-40a5-bf90-25efb6f9a19f"
        },
        "item": {
          "id": "a3940a39-93ba-47bf-bc5d-e323c3e0bfb9",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "3c428e70-389d-4afc-b66d-fd9041884b0b",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "062c32aa-3eb6-49ae-ba3f-3448e769af8e",
        "cursor": {
          "ref": "77cfe184-a173-4d29-8bec-0ee40cd64256",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "65e35d44-af2d-4cec-bd7d-8e98c0a20221"
        },
        "item": {
          "id": "062c32aa-3eb6-49ae-ba3f-3448e769af8e",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "8d856526-7868-4034-b210-1c42af722a88",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "05d384d4-e4cf-43f3-b49d-2a00c49b286d",
        "cursor": {
          "ref": "d06866d7-d8f4-4387-9c80-82c9e890a1b2",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "7433ae25-69ca-41de-9f4e-2151594c79cf"
        },
        "item": {
          "id": "05d384d4-e4cf-43f3-b49d-2a00c49b286d",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "f3ec335e-e2b6-4c99-83be-1661546a4ee7",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "2f1466ab-20f4-4a56-a52d-2f0065f0608a",
        "cursor": {
          "ref": "466fde69-5e5d-41d6-9a49-a200e3164aa7",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "9a860a27-ffb0-45ba-b27d-fe9c49f7d170"
        },
        "item": {
          "id": "2f1466ab-20f4-4a56-a52d-2f0065f0608a",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "72728903-9f46-45af-8cce-191c601f76f2",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "183c4301-5a84-41bc-bb11-a588aaf87de8",
        "cursor": {
          "ref": "b129ed6b-8290-4fdb-bf08-554ae728be64",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "7d00450b-7a27-42d2-a180-e7d4ac04cc7c"
        },
        "item": {
          "id": "183c4301-5a84-41bc-bb11-a588aaf87de8",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "025eac57-c6c6-409e-9829-1aeb45c8c089",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "c1f38c81-95bd-4923-8ee9-62c07ac6c694",
        "cursor": {
          "ref": "f414ac6a-a906-43dc-a9e0-213105e3e0f9",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "fa6135e8-d9c3-4234-8680-8d4325b75a60"
        },
        "item": {
          "id": "c1f38c81-95bd-4923-8ee9-62c07ac6c694",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "5b6c3449-f68e-4c66-be19-55ef4436f1ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9de3c0b8-8746-41de-848c-29bdad4c03ef",
        "cursor": {
          "ref": "6a3f13d7-84a2-4421-8667-e0e4bf21c1f8",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "ca4be051-60f0-49e1-8901-f3cfe0a62e76"
        },
        "item": {
          "id": "9de3c0b8-8746-41de-848c-29bdad4c03ef",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "77d7f2e0-134d-4725-9184-a665f351262d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76e47907-60f5-44d3-ba07-f0e1702b011c",
        "cursor": {
          "ref": "74a46d20-9460-4457-a15f-9152f2ef09af",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "fe697ac7-6fec-458f-9ea6-102ada271438"
        },
        "item": {
          "id": "76e47907-60f5-44d3-ba07-f0e1702b011c",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "8802dd87-0977-47d9-9b5d-5b2a540a97f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a58d06b-7c8a-42b7-bb0a-c4fad53df5b8",
        "cursor": {
          "ref": "c7c0a038-7583-479d-bf69-cecc0b609703",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "1d054ce2-cbc2-4f67-9047-1c500c367331"
        },
        "item": {
          "id": "3a58d06b-7c8a-42b7-bb0a-c4fad53df5b8",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "05f003eb-afb8-4e12-bbd1-fb13458ba95a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32d8e57f-6777-41a5-862d-76df5a1624a6",
        "cursor": {
          "ref": "b19e8d6f-a027-4cc5-bd0b-0b147cd3bdf9",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "1824076a-880a-4d11-88b7-0283da54d21b"
        },
        "item": {
          "id": "32d8e57f-6777-41a5-862d-76df5a1624a6",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ead3ad6f-7176-41ec-83c1-13df80dfdb28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79bf7e83-1543-413a-9c1d-9d465f508d12",
        "cursor": {
          "ref": "cf1e609d-e131-4757-a0fa-8c2a678ad9a8",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "99400a59-464f-448f-9e12-44dc121919bd"
        },
        "item": {
          "id": "79bf7e83-1543-413a-9c1d-9d465f508d12",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "a798db2c-54d9-4507-a518-1de4d5e03d34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54a5b745-4f52-4ebb-8dcd-f0bc7e0de989",
        "cursor": {
          "ref": "59ae7577-6f2c-48e3-a8ef-e2612891791a",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "25ad022a-abb6-455f-9567-c6addf57fe49"
        },
        "item": {
          "id": "54a5b745-4f52-4ebb-8dcd-f0bc7e0de989",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "1e89d58a-b8e1-4c27-8f2c-ca0615629bb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeeae6d7-2f85-43e3-bee5-65107fa0e87e",
        "cursor": {
          "ref": "c30ca031-7bf9-4a91-b145-cc9033740176",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "337d146e-c1ef-4536-a5af-e60ffd0ecc5c"
        },
        "item": {
          "id": "aeeae6d7-2f85-43e3-bee5-65107fa0e87e",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "0381c013-0ece-4cf5-aed7-68660e9273df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "016b1166-845e-4ff6-aceb-b87e9f42d648",
        "cursor": {
          "ref": "42e53dac-83c9-4d9b-aa76-a54831166566",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "4dac3285-8770-4185-ac15-2b1b24dea7e6"
        },
        "item": {
          "id": "016b1166-845e-4ff6-aceb-b87e9f42d648",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "6b4d7a79-1cb3-4ed4-8099-3737e125df95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d157516-1262-4ad8-ac09-0dac80501d1f",
        "cursor": {
          "ref": "bc3c735a-9115-474d-b751-0ea5595e0443",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "23ab43ef-49ed-4915-a14a-26d56286e827"
        },
        "item": {
          "id": "2d157516-1262-4ad8-ac09-0dac80501d1f",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "599cd948-409d-4e55-b166-976eb75a2ebc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4ee9485-1160-41be-88ce-5e168983e61e",
        "cursor": {
          "ref": "f71828bc-bbae-4350-b5b9-a3ceeadd291a",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "34c76616-dd81-4962-b303-ba799e58d886"
        },
        "item": {
          "id": "d4ee9485-1160-41be-88ce-5e168983e61e",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "f5a16757-ecc0-4fa6-b4e1-64b34e2500e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fae7da7-358c-4806-a88a-fe721fcb1973",
        "cursor": {
          "ref": "9a1e9e49-4b13-4d11-86d6-2bcc1b383f00",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "f0eba3f8-bf55-499e-b46d-d943936291e8"
        },
        "item": {
          "id": "2fae7da7-358c-4806-a88a-fe721fcb1973",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "8984b136-cd4f-4b7a-b0f3-1b621001063a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd664295-c9ef-4435-9cd5-64cb489f1ab0",
        "cursor": {
          "ref": "33333069-520b-4885-801b-86db024f4a44",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "f4e91bc6-59fe-457e-aa94-17ff601b9352"
        },
        "item": {
          "id": "fd664295-c9ef-4435-9cd5-64cb489f1ab0",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "5d4ee8f1-f4ec-455f-a1ae-7304200cf992",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b642190-5cf1-46e3-aaea-714c34369334",
        "cursor": {
          "ref": "bf488622-65ac-4a71-ba26-2f4074feabc3",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "d94ef54b-40fd-47a1-b5f5-cc0abbee42af"
        },
        "item": {
          "id": "5b642190-5cf1-46e3-aaea-714c34369334",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "fd8c3993-7db8-4a4b-9c94-5391fb757e3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12e35813-ed6a-47e4-9581-055a428d97cc",
        "cursor": {
          "ref": "b1c7df90-2044-4cd8-8840-681af2068786",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "e0f23953-5427-41c3-9dae-6a8cbb6e8c97"
        },
        "item": {
          "id": "12e35813-ed6a-47e4-9581-055a428d97cc",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "47c1490d-1d0f-4f1f-9248-6a5e69d95d18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f70438a-e1a8-423a-9ea6-2a85ca7b6c6b",
        "cursor": {
          "ref": "ff3720b7-8b1c-4094-9ab2-dd57c91d3192",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "ef6af11c-4fbc-4adb-ad2e-31c9b6e3ce7f"
        },
        "item": {
          "id": "5f70438a-e1a8-423a-9ea6-2a85ca7b6c6b",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "7372f23f-b46e-4e15-b9ad-18de57c6fa11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "130d562a-5e68-406e-9944-716e82572aa8",
        "cursor": {
          "ref": "64750de7-06f9-48fd-8b76-97b0b6031181",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "f3be7cfd-0f63-4450-8571-76855cb5f9e5"
        },
        "item": {
          "id": "130d562a-5e68-406e-9944-716e82572aa8",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "af6c8a2d-67d6-4ed3-bd28-9d9770223edb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7f70ed0-9114-4629-9384-dc475c16b4e7",
        "cursor": {
          "ref": "2d75af84-f3a7-45e8-b760-b959f972a58d",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "f0c5cc36-9255-4224-abc2-48069a4be4f6"
        },
        "item": {
          "id": "c7f70ed0-9114-4629-9384-dc475c16b4e7",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "c56d7e5d-4628-4acf-938a-5bfc88b15f88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbbce05d-a826-4fcd-a8b6-8f14093a6749",
        "cursor": {
          "ref": "607a3841-a2d0-45c1-aba1-cd9d01c1ad06",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "41d3a4f1-50eb-40cb-8d06-86768da38386"
        },
        "item": {
          "id": "bbbce05d-a826-4fcd-a8b6-8f14093a6749",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "6e6fddd1-f3dd-40d6-91a4-fb89595cfc76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "540e2ef3-7aff-4bdc-946a-1ea3177b6c38",
        "cursor": {
          "ref": "9022def0-0806-4a85-a619-9618916bc4c2",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "023f8899-f634-4bdc-94ba-c985a93ca041"
        },
        "item": {
          "id": "540e2ef3-7aff-4bdc-946a-1ea3177b6c38",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "524ac896-6d48-4a85-8cd0-c8e803c7ee13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "636fbc5d-928e-4baa-b9bd-823e75ebae6f",
        "cursor": {
          "ref": "3f831ad9-1e19-4705-b753-4b6d1853293d",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "ae7715bc-c5d4-4816-895e-4278eb27c7e6"
        },
        "item": {
          "id": "636fbc5d-928e-4baa-b9bd-823e75ebae6f",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "a7a5b38f-ca69-428e-8928-5622e1b38a54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc489d58-e9c1-444e-8275-4a51fc4e65ef",
        "cursor": {
          "ref": "4e884e27-8e4d-4c27-b447-d8481332719b",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "04c6bde5-4696-43c0-a8ed-543aed81e1dc"
        },
        "item": {
          "id": "bc489d58-e9c1-444e-8275-4a51fc4e65ef",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "bb2781d2-cb5a-4d80-9601-365b8ca88a8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62eb2f70-b8b0-457f-8859-0675cfecaba6",
        "cursor": {
          "ref": "eea2fcb3-ce06-4819-b13b-c1b92528f0ad",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "4e9c7513-0733-4c9f-989e-ff4d48e1c9e9"
        },
        "item": {
          "id": "62eb2f70-b8b0-457f-8859-0675cfecaba6",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "b0ada3b0-67bb-49c3-9b9b-0fcedd069017",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65925415-3cf7-4bda-857a-07ad45944769",
        "cursor": {
          "ref": "83416d17-681e-4964-aacb-29fd439bd859",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "3ec611e5-822e-4b24-81f6-d558137dc342"
        },
        "item": {
          "id": "65925415-3cf7-4bda-857a-07ad45944769",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "fd6c1350-ee74-46a4-b691-dcca34cd2959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0620195d-eb2f-4f25-8574-8cc5268949bc",
        "cursor": {
          "ref": "3cc47cb8-31ff-4952-a963-22e3ea6a4f25",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "29d7454e-a787-4051-a43c-349acd5630d9"
        },
        "item": {
          "id": "0620195d-eb2f-4f25-8574-8cc5268949bc",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "4c5a82da-6ff1-482f-bf33-1ac9fdbbe311",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4d33dad-a52c-49ae-ad9a-cdcc7766c972",
        "cursor": {
          "ref": "d559de71-ce52-460a-b9a7-665726491a0b",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "15383504-9156-41e1-a158-da0253fafd75"
        },
        "item": {
          "id": "b4d33dad-a52c-49ae-ad9a-cdcc7766c972",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "0cd6731c-acc6-4168-b342-0fa53865c7b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63141feb-59f7-4243-bf7d-ebce4e73c13e",
        "cursor": {
          "ref": "169c95db-28ec-4a6b-ac2a-6a8876b4e640",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "ca8f8c66-2caf-4754-bf2d-cf00b6df887c"
        },
        "item": {
          "id": "63141feb-59f7-4243-bf7d-ebce4e73c13e",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "16a72f35-4933-4c85-aaf1-c3ab29068f61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53ae2ebc-e96d-4ec6-934c-dd8c07bf0d5a",
        "cursor": {
          "ref": "04c4abf7-113b-4473-a3dd-8674f946963b",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "159fab32-59cd-419c-92bb-f28fbbad88af"
        },
        "item": {
          "id": "53ae2ebc-e96d-4ec6-934c-dd8c07bf0d5a",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "05b0291f-c902-4403-9e87-103a10e74099",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "815825c4-433c-4189-97da-9f5fc5257501",
        "cursor": {
          "ref": "a83f6b02-e301-44a3-aece-6a8d81552c5f",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "750818fe-88a4-4c12-b618-8ebc256e720d"
        },
        "item": {
          "id": "815825c4-433c-4189-97da-9f5fc5257501",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "59b35ece-dbb6-4c50-81e0-0971188c9d54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "456de16f-0d0d-495e-94f1-38c65fbb32b0",
        "cursor": {
          "ref": "bd758539-b571-4ec0-80c6-6893f22a0fcc",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "acab9442-de36-4c9d-987b-d56a8b16ae28"
        },
        "item": {
          "id": "456de16f-0d0d-495e-94f1-38c65fbb32b0",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "af71a028-2b6a-4cca-819a-94d3c81a45a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "175c5b1e-84c4-4e52-a652-1c5be3a01d2d",
        "cursor": {
          "ref": "aee75263-57f2-41b5-89f5-b04a886fcc15",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "ea10e96f-5152-467e-baf4-f23230998314"
        },
        "item": {
          "id": "175c5b1e-84c4-4e52-a652-1c5be3a01d2d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "9bcf17af-1801-49f5-81d6-f82ac083409f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9accdc78-3619-47c8-b5b2-5e20a7cdc8af",
        "cursor": {
          "ref": "2be9927c-b250-4606-9d1d-c1f9d16e622e",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "e3dd079a-b9af-45aa-bdb6-74564a7ce519"
        },
        "item": {
          "id": "9accdc78-3619-47c8-b5b2-5e20a7cdc8af",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "5555c6af-b59d-427c-aae5-f5ed09ff8600",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2457b9df-2540-4818-b5d4-423c904f79b4",
        "cursor": {
          "ref": "9b44c014-a13e-40c5-a598-30e677970f96",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "782580a2-042c-46ed-bcb1-f26a2573ea89"
        },
        "item": {
          "id": "2457b9df-2540-4818-b5d4-423c904f79b4",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "2455c0ad-4837-40fa-bd57-ac2285f6b6b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e9a488c-3e39-4dc2-a06e-c025736519fd",
        "cursor": {
          "ref": "ed2fa7b3-53fc-4fc4-86ec-8c1515a1b7e4",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "272c40ad-c92c-494b-85f9-24abf3c9f289"
        },
        "item": {
          "id": "9e9a488c-3e39-4dc2-a06e-c025736519fd",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "2ecf745a-4a71-4158-a8b3-ff0c28dc3cad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32f4ecbb-50e2-42c5-8566-3211f45071f1",
        "cursor": {
          "ref": "36eac4c9-3993-48d6-af4a-fa0467e131d5",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "cf328e74-1653-47e3-9832-0d0a9935883a"
        },
        "item": {
          "id": "32f4ecbb-50e2-42c5-8566-3211f45071f1",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "d161c2fa-a28f-47ae-9f52-b920cb0cde35",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51e49cd9-f8fa-4aff-9f36-42c514197fb6",
        "cursor": {
          "ref": "607234d2-c9f2-4557-a71d-19af4edae0de",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "078d67b4-851b-4770-89db-7912e50fca1c"
        },
        "item": {
          "id": "51e49cd9-f8fa-4aff-9f36-42c514197fb6",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "4a2338d3-a285-4ba9-bc09-aaf9db5531a7",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "d4590c0d-4bd8-4334-b0a5-1c7ead756347",
        "cursor": {
          "ref": "dfea6112-765e-46da-a08e-dd51e3fc9ccc",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "51e8fb0e-58a6-4283-a954-41463487e37b"
        },
        "item": {
          "id": "d4590c0d-4bd8-4334-b0a5-1c7ead756347",
          "name": "credentials_verify"
        },
        "response": {
          "id": "a830910b-8ef1-4df8-8a22-286bb9487a45",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcf58125-87d4-4307-ba51-729de0613afe",
        "cursor": {
          "ref": "8acff576-dff3-41d7-9d1e-e47ace7b01f4",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "95dd6dad-cb2c-4537-a00c-902699efcfac"
        },
        "item": {
          "id": "bcf58125-87d4-4307-ba51-729de0613afe",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "cccccd26-d737-4211-984d-d33334e70949",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cd4d156-4af0-4114-a132-cfc7ea3c35eb",
        "cursor": {
          "ref": "60eee376-3f34-40d2-838c-838dcc05dafe",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "16dd388a-debe-4926-96f2-877a8ceebd03"
        },
        "item": {
          "id": "7cd4d156-4af0-4114-a132-cfc7ea3c35eb",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "03b06fe8-cf93-4c62-a8ba-cdf93ab8ce54",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cd4d156-4af0-4114-a132-cfc7ea3c35eb",
        "cursor": {
          "ref": "60eee376-3f34-40d2-838c-838dcc05dafe",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "16dd388a-debe-4926-96f2-877a8ceebd03"
        },
        "item": {
          "id": "7cd4d156-4af0-4114-a132-cfc7ea3c35eb",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "03b06fe8-cf93-4c62-a8ba-cdf93ab8ce54",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc5e91b7-e748-4f90-acda-54a1253d72ea",
        "cursor": {
          "ref": "7c75b413-33ab-4733-998c-8a6762350f20",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "798fcedc-cf33-417e-8ff9-7a29c7bb4f5b"
        },
        "item": {
          "id": "fc5e91b7-e748-4f90-acda-54a1253d72ea",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "450e9d43-4b8d-4801-8a05-2735906d3c40",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbb049ab-a9f7-488d-a405-c4947288cb05",
        "cursor": {
          "ref": "51ba38ee-261a-44d0-8d6d-c6f36718557e",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "d0684c3b-f00a-44f4-a3f7-9d86d3dd0bc3"
        },
        "item": {
          "id": "fbb049ab-a9f7-488d-a405-c4947288cb05",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "66638a9d-f2e8-477f-ba0d-9d8606138b5a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}