{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "ce14ea6f-56de-4d06-bb71-c313f2bc422c",
        "name": "Clear Cache",
        "item": [
          {
            "id": "f7a30364-4f05-42df-82e3-f3abbf675f5d",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2bdc8200-10f5-4b27-84d4-18173ee69b07",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3ba43e8d-7929-479c-80c4-351d04ff0e4c"
                }
              }
            ]
          },
          {
            "id": "1b363bb4-32fb-44f7-bd89-b3d3d2ca57e3",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dec428f4-0e53-4608-9f49-0b245d0578f5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3fdbd1f8-19dd-4c96-80cc-743578a5ed8c"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "a16b2f69-a73d-4d32-bc6c-7ae2e921fe0d",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "2a8afae7-8f78-4dbc-83a3-131d7679e945",
            "name": "Positive Testing",
            "item": [
              {
                "id": "74de29c8-bd6c-4c3c-878c-39b913fc6dac",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "99a25aae-00d1-4ba9-8e3b-1fc92f7621d4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c34be7c7-b286-4d2e-988b-cda48ac5ce22"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "95c44db1-9099-44c7-8f00-48521fb7b97a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "31460f96-7dca-45df-8cbd-793f064e2b31"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e56577c9-b813-4488-ac57-4d28d11fae51",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "641a1599-1689-4fbe-8086-a87294eb4920"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2bbecfc9-b6f9-45d3-8654-5db5bec37056",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "fa692181-3927-46bf-b617-b0cee6da2b6d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "64d34991-503d-4989-b1c6-7ff5b4162b15",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9cb8a368-21f4-43c0-8be3-27bd58e794a2"
            }
          }
        ]
      },
      {
        "id": "94a5a0ba-e1e1-4912-af23-c48b1b76beed",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "8c1963e4-6ae7-45ae-a2f2-0ed8a90ec485",
            "name": "Negative Testing",
            "item": [
              {
                "id": "19a2efc7-5f28-4286-89ce-600783ffd5c6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1da4009c-416e-44f2-9442-136d4e32ba90",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84750a89-6ac5-4333-ae61-286a282463f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6c13c217-cb9d-4d1f-9e6f-72a3bca7c8c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6aecab7-5094-4f73-ae39-47d67d4d2da5",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cb00af9-a29a-4331-a504-4cd51163fa88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "668d7534-522c-472e-a2f3-22cfb984770b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a0293cc-f221-489d-9b54-b774805713d2",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "784faef7-1346-4691-b35c-cfdc0dfa2efe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e07ec620-a9d2-4c13-bbac-24bf7cd3b39f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "0f6e30a9-7827-4a6f-aa66-0f6151bf20ea",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "def0f065-d685-41ba-8ae6-6fbf2702669c",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba50ebf4-dfa7-4764-acf9-114de31f37e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9b02cd55-740d-404d-8ff7-5f504c7098c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b75d59f7-0e48-43a8-8cd3-8e32049716cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3cf16e0-e1e0-4ffb-94c0-1340e7b77564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d85a6c3-24a8-433b-b912-79e42b23d687",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e0e72fd-679f-45ef-af28-e09ce8de3d19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bfada7e9-2e54-4838-b3b0-4624f8f31170"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39857c06-10c0-4bf8-967b-dffec623c157",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "78d09cd6-edf1-4543-b972-d19e9137af49"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "47083911-9bbc-4323-935c-d7098166b49f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e3de568d-83fd-4c30-aa3d-42e974a02b1c",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a5480fde-3c89-4ed5-9173-9d13d7518d14",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "1ef4d774-b496-4530-a7f1-1f6d05b6c27b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3246389b-c4ed-43a0-bad8-57f786e89e09",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "f449b58c-d28d-4ff7-8b85-10a660164b4c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cf597012-7e83-48ae-9e40-20d362564306",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d1d1bcca-7521-4899-b9b7-bc92c8296396"
            }
          }
        ]
      },
      {
        "id": "e5b65a72-12c9-45c0-9287-ab11c1fd021a",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "eec74c11-ebd4-4c68-8c59-a85f9261c193",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5e37014b-c670-4db5-a153-825e482dc56e",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "1759ad9c-5cf2-40cf-af14-25c30c99a4ac",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1487c05-ad4f-466c-a7c1-7dfec70b0009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b3b9c03-2b44-4035-b8f2-53bff0118765"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cc1c76a-39cf-46ed-99a8-e421698f3b3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5e488388-98b4-4ef3-98c5-5f9af4d42e3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23e8a074-6ffd-42ae-b6ef-6e88c5dfcaa7",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93a6cd0a-e3d5-4704-bab8-f450af7b8f76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d09d237-71b0-417d-acab-dcb436172b87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa5be30a-0311-4c62-a476-869bdb52fef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fb1b23e1-184f-456c-ac7b-e110a893bfa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8148f64a-27fd-4529-a0f5-8f0688e48225",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf4b14ef-b7f7-421d-a295-a1ad23c7603a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "438b3e50-32d9-41d7-bc88-87e5b065be0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03b36fcc-8bbb-4677-b9ad-7e4306a8500f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ef8c5b85-9dcb-4272-8908-b8013cfcde26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c138708-727d-465c-8328-4093aecea2ab",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7a57090-1100-40db-ad52-68e771f73974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2713b01-72eb-4a10-be20-4c4890fc0ddf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c74033f5-a37b-4ac6-adc1-1b750f2c8291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "44878794-555a-456d-b8dc-bdaddf98660c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b484019-5be7-4d11-a5ce-cf7b3855fbdb",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9516b95a-2370-4ed4-9b42-6791f6d5eaca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6a2eca0-e31e-4f80-8be0-cf0c59c9ac56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "159a692e-d338-4a10-b334-110bb2a88134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d6c9ef37-0940-40ea-b82a-49976d2cc896"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a218ba46-47fc-4019-a446-7b86c64feed1",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99ca8bb9-923f-4d8d-adb2-f1e2f48ae466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3989e261-7297-42fb-b814-7f1c15f0df97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad5512ae-53f2-422e-9ad3-28c3ea76053e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c776aa14-b4c4-4f44-822e-0f8a78bec283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b39a6acd-82e9-4bde-af55-c3d4c2c1637c",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bbac2d4-6034-4b58-9c08-d9ea7bd7250d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3cb473b-35cf-4bfb-ba01-30b516be0ae4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b48cf4da-006a-421e-9e70-299501041d05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2b01397f-02f5-40b6-baa6-b596eec1019d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1d952b2-52c5-4678-aad8-135d4a980854",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "117e396a-6d5f-4825-a720-6f5a8974706b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a12d5c9f-26a2-47cc-b241-4cf922c05ec4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e68402f-c233-49a0-af36-77eb7707772f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0a71bcf8-a866-464a-b578-41c8c9998e2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "106a4b1d-9b80-4186-9a5b-c5252770e94d",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dca6317-1111-4fd7-88a2-b889c1331ce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeee96fe-cbf8-4889-859f-788ada7e5fd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e89f34d9-2566-4e3f-b884-e5ea518bfd9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "26b737b8-33f7-4b23-a248-c45f2629aedf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "266f6b17-b1df-4a59-a9e6-bc809d65cd6c",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32ed8057-8629-477e-b6ea-d460850e6fea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "936bb801-e0b4-4174-9c52-95716ff25e41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59f45be4-4782-4c0b-927c-5f2467717c14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9a02c6f8-79ec-4356-abd9-80aaf049436b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ebf6400-162b-47d2-90e8-aaa2dc90a299",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fd69a69-c975-48b6-a97c-fdc8b677c1a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c5450fa-3744-46ca-b709-0a1bfd1ad83c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e31804b5-21f8-4486-ae7b-d3fe04e820f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "28cac33f-638b-4a6e-a7e6-d8805f514d8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1345eaf8-a270-4b12-9c44-8f2c6e6e08f6",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f284b22-1437-4a6a-81f6-1e6fec5f8cf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b82d31b9-c924-4118-ad5d-abc007d8e3e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf68f446-aa21-423e-9dc2-386eef0c4c8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fb171b9a-f1c9-490a-b2df-259580bd8e2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90d0f7a3-cc79-4181-ad9f-8ff087d1de3b",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aee798f0-bced-4cd4-8edf-428fdf5ad928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5391070d-ab72-423d-b50c-21be6b6300c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51a3e8f0-7eda-44fa-9be1-56632b613fc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f117ec8e-1530-4d73-8d06-30fee5ebe5be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8d263e8-b7a4-49cd-88b4-7a8273a42c8d",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0841a608-a864-453a-8c5e-ad40f91abd0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4f3a596-49b9-44c6-b32e-2da7369434be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9f06cc0-b02d-4e97-ac61-593ee10cbef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d7b2b90-c13c-4a21-af36-c219fabfff93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e384f693-67dc-49fc-ae4d-e3908b9076a2",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e57b3ade-68ee-4fcb-b647-19cb4da26f00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68f51d16-5e16-4aeb-99d8-4d0c3b9d10f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22081c72-b2aa-41f4-a22b-04c9dd429667",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "87f60879-1b09-44f7-9540-645eb6f5b0b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "437c4ce7-b9f3-4f30-8b94-0bb802de42b8",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "feec6aaf-2b0d-486a-ac61-6ae5e01245d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c8c100c-cf58-4d72-a1f0-5f3d07ace845"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e06fbe1-0ea2-4bb5-abab-061857710d43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b8780be8-1008-4cce-95b1-3b0a33d220f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50aad22f-6e49-4a32-a52b-4a876e6d942a",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b2bc32e-e64e-4089-bb06-8f1372ddc584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ca60ad2-aa64-4b79-a1db-b305e918784a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a5c27c7-101d-440e-ad0a-d7fd6b509fe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "130e8788-f09e-42be-ac8a-5f52eebc6326"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc868046-7ff1-4b4d-ad43-cd573643026c",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed930a50-4314-4396-9358-d8d63754c497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8df05577-f6e8-45dc-ab4d-868367c1f8b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea381065-75c5-4441-bc68-7a9cbce5c759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d0558809-a580-4b0b-8f41-17b52f3eb6e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52268f43-4bd6-460f-a156-f4603e80af9a",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a32a29f-500c-4aa1-a8e0-27c98a61eeb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6b3eeb1-43d7-4fae-a22b-0ae4574a8c7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58bea0ad-ceb9-4945-8afd-e533ed4c31e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "36fccb47-38af-4646-8c55-d817331c62b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2a685b2-31e0-4b1e-b930-c0afdd467c7f",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9f3f13a-b6bc-4984-aa74-46508a7f2897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d663cf0-6506-4553-8f2b-ab58c4ce4e44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c202fcad-ff39-4633-9719-bedb49b59374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0134073-3c46-4f46-9bce-fa46698ecacf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "482e9153-17e8-47d7-81a9-e0ed2c053385",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "913592b3-60c8-4d31-93e9-72c8c0e1607c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb78d58c-db08-455a-8068-23a04e39ed74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d063202-34ef-408e-9653-eab13ec121a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1838c7a-354c-4496-b042-8f45a9dacdfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b460cfb-6965-4879-9c7f-f1173b1aae64",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d70a3914-823a-4a38-9e06-a56305f2210b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31968986-710c-4d40-bc61-f5d89e2c126c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c62b94a3-83fd-420f-b6c8-f26f4d82f9da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bfad8a83-29fe-4e7e-a43c-1416def6b73d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2e9579a-6dd7-4d64-916b-0f67cc28487e",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ee03514-860b-4792-b1da-d3edc2fad630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a228ec1-0627-4dc8-8a17-1220b1ff82fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1099d289-e4f1-40bf-996c-9668ee11feab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "89c7be80-3e2b-4708-86f7-a207b5ed166c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0c21220-1211-48e4-ab7d-4846bd28a058",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f842c4f-a561-4b7f-8c43-18df1d44d515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3348a5cd-3a26-4d5a-a7d9-c6a363d2494c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6052c27-080a-40b5-bc39-662d74e0ff2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7be00d9-adc0-4281-8f93-8a39964fce35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88cc67f8-25f3-436a-8638-1103dd07155a",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eee420c6-e092-4bf9-94cd-a2859e645d89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bde7121-4c0e-4747-a36c-3bd74bd1ac7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c882493-194b-440f-bc3b-1a15c0d1db79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e22d1d78-af67-4292-a1a6-3e96ea8be221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21848799-a362-431f-bd5d-5dfd493fe953",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2463544-0743-40fe-a792-0d6c41f398d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebb73eb7-9f54-4701-9499-07684e0a2905"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cab100db-25fd-4b3a-a135-64b354fcfce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d0c5cf0-eb8c-4033-b44d-9fa008e7de18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42979dcf-f804-4fd9-b524-02fa150a3d8d",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b8c61ae-fb17-4dde-944e-5f70bc8b4062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ab25651-1ce1-4f26-b12e-e4f3abd3ea8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2190976e-00eb-4984-9e13-5203b496761c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7091ef43-0744-4ef8-a61c-ddddeb7dea1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9ab02e8-8782-42e5-abe7-18d58956d73e",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "624a04ea-cf27-4402-9cdd-eb0e80d149d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad3172e0-1d6c-4e4e-b14e-ebd116ea937c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f6973b7-ef05-4a79-adbd-c853dc1db009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed332789-abef-4668-b499-c5fb3bdd0d20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5d6d299-c917-4122-9767-02cbb129cb56",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84c35eff-8674-402f-9289-46b873fc8b22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "306e6bb0-59b6-4c06-b4ee-3487cc7a3a9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b34088f1-15cd-454d-b11f-d4fab9d43a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c54db2a5-ba93-43ba-b22e-89e945c22fba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbe30579-cc1e-4991-a78b-e4fa83190598",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25f3d27e-71e1-43a6-8b61-b898b8831d20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b908cb17-3325-40f7-81c5-0bd1c1de21e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2c00350-e6fe-426b-ab99-0b853ebb81e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "18ab1caf-1074-4d0a-9b07-21d2e0d38f7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8d9d201-c775-4c24-b6d4-bc7f31133291",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce513a91-98d5-4a42-b2d3-02d34154c156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf9b08eb-205e-4f46-8d60-e2ec77969c79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22808cd8-c92c-484f-8b74-df10ad033527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5bc5a93-da58-4bc9-88b8-4f8d4b781c4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22182360-0629-41f8-886e-564481b77b28",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2009543-42f3-487e-aad2-57973c596a1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02bfda89-4757-4751-935d-f7431d160da1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "303a4a36-dee5-4467-891d-4abfc2df6952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "450e8ad4-541f-417b-b829-c62adfe24ddb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "394036d8-0403-4d40-8552-a0d1283d18a9",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bab0f16-4b7a-40e5-8a86-7eacce823053",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7c50d7c-a8a0-46d1-a42c-ff93883cbd56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98d4e7cf-c2ac-4ace-b9eb-c919828f43f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1773f96-d0b3-45c5-822e-5bdf7b5fdcd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c84c10b-ea97-4884-a389-c844e8f33800",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66e532ad-379c-4072-9e1c-7a7867c1c161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f4e24be-277f-4152-82a5-5db354d158f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b67e9ed6-6e3f-4c1a-acdb-b04407176b4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f101bb5-0d13-47eb-b5b3-3ca47c9a5845"
                        }
                      }
                    ]
                  },
                  {
                    "id": "874bd361-d371-45cd-97b4-5608bf541c68",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12365741-aa81-4804-af17-29c096df6422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7dedbd1-b96b-4a54-a34b-16f0f01735db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c54aa579-72a7-477f-8eb6-5da28bcc3a13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e8d1b51-82fb-48ae-a53d-e8f716a32b1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93354cdd-57b5-4524-a7da-5f64aae1acc1",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0bef510-318b-4f8e-9e73-6ac9071d5b8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34e22803-8805-4363-b149-7352e4279987"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3a8635f-408c-430f-a26e-bdafad437de0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a830a56d-5ec2-45b2-a618-c9b4bbebc14c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "374f4067-f635-4f25-94d3-5497f971ab70",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c9ba632-75e6-497a-bc61-234903f253da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c1812f0-d5d3-4bd6-876d-6977f60b77d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "824ce1eb-039f-482f-9145-d7166b7077a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "46796daa-3f90-4cec-ac3d-977a1341cb8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc5422d9-94d4-4a9e-b042-b9853c379743",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72f7d7b2-74ae-482f-a157-3603880fba31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9fa53eea-d24b-491c-a758-1398897c191b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf167e23-7fc4-43d7-b039-87898492f514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b5e8a66c-ea29-45ad-b339-073a251f2e66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ece8f138-f038-42d8-b1ec-618428327fb8",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8347a3ff-a25d-40fe-8c26-dc8b61afe3f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c08e9dc-cd09-4bae-bad9-68a91638a093"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "061a1aeb-441e-4d26-ad05-ef85bd9e3c84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f7d5ae9a-a27f-4037-93db-9f04a6515974"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38f3cb82-946b-40c4-92a4-b53053e36940",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17e2fb9a-0d78-457c-b269-097ffa361723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca14c148-4eda-4248-baed-41d6ac93190f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97bad407-a136-48b0-a1b7-8284f37f3fce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "648dd043-44a8-4f56-bdd8-492e6fc4034e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70b76155-06d1-4ecc-a365-095a8a3862e1",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82b2c1e7-1f94-4f44-ba8c-457354131bfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7b28ac0-b206-4437-a139-d5371b839eeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cef3c5f3-ebb9-4003-9b15-53c99b36803c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf1b9ce1-0519-4409-8220-9618244fba74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a5bf70d-2b0c-4368-b071-efbe543b127e",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6925c8d8-3c35-4a87-aa11-6df55464b262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca63db34-760b-46f9-9b84-ba49d4fcb1dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8345b379-c4b7-4b25-938f-5d1dd6c005c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "936d2e90-cbc8-40af-b1f7-9d9e2fc51f7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bad5ab06-5242-4ae1-89aa-b1e229650baa",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f622bdc-1f51-4781-bf23-604faf03a42b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fb33b25-88a0-4e7e-9cd4-abf0de51223f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8d841e9-ce6d-4cfe-ab66-8d1ec13505b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "255a483f-819c-48b0-b520-cfbed7d2c81c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "504ade82-5664-4e2e-bf14-bcae0c9a3c85",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e0c0bda-159e-4f11-88ef-99353307302e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18d0a13b-6baa-4858-ba04-d68dda70e5f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed6b1c50-b6a2-4892-a25d-bf3c509685db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "0082cb07-f8b3-4b9b-8999-1606c6df70f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d5d5ff0-fdd2-4b51-91dd-4e0d8d646a9d",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f83bc48-21d5-47e9-a0c7-2fbcaf4e2409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3542ca9-f2ac-488a-bb18-b85d2001c083"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6252144-a661-4351-9d0b-406096df2813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0817d772-5646-4bd5-9cb0-e5f7bd1c90c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9f77924-4034-436c-86a0-4e44fd09808c",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00e1c599-06ff-4c9d-9589-3b329c407e8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1153577a-48f2-4f1e-8e9f-9329210f3db0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90a300e6-0a04-45e1-a550-14e57983aa2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a4063a0-1d2c-4b9d-9f4c-8bc587f58ddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "204e49c8-774d-4c15-973e-ce35063c5423",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45fdcd3a-5167-4efa-a6e7-9729e6faa3e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "585fa889-b7ec-4e61-947f-a57f2ded4dbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "854e0f0f-e791-4572-8748-a509b1dc776a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "36e7e418-7f8f-4183-9a68-ec6c1fe44a00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6446078e-8111-4e89-97bd-36f7869b75a1",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3223c53f-dbf7-467b-b08a-02ca15f2ca3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82378b1b-7b9b-4ea3-ac59-771b5f54836a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2d3eb23-0994-46dc-97b7-8b0391b04707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9638ea6e-4ebe-4bea-9fac-55c5bba07aa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24520f97-5f1a-4ce5-8d22-0e8d7271e0ea",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5c8a023-9f9f-445c-81c6-c9f36a70e816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5bf2646-bd30-46f8-8f57-9a65c7356f59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ca8321a-66a1-4e5a-b053-0ba5d900c3f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "928f1373-2a6b-4236-b6ec-cbdf2525933f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "733f1465-be92-482d-aeaf-04cd61a1db1a",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0f528ed-a400-45f7-947f-ca6ad0798a9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "174ee2f0-2007-4987-8c8e-fc0bfc321063"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a400437b-eeaa-46a0-bdc2-14849773a168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "05ae3e32-f410-4d75-afbf-4da2d1e232da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "980cf6ed-08b3-4081-8296-276ff199e99a",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25e26c2d-cb42-4651-a968-57ef3aa760a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b3d3709-9319-4e8d-8819-3dcf8eaff5ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95fd3a2e-5258-4fdd-b9aa-1b00143ddf42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f469160e-93d2-4efd-bd48-393e2ba77aa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0cac691-a7b0-4b36-892e-dc8dd597e822",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fb2497f-d4dc-4487-8614-cb7709f951a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0feb21e-aaed-472d-a36a-cea6ea4c1276"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8269b6b1-fc6c-43b2-bc30-2ea27f1afe46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fe4bb078-536d-4911-b0c2-ad6ac9d2fddc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f89d9352-6e19-4a4a-afce-c4d4a03dba1e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e89ee1f2-4c0a-447a-9ee4-fc1db20c6f76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d768bf2-e45c-46b2-946f-f8e560c2480d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab245694-ead7-4f7f-9312-8ceb00e36bc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "c489b8ab-250d-4565-9884-070b15be9950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4f067e0-b218-4b15-b0b5-bfe893d139c2",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56eaac42-0e49-479e-9be9-b168a7d19730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "589fd882-4e98-4381-84d9-f3df6920c8a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "006b23ba-e1ec-4f46-94b0-9ed4a87c16b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "72f7ff7c-0a6b-4ccf-9822-0df59b58494e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89dc291c-a876-4315-a46c-f9703b19fdee",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce815130-7e5c-4cf5-b542-b238b52ac1d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72d28219-a2f0-42c1-bfe0-b8e9238368ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "593f4821-457c-4a11-9209-112865d76c8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e1ca756-20be-47cc-89a4-0c64eb576d9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "585700d4-ebad-4baf-82dc-70b202b8d007",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5db2cdfb-92c3-4f17-a364-99c64227057d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3313c0af-af2b-4681-8572-75406d8c25fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1246fb4-ab09-4b68-bd68-cc370a7c2a27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "528ab379-2ae6-4cf0-a412-458e4e532574"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c60e3cc7-f2a9-4236-a6bc-ecf86ab5293d",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e89eae14-9fcb-482e-b214-5def46b19caf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e701d27f-db9b-46f5-b2d6-971e672ab012"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47960e6e-c086-4d1d-aec4-349e7e4767bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7c18bd5-d58a-4ddd-9192-c6c9caebc491"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11c756b5-c2e5-4bed-84a1-a55746e3d033",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2950bbda-208a-4693-820c-242b73cbb194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1987f301-7d1d-4850-a47a-b42964e2e580"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5b3733e-596f-490a-a766-e32ed218b944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "17a15991-c62d-44f5-b33e-da65f7e211a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78690022-4d26-4427-85c4-083786c6873e",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec4c9580-2540-4eb8-a5de-9010aa716e69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d74bec3-9ffe-43e1-aadc-0a0daff654e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8e890b6-d342-4472-8007-803b5133bb05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "74b6164f-3ee2-48b1-88f4-3b4abdff4972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1aa5100-e94d-4d11-8697-93a5bd45f989",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81b3821d-aa24-458d-8e52-cdae82aaa86e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af5af42b-ed83-4454-83e2-fd3e1376d379"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efbbcb88-4d4d-4520-9f25-d258c6068b20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "afdc7e1f-d9e7-4b4d-aac9-bf02bed36536"
                        }
                      }
                    ]
                  },
                  {
                    "id": "062c649a-96b6-45cb-9450-adce6674dd90",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90d41e67-38c0-41b7-bf7e-71cbe893bc32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e8a7b4d-d61d-4ca7-9f73-387ae7dcffd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d6adf05-04c8-422b-89e0-3f9b78075721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a2e3fe06-34f4-41fb-9f8e-2cf48680fba6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44d781b7-4807-4781-b107-6ee5a3fbdb83",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5f99bc4-5fc2-4878-9115-5bc1a215918f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88e17628-7e5a-4b7d-ac80-c345e852b0af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cb103e7-6012-4c4a-ba75-29246ccb9367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2363416a-cfc0-49e8-a144-f1665bc4c680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a6cc145-f533-4603-a097-abd229027858",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97b649ce-b8d0-4198-976d-1e9c52f0a85f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0278ece6-7750-4c2d-91bb-1fa07347528a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e6ee0f8-7a3a-4f9e-afc3-6ba33698bcef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "386d536b-9d8c-4a6d-bfa0-b76bb5a9feef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39b52a2e-4502-47b0-b0fe-a7a26a72de1d",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a649b1a2-d33b-4dd5-8893-0c3313ba55da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "447e1413-9adc-41f4-8789-04ce50c1071f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c622e386-1fba-4de2-a125-092f2eabed6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "8585bded-8472-4828-bf95-c93e64018993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76f0dd75-06bd-43c4-a2c1-1bfba5797798",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df399cbc-1844-433f-a1ba-19611ac35a71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78fbc4db-f79f-4c15-ae62-51f33e50e993"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d268499-7b3a-47a5-a258-33b2da3c5efa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2aa15d8-0e00-41f6-87f9-19d9cad3d716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c6b18dd-bd81-40f7-917f-619817d7ecb6",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14229927-bfc7-40d9-a066-aff574065d13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92e9b4b1-0639-4193-b433-2929e56d08e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c695c36-4e81-4fc9-a115-9d44662c9f71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6c0f16b-628d-4cb3-9a55-a8b60250e8e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed76457e-fdff-45c2-9f97-8c8ac0dd28b3",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f959cb2-d6fb-4c5c-890f-7861db586618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77b0a985-540d-47c7-8fb1-cb000020c775"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "937c1035-000a-47d8-98d3-56f21b61e373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9bb1f659-2f2c-4290-93b3-2eee4920184e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7abec63e-eaf3-4f8d-a8ef-79662c003b11",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "812cd53d-8a4a-4cfc-bbe7-6f4156e13eba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22f0508c-d87f-46b8-aa8c-e91c044e1383"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d5e2ca9-aa4b-47e9-bb71-d5f9f216ad6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ba58d5b-dfe4-4c6a-aaff-f27d6ad59ecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03afde88-4851-4568-83ee-f5265dbce1fa",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a824ab1a-ed4d-4cc3-944d-8952f7630b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bddaa71-39fc-445f-94e3-22cbd489ba0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae5d572d-1b0d-49ac-9fc3-476295106767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "86e8afa0-5dee-450d-a8b9-edb6a584375f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53874323-d767-4bc6-95d1-a2f87f81c6c6",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27df324a-ae42-4026-b650-c32ab3ef51d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0d11d41-8750-417c-b206-e2422cb27e59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26578872-6ce6-48df-8db0-1e9ff80f89a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2b58589-c677-4f5d-96f9-1369c7934f16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28960e9e-0ec2-4a62-af36-f19e3e35d51f",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bc71070-8cf0-41e4-8c85-10f99db00c88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc97c8f3-09cf-4544-b647-6853c24b93dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "799189e8-df80-40ee-8bca-02a42bf041a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8c20d63-cd45-46c3-8aaa-f237bf48f24f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "806131f7-c844-4af2-8b39-ca276ccd9a19",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c1d9975-d0d8-4883-8b0a-c843d291616f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b93db1d-9f44-4fe6-b666-d5319eb9a125"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95ad7111-ae40-4d91-9a12-236881335462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "884d59d0-88f2-4eb9-9430-688203c30717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0d1ca08-9d25-4649-bb1d-19a5af93451e",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb818747-d59b-4f75-80ac-4812debe10f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a038b8e4-b8d4-415b-ae67-052d94dd174f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e76da7c3-f579-4bba-97e3-2a264892e6d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e567285a-5837-4214-875c-704e11c24f9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26662dc6-683b-4b75-952b-97c028858603",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94400fce-69ef-422c-a18c-18c09386c993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "029a42c5-6c8f-4d00-bc8a-8d3ef7291e15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd3ebcb9-c4cf-4511-9527-08c73648cee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a19cacc-3afd-4849-b218-2d06dbe6c030"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f385ea26-3311-40c6-81b0-767c1726ab43",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "077b0a36-7375-420b-8dbf-0b204758f7e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74499a4d-b8f8-4e3f-80f9-a7adfc7db675"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8beb465e-b991-4845-8ed6-526309d1d98a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "381c04c3-6d30-4751-8102-586b87170042"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f773e5c-b104-4e62-8684-587c722461a6",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98f95b1e-5307-4ccd-8234-0190ce0ae07c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e8a6c0d-014b-4f23-86f8-5c3aa9c4bc5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1deee99b-a395-412f-8a2a-980812ce6de6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "edec5b1d-25dd-4b49-8feb-b8e9c1ae18fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe068d8e-cd0f-4a4b-85c7-5d5c3c66fb21",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db014213-82fd-40b8-8b54-9a102937e032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75b4f86a-182b-49d9-a242-28aa310902be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6a87f2c-22f9-4e4f-8f14-792a80613d2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c4fed9c-d913-4311-886b-e9f696a06c53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de0fc919-06dc-419a-866e-f0c35473a0dd",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4da09306-5ffc-4edf-9c7f-b6be14a3bcee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3da3029e-34e8-4c4d-8396-f71d25fe6fda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84363fe0-f332-4541-a99f-e81fdc6d22e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea4be5b3-b601-46f1-a442-f5757fd97e6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbc8967e-139d-4660-ba28-1a3226462da1",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddae9228-dff1-484c-8d18-bccb61b733e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c598fd42-e71c-4d67-b66c-7d26ed54f302"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc72edd2-afa0-4b54-a1a3-faf7cc8e3f64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "569553bc-8502-498d-92b8-137eb7f6373e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cde9e1e5-a68b-4e17-a4bc-b503494a947e",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a0510d9-c10b-460c-ac1d-797ae62a6e24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b0bee83-686c-423a-8381-460224ba6a7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a59d65e-a558-43df-96fd-62627dab2fc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "688b1a5f-4483-487c-afb1-24d5d0ee1e5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "554cf19e-6dc1-4bf7-8aab-429674fff9cc",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35a1c845-81db-4af9-8c44-ef9120656fd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c0b4a66-66a7-4a22-9592-d25cce4f07ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1cc9ddd-c6c1-44c0-8f4a-064688d930b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5cf3d04e-e59f-45fa-9108-62015a6da594"
                        }
                      }
                    ]
                  },
                  {
                    "id": "411f68ba-c65a-48c8-a9ae-6ad6549fc26e",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fd4a42e-8c37-4d4f-8845-d559140a7008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae2ae0c8-3e28-4e43-99f6-48c26eec41ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "993bd02a-4ed9-4d14-a949-5e0657ce0706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "737fb4ce-0c2e-4e84-a9fd-57ed10a0a2db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1a2d4e5-8050-4eb5-a64b-4ed6fbc75420",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a01a68ae-4765-4a9a-bc77-a4a70da03341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7163da6c-db27-44c9-8c2d-ae9b5a756d4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "990564b2-6d11-4aa5-9dc7-f55b69214fc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "141d07df-7e9a-4ded-836a-6d9b92efd740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab7fb890-1907-4e70-99c9-287bb9dbd388",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8526fc9c-5e6e-4198-a9c3-6b11518ed60b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55531fde-fb91-4c78-be4a-e012ed15223c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1aaef5c-2a3c-46a8-922a-a9437875c512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2018d139-a4d4-4d82-9291-2c3e25950002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20a260ff-e7b3-4866-852a-7ccf29542222",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "797530ea-8bef-4d29-8f1b-9092c68ee21d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92561b9e-2c80-4d1d-92a9-5995d3b5c2b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22d5171d-9a8b-4be1-be6c-bb9291870076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "84a58e52-2426-4c6e-bd52-063a5def3eee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "158909b3-441a-4a99-9339-af9b394f4dfa",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "042fb046-d681-4d63-ab42-a05c2c882b8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48ee6c06-5e02-43fa-85b3-7550e6e7b7ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aa16a13-fa8c-40f8-b27d-c039144455f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d2c1a8d-ceed-4cd1-8f5d-c1227224abba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d0f3767-1036-4df3-a2a2-85cfcb573d63",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e15a238-24cf-4803-a065-1d1fc5ad33f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18e69e05-21ac-4c09-914f-bd0402cae471"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28d85002-f964-4430-abf6-0d859813b65c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "839da601-bdd4-476e-a955-4ea5cc8a9be5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e8876d0-5dd3-4984-b3c0-6ea207988f33",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3f95631-2062-4a49-8740-b8ccf52a48b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57f0f810-859a-49f2-b9d5-8df3b2d475b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05692d3d-113b-4b85-804b-5746604ed056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "77f9423b-43af-482d-8c87-8e395393883e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69244367-625f-422c-9cdf-8786482f03a8",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c28bf663-c69d-4ac1-a42d-39ca5577739b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12e2c323-a906-4bc7-bad1-7a2f5b15ebff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86bca8b2-e4f4-4317-812d-2eb60891f928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "05b74527-645e-441b-b50d-32ac82072e6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e609e491-2e6d-4dac-b210-dc20042e58a0",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3a57854-6bd0-45de-8969-30de2a7aa425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bdb2978-90d3-4819-a16d-db7959b9f687"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87f942c9-0cd9-4b44-a93e-86a2281ff7d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6060941f-0a90-4c83-972c-4b6e9ac9ed69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df342240-01b0-4e98-91be-41912bd2930e",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ef5e563-54bb-4c98-ae88-c02d29aacaee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b08ed3f-199d-48e7-9e5d-9b5999f19176"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4d0cdd3-bf18-4bef-bc28-8891d1d6034f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab7a1fa0-f035-457d-a981-297d44ceb3cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55002b89-074c-425f-b641-1d3ca8075c2c",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0b45df8-526f-42fb-8d5a-636bb40ff952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7c28c9d-1236-49f7-a10a-305db4711d64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e05dbd7e-95a4-4357-9c71-9096ae4eded2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "15c16842-411c-462f-bec8-3ac4fce13d63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "427c999d-1173-4944-9918-e34a177df0b9",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19406967-3b19-463f-81b1-22ebc718c64c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2958da3a-d10a-4926-bc78-6415c2128e77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "861cf03c-2db0-4824-b238-a002555f2ea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b5fe6250-ead9-41d9-a7e5-bcab1c4e7563"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50b12438-a4fe-4a8e-a838-c194a54ecbf2",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aefca5e-002a-4b2e-af7f-8bbad5ad9316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "dff61930-6abc-4474-a6d3-883ab35a8407"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f5fd279-06a8-4538-b25f-f17864ad895a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a247dc1-747c-46ac-a6bd-559a9934f63c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "45035829-96da-4a78-9d2a-c516222e551a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d66486f5-b7d7-42a9-af9e-9fa2bd9fe032",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "371a8c16-cafb-4d87-ae19-52e040512de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ca1f187c-31be-47ff-b824-af80a79af265"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86479891-df9f-449a-862d-780deea7114e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "c2452708-5f36-4db3-bc9f-e89c6a69ac5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfd9506d-56f2-4849-a7ad-051ac4c19bba",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24338654-c694-4532-a4b3-d631496a5a5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c6133900-c420-4b0a-8197-f018b2db0e65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "429d9095-c333-4c43-a567-661268fb758e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "cfa415fb-9c19-4668-b593-1e70b1847df9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d0f0fc4a-0cca-4c34-a942-b374f22b2b47",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "edeff470-9bda-49cf-9f5d-2d82592557f4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2ae39a09-bdbc-474d-8920-641a2bafda34",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "02498748-b70d-4628-9284-def7fd5479fb"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6e905400-98ae-4132-b33d-cdc632fb4dd9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "142c6f3c-013e-496b-b71b-3cbf67da5510"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0bb29c32-300d-4c8c-b091-3d06c8104bac",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "43360ead-93b3-451b-9067-43e7ccbec8d7"
                }
              }
            ]
          },
          {
            "id": "8610e063-b500-432b-b58d-530edef2020b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "23c8ab61-b9ce-4736-aff7-c6c4d587ed0c",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6e069508-801c-434b-8209-db351b636a3a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5d97de9f-6a72-406d-8a5c-b88f9a7498fc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "80aa51a0-a570-44ac-955f-19fa78666b66",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "573a5d53-8ee7-4acd-8dc2-22bb97d4d01c"
                    }
                  }
                ]
              },
              {
                "id": "181bde26-6ac9-46f8-9747-483959b14620",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c924f169-fdc5-4508-b21f-1036601dc027",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "87045cd4-5dcd-48f9-9f6a-704ca243b500"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2b34f535-4b5f-4199-9750-266505776dba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f6234395-4495-475a-b814-a10679c5665c"
                    }
                  }
                ]
              },
              {
                "id": "d290d635-f399-4508-991d-ece66f6166a2",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "818c4b42-4a66-480f-8cc9-e5488970d964",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "182a53f3-b1bc-4c65-a4c9-67f6229fe00d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f8302787-e919-47c3-aef9-6d0f3bb216ab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "44888725-b5b7-4e35-90a2-8f7b71f3fc10"
                    }
                  }
                ]
              },
              {
                "id": "ddca42a8-c87b-414a-be0f-13527386afb3",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "73b403e2-cb3c-4e91-bbe9-f99f6c2bc4c2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fe764673-ad09-4d13-ab72-f0a0743646e9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "19a93402-ed86-4570-b468-e9b32dd88d38",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "8f1cdc3a-9873-4dd8-a630-5b7a6860d4a7"
                    }
                  }
                ]
              },
              {
                "id": "12323711-b7ed-48c3-8827-d6913e283fa0",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a0ca5f93-4a65-4c78-ba8f-bbbaf1d535d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9b185f66-3e8b-45de-9551-c646f2715f58"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "025a54bd-1898-4f8e-8695-baea9f95e581",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1e8c5ead-4ef3-4f76-bb1b-15c545eb0ead"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dc61fb25-0ccf-4103-91be-04f9b4e8c8b5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "acf8e529-f3d7-47e6-bb43-d34dc3fb63dd"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "59318a1b-43b4-435b-a8b2-a9da3ab74520",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "27b64737-4038-419d-9f51-99bac28f61e5"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "762b4b84-30d2-4548-bc4a-076513ae485b",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "a5d8e5ec-49fb-4380-9cb1-6c4265fa9984"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "170037f1-d28a-499c-8560-5b66a6ab20cf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0dbead22-fc56-40e3-a6e1-20d429be4411"
            }
          }
        ]
      },
      {
        "id": "a16c6e89-d849-4a18-93a3-7a4ee751f1f5",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "fd49c0d0-d651-4d8a-919b-ea2301083ce9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "029998cd-6e23-44ec-aab3-7986ddd0b764",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6c5a48ab-5be6-49ed-89f4-3e5585f5bb56",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99469043-8a08-4967-bd2e-d84a0179b2a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39295f25-eb04-4dfb-aad0-927a0cbda330"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d592593-b20e-434f-b89b-36393b85d3de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a82db767-cf92-41eb-8f9d-b8b982c6d8e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68df5202-2b23-4fed-b844-5deb15d53d36",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c65db8b5-c5ab-4e74-8a3a-712b3e0cbea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22fb6e3a-edfc-428b-9ea3-4054b6188a1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d28b0ff2-c98a-434e-af6e-c36417a19930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "833a6d25-0bca-4e9a-9e8d-6a9f536e1b24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6307cd9-57c5-471b-a7f6-080091a19afa",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "502db717-cbb7-45a0-9132-93dfd86a3534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60dd88f5-ddab-4597-92f0-80dbac4c6aaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65e2c54e-5966-40e8-94f1-654d732bae63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d7338c8-561a-4025-ab64-aca32cc7f508"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90c923f8-8583-4cb4-ad66-b3371917ff85",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a76fcec-3bfa-450b-9dfc-a04a088dff4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8684d5bf-7641-4ad9-942e-e979d4384632"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c940002f-6822-4d45-8df4-e0e26b961f1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6aa48cb6-a763-4ae3-91aa-38fd2229bb1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf1cf55b-a2ff-49f6-a50e-1638d44aa68b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3db85209-02b7-490e-a2aa-4d1d4a423132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0be1930a-bd39-43d6-b930-09b3366b3746"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87c67550-acc6-4117-a895-067b3bd5d57c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4cd1915d-2091-4e94-bd1a-3f79dbf6d156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78e423fd-578b-4965-9750-4d10984807a2",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46475949-a161-426e-9d2c-b10d82b9a5c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08a03cc2-a540-433d-a160-c570b2df97f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adaf0e04-498a-42e6-b826-e423f6191ee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ee40208-9f79-44e3-9c6c-8a529b8a9219"
                        }
                      }
                    ]
                  },
                  {
                    "id": "418cf206-2b6f-4bd9-bf10-7e843a391aa0",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5475f37-03ae-4cc5-bb0b-eabfa33c9d58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77fc5752-6a0d-41e9-b59d-e1d8c9e308c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3924a497-16df-4365-9af0-003bcd288630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "acbdd30e-b5bc-409c-9338-dbd6ab0d75bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b56e264a-20e3-4171-8b9e-b7afd0a60fc9",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a00538b0-31dc-4804-9656-61d95e2ce562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edd52345-c4a0-479b-b42f-c3a3f8dcdf30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48456740-8762-4f6f-bc3a-3711455421b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "322d4fc1-8103-44da-bbde-81d725a1be17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0116643b-7939-485f-af6a-1a83437b1edf",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16c69655-37f5-4b74-85ae-876bf202675e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9540c79a-11bb-4443-97a4-95b38d7e1771"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66acf36c-ec06-450b-9c52-712d2f384a19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "76d2358c-a3d4-432c-b554-ca230735165a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fea0c99-d5ae-4549-8d43-e89d3f02a4f2",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92696fbb-59c8-45a1-ba31-3edb6b9afa11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a7950ba-baa7-465a-9f3a-487008167a35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3768edd-b2fd-45b8-a727-9bff376f468a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "31c37b95-ff7d-435f-95a2-cec82333a28f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d8ed32d-14e4-4d1f-9059-c40f97b69f9d",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38357111-62f2-40e3-878b-6296b00f39b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c88719c7-9a9b-40bc-ae07-7a15cbc153bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52fe37b7-9ca9-4461-95aa-d9d3c6c018e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "0157aec9-e6ca-4b78-8ec4-59ca94247f56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dde6c77-3805-412a-a7c2-a8a45efa6f0d",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "833934af-d9e1-46db-810f-21d50ca7bcb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9029e0a-5cf0-4db6-bb06-548ed3a93d74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bea14d51-c74e-4b4a-b1ea-dfbd0a5ab13e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "93d6d1b1-cd4d-4d06-9791-43dd5bca63ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c1f6446-3246-46d9-ae49-73275d61d09d",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24345041-4152-432b-8858-279bd97995b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34a2a39c-01c3-4df2-937e-6dc326e205cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53b51b86-2134-4f52-8975-1a741d9c8ab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "711c1c25-8ed8-46ff-bb11-adad38a75b66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8066f39e-cb01-4d23-a572-0a5aa9a3a42c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e11b6124-6039-4b6c-b541-35f8b75131ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "226c059a-6e50-46d6-a1a7-28b57da78437"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6e1f9cb-1c6b-4008-be6e-c63926be8532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "e816abae-9f20-4ef2-83f2-b534e5626336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e5b7226-1972-4c26-9a74-202345b3cc00",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be76a53c-8f4a-4f23-9c8e-0e2d4f7cd059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b06a58a-5d1d-4fea-b461-9e94c8daa75e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dee813d5-7d80-4dbc-93c4-1aacbc2fae89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7c7a428-57fa-4ffc-94f3-1d124f8c2672"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c1ba7f6-46ce-41d1-8afe-38885449eebc",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3529341-fc95-4e9e-afc6-1ca6b8014385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c56d04c-85c9-4d37-ba97-7a40fd67d2dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4339abf-89a6-430c-8df4-569b5a28ee15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "56dafd14-0070-4878-908e-b193c11ea2fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed20ba4c-f4aa-4164-b5c6-f7468390f69a",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6af7406-ab89-443d-9431-823cb71f6498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b725975-48a8-44dd-87af-896d5c6ae684"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca198e43-5c35-4ce4-8d34-abfc6c4fb3a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "943b7157-ef90-478b-9b31-71a2674858f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f23f6a8-a35b-4ffa-b588-66cf806a1627",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "988e03a2-01ba-4fef-901a-6f2f95907dee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3608693-8516-4ba0-8211-a140f88d7358"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "914314e9-f6e6-4afd-80c1-bd94ad87d93b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ed89cd8-1cbb-4f06-ba89-479a3a6377ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d59494f-1d17-443b-831a-bf38141c653d",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15416eca-2da5-4d67-ac61-62e0a777c5f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f803155f-c828-4cb4-828a-c2c0886fba62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e3b07cc-2de0-4f38-a91b-5679eb70fd2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "971f855c-8469-4ca1-8e7d-9f0b9a2f8d43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd1f2ee7-d2d8-46e3-aedf-bba693936086",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48bd7380-865e-44df-a491-91d47523d0d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "833bda64-a833-4b6b-9a85-6a6f9548180b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fc34dfa-e0a2-4cea-9fb2-e7f33d974096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7af7955d-3597-41cf-b1d9-dee35ae61594"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50c504cf-1177-4961-afd9-e02203b65c98",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "814c8c94-cf98-4095-b163-b23315ad98eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c38b298-8197-4832-9f78-78e32bc8bf77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8727745-907e-4fe8-8b85-d89c76ec9b79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1abe0ed2-0262-40d9-ab25-9d0b16754250"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2be0c6b0-b170-490c-bdcc-9097988e10d4",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd8494cc-05ad-4be1-98a8-be65e2693c2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00c27b3c-3593-49fc-be6b-5d35ecd140d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "794de66d-577d-478e-98dc-f4c2d7447003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d9b78e1-eed2-46ff-a88d-5b9dd3c820d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f57e66bc-e196-4bca-9252-11fc8506b858",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2826a6d6-42f1-4a7b-bca6-66d9489936d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27d234a8-4026-4511-b788-ae229b1c2145"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73484992-2777-498b-813f-6e33cb1f75e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "464aebde-d122-45f1-bcfb-0a2cc7cd0c15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91cc9361-ffe3-4453-8c93-7d43504eacf8",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b1e5acd-3e7d-43d2-b8d1-251838ffa7c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bb00ee9-2204-4f3e-83da-85ce019f884b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aaa90ac-5e1c-4e4b-8488-e20abe3a5c7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8da3e289-ec8b-4202-81d3-fbe4cfb47501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47394176-b348-4b40-bf72-561092d24be8",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56a8b210-9043-488e-961a-0da92717a07a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f24653e7-93f8-4680-8113-155a0d827492"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "480ee1b9-074f-4720-9c6b-0d87024907ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e78d6c7-3ad2-44ca-8c9b-f5eeac1690ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "506c0323-076b-4093-ac54-437e624b50c8",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf226d9e-6691-415a-9f46-f07caf8fc4c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf1830ef-db9c-4ea2-9ba3-5a6061a55fbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94dc706e-e768-46ab-9d98-c9245d33cef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d5c8625-18e3-4b37-89a0-8cfbeb920368"
                        }
                      }
                    ]
                  },
                  {
                    "id": "010e3191-47ff-4996-9218-206ff15c1f27",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0fe8415-5868-4f74-9bb5-d8f547028ff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc8ce6d9-e16b-4b50-bf74-bbcea17fe8d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "670e6ec0-ef9f-4c27-9fe8-7ff5c6634bbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4be6a76-350e-45ec-89f6-7913b14b4b21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac7dafac-cf21-4c2d-8045-cdc23bfc316f",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b77269d5-342e-4f8a-ad57-35f10ef0cc2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "516d8fe7-bcc2-4177-8bbd-c907fafca5d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eed7b40-e0a4-4584-8e67-722118d3e2af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0c731ea-8a22-4cb4-b3ad-38b52b6b6bd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7facc5c-7e46-4dbf-b092-5438799a5e3f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f39fd5af-a9cb-412d-8b99-389c58da9d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4945e738-92ee-4146-a047-31b76a895196"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "159d44c1-b5c5-4ed9-93ce-c12fefd4ad9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf5ed852-20f3-4091-8014-7d8cb86d50f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6aba01a-ebea-48ea-a821-e5f546be459e",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee3e8d91-f91b-4df3-9068-18da11f14472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbdd36a6-f809-4bc7-9692-6116698c39b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56151028-20a9-48e8-9ed8-20d52dce93cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3884c394-a692-4454-ac4f-7c50db4f53a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d43d4a8-2b9e-4261-9124-afc36d463abc",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df2c829f-b040-4340-91eb-1e0941e0a311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ca99650-b78e-4b0c-9002-bcec7f837560"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1400f2c4-9526-4660-a13c-1e85b9a952f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "24326e15-4846-4fa7-91af-b11e01be4dab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29b3a11f-0fd8-4525-8f9d-cce694843b99",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "474d9a5b-4861-4c92-8b0c-1029a084486c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0b7865d-3095-4bbc-be5a-64689c346071"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c46c3cb6-8fd2-4789-9a40-638711dbdb1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b82c534-6e2b-4fcd-981e-efb4f54f8333"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "98a321c3-4da1-47e8-b224-9223b273f836",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "df826d46-5e60-4d5a-b210-30d1df5a1509",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c4bcea9-4eea-48b6-8e80-31c28626acc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1882062-a018-43aa-9a16-89b615bd540d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69d87ee3-5e23-4264-b992-4811f2a4dfa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7a2bc0ff-f82e-4998-8132-7575ffd44776"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3c645af-3ec2-472e-a27d-e5fb0965efea",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "374ed923-79d7-4df8-8ce3-c4a30464e176",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "7251b073-e677-4fed-816c-6ca753c1abbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "265d6e70-d1bd-47fe-9277-6c39ec6a66c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ef3c54af-06dd-4983-abda-2fc65b385f21"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5b44302e-856e-420e-a4be-d6ae16fd5419",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5ceef75e-0510-40e1-9fbe-7a6b308c034f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7313db5d-5da9-45a8-96a7-678d5bd1a124",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7e8152e1-fefb-40a4-9349-21c112dad5a9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "38082863-459f-4118-8a02-594e771d7999",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "42e5b1d4-ed95-4bf4-8836-d50af1f23cd4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "40b1ad42-b7b1-450a-8f31-9c88249ea368",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8d37f5b5-c5db-42b8-b392-d27c8441d5f2"
            }
          }
        ]
      },
      {
        "id": "ef71515d-666b-468e-9c25-f4f4e03f210a",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "5ea2c251-32f5-4c9d-9ffd-a5cd290b1de7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "306dd1df-8d64-40df-ad81-052cf20d45e1",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "582d8d7b-5901-4143-b48c-6c76a08c3e55",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "043084ee-c629-41ed-8b01-6ebbfc862c1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faf03f57-7562-4e57-8d27-a7d72652fff6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3676c38e-a503-474a-a8b1-8dbba2447cb6",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e4a7062-856c-4762-bc0b-07f7a24e04d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4908e7f-4414-4cb0-a877-6976a9810e41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0024165-0fe8-487a-81cb-9bc99a7301f0",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb7077d2-f734-41a4-8d82-753e9813c5ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b28975db-5231-4558-8514-23faedc180c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de1ee857-42e8-45a4-add9-66c66409dfd6",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aabb37b7-9ecc-4259-9a85-361073f75cea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2781afe-a8ea-4c90-93bc-1f41a143af6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f807229-de5d-46ee-a9fb-4e2818f5b52f",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5100453c-86da-434d-ab41-9e94898fbcd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49057d39-7a73-4234-9a7b-3d7b4e9fb094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baf562e7-9848-4a53-afbd-2de10ae3ee77",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94ebcddf-104f-4f3b-bbfd-3d4d7ce29df9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9e98f3f-fca9-4c0d-82e5-08c37489dc80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1cc0bf5-0f43-44dc-a140-2fcbbcc17f27",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b4a6a1f-7caa-4292-abb8-6618630df69b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd4e2846-70d1-4e64-9d42-3f119fd7f7ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89df1513-4cda-4d4a-8842-2ba90ca6e469",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb0e0877-7809-4421-b331-f77457156871"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04659595-b473-4451-840a-d50303cf90ed",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e055079-4b24-4027-af62-6d92fc3db020",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e2ea3fe-ee8a-4931-9644-46c25b02fb1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08a4f516-b964-4749-8125-c53d3544e988",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "385e8f49-a522-4a75-9a79-8c46cfdc4870"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7beda379-8110-46cc-9423-40720a8f5a45",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3905136-33b5-44f6-a74f-db2b348b9497",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a4f6c89-1c35-4ec6-9b20-c2d273b45c1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b6a2850-5f4a-49a0-b43b-6fb10ae68b1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78d81d2f-b076-490c-b0eb-780edafffc5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "358fb2d4-bf2c-48a7-bac3-93f180659212",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abfc1e2a-ddde-41d1-849e-cb5319a688db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a0c0d5a-6cf2-4544-a207-ae99fb391866"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5147cb0b-5f96-49db-a981-00b38f4bcd3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aa5c8ee-673c-4348-ae28-3fe357a60b0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dec0eca-204f-4f16-957e-c132f3319363",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c47392eb-1a02-4b30-91b3-c5ec84db74fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dab69581-88d3-487c-88c2-47403e9e8d32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0882971-2595-4c00-ac7d-2a0ff4308600",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b84113af-a049-409c-9a61-85b47ec056fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e8fdb27-a861-40fa-9798-155730ae7fae",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4123c9c-adee-4bed-8e2c-13a45759ae3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b66670e-6740-46fd-a512-fa3d96966463"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "768a6c3d-f18e-40f6-be43-7b7488ad57d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afb728d2-a36b-4ba7-bdc3-609a8a6669d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c262dc2-7373-484c-aa72-1dd8b9ab2670",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a31d127-4370-41e7-bdb3-08d94465f5fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "465981b9-b23a-40bf-9526-4fc14d34b08c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc2a8c47-0474-445d-af40-14ea14013fe6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "426a4df1-2b57-4042-ab9c-4d1b0c3040c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "842cd94f-7202-4265-a5cd-dd53f0b00ddc",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cd66f55-4a76-4d19-aadb-ca4a1ef0a629",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4721f36-56e4-4577-bed3-21a5d49d0c52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f672babb-1cdb-4c44-a19c-198629c653fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45060e62-d8ff-4750-87db-cc06f5350fb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15df4e85-ccd4-4e5c-829d-e0690d2e7411",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f49903c4-d5ef-444b-a84c-afc661c599d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f6af527-a410-4735-ae61-1ae465b5202c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08c76deb-abbe-4f9c-bfef-68db673f267f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fd57200-06d0-4aa9-8768-3e3d93489c20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80a2afbd-bef4-40af-b563-142786e71c2a",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f6ff5d4-941b-4ce2-a343-e8410a350497",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c17e26f-6eb1-41d9-9e55-c20f81e77ca2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "096a28bd-0308-4526-a79f-85215638fc4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3013a64d-d139-4001-a4f2-6b4336ae39d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e6e3427-a234-4963-aba6-dcf6bebcdcb1",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e08ba01-d8c4-4748-9c56-bc537541a9e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de334f3f-8347-4f38-bb13-bf6315940790"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82afdf4d-4ec9-47c6-8de8-02b167279e72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0035f80-5a3c-470a-ae39-4e3e4cae7362"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45c0c0fe-2d12-4fdd-a7fe-4ccb77ecc460",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08381f3b-41eb-4171-a266-00187b9a2a01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "209b1c64-11cf-4244-a718-bf19bf00934e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68839071-51c7-4909-be0c-d1c730ca0144",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ab3bf8a-6f50-4846-aaaf-b9d69bbd0599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1238369-d1f0-4af6-8dce-29a0d5391899",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01c3514e-3bb2-410c-9ae9-8223625b7a19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c8259c6-dea0-4977-86a3-80794dc21131"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b0ab2bc-25c0-43a2-a15c-bee78cd64b10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81f8fc9e-01e0-4bfb-877e-fd044ebee052"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3b1dbd1-6d88-43c5-a2d5-3f0ed483e2de",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7ad185d-22a0-489d-b890-879d8953025a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6adf8c8-2d10-4d21-885d-e0efe12056a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6ba2e12-809d-4e4b-8e3c-9d806cdc6252",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05bfd9ff-d9b1-44ae-96b5-8fcf353bfc8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f1804b7-2432-4258-8874-c52b4b14fade",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b4750ee-14c6-46ed-a3f6-68af5f2f2a81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8ae9fd7-83dd-4d34-a369-93b70b99019a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71014905-952a-4cbf-8c5a-337f69edef8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e3e5331-3b76-46ce-88ab-7bf886e778ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb7d0272-6473-424f-a490-0bc50112850e",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0382697-7961-4415-97ba-41d266ecd088",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "865101c0-bb9e-421a-83d2-8473e4d8fa40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62fbfdaa-24b9-4042-8233-c72f98302d74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8d5ba67-85ed-442c-9eb4-7403933a110c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a88884be-187d-4764-8299-512dff2416e5",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad54ee9e-52f7-406d-aa41-314a889fd6a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c935a031-3963-4b01-9242-8e1da142717e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fb6ecd3-e9d0-4cca-89b8-87588a2b1ff3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f4ec2a7-967a-4589-a3ff-6dd25ca78a28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20df289a-a9ee-4d8d-aea3-eb75b47487fa",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9e0433d-7255-42a8-96f1-b8034372d91b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bac2e40-c46b-4202-92cc-f58d2aab44e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ca56cde-c29f-43b0-9ff2-749e4906112d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e0cab9f-d9cb-457a-bdc5-b9384914c05d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52dd4046-18bb-4926-885b-f4298fa3d7ad",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3429416-9dce-4b37-8104-b0a7c58a6a06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c95f3db8-a5dc-4c44-9c91-8eec961c8497"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b2050d9-cebe-49fc-aab6-046c35c5db59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f245a3e8-f9ea-4ffc-b392-e05f1485d09d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "076e3aa7-d72e-4ff1-9cc9-8678f8f05ed4",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3c67fa6-6b8f-4cb6-b88e-09eb092d5eac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07fe624c-3c74-46af-948a-2de1cea9dbb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "944b034f-59fe-43fe-ade3-45bb385d9f99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "687ebdd9-e0a5-4d10-b4d6-ac13f99d87cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f2ab4d1-6425-49b8-b4eb-6fdf7f96d100",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eacccf1-5259-4216-b7d5-e837af4f5def",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "899b3fdd-e6b7-41cb-b3b6-672421638977"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4401827c-8e50-436e-84e5-06435b7d9836",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb8ace44-9cc6-413a-bdb5-9e4bdf574d03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a036c308-f8f9-402d-8567-97deef8e2128",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b51c74e4-265d-4db9-bc97-e486dff72def",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6100eb0e-cc64-483d-80e3-45bedb1b8626"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "555915e6-774d-4cd0-98c8-b513fec31126",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b184e95b-b93e-4344-ad6c-c29d8c190f83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd9e3620-b12a-4c80-b1be-3f667dde7536",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e88fedbb-5c6e-449b-ba75-05ccf9788bb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c7381fa-a42c-4145-add0-1e87eeeb9b17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f0ca529-0d96-45fb-9380-71d88256162c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a8abe19-5257-45eb-bb78-53e08b03d82e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1453c758-65da-4846-bab3-84f9baf768cb",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e53208eb-7d15-41a6-9b19-64112c2a3728",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13da420a-0398-419c-a59a-84309827ef7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d989043-23ca-4b6c-9002-0d9a9bb5c271",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dec73591-7e6a-48a3-9349-bca7ea9b4f23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25257ea0-2e41-421a-9ddb-eecd61472c0a",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "459de30c-0d32-4523-8868-4f8786bfa4a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92142294-bfb1-444d-836d-01299b3f3917"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f6b1749-84d7-4e09-bf60-01b9c3cf1b0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53936f8b-b5f4-4e4c-9d92-653a7d720fd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1376a7ce-71c7-40f4-9c16-9697db06114b",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e684e82f-54fb-438f-a2b2-39b5a9995306",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ab293b8-fda1-4f84-b71d-f02f22f9b533"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0205bcb0-64c6-4f28-823f-44bdc0dcee0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1c9e056-70b0-49b1-b53f-14779a0efc19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5cb1506-e458-4b9b-b83a-f4193c9350fb",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90bcbd94-c8d4-4748-9ee0-2dd2ff040e4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "626ee0f2-194d-4dc9-a275-78ae9b7efeac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa43aa04-2118-4228-ab6b-7ada38a47749",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdcdd464-9bad-4233-86f9-de92611649be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbfcafe9-017b-47e7-9c8a-962d0cc4b441",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f7dfd41-3058-4ba9-adbb-ac80a13101ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d3e5546-5e46-470d-bc42-6cf1f3a1660e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e42bd70-01a7-4729-87ec-bf4692b287d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bf6011c-3e97-4ec5-9d65-9196a6705f4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd675c66-9787-403f-ac07-6012964cbfd0",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74d43ea5-600c-4a1f-a090-48538b56d4be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "563b2a7f-be67-4728-9023-3465b27d04b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77dec63a-4bb6-4f8f-83bb-bf1da43347bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92af1f12-2d05-4e04-a6ac-295a0f4776dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d60ba064-d050-45f5-900f-be9c2fce3ef3",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47020a8e-cb38-4b12-bb01-3049a88636c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4430cca-390e-485c-ad37-399d2e530faa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b84a5614-caf6-46db-89da-d36a87beeb2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "434386c5-d133-4e34-906e-e7a7229a19f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ddedb39-df32-4172-8862-052dafd2f242",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3062e6d2-5d06-4724-bde6-c8f7ca657034",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ef5ccb1-78da-4ed0-b9b2-dc0aeca1bd3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f44d802e-52e1-498e-92cd-c5c0afe62d18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd6a3157-2a58-40bc-9966-d5c97f5d61cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a11e568-d1ca-406e-944e-ae554697cac1",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2af869fb-1f56-4d08-a477-b1b4b61d13cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9569439d-564a-4fbd-941b-ff13ab6d7eb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d39fbbc3-d62e-4ac0-b96a-a36cca275340",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf93adb7-09fe-47c6-8575-3ba11bd6ea34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f36fdae-82fb-464c-8f6c-a012eb7c3ee5",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68e2b31e-3d7a-45e7-82ef-43937b208f72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d54f588-f47b-4cac-b6b5-27baa65c7aeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3141b90f-2c10-4e0a-9865-b1a4938cfffb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4a7179d-b4ed-4dfe-82fe-7bf45d4654f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f816fd05-9b5f-4c9d-aa93-df938e32a6e7",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e11cfede-d5c1-4484-badc-fa23f56d80bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91857a71-6920-4856-81e3-a9724ca0a96f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e399acaf-ce3e-4a33-a6f4-1727e44a387b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "529d5f9c-1231-44be-8e28-b028f1cd517d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2adbcd88-ba08-4b03-bedd-33dfea6d1dab",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63a6f9b5-f701-4761-b41f-315148ea0f1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c389d861-404a-4c95-a9a8-011a5800c02a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a9fd9b9-54cb-4458-a334-267dc542404d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4669fd0-6e4f-4c4f-87c0-935ffda3e92b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21acd44e-8f43-41a8-a5ce-035a392c2283",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5c39efc-e330-4325-877a-d4a557691893",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8af550c0-44e7-4442-ab9d-47b69bea54ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdb303d9-c582-463d-99e5-08fd37858c89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dd36ac8-8bc5-4dc2-8659-9f1b9dc72a53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e296a2d0-4bba-4052-b098-4704f04e1cb1",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3f4a8d9-1b3e-405e-9240-785342be8f7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6947a61b-2fc7-4eda-84f8-d1c18632224f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94a2f338-b61c-4905-8fbb-e8514084189a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "094982ec-02b1-432d-ba8b-228fbff44883"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4395c82d-ed4e-4970-a3c1-ff2e03af52a1",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd52de64-aa43-49fd-aaf1-4cfe4763668f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1eb02e0b-194c-430a-95c1-2f7c5ddad6fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3a87630-f6a6-43cb-800c-b9e7facf5d4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d8ace94-8cde-4472-9725-102923d651c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1df93bfc-a4be-4046-bb49-1a203a0e8d1f",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2b2cc3d-1a67-4cee-b2e3-293fe1fc1589",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0532f70-01ba-4cca-952f-41f2b20e6bf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "701d2608-0df1-4956-8607-d1c66aafe413",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5088e12-64eb-4e61-8b2a-5f676da05ea2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65b40b07-1a81-406a-a542-a55e1e663252",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13557ef5-b6f7-4c7a-bdec-2408b3ec6671",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65c5966d-21d5-4303-a998-669a7a4456ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08e66300-9774-489a-b1a3-fad2bd95fcbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1729adf4-d2d9-43e4-8cab-0a7d0c8ad334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3164588d-c775-4a74-ba19-feb1d69e3ea0",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "356adf64-d83d-4883-811d-de080bc356d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4858ad89-6614-49d9-a811-b2ab437239b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f4f4b3a-425e-4dbc-8a1e-afa04abab13e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a259098-c018-4db7-8925-a2f75ec8deac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d868a9e-95f1-4408-ac2e-4f90c8c8677d",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab8e4097-ae6f-4e6f-87da-c0f8aa737fd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce4c4b00-2063-462f-988e-d5dbad0ed721"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "414e6163-0dc4-4551-8c20-a5c3cb590a11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13896506-c091-4ba1-aef1-2f5e339b816a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f2a62ed-c0d9-4df8-b71a-586d300b77e9",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf4c4d9f-f4e0-4ed8-91f0-da2528735c20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b598733-13c6-481f-b867-75c2f2eb9f8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "674175dd-2242-4741-ad30-0c8feec102e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e658a24-b0c3-4e3b-a050-f77521491226"
                        }
                      }
                    ]
                  },
                  {
                    "id": "609a7080-70af-4b4b-8682-07c31a63ca95",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0fccd2f-1b99-4fda-9ea3-04f6f73d8545",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73d2221b-d5f7-4920-ab6e-97995d63a53e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0069c7a3-dc61-47e5-a475-00c207537fe9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80b7adbc-e311-4b8e-8ace-06e4266e5bd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d7137c1-68dd-498c-911f-2d3603f8e003",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0ab4386-5deb-4cda-8ff6-c1fd127017e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0cfb170-9477-48f8-98cf-4e3b66d2f2e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "005f1831-4ede-4aad-ae03-bb76b8c8c881",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "947a2709-0e23-4aa2-8d3e-ed51a4d532a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba34b6c2-97a9-4771-b8a5-d7e9bb03ff37",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10d2489b-42da-4556-a8cf-a8994e7224ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c6d6e62-0c6c-4bfb-8227-69e4339a5079"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91ace942-43d6-4651-bff1-c3942e8d5edf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ee1785e-2951-446d-9ee2-f239071fcf42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aba0717e-95b6-497e-a168-f58c55375e18",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89b6a82e-20b0-4500-baf2-9be16c34b9d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "279e0e32-f8b9-4c41-8b2d-9c5c812ce2af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34a5cc49-f06b-4d6d-be86-b559081e7f0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d96d7458-05b7-47fd-b896-5234bb1770ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23d8b5e3-a3a3-4606-aa83-890d83f31653",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c3ca4f2-0ef5-40c0-a773-4daab077b108",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57d5b3e4-fae9-4eac-b5f8-e4ded754b210"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52e06b8d-67e8-48db-bd85-5e0dfdaa2ce7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de6d9f60-e9ef-4973-b270-7aae29e8ca88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a721c782-019d-4136-8657-6b504d285004",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99751de4-38d5-4a4f-9179-75a46d0c9ed7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03bfbae0-427a-4ab4-aba6-fb9b935c1ae5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70bba4e3-b70d-476a-9bac-f908082b16bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3acf7ab3-29a2-47f0-a8b1-0d33bf9f7bc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e27e0927-3eb9-4a2a-bb04-704f26834d34",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad3712d3-fe82-4a93-9009-a308660e21d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57d0c4af-dce9-437e-9c88-37ec1dd7cd3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ca5ec18-515e-42ea-b1f8-2adfb41d962b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff82777a-afa0-4852-92d8-0e1e41d0c09a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f085f193-d339-4de6-9425-bc10ba996bdf",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c349717-8c7f-4b3f-abcf-cf7745d86622",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a647fade-7463-467b-893f-8938bf6e274e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad13c055-ba62-4e45-aad5-d6fafa7f86ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48cfaf56-e790-448f-89da-ab1f8c518873"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c582d77-7fc7-4b20-b22f-19ebd1255c41",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8bde549-9c77-4b98-97b2-530deb239345",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c5f4248-fee0-4d46-b6a6-abd813d27631"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15045d45-9ddb-4af1-99c9-ce013898ae11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f763eb56-f56e-4982-9ca4-0e5e418e5399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa097eae-c214-4771-a9d9-1048b229819b",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b98168cb-27aa-4ba8-8238-ed6a5cfba2ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "366bd8bb-4d2d-448d-9e1c-e1505f05d103"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "686268e3-14f5-48fc-87e5-f042f965fe75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5da038ef-67fc-485a-a1af-1c3161e151bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69912c19-7f74-40b8-8533-2e6c13361892",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "540230df-fefe-4d71-a02a-9232baaf464e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f485f1ec-86d3-4147-87f3-1e85726a8aed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e214260b-2967-4092-8de9-f8113cfd3b05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21bcc50b-a503-4227-a051-8fe50bbb14fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab4c41f7-9ada-475d-a5b8-9c3b36b6ac11",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a508152b-4dac-48df-8dee-3b0ba131d536",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6146df3-416e-4fe1-b2d7-41d6f7905cd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59b272e8-390c-4e59-a2e3-c9f06307aac9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82c3a0c6-8930-4771-88d3-5845f573adeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96e8841c-bcc9-4c5c-b716-ad2546b3c8f8",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "628045e9-9d5c-4b60-9976-4e71667e6403",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b674acb-dd62-4eef-ad21-f751bf190d34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a66d1e14-c5c8-403b-80ca-48348ecb5bbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc873983-33b2-4db7-8459-33b365a652fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5959461-3764-4b82-a389-1c2145cee399",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69aded0e-cec8-42d4-8b2e-ac02cc37b7ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8fb5226-7320-45fc-9f6f-bc8d389527cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21252ae4-a63e-4ab6-8ab2-3560dfcae4db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9fdaa75-e30a-489c-955e-2302a071803a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d4631b2-34dc-41dc-ad2b-d566c5354af3",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8167d8e-919e-4d7c-8bf3-1d7d61a1603b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "863b8e6a-8c90-41ac-bc0d-312cadc5ab52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "631102d6-dfa9-49b0-a8e2-8eabbaeb0d5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe01f47a-1d49-4d7d-bc4d-e9e2293e7cfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c3c6a6c-16ca-4317-908e-c2fd952abbad",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c51c218a-9160-4a66-86ef-87c08f28fb0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24623851-d8ee-4581-ae7a-6a96c5fc9e6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "965b1d49-3b23-4992-870e-3123dd80ea22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8c4bbb4-f36c-4aa4-8e63-b54757641cb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcd4241b-68c6-454f-987e-046e1a53140d",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4fd1816-eec4-481f-a92f-e936f45bab94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03aa9661-7d10-4f24-b6f7-204c1abd99c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c34af82-40fd-476d-8874-292f4cf98c84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5979492b-a591-4056-a2b1-cdfa701a4690"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8119ecd0-ecf6-49d1-8ff4-7e3fd9b1204b",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "444a322e-1d6d-412a-a4d6-e40c542909f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6dad6d30-c58f-4d8d-8494-22842f3e4e24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5843992-61cb-4b16-9830-6b94060acb7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c48ddd9-86c1-43ec-ae23-7339f8497198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d831bd6-e255-41ca-8535-f5bf60aa98a1",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6eaed276-aa7f-4c8e-bfc4-066def71c38d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4eaaed3-f371-460d-90ee-4574f0490926"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fc8a8de-0d66-4c6f-b207-788363853553",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2f9893d-b85c-4407-a4b9-9f9ca8f14f6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fe00dc5-86d7-40b5-a593-faeef3b96028",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e1f0e18-560d-4e35-b584-4c7cd89f89cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77b1ecf0-761e-4477-90d0-8fea9fa62bb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04a5b1a6-fb64-4b61-ace5-69dd8a155ba0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb79fe57-0cc9-423a-9ce7-86e5dd0ec07e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1fa79a6-1bd0-42fc-b1f5-59590de6b287",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f555933-c4d8-40ae-b2c0-37fd164a7d30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e40f1c6b-9670-4d68-9721-240abd48a4a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48f2f5b0-b55e-4bb2-9c6a-50da3e9c6d38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a0bc55f-cce9-473f-a30e-48aac5f4e4ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d1f46e6-9791-4083-a272-8f38519de352",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e003b4c6-f1b1-489f-85c3-deaf2c1cbf33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "846b3721-8557-48bb-847a-063090303047"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4698e043-c8ae-42e5-af62-d606091b25ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8079862-b4e3-4b1c-b115-5e1c7daa5d53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e027881-727f-498d-99e7-4b027ebcb661",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "317d7c56-274f-4e91-a83f-43af72206244",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d256c9a-52c5-44f6-bd7d-458cd748b3ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b53b5a0-0fc9-4446-84f7-b7f053daf565",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c6363a6-b68f-4e14-a6eb-247cd272ca2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8bbca47-ad87-4d41-9169-1da5755a951a",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17fceec5-2df4-407e-ad1b-9e3419449e41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ced28345-4b4a-4b9b-956e-c25582272b3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66591aa4-807f-4c73-8e21-abc98c490371",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b2f3690-70e2-4ecc-ad04-4d0106e554b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50e0a717-9dae-41c3-9c59-4387e2c1bc86",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f68ade6b-8f4a-476d-b568-c2a419dee029",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c08694b-e98f-4acc-9064-37acce824bda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1f4cf23-b918-49eb-8f8d-ba04113f34c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d13fb843-fbd3-46bf-bf15-219b71002500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ba09e7b-24d5-440a-9279-763c12752b6e",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b654e2c4-c774-415c-b93f-0e7300f3a1fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83a0160e-91b0-4a87-911c-859668e11a8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "186d31f6-5130-4f74-9b99-e4fb4e2b4cd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99b9df6f-e144-4dc4-8ff2-0b48176fe1f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7e30248-40ab-4036-a3da-f6c20680ada0",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b059ecc-1060-4320-9cbc-6478dd9b3c7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55c68305-3b36-44db-a96f-9f5eb653c19f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "206f276a-858a-49ae-af59-65b294e0c11a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d923282-50fa-4ffe-bdab-41d13d90a698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fec07c18-a0a3-4512-9819-c31dbf03ca10",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6741fe34-e1da-48f5-8ff6-a954d4c23807",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4dbd4620-ed89-4eae-8f11-de8d0681668d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c5ff396-885a-41e1-ba16-5c1ee4de3cf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a0adcc3-58d9-4102-a061-b5a7e1c8279d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eb9b8ac-b6d4-436a-a549-66666862a3d3",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4bdcb6a-239f-4ead-810c-50e3cecf0edb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "394852b9-34b7-4905-adf5-c9a76845b00d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9de8ed0b-69f7-41dd-b001-95f370562e40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "966bf2f9-0a8b-4cda-bfe7-bf552448cc6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4a76f6c-dab3-4775-ac12-713143ec601a",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e13bfd7f-7d46-4421-b017-14d915fc3dd7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91ac39f7-8271-411e-ba72-a869f5ab3510"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "612a8874-775e-4492-a160-4b2daffbd672",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16d7e83a-9c50-4e56-b2d7-4bd458be04cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07f662c0-eb06-4591-b769-84c1a1b7ce8e",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bcd9466-0967-47b0-862c-de405eebf515",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e33991da-d219-44c9-82dd-4e5e876ede3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7293c22-96f4-44d1-bdf9-01dfb8740dfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ef45bff-ab1e-49c7-b2f2-db5bd79e0e46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cf62ee3-2639-4951-899b-7287320f30b1",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5b99229-6ba9-425e-b1c0-d28ff055ab25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf6caf79-6a12-482f-8e9e-9bace6ead1b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9e999f9-80e9-4341-9a99-7a17bfa29519",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95d5a0ab-7468-4620-9277-cc155d90bf6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5d8fd19-17c6-4ec8-b43d-b9c352df7b7c",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79de61c8-5220-4373-8c9e-558f76bc379b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ce24eeb-e7f6-40c8-92f3-8ec45e2204b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd58e548-4997-4872-8928-132f45d33700",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9aa158ba-1ff3-4207-804a-a48c55c0f616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b878b61-3540-4424-a086-d04fd766fc43",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ffb7825-7fc2-41cc-ac94-0bcc1ef4c4b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5aa5961-7899-40d6-8556-0e295f2bf5e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80e10827-6a99-4732-9090-a24356cfb164",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4857b21f-16e8-4739-a3ad-69d562bdc015"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d841b54-30e0-4e57-b00d-5e11a8efdde0",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7ec07ae-cf6e-4c2c-a853-b3875482fb3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47e627cf-8497-4365-ad8d-76f4b96f3e5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d74e755-361a-48a9-a7b7-424fe9bf0e1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be03d244-3730-4423-8331-d24bad62e514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45b3b42e-6534-400e-8345-afd5668caf49",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ac96b92-6c3a-4e37-9932-4c4c6e7a1a60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd88b2c4-5297-4e08-b4e0-ab8fdb12d97d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44c43ab5-3f4d-46e4-926a-d45f4aa51332",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "328b9a38-7b5e-4472-994f-c72e08f7b2ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2af7d7fe-9baa-48a0-b5e6-589ecbba99d4",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d78312a-ec14-443f-9978-7ee342b201fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8df766f5-f51a-4be0-a3eb-cc0ab3485d97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c3c4649-50b3-457f-bae2-9a736082d788",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a40f229-7691-4193-96aa-36f53ae107bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb9b3dc7-ad1e-4ed3-91af-ccb22861ac7e",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "001c382f-9a1f-4c1d-9a9d-1fba1ab5fe4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c12e511-bd19-48fa-ac79-b6b281120987"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f1549b3-1440-44f6-9fd8-43f25b734dbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44481ac7-bbd4-404e-87db-42a9076d7b72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d0d85ef-06ab-4eb6-8079-94f666ff5ba3",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47f7c5bf-f911-4976-ba61-46e6edcbcbf7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4edc375-ed6c-4e48-8dea-6d3661fde12b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf9015aa-e466-4373-888d-bc28f1e88b65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06d657c7-832b-4cce-8b55-baf2d3d6f11a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58168b2c-34f7-4aef-9679-8ad043826efa",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad59254d-fc8d-4b49-afc6-8cecb3fa269b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d5a338f-3216-41ae-8e41-5e69db5edd8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43fba718-ced6-4d48-9d8a-4ba2f5cebc02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3486ac1-9f59-43cc-8317-ecaabc214de4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "304057e9-15f5-489e-836d-c069f090339d",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "228ae80d-111d-4629-bd47-dc0739c7ba25",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1e0d95d-c71c-4297-9e91-ac958d4b30da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e48ecd0b-a20e-43bc-bda4-0bbb2705230f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cefd0665-e12b-4ac5-bfd2-e199263823a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42c9e507-4162-4216-9386-262c7cb9386e",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebfa0c78-2537-4ce6-b43e-721b25181d8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3bf80f76-4e91-462d-85e0-9f12db0a5acb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67e5bdd8-4fbc-4f5d-956a-daf5f1b72783",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc80e238-589a-4b2c-a099-a931bcff3b0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "042b0fa7-7122-41d6-9413-e0b0fd5c2de9",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6736d7cb-6f81-4241-8fff-96b7503787c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d968a7d-46d4-4b4a-b150-5b327db83882"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e9b4305-a878-4d4c-8e44-56df8c2e2764",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d85c72ac-2185-45fa-9ce8-cf3125ca5b43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "470b6745-45af-48ac-9363-6767c1143664",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d610ec5-5821-4873-92f4-f91cddb5753b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "661f93bf-55bd-4053-b554-13f318333afc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79d76fdd-ec20-41d8-ac73-d56f00a99d60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69897954-0e53-4fff-9c23-b46f70856292"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0309523d-c9f5-4894-ba96-1e1e24dd9bee",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c376ddd-d35e-4cac-b521-c43810b8820f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebb1c5e8-9591-4ccf-a871-6d5a9a87a9ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d942232e-f9dd-4f00-bb85-c4f6fc54962f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d19af539-3951-48c6-bdef-cf89e3ca46c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65c0cea0-8335-4dcf-9d5c-096a06d12034",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa02ebb0-7c42-4f2a-825c-bb714d0d32f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee620fbe-f747-42b8-b2a8-81bda99b61d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61dd5dab-3c6a-44f0-9912-fb60b4b37ad6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "405d36b8-13a7-4382-96ef-4d6f49526acc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1982714e-1afd-4525-8418-67d148a2b807",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73a5a5d3-e095-4b7e-8e1f-491bc1ec4b4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9eb3d7ec-39d1-4059-b177-7ff080e78ac5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89a3688b-c95b-415e-a8cd-b985e225594c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4512013d-bd44-466d-a0a3-09e96351553f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e6cbf78-d49d-4185-b242-30fb635d3f78",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57dcf4a2-ca0a-4b53-866a-244fbd86cf81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40fe1e94-3dd6-4187-b6af-a0e6f0825815"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bcf3a11-73ca-4df8-8937-9a78b8550149",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06da0a6e-8c07-4d2a-923e-6a00f00f7c30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5fb4b2b-2e70-4650-80b7-1c0b839af604",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdec6b04-a32c-447b-b085-50deceb79208",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5cbd9346-2aed-40e2-82e7-af18887f9667"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18d4ddcf-d933-4350-a45d-1c8bfc3c51a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dd3db6f-cb74-4ec3-afb9-c257e0f25e6a"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "48fd67f8-c193-48dd-acf3-64e30d2e71eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "02641aec-9807-4268-8582-768157c277cf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1302fa5c-c2d0-4cde-8baf-d8a72b1618b8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "da9dc077-f4f3-4495-87c7-b00e72939943"
                    }
                  }
                ]
              },
              {
                "id": "516e35cb-94e7-47aa-8344-15db1bb54c36",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "938b7a71-c064-4907-aebe-a64c12c29248",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ef5b0db-8eaf-4995-b115-b0c35f295c16",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "7be6a409-495c-43e8-b0cb-8e1cf7474b33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b02bb9e-457b-4e4c-b5f7-3154cdb578ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b7c701a0-f0ab-40d1-8a8c-884f98e88f71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39dde9df-98a8-4565-958c-a7ebcc693b19",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b583aaaa-775e-4e01-82b6-1a3f94c1ae28",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "df4dc3af-180a-4459-9123-ed5901c13eaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce97ea29-9e00-47f1-b1f1-c460c8bb3359",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "019df369-f271-4611-b8c7-79f0195a0410"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4bcf6e6a-a206-452b-97cf-7576a3803249",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "88cca3e3-4f68-487f-979c-a1f158e41c78"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c8eda83d-eaac-4781-98c5-1a5b77cbd7fc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "47c20f3f-fbb7-4505-9e2c-2f85d2063892"
                    }
                  }
                ]
              },
              {
                "id": "e5a39289-0741-48a6-9785-3d858cb811c4",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "a57b4e80-2b6a-4183-a2bb-c04d6e23731f",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26007a4c-560a-4d14-aeb3-85964ac42fb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "acd1c81d-575a-41eb-9ed0-f32ed2709262"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b07e2d78-eaf9-4c47-9413-9ee9c82f16c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba40daf2-e3c5-42d2-90dd-7bdbf1ded842"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "caf96c18-2209-4c55-a774-82811c7e67f8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c333f55d-dd84-46d0-bc6d-224bb476e5ea",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eeef61c1-05ad-4e51-9dd3-fcb8641c947a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7545e6d5-9bd0-45b8-a660-7d2d20acaa5f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e2100e82-34c3-4ab9-ac32-7b1095d4df0c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fcc2f740-ea1a-460b-9075-869fde2e4600"
                    }
                  }
                ]
              },
              {
                "id": "2123fdf8-498e-4cac-8e62-0a6057aa5f8f",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cddc0e6f-a11b-4e07-bb73-ecfa6d99fbe4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "41f3a1c2-5298-4ebe-8d4d-3a0a2b50614a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ccbf20ec-0b8d-4eea-a5b6-cdfa0bd08c23",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "11594f25-4786-4e73-9da3-747318ac74f8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6acab3b7-a451-413c-93ad-bc5f861d4dc0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "d2746cf1-0d77-45fa-8bb7-2a7e3e21c686"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4a26acce-cf96-435b-9e26-d3556d34352e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "25ae9e82-2a86-4809-be8d-7c4799b29bae"
            }
          }
        ]
      },
      {
        "id": "2d90deb1-44ba-4268-9388-e1a9955353ad",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "6c4dba73-e2d3-4853-a539-b543ea377dd4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "27176f24-4bc8-4848-8314-9961a56855f1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "eaadb0d0-fdb0-4912-91d5-dba98871b873",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d84f8dff-150d-4a9b-861b-fbc0ca783599",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c3a08fbb-506b-4d7a-b467-0cd721e4d406"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "941e93cd-9cee-4b3a-a46b-e1c43a0eb69c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "24b822e4-91a3-4000-97e4-a42330c3c5c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34f50f9a-6f9d-4146-b371-3ba4c2ab69ed",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80591ef7-0e1e-4b15-b6cf-836c81c3701a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "07241a9f-1f27-480b-a6d4-d7c137e02268"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd51cc7b-30c3-4ceb-87c2-fd8c093db4e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "be5eced9-9b63-48a8-a5fc-783bb37b8fae"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "639154f8-fd4f-4f8d-bb0b-e6f4d02a71fe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8471c58f-bd0b-4449-bf6d-b0ca482e3b24"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "043bcba4-b679-49b5-95de-c4eae9fefdd5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "04508385-7ab2-4af4-acdf-0545099ef884"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c2d85b8a-4a5e-4d17-8ce7-149702e1b98e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "b80e15ff-d240-41fc-b6bb-341ae5322b98"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "71ec6cd7-2c82-4a7a-ad8c-99366e6ffd25",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2510721e-dff6-4e23-990b-ff2035a32bdc"
            }
          }
        ]
      },
      {
        "id": "f74e2a2a-62e4-43e6-8e99-e34f23a6f051",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "a617bfd9-5e7f-47ad-9972-97305110b67f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "23f91ad8-9877-4adf-9c52-8ab40b1381b5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "64796e70-a5f8-4dce-8cfe-75f5804ffa1e",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7543a62-7b3d-4abc-b905-facd7b4afe69",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2344cbff-fe31-4a12-9113-01294accc07a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "558d8436-d87c-41ec-bbc1-cea4d432eab1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1e65d42b-a4de-46e3-97ee-41944f0142fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f0512b0-f5f9-4dff-ac99-697afb44624d",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c44fa5c-fd44-4613-a7f7-dd0b90b5fa8e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a434b4ed-d748-4297-904f-e1f8631be997"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b53ede2-df8a-458c-ab2f-e4f084c8f8b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8a9026a9-5ec3-4629-b124-e6256c67800b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ca35630d-c8a6-4db7-8ffa-f04ba28c3917",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c3d3473a-ee7b-4858-b5b3-aa07ba4bdad0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f68e20c2-44e6-419c-8883-cdc53aa165fb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e46249dd-69a4-40d4-96ac-757c76abbee3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a96fd6b0-9f01-4c75-94cb-51b6db4f8c63",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "83469cc4-0086-40f5-abdb-ee7f92d8b9c1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "50541770-90dd-4d95-bd3b-0de45dc081e3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "60d25a18-b175-464b-8bcd-ecdda65f5e09"
            }
          }
        ]
      },
      {
        "id": "64905455-6f24-40bb-ab30-20cd863e1a65",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "46c2bbd3-0d23-4c7c-b1bd-48d37cc3f430",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b59d16a9-b9a1-4477-b0af-7be11d1e6696",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b4efe6e3-f780-4a6c-910b-047da7d864ec",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f671ab2b-15a3-4d8c-b751-afa64095eacd",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "fd759662-a1b6-4bd4-9f03-7e45a83fa1c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4893149f-fd51-4482-a749-d30ec3a5776f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8135e82e-7f5e-46dc-b7b1-703edd44757d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af2cfdbb-6761-4a64-ba5e-fa0b82636ad1",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91d86460-2018-4f32-9e92-c5952289f63f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7dcae7ca-9842-48cc-87c0-e8019474365a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57890e3c-ca91-4d4c-a711-9a585dc9fea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "211c2611-13bf-4725-a976-ca99a078ccd3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "233299e9-f99c-41a5-9c22-9b1062d14498",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "01a9252f-85f4-41bc-8dba-e4eb7bfc9bf1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "925c9389-e0a7-491c-a52f-9f6fe54feb08",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2d199960-04cd-4e4b-9ea6-86c497171f3b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0d1e507b-65b0-487f-8abd-950ebad2143a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "3b6979c0-f230-4015-8184-df9721883aff"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fca0d00f-414e-43af-83cc-6735b0028202",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e4be7efa-45c2-4ec4-b760-53cfc73313fe"
            }
          }
        ]
      },
      {
        "id": "64f15cb8-415a-4abe-a72b-c81fb9cda4f9",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6283502a-1ba4-4ad2-bc67-9dd2f723b621",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7b4a8200-d269-4bf2-b7e5-82410d03c339",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "dc0ffc16-cfe7-45a0-b98f-44ec1c869728",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "640fe5cf-6fb1-4c4e-ad6a-11ac9f6e5c6d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e6401452-2809-4f47-935f-a2b1d099d897",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 60
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 84.58102623807763,
      "responseMin": 8,
      "responseMax": 3313,
      "responseSd": 205.57874895683636,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1675384915051,
      "completed": 1675384950757
    },
    "executions": [
      {
        "id": "f7a30364-4f05-42df-82e3-f3abbf675f5d",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "4b8c90d5-cf34-4e49-a3dc-9c440873c144",
          "httpRequestId": "f16f3067-0f6a-469f-a076-975e68fcd2d8"
        },
        "item": {
          "id": "f7a30364-4f05-42df-82e3-f3abbf675f5d",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "be0d45d8-669e-438e-abda-1b00f4b83770",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 0
        }
      },
      {
        "id": "1b363bb4-32fb-44f7-bd89-b3d3d2ca57e3",
        "cursor": {
          "ref": "4512e9fe-1e29-46d8-b7d0-826619f6dee7",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "bae8d8bd-f8c5-4063-8303-143b8c379ceb"
        },
        "item": {
          "id": "1b363bb4-32fb-44f7-bd89-b3d3d2ca57e3",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "bb425649-1e7e-48d5-9124-48f71762489f",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "74de29c8-bd6c-4c3c-878c-39b913fc6dac",
        "cursor": {
          "ref": "50f62aca-cfb5-40cd-bff9-707c18a7de30",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "12940b58-cea5-4f3c-a7bd-76c85c29509b"
        },
        "item": {
          "id": "74de29c8-bd6c-4c3c-878c-39b913fc6dac",
          "name": "did_json"
        },
        "response": {
          "id": "c3e379cc-aecf-47bc-bd5f-9587edbda3a7",
          "status": "OK",
          "code": 200,
          "responseTime": 213,
          "responseSize": 1211
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1da4009c-416e-44f2-9442-136d4e32ba90",
        "cursor": {
          "ref": "3e0b10b0-38b9-4a62-8a1b-4f9cc5cefc62",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "adc5a5c3-2dc3-4a93-9470-f16a84791711"
        },
        "item": {
          "id": "1da4009c-416e-44f2-9442-136d4e32ba90",
          "name": "did:invalid"
        },
        "response": {
          "id": "cc72e6db-cff7-4a5d-9732-73aefcd519d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "1da4009c-416e-44f2-9442-136d4e32ba90",
        "cursor": {
          "ref": "3e0b10b0-38b9-4a62-8a1b-4f9cc5cefc62",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "adc5a5c3-2dc3-4a93-9470-f16a84791711"
        },
        "item": {
          "id": "1da4009c-416e-44f2-9442-136d4e32ba90",
          "name": "did:invalid"
        },
        "response": {
          "id": "cc72e6db-cff7-4a5d-9732-73aefcd519d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "e6aecab7-5094-4f73-ae39-47d67d4d2da5",
        "cursor": {
          "ref": "a97a1697-90f6-46b4-88c7-b6316408a327",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9715b751-6423-4e86-acbf-ef542ea1d6ed"
        },
        "item": {
          "id": "e6aecab7-5094-4f73-ae39-47d67d4d2da5",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "2fc77c26-e731-4a1b-9d3b-83e955d6568a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 104,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a0293cc-f221-489d-9b54-b774805713d2",
        "cursor": {
          "ref": "205db3fe-4ba7-4096-a0b3-0ec2f754a714",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e61ef215-f846-4a01-8b24-c502460be645"
        },
        "item": {
          "id": "6a0293cc-f221-489d-9b54-b774805713d2",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "866e3e80-ebd5-48fe-9203-270a93798569",
          "status": "Not Found",
          "code": 404,
          "responseTime": 63,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "def0f065-d685-41ba-8ae6-6fbf2702669c",
        "cursor": {
          "ref": "1dd572d3-6465-42f7-a686-94b49946f5af",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "d0c63168-06e5-42d2-8536-a1541fe3694f"
        },
        "item": {
          "id": "def0f065-d685-41ba-8ae6-6fbf2702669c",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "4911922a-3263-4ea8-b461-82a297d2a775",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d85a6c3-24a8-433b-b912-79e42b23d687",
        "cursor": {
          "ref": "f42361fd-0868-4be8-993a-e306d847c93c",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "42510310-78a9-4e77-8323-2357df535bf9"
        },
        "item": {
          "id": "4d85a6c3-24a8-433b-b912-79e42b23d687",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "1b1944b6-23ed-4927-a0f6-5b3e97aa30fc",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d85a6c3-24a8-433b-b912-79e42b23d687",
        "cursor": {
          "ref": "f42361fd-0868-4be8-993a-e306d847c93c",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "42510310-78a9-4e77-8323-2357df535bf9"
        },
        "item": {
          "id": "4d85a6c3-24a8-433b-b912-79e42b23d687",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "1b1944b6-23ed-4927-a0f6-5b3e97aa30fc",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 65,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3de568d-83fd-4c30-aa3d-42e974a02b1c",
        "cursor": {
          "ref": "14f7be00-2ea5-431c-877c-45b0fc6695d6",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c98c5be0-733d-4110-9e5a-a935e9cf4233"
        },
        "item": {
          "id": "e3de568d-83fd-4c30-aa3d-42e974a02b1c",
          "name": "identifiers"
        },
        "response": {
          "id": "a9535706-7db8-4edd-a7f4-eb8adac0e7c9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 100,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "1759ad9c-5cf2-40cf-af14-25c30c99a4ac",
        "cursor": {
          "ref": "c6e3c45b-a1ca-42cd-9665-d8ee45e8fd99",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c7ceeec9-670f-4943-9701-62891b6875af"
        },
        "item": {
          "id": "1759ad9c-5cf2-40cf-af14-25c30c99a4ac",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "8df9c7be-7abf-4ecf-bce5-215cf03c319c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1759ad9c-5cf2-40cf-af14-25c30c99a4ac",
        "cursor": {
          "ref": "c6e3c45b-a1ca-42cd-9665-d8ee45e8fd99",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c7ceeec9-670f-4943-9701-62891b6875af"
        },
        "item": {
          "id": "1759ad9c-5cf2-40cf-af14-25c30c99a4ac",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "8df9c7be-7abf-4ecf-bce5-215cf03c319c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23e8a074-6ffd-42ae-b6ef-6e88c5dfcaa7",
        "cursor": {
          "ref": "e0a077c6-1b69-4bc8-a52f-4b0a7bd0eb13",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "e573ae43-2f85-458b-9c0d-7e480a3b9de9"
        },
        "item": {
          "id": "23e8a074-6ffd-42ae-b6ef-6e88c5dfcaa7",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "8f0de1f6-891a-47ab-a15d-c583e7616d48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8148f64a-27fd-4529-a0f5-8f0688e48225",
        "cursor": {
          "ref": "3dde883d-339a-4579-a693-7c07f507046f",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "41e9f25f-a843-42ce-a409-00a22e07024b"
        },
        "item": {
          "id": "8148f64a-27fd-4529-a0f5-8f0688e48225",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "9f80e45f-f52d-4317-abf5-8f96ed274532",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c138708-727d-465c-8328-4093aecea2ab",
        "cursor": {
          "ref": "dcc19bd1-3d9e-4adc-b321-efc45125c0ac",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "caf9663e-ac83-47be-bab2-7c41ec4f9afc"
        },
        "item": {
          "id": "2c138708-727d-465c-8328-4093aecea2ab",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "602a331a-4f32-491e-b7af-1546f1d34e09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b484019-5be7-4d11-a5ce-cf7b3855fbdb",
        "cursor": {
          "ref": "235849d1-3148-4443-a6fc-6aa8b7fc00f7",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "2eda519d-49a3-44b7-bf46-15e6548a7f9b"
        },
        "item": {
          "id": "9b484019-5be7-4d11-a5ce-cf7b3855fbdb",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "2c090c67-fa9e-42c7-984e-9aac990a94ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a218ba46-47fc-4019-a446-7b86c64feed1",
        "cursor": {
          "ref": "296fe085-0d73-4b36-b46e-c1d13c9de7e8",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "e2f5def2-1c8a-435e-bc40-dd416b971a2c"
        },
        "item": {
          "id": "a218ba46-47fc-4019-a446-7b86c64feed1",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "7e9c8202-416a-4397-8ffc-9da29ca6e97d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b39a6acd-82e9-4bde-af55-c3d4c2c1637c",
        "cursor": {
          "ref": "6119a7aa-8072-4d2c-b798-029d3437a977",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "1825853e-b746-4943-9b0d-4353647b87e8"
        },
        "item": {
          "id": "b39a6acd-82e9-4bde-af55-c3d4c2c1637c",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "ca7aee0c-ef0a-4bb1-a2e4-d7bf43151f4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1d952b2-52c5-4678-aad8-135d4a980854",
        "cursor": {
          "ref": "03753f1e-df8e-4e01-bf62-3a452aeab051",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "19a443bd-2b79-409f-b66a-174249a74ffe"
        },
        "item": {
          "id": "c1d952b2-52c5-4678-aad8-135d4a980854",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "0b06e2b4-6c93-4474-9473-1d7c56ba2816",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "106a4b1d-9b80-4186-9a5b-c5252770e94d",
        "cursor": {
          "ref": "97b04d01-553c-43cb-bc76-38498210eb78",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "2744c41d-a2bc-4f6e-972b-a8e23101a6cd"
        },
        "item": {
          "id": "106a4b1d-9b80-4186-9a5b-c5252770e94d",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "6c955158-2064-47cc-a55d-9c3064284d62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "266f6b17-b1df-4a59-a9e6-bc809d65cd6c",
        "cursor": {
          "ref": "3fa51c67-6196-4b70-ac9b-2c4a1c1f5d1d",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "254493b6-55b7-4e24-b899-576388731674"
        },
        "item": {
          "id": "266f6b17-b1df-4a59-a9e6-bc809d65cd6c",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "1c028d7d-2098-4b3a-ac59-b5d15147d540",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ebf6400-162b-47d2-90e8-aaa2dc90a299",
        "cursor": {
          "ref": "cd006135-fcd6-4118-a3c0-9494b630591a",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "64822f5c-52da-4526-a35d-dc6e45972fe0"
        },
        "item": {
          "id": "4ebf6400-162b-47d2-90e8-aaa2dc90a299",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "e4e1efc6-8983-461f-b9af-059066f5a4ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1345eaf8-a270-4b12-9c44-8f2c6e6e08f6",
        "cursor": {
          "ref": "35395fc3-75bf-4e0a-a717-65672a4bfb09",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ae5874b5-19ca-4ebf-9479-132b9bb93ba1"
        },
        "item": {
          "id": "1345eaf8-a270-4b12-9c44-8f2c6e6e08f6",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "a7f94345-4186-4cbb-88d8-e85f43ac73dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90d0f7a3-cc79-4181-ad9f-8ff087d1de3b",
        "cursor": {
          "ref": "2b6c3e62-ed46-476c-bb97-daf2583f3048",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "dcb5ba4e-24be-4209-8441-19e1f0c9fa99"
        },
        "item": {
          "id": "90d0f7a3-cc79-4181-ad9f-8ff087d1de3b",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "bad0f576-4939-4a8a-9796-b97bae9f4a71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8d263e8-b7a4-49cd-88b4-7a8273a42c8d",
        "cursor": {
          "ref": "df83141d-008c-4e89-ba74-ed213b39232f",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "2f4406ed-7a7e-4513-b9c4-331b24967b42"
        },
        "item": {
          "id": "a8d263e8-b7a4-49cd-88b4-7a8273a42c8d",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "23b1c8f6-e5ca-4355-8b38-a1a03207052b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e384f693-67dc-49fc-ae4d-e3908b9076a2",
        "cursor": {
          "ref": "ea8580ce-4185-414d-a184-aaff8413c2f6",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "03ec8f8f-71f0-44b5-86a7-e6f1bccf7368"
        },
        "item": {
          "id": "e384f693-67dc-49fc-ae4d-e3908b9076a2",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "f553ec45-99b6-4b21-87f2-4572a001bbf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "437c4ce7-b9f3-4f30-8b94-0bb802de42b8",
        "cursor": {
          "ref": "0102c4a1-a422-4fbe-b7d7-4e0f52948d79",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "67e24b4d-0323-41d4-9589-5a5d148559ef"
        },
        "item": {
          "id": "437c4ce7-b9f3-4f30-8b94-0bb802de42b8",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "a2551984-3b5c-45dd-9d37-ec6a030417d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50aad22f-6e49-4a32-a52b-4a876e6d942a",
        "cursor": {
          "ref": "a67158c2-e5ce-4a89-8ddf-85e5182a8c66",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "20786d2c-be64-411a-a299-52b3f9b5c1df"
        },
        "item": {
          "id": "50aad22f-6e49-4a32-a52b-4a876e6d942a",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "1f8b89ee-3a9b-42b3-931f-f5f47375317b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc868046-7ff1-4b4d-ad43-cd573643026c",
        "cursor": {
          "ref": "8dc7aa6c-9455-41bf-b7a2-6caf2dca679a",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "f32cf934-5a2a-4d91-beba-2eb636818d78"
        },
        "item": {
          "id": "fc868046-7ff1-4b4d-ad43-cd573643026c",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "cc0ee1d4-0d24-4e4b-8f25-d4f759c38d3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52268f43-4bd6-460f-a156-f4603e80af9a",
        "cursor": {
          "ref": "cd3d8371-b864-49ae-bcca-85ba35950a37",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c6b490cd-a0b5-4708-baa1-a6802c43fa50"
        },
        "item": {
          "id": "52268f43-4bd6-460f-a156-f4603e80af9a",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "c155c0ba-f0b8-4855-b964-789a84c6b2c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2a685b2-31e0-4b1e-b930-c0afdd467c7f",
        "cursor": {
          "ref": "b63a521d-d905-4fd0-83d7-806ebdc3f6eb",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "d17b3286-8d5e-485e-a758-37d43e6d24f4"
        },
        "item": {
          "id": "f2a685b2-31e0-4b1e-b930-c0afdd467c7f",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "f65d2ad5-8dc0-4fa7-beae-8ff96ff5cba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "482e9153-17e8-47d7-81a9-e0ed2c053385",
        "cursor": {
          "ref": "963b0431-b9b3-4768-b46d-8f1af54dbdfb",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "b6d592fd-551b-4346-b26a-2e4503c4864c"
        },
        "item": {
          "id": "482e9153-17e8-47d7-81a9-e0ed2c053385",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "d7284b69-6dee-4e9a-9ad1-244a0f9f2927",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b460cfb-6965-4879-9c7f-f1173b1aae64",
        "cursor": {
          "ref": "54d8a85c-57c4-49e6-b09e-cf4a3b66ff97",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c7db7a4e-29ee-4879-9fad-d01eaf7634f0"
        },
        "item": {
          "id": "3b460cfb-6965-4879-9c7f-f1173b1aae64",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "72d4ddd2-742e-4ae3-95e0-689fd9cf394b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2e9579a-6dd7-4d64-916b-0f67cc28487e",
        "cursor": {
          "ref": "3ececa8d-4b39-4121-adc6-aea6ffb8321d",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "fc5bad83-16c9-4b22-986c-9955893d5fce"
        },
        "item": {
          "id": "f2e9579a-6dd7-4d64-916b-0f67cc28487e",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "ad3de44c-9ce1-44bb-8649-c7590d813530",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0c21220-1211-48e4-ab7d-4846bd28a058",
        "cursor": {
          "ref": "1e5417b2-f276-452b-9f9b-4a81609d1d5b",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "b059c8a3-c511-4ddd-b705-2ac950b19936"
        },
        "item": {
          "id": "f0c21220-1211-48e4-ab7d-4846bd28a058",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "c63c5fc2-e596-4527-a722-ef3c66596845",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88cc67f8-25f3-436a-8638-1103dd07155a",
        "cursor": {
          "ref": "8773e948-cb74-40fb-9f7b-b8ba79bd874c",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "2045792c-d076-4c05-a8c0-0a0be7f42f95"
        },
        "item": {
          "id": "88cc67f8-25f3-436a-8638-1103dd07155a",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "c19972a4-4647-4672-a11d-11c1d2cdb2a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21848799-a362-431f-bd5d-5dfd493fe953",
        "cursor": {
          "ref": "f220beca-cda7-4f09-affb-90e88f4be276",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "ce816254-f9de-4264-8d91-66f94f0f0ec6"
        },
        "item": {
          "id": "21848799-a362-431f-bd5d-5dfd493fe953",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "cc41b0b1-3348-4b43-95fe-a0d5af57fcca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42979dcf-f804-4fd9-b524-02fa150a3d8d",
        "cursor": {
          "ref": "10c11831-a0fc-4392-bb6b-e7a3e0ba181b",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "8d2ab3b9-cd65-4e5b-b41b-d29a4801a91d"
        },
        "item": {
          "id": "42979dcf-f804-4fd9-b524-02fa150a3d8d",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "9bd635d6-4a7d-4ce1-a635-f932587e8d88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9ab02e8-8782-42e5-abe7-18d58956d73e",
        "cursor": {
          "ref": "eefd105a-f942-4114-8e36-cfd172b08701",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "1a498fa9-c7a8-4a36-9ca9-f8f3412520ee"
        },
        "item": {
          "id": "b9ab02e8-8782-42e5-abe7-18d58956d73e",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "4f546681-b54f-4503-9f62-08fb8472d4c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5d6d299-c917-4122-9767-02cbb129cb56",
        "cursor": {
          "ref": "3ec74c1d-edfe-411c-91f5-c5c3abc52f4e",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "12b84b58-b6ec-458e-b46b-58682d191ff5"
        },
        "item": {
          "id": "c5d6d299-c917-4122-9767-02cbb129cb56",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "ea3d3610-fe9e-4edc-a20f-007138e32806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbe30579-cc1e-4991-a78b-e4fa83190598",
        "cursor": {
          "ref": "89b1808d-5026-49dc-8fab-6edf445f5846",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "8cf1a374-a8f3-4b5d-9881-355b3d50e378"
        },
        "item": {
          "id": "cbe30579-cc1e-4991-a78b-e4fa83190598",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "9c4cd949-471d-4d13-acb8-f9670939024a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8d9d201-c775-4c24-b6d4-bc7f31133291",
        "cursor": {
          "ref": "5a2f6bc1-614d-4aff-8f12-baafa7f52b66",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "dafd3c1b-45a8-46aa-b299-368b67ab5b0b"
        },
        "item": {
          "id": "b8d9d201-c775-4c24-b6d4-bc7f31133291",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "86b07cb1-7c03-49e8-a3cd-f38398443529",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22182360-0629-41f8-886e-564481b77b28",
        "cursor": {
          "ref": "f7c57247-67eb-4752-b3d1-dba933c9021f",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "6c72f800-7853-49c0-9ad3-410ec7d840b1"
        },
        "item": {
          "id": "22182360-0629-41f8-886e-564481b77b28",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "fc561d36-9946-4911-9681-2d0268adb41d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "394036d8-0403-4d40-8552-a0d1283d18a9",
        "cursor": {
          "ref": "c0472e95-4d32-47a2-9b84-91136607747a",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "42d046d9-8da1-40f6-ab52-253e5faf3a94"
        },
        "item": {
          "id": "394036d8-0403-4d40-8552-a0d1283d18a9",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "9254c9f5-29e7-4557-94ae-fe00d8ac6acc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c84c10b-ea97-4884-a389-c844e8f33800",
        "cursor": {
          "ref": "3a3b9089-e728-4b01-a83c-2f2a04e50ac7",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "0ef9b109-c5ab-48c6-8dab-f3b7aad512d7"
        },
        "item": {
          "id": "4c84c10b-ea97-4884-a389-c844e8f33800",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "179c9e50-32e3-4fd4-bdf3-630caa71e78f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "874bd361-d371-45cd-97b4-5608bf541c68",
        "cursor": {
          "ref": "a5a9763a-cc43-4f57-b2f1-7dd0374daf37",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "71cd277a-35fb-4a28-931b-e28ff1c5af31"
        },
        "item": {
          "id": "874bd361-d371-45cd-97b4-5608bf541c68",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "21fa6f34-941d-4878-adb2-1de6447a3c85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93354cdd-57b5-4524-a7da-5f64aae1acc1",
        "cursor": {
          "ref": "3e0e6bb1-8cf2-4f0d-af61-2440050fb220",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "7c01375c-e5bd-4e05-ba13-978d59a54632"
        },
        "item": {
          "id": "93354cdd-57b5-4524-a7da-5f64aae1acc1",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "5cb2bb93-af6a-445f-97bc-7a3cf0a99d45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "374f4067-f635-4f25-94d3-5497f971ab70",
        "cursor": {
          "ref": "84dbce84-96ed-4e3b-958f-9d19a6bfa977",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "8f90a4d8-fe84-48ad-8088-c2f89a49c78d"
        },
        "item": {
          "id": "374f4067-f635-4f25-94d3-5497f971ab70",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "07129ddc-a12c-4da4-84b8-2a3b76842608",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc5422d9-94d4-4a9e-b042-b9853c379743",
        "cursor": {
          "ref": "30385191-b5d5-46c1-8197-1bf014f85715",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "2503baf7-f870-44e3-bcd8-9359eca88802"
        },
        "item": {
          "id": "dc5422d9-94d4-4a9e-b042-b9853c379743",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "145c464c-8b4d-4909-908a-97419207ec2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "ece8f138-f038-42d8-b1ec-618428327fb8",
        "cursor": {
          "ref": "fed9b44c-0c2d-490f-a461-757b62cc4ee2",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "33684fb4-7b34-429d-a0df-0097a4d39db6"
        },
        "item": {
          "id": "ece8f138-f038-42d8-b1ec-618428327fb8",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "1d26941c-b2f4-4e2c-9508-d7d37a29cfc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38f3cb82-946b-40c4-92a4-b53053e36940",
        "cursor": {
          "ref": "f59e4849-0511-4faa-8f53-17ff1a8658fc",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "400b8d53-eab1-43d0-a9b0-8b6af7c9a30b"
        },
        "item": {
          "id": "38f3cb82-946b-40c4-92a4-b53053e36940",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "ea8bdd31-8390-43a1-9baa-8452237665c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70b76155-06d1-4ecc-a365-095a8a3862e1",
        "cursor": {
          "ref": "fba53010-c83f-4de4-bf65-633961b1f858",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "fb6aa4cb-e67b-45ce-bc2b-9c143e58b8d9"
        },
        "item": {
          "id": "70b76155-06d1-4ecc-a365-095a8a3862e1",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "317571c0-ef7a-48a6-ba35-e9a49a25932a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a5bf70d-2b0c-4368-b071-efbe543b127e",
        "cursor": {
          "ref": "bdb2d01e-098d-4b0f-a36c-d9bbdcdbde61",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "0e4ebb40-1181-4b0d-890f-ed8e87b97061"
        },
        "item": {
          "id": "8a5bf70d-2b0c-4368-b071-efbe543b127e",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "09c8a6ff-edce-47a2-b896-04af7669bb3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bad5ab06-5242-4ae1-89aa-b1e229650baa",
        "cursor": {
          "ref": "d9aa24b3-d7c4-4add-9dcd-e9a83c5d4e2b",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "c2266f91-ba93-472e-acd1-f3425ac83fa7"
        },
        "item": {
          "id": "bad5ab06-5242-4ae1-89aa-b1e229650baa",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "d1c1952c-2013-4e36-8d4a-3a169f5f0d60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "504ade82-5664-4e2e-bf14-bcae0c9a3c85",
        "cursor": {
          "ref": "e11256c3-ed2c-4750-83ad-d70bf9c77821",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "f72964a6-57a7-4d0e-8627-f0e7c23abcd3"
        },
        "item": {
          "id": "504ade82-5664-4e2e-bf14-bcae0c9a3c85",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "2f1350b6-53a3-4597-be55-061ea8a5c908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d5d5ff0-fdd2-4b51-91dd-4e0d8d646a9d",
        "cursor": {
          "ref": "a3a5d9f2-8727-49df-9cfc-7f95355d2025",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "6d407d7c-71ea-486e-9468-0feaf14cd401"
        },
        "item": {
          "id": "6d5d5ff0-fdd2-4b51-91dd-4e0d8d646a9d",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "42661d35-b932-4e99-a5e5-3c47a9a13645",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "f9f77924-4034-436c-86a0-4e44fd09808c",
        "cursor": {
          "ref": "5acbd460-5caf-437e-93be-05659746fa4b",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "d501c4f4-aafe-4181-8a8f-26e29c562673"
        },
        "item": {
          "id": "f9f77924-4034-436c-86a0-4e44fd09808c",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e4c1f49b-e3cd-4d25-af92-d395a0fa49f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "204e49c8-774d-4c15-973e-ce35063c5423",
        "cursor": {
          "ref": "9c84d828-273a-4ecc-bb79-87baaad63545",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "7f7ef17e-9891-4c74-a195-4edd9b968d86"
        },
        "item": {
          "id": "204e49c8-774d-4c15-973e-ce35063c5423",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "e15061da-aa93-48bf-8211-d5ef718c0237",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6446078e-8111-4e89-97bd-36f7869b75a1",
        "cursor": {
          "ref": "385a2798-d600-4c82-8afe-2c6abfb56b8d",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "c4a153a2-e379-483f-99db-f90482304073"
        },
        "item": {
          "id": "6446078e-8111-4e89-97bd-36f7869b75a1",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "b5a75b1f-dbbe-418a-adcf-69a5e9a38366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24520f97-5f1a-4ce5-8d22-0e8d7271e0ea",
        "cursor": {
          "ref": "78d52608-8198-48e8-bd34-3b6d3e06d7e9",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "f09c3402-c4c3-47c4-bbbe-44492c38a0c8"
        },
        "item": {
          "id": "24520f97-5f1a-4ce5-8d22-0e8d7271e0ea",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "e153377a-de70-4f68-b10c-2e444f31eefc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "733f1465-be92-482d-aeaf-04cd61a1db1a",
        "cursor": {
          "ref": "b720aab1-234a-4aca-8abb-1a1059e519b7",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "260b7ee9-5ac7-43c8-8d8a-7825d1019343"
        },
        "item": {
          "id": "733f1465-be92-482d-aeaf-04cd61a1db1a",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "57487da3-1789-4e4a-bc13-840b738392c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "980cf6ed-08b3-4081-8296-276ff199e99a",
        "cursor": {
          "ref": "5cbdb1b0-4b16-4b2a-ba15-a5f03e7a7ac1",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "89cc02b1-5be3-4ef5-865d-ea1b9e266c78"
        },
        "item": {
          "id": "980cf6ed-08b3-4081-8296-276ff199e99a",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "7c9ea291-437f-48b2-a9ba-df3e25f06448",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0cac691-a7b0-4b36-892e-dc8dd597e822",
        "cursor": {
          "ref": "7fb2e0c0-6794-4e5a-a135-c6f08607aeeb",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "e4ba46d2-8b43-4895-b3bf-3dd27cd97b60"
        },
        "item": {
          "id": "c0cac691-a7b0-4b36-892e-dc8dd597e822",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "cb69b0a5-c713-44d5-8c95-d263bcf6562f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f89d9352-6e19-4a4a-afce-c4d4a03dba1e",
        "cursor": {
          "ref": "c4ff7518-ec7a-47fa-a85e-d694e5e7a23f",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "12636a27-fe3f-458c-9a23-1fc98f482792"
        },
        "item": {
          "id": "f89d9352-6e19-4a4a-afce-c4d4a03dba1e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "936282e6-4155-4d03-83b5-8d33e55c787a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4f067e0-b218-4b15-b0b5-bfe893d139c2",
        "cursor": {
          "ref": "13cbf79e-c311-4996-8caa-79cd80ff71aa",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "2cf2cf7a-4179-41cf-8a8f-57b0fe6f81eb"
        },
        "item": {
          "id": "d4f067e0-b218-4b15-b0b5-bfe893d139c2",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "1389fd8b-cdbf-42df-afd3-c364c939c0cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89dc291c-a876-4315-a46c-f9703b19fdee",
        "cursor": {
          "ref": "a2c08af2-8c50-4e1e-a77b-4809c4d19095",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "9d733037-7689-44ee-bb5c-bfd876cd8be5"
        },
        "item": {
          "id": "89dc291c-a876-4315-a46c-f9703b19fdee",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "e79ad233-eb54-4b4f-b82e-0268dc68dec6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "585700d4-ebad-4baf-82dc-70b202b8d007",
        "cursor": {
          "ref": "f8371641-325d-47d5-bd7a-6a810aad2a42",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "4d3e652a-bf85-41df-bbb4-5423d1dc4d42"
        },
        "item": {
          "id": "585700d4-ebad-4baf-82dc-70b202b8d007",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "2cfbc7da-a604-41c0-a363-3f072cea4759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c60e3cc7-f2a9-4236-a6bc-ecf86ab5293d",
        "cursor": {
          "ref": "f5ec17f9-87c5-4629-a320-b6fd9aff0598",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "a363ec5d-13dd-44a2-affc-b97a39f8adee"
        },
        "item": {
          "id": "c60e3cc7-f2a9-4236-a6bc-ecf86ab5293d",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "4ed4f9d4-41d7-4a42-aded-2a11370da73a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11c756b5-c2e5-4bed-84a1-a55746e3d033",
        "cursor": {
          "ref": "0303d59b-896e-4f31-a671-663f82e5f957",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "08ea803f-b3a0-41be-858d-b3e5b74364be"
        },
        "item": {
          "id": "11c756b5-c2e5-4bed-84a1-a55746e3d033",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "b268e595-9b4c-4dcd-9a3d-4971d05323a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78690022-4d26-4427-85c4-083786c6873e",
        "cursor": {
          "ref": "0681c437-b765-4c14-ab37-52648aba78e7",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "4c88cc7f-0886-4ea2-a34b-d47e0d5a49c3"
        },
        "item": {
          "id": "78690022-4d26-4427-85c4-083786c6873e",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "280fc795-7d6b-41ba-bbdc-11b406c877ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1aa5100-e94d-4d11-8697-93a5bd45f989",
        "cursor": {
          "ref": "240b3e36-6b73-4714-801c-425a3fc37a4b",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "6aafd022-097f-4272-9f9d-9bcc7ad3e26f"
        },
        "item": {
          "id": "c1aa5100-e94d-4d11-8697-93a5bd45f989",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "e1e6ef39-4586-48cc-ab39-a99ec9845f06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "062c649a-96b6-45cb-9450-adce6674dd90",
        "cursor": {
          "ref": "e44b5984-95c1-4321-9a7a-ccfd2ef5a4b0",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "bac6e248-22c9-4038-ac23-0a916f2fa00a"
        },
        "item": {
          "id": "062c649a-96b6-45cb-9450-adce6674dd90",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "b6eb09a7-796c-4b77-9ca6-0c8a16525399",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44d781b7-4807-4781-b107-6ee5a3fbdb83",
        "cursor": {
          "ref": "474b32e2-5524-4388-9aad-b0913b3a5d34",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "59b5f160-33c0-48ca-9c6e-c2b8b6642a9a"
        },
        "item": {
          "id": "44d781b7-4807-4781-b107-6ee5a3fbdb83",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "ea050129-16f9-49a2-b096-6514bb74a490",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a6cc145-f533-4603-a097-abd229027858",
        "cursor": {
          "ref": "dd4fe3c6-949c-42a8-b69a-59d3de9afb5f",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "d114ea57-22d7-4d27-a42d-0bc5c540391d"
        },
        "item": {
          "id": "2a6cc145-f533-4603-a097-abd229027858",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "0dbdac57-66bf-48c9-844e-6409736318ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39b52a2e-4502-47b0-b0fe-a7a26a72de1d",
        "cursor": {
          "ref": "917cf1ad-e86e-4500-86a6-e107a2543de0",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "249fe10f-c34c-4898-9bd4-ed6c9bf9437a"
        },
        "item": {
          "id": "39b52a2e-4502-47b0-b0fe-a7a26a72de1d",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "a38acca6-305c-40f0-9863-44d9aa06ab96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76f0dd75-06bd-43c4-a2c1-1bfba5797798",
        "cursor": {
          "ref": "ea381650-f402-4114-aeb8-2d4844cf9fb2",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "a31b410f-0f31-463d-864a-de947b6e0c0b"
        },
        "item": {
          "id": "76f0dd75-06bd-43c4-a2c1-1bfba5797798",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "2eeb13fa-1d99-417d-b2d3-0292c04b426a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 684
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c6b18dd-bd81-40f7-917f-619817d7ecb6",
        "cursor": {
          "ref": "2dafe149-1891-42ff-a98f-b2a7b11e86d8",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "6bf6c045-b022-4c7c-b211-3d94ad97e162"
        },
        "item": {
          "id": "1c6b18dd-bd81-40f7-917f-619817d7ecb6",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "da0c1aa2-4813-40e7-92dc-f352df3ab878",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed76457e-fdff-45c2-9f97-8c8ac0dd28b3",
        "cursor": {
          "ref": "e58125a4-a27b-4519-b516-590221d94c4c",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "8e1aff8b-0b8e-4721-ab55-58053e01cd96"
        },
        "item": {
          "id": "ed76457e-fdff-45c2-9f97-8c8ac0dd28b3",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "7bc0ad1b-412f-4517-b494-d69a94f2c296",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7abec63e-eaf3-4f8d-a8ef-79662c003b11",
        "cursor": {
          "ref": "46326778-d7c7-4072-aba9-0ebbc6112a2e",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "67919586-5ac0-4b41-9032-6321aa19138b"
        },
        "item": {
          "id": "7abec63e-eaf3-4f8d-a8ef-79662c003b11",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "c4c05d75-f4b9-443c-aeee-f49419347492",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03afde88-4851-4568-83ee-f5265dbce1fa",
        "cursor": {
          "ref": "0e451459-0697-4140-9b23-e44604a396e8",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "27a026e2-ae1b-4098-a22d-b46f54680b11"
        },
        "item": {
          "id": "03afde88-4851-4568-83ee-f5265dbce1fa",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "81b828bf-1634-4517-8944-2a4c6a7dea05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53874323-d767-4bc6-95d1-a2f87f81c6c6",
        "cursor": {
          "ref": "2fdd2b32-8d6c-489c-bad2-6218d3056965",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "9e7a5309-83cc-4a16-9974-70e21afdd2c6"
        },
        "item": {
          "id": "53874323-d767-4bc6-95d1-a2f87f81c6c6",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "e67bc708-a2cc-4a29-b639-00637ced6607",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28960e9e-0ec2-4a62-af36-f19e3e35d51f",
        "cursor": {
          "ref": "0cf0883c-1dd1-474b-ac1a-cbf2e6f07cbf",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "fb403b3d-11ff-44b3-bec4-0f0ea0836c56"
        },
        "item": {
          "id": "28960e9e-0ec2-4a62-af36-f19e3e35d51f",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "0c00b4ef-f50a-4b78-8035-0a77453e467b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "806131f7-c844-4af2-8b39-ca276ccd9a19",
        "cursor": {
          "ref": "8d2f507f-0db5-4b08-85f8-01fac840a435",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "2faa40ae-a628-4cc5-b0bc-36f02ccd92f6"
        },
        "item": {
          "id": "806131f7-c844-4af2-8b39-ca276ccd9a19",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "771ca62d-9720-4430-af0f-f37b75fd50ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0d1ca08-9d25-4649-bb1d-19a5af93451e",
        "cursor": {
          "ref": "91720146-5b29-489b-9909-a437e906483f",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "9b4d52ed-6dd6-40cf-8e34-0be1974aabb4"
        },
        "item": {
          "id": "f0d1ca08-9d25-4649-bb1d-19a5af93451e",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "cc3a4ade-a1dc-4537-9580-82350766175a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26662dc6-683b-4b75-952b-97c028858603",
        "cursor": {
          "ref": "7008aee7-968d-4f67-a17b-35c467583ef8",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "dc745798-2fc1-4d1d-866a-7683479a2038"
        },
        "item": {
          "id": "26662dc6-683b-4b75-952b-97c028858603",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "41656b7d-a665-4b34-8369-66e0ea7d3bc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f385ea26-3311-40c6-81b0-767c1726ab43",
        "cursor": {
          "ref": "0b841ac8-c35b-45a5-a959-667e80ae5fd0",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "ed578942-ec2c-48f2-b8ff-349a73a30ef4"
        },
        "item": {
          "id": "f385ea26-3311-40c6-81b0-767c1726ab43",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "1486ad7d-2a49-4da9-a677-3052ea68f7c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f773e5c-b104-4e62-8684-587c722461a6",
        "cursor": {
          "ref": "cbb1fe44-ce38-4d00-9c37-aeba128078e2",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "21b83c75-e2ec-4f0e-91ce-4108ccc33442"
        },
        "item": {
          "id": "2f773e5c-b104-4e62-8684-587c722461a6",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "c422207e-31f0-41f1-9daf-3dc6b6a84102",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe068d8e-cd0f-4a4b-85c7-5d5c3c66fb21",
        "cursor": {
          "ref": "1ed53d44-6c9b-4a23-bcef-aa889775aafb",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "7d30fa4b-e015-4e70-ab35-a92d0297cbeb"
        },
        "item": {
          "id": "fe068d8e-cd0f-4a4b-85c7-5d5c3c66fb21",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "0830062c-4438-462f-91e4-ba97e49c90f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de0fc919-06dc-419a-866e-f0c35473a0dd",
        "cursor": {
          "ref": "6c09a90d-67c4-4197-a205-76c34247ef14",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "10dca9b8-ab96-40bc-bb1c-966875679ed1"
        },
        "item": {
          "id": "de0fc919-06dc-419a-866e-f0c35473a0dd",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "87f5b608-ae7f-476b-a2d3-e64b2dabf7a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbc8967e-139d-4660-ba28-1a3226462da1",
        "cursor": {
          "ref": "e9b32b89-e9e3-459a-82df-6bbb862a4bd6",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "133efcc9-84d3-42e8-af86-aa8d3eae4569"
        },
        "item": {
          "id": "fbc8967e-139d-4660-ba28-1a3226462da1",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "94d28fea-fb36-4845-b00d-05021cf46a63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cde9e1e5-a68b-4e17-a4bc-b503494a947e",
        "cursor": {
          "ref": "0dc9c988-c1bd-44f4-a357-4505646e586b",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "d9204a5c-ee22-4eb4-9abf-d664fb906527"
        },
        "item": {
          "id": "cde9e1e5-a68b-4e17-a4bc-b503494a947e",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "50bdcfa1-9dd9-4922-beb8-3d6231ea65d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "554cf19e-6dc1-4bf7-8aab-429674fff9cc",
        "cursor": {
          "ref": "15dfb32c-5367-41d8-8d02-945d0c93899e",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "a9219be8-16c3-4517-b225-644e3a6f8e8a"
        },
        "item": {
          "id": "554cf19e-6dc1-4bf7-8aab-429674fff9cc",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "ce483f17-7714-4880-939a-cdc4ae819433",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "411f68ba-c65a-48c8-a9ae-6ad6549fc26e",
        "cursor": {
          "ref": "134cc4a9-ebea-4d9c-a263-4c32fd87d7da",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "3f4db133-703a-4008-859f-5299e346923b"
        },
        "item": {
          "id": "411f68ba-c65a-48c8-a9ae-6ad6549fc26e",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "b5d92a9f-34cb-463e-8b6c-54a7ef102953",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1a2d4e5-8050-4eb5-a64b-4ed6fbc75420",
        "cursor": {
          "ref": "8913f31f-5936-4ec6-be4f-91703b7c36b4",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "15b0e0d6-f080-4a2a-bc39-ee3d01572f46"
        },
        "item": {
          "id": "a1a2d4e5-8050-4eb5-a64b-4ed6fbc75420",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "5deeb7b1-dbf0-49fa-8d38-efebef0165e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab7fb890-1907-4e70-99c9-287bb9dbd388",
        "cursor": {
          "ref": "29012726-e6e9-4196-9f09-64aff68d9a39",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "9a8a9b59-29ee-4d65-a410-18a1f7039cd1"
        },
        "item": {
          "id": "ab7fb890-1907-4e70-99c9-287bb9dbd388",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "84b297dd-0ac5-40eb-8843-ec4d5e7a119a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 514
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20a260ff-e7b3-4866-852a-7ccf29542222",
        "cursor": {
          "ref": "7d0e7a30-8e20-48cb-ab29-e48f9592baae",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "ddd51c13-b739-4ef1-af6c-e9a2a18eaf2e"
        },
        "item": {
          "id": "20a260ff-e7b3-4866-852a-7ccf29542222",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "81bec63d-8726-4073-847a-abed2cceb4e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "158909b3-441a-4a99-9339-af9b394f4dfa",
        "cursor": {
          "ref": "8b0c4741-a02c-42cd-adb0-f780c9a73283",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "626928dd-860a-457b-8eb7-c95a64a58151"
        },
        "item": {
          "id": "158909b3-441a-4a99-9339-af9b394f4dfa",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "543d2c82-85ff-437d-a859-378d31dcdcc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d0f3767-1036-4df3-a2a2-85cfcb573d63",
        "cursor": {
          "ref": "0c51fe9d-4afe-4d55-aacf-e97432293c7f",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "259bca47-10f4-4aaf-8f7c-8388951bc5d2"
        },
        "item": {
          "id": "6d0f3767-1036-4df3-a2a2-85cfcb573d63",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "d4d45a7f-bac8-4499-a5db-8cbaa9f2e3b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e8876d0-5dd3-4984-b3c0-6ea207988f33",
        "cursor": {
          "ref": "4c5e109c-ad92-473a-89f6-ac94f10eb2cb",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "5680841b-7d62-4d38-a596-b0f5f9593da8"
        },
        "item": {
          "id": "7e8876d0-5dd3-4984-b3c0-6ea207988f33",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "597042df-c394-4b59-a4ce-bec37455ccf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69244367-625f-422c-9cdf-8786482f03a8",
        "cursor": {
          "ref": "70303148-d4d6-44cd-ba1d-874fd344f8cb",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "41ba4f45-2e84-46c0-a597-9ca64b51e163"
        },
        "item": {
          "id": "69244367-625f-422c-9cdf-8786482f03a8",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "3253e79e-08df-49ba-83f0-75bf719e2802",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e609e491-2e6d-4dac-b210-dc20042e58a0",
        "cursor": {
          "ref": "0fc6be8f-7184-4634-9070-313a6eab8013",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "b4d2529e-3441-4aeb-a1f2-5b4c1a4c008e"
        },
        "item": {
          "id": "e609e491-2e6d-4dac-b210-dc20042e58a0",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "4521a492-c7c3-4ed5-b65a-118201d1b63b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df342240-01b0-4e98-91be-41912bd2930e",
        "cursor": {
          "ref": "4ccd7809-38f6-4ab9-af49-58d4b63ed202",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "04e83a84-2864-415e-96ee-bbd3d75cec17"
        },
        "item": {
          "id": "df342240-01b0-4e98-91be-41912bd2930e",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "cee9c5e1-927c-4c33-b1dc-bf9be40e2251",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55002b89-074c-425f-b641-1d3ca8075c2c",
        "cursor": {
          "ref": "150039ef-a0e8-4839-a8d4-b9b0e39e9c87",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "94aa0532-392e-419c-8e28-10edeb66b6f5"
        },
        "item": {
          "id": "55002b89-074c-425f-b641-1d3ca8075c2c",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "e09fe0e2-b1b8-4fbf-9b2e-b44efcc57577",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "427c999d-1173-4944-9918-e34a177df0b9",
        "cursor": {
          "ref": "5e47c523-c710-4026-a90d-52e986ac50fa",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "bcfa9808-9d7a-43dd-a650-78ffe548a84b"
        },
        "item": {
          "id": "427c999d-1173-4944-9918-e34a177df0b9",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "ac2eb034-9499-483a-85e9-904df36d342c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50b12438-a4fe-4a8e-a838-c194a54ecbf2",
        "cursor": {
          "ref": "f889b408-3e61-4d92-b2bf-d7492382624d",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "9085b763-70f8-4f17-9d53-d64063501131"
        },
        "item": {
          "id": "50b12438-a4fe-4a8e-a838-c194a54ecbf2",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "f8be0a75-b1b9-408a-8c94-0b24e6bc0686",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 319,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d66486f5-b7d7-42a9-af9e-9fa2bd9fe032",
        "cursor": {
          "ref": "d1c8b736-43e8-4d5a-9ec0-c2e3f4ebd150",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c1ae8558-8b56-4a0e-8a82-467b00ff52a9"
        },
        "item": {
          "id": "d66486f5-b7d7-42a9-af9e-9fa2bd9fe032",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "0f498aba-d6a7-4900-8401-9c3c833146d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "dfd9506d-56f2-4849-a7ad-051ac4c19bba",
        "cursor": {
          "ref": "2ea2daab-9f1a-4aa7-ad76-c499990fd0e6",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "5cfa6005-86b7-4e4a-8492-78a8e0ad4e7b"
        },
        "item": {
          "id": "dfd9506d-56f2-4849-a7ad-051ac4c19bba",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "e63680f4-d052-46be-9435-f0d4f614a1ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "23c8ab61-b9ce-4736-aff7-c6c4d587ed0c",
        "cursor": {
          "ref": "dafe6393-137b-4daa-8738-ae722577af89",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "06dfded5-c0b6-40fd-8146-b9290c3144d3"
        },
        "item": {
          "id": "23c8ab61-b9ce-4736-aff7-c6c4d587ed0c",
          "name": "credentials_issue"
        },
        "response": {
          "id": "b8ca2958-e1cb-4290-bd88-2a1be85f69a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:106)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:106)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:106)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 6,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:7:106)"
            }
          }
        ]
      },
      {
        "id": "181bde26-6ac9-46f8-9747-483959b14620",
        "cursor": {
          "ref": "3e18c82d-adc8-48e3-b710-b13f6deadaac",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "80888e66-aaca-4b22-b3d4-7511b1f3c756"
        },
        "item": {
          "id": "181bde26-6ac9-46f8-9747-483959b14620",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "9a1e8d73-0c15-4605-b299-899d8738b7d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:107)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "d290d635-f399-4508-991d-ece66f6166a2",
        "cursor": {
          "ref": "f1e5a0e9-9c51-4137-89e9-6bebbbac8572",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "9fbe5238-bf9d-4cd4-8406-e5a929ec0d03"
        },
        "item": {
          "id": "d290d635-f399-4508-991d-ece66f6166a2",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "54a86bb3-0b6f-484c-b969-6a33ca550c07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:108)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:108)"
            }
          }
        ]
      },
      {
        "id": "ddca42a8-c87b-414a-be0f-13527386afb3",
        "cursor": {
          "ref": "7bd016a1-3c5a-4076-8e98-0ea31783de63",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "742e17ac-d67a-4aca-b85b-f553fb862089"
        },
        "item": {
          "id": "ddca42a8-c87b-414a-be0f-13527386afb3",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "28e06eb8-8d16-4aae-b3e9-8b45ea875c7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:109)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:4:109)"
            }
          }
        ]
      },
      {
        "id": "12323711-b7ed-48c3-8827-d6913e283fa0",
        "cursor": {
          "ref": "c8bbc3a0-8de9-46b5-8a2f-242b4f058d65",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a1a615a1-a0f5-4e24-a4d1-8412b49e37ce"
        },
        "item": {
          "id": "12323711-b7ed-48c3-8827-d6913e283fa0",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "dc38cc51-7b30-4cce-b638-5816b9659791",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:110)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:110)"
            }
          }
        ]
      },
      {
        "id": "6c5a48ab-5be6-49ed-89f4-3e5585f5bb56",
        "cursor": {
          "ref": "75eb4a73-54af-4332-80e4-d16e40b05bc8",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "243fad94-17b9-497e-b7d3-7b66ba3e41cf"
        },
        "item": {
          "id": "6c5a48ab-5be6-49ed-89f4-3e5585f5bb56",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "59fad750-74e5-4ca7-8e18-966e3a29e186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c5a48ab-5be6-49ed-89f4-3e5585f5bb56",
        "cursor": {
          "ref": "75eb4a73-54af-4332-80e4-d16e40b05bc8",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "243fad94-17b9-497e-b7d3-7b66ba3e41cf"
        },
        "item": {
          "id": "6c5a48ab-5be6-49ed-89f4-3e5585f5bb56",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "59fad750-74e5-4ca7-8e18-966e3a29e186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68df5202-2b23-4fed-b844-5deb15d53d36",
        "cursor": {
          "ref": "c01df2da-ece8-4aba-a5a0-ab60fae52027",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "d69895a0-3bcd-4050-8469-570ab087bf67"
        },
        "item": {
          "id": "68df5202-2b23-4fed-b844-5deb15d53d36",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "cc933ce7-ce5c-4f16-bf65-6b52b59ae657",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 307
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6307cd9-57c5-471b-a7f6-080091a19afa",
        "cursor": {
          "ref": "fd27d808-ed6c-469f-878d-9454ee414b07",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "f419baf4-7d0e-4f39-b048-6ade37b8856c"
        },
        "item": {
          "id": "e6307cd9-57c5-471b-a7f6-080091a19afa",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "7d1bbdac-aa65-4aed-bea4-ec03ac608abc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 306
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90c923f8-8583-4cb4-ad66-b3371917ff85",
        "cursor": {
          "ref": "c4e0aa24-44a7-4351-ba18-a85c6b6b5c8c",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "64613bbd-0245-485a-9a8f-cc9f396d32b9"
        },
        "item": {
          "id": "90c923f8-8583-4cb4-ad66-b3371917ff85",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f06c1f59-d593-4f4e-80e2-8f7290768442",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf1cf55b-a2ff-49f6-a50e-1638d44aa68b",
        "cursor": {
          "ref": "b8f473f9-0f8f-429a-98ce-7dfbebb85354",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "b32e2b33-4236-42e2-a8fa-82fdaacb0bb6"
        },
        "item": {
          "id": "bf1cf55b-a2ff-49f6-a50e-1638d44aa68b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "687b428b-61ea-4032-84c1-c69490476913",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78e423fd-578b-4965-9750-4d10984807a2",
        "cursor": {
          "ref": "0f8f336c-9a40-449b-9ccd-246f9a6b2775",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "9b7c2d30-b310-49df-83f9-f6bac7c1fdb7"
        },
        "item": {
          "id": "78e423fd-578b-4965-9750-4d10984807a2",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "8a1a174a-8c54-4400-a019-09d0449994f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "418cf206-2b6f-4bd9-bf10-7e843a391aa0",
        "cursor": {
          "ref": "799caebe-427d-468d-914b-e93e909d93c1",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "7169d82f-3d95-43bc-9592-4180a3a743aa"
        },
        "item": {
          "id": "418cf206-2b6f-4bd9-bf10-7e843a391aa0",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "3c75645b-26f7-425f-a3d2-2b6edcb5bc0e",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "b56e264a-20e3-4171-8b9e-b7afd0a60fc9",
        "cursor": {
          "ref": "4f9fa7b7-26fa-4aca-8a42-a3cb13918a7b",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "2448c792-8e9e-4877-9cc1-fbc150376ad8"
        },
        "item": {
          "id": "b56e264a-20e3-4171-8b9e-b7afd0a60fc9",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "dc0baa35-15d7-47b2-8f28-1f828b258297",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0116643b-7939-485f-af6a-1a83437b1edf",
        "cursor": {
          "ref": "af44c5b7-0ff7-47d0-a96e-df4583d35e36",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "753f3def-c558-4f91-a133-4fed3e22ca34"
        },
        "item": {
          "id": "0116643b-7939-485f-af6a-1a83437b1edf",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b756cfa1-02e3-42e9-933d-8890139534d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fea0c99-d5ae-4549-8d43-e89d3f02a4f2",
        "cursor": {
          "ref": "df4e788a-fc5b-4c5a-b15d-5384fc15cd75",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "38237f6e-885c-48fd-97dc-838a8ea1bd0b"
        },
        "item": {
          "id": "9fea0c99-d5ae-4549-8d43-e89d3f02a4f2",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "91b6c3e4-5482-40c6-ab28-56ed2afe394f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d8ed32d-14e4-4d1f-9059-c40f97b69f9d",
        "cursor": {
          "ref": "369e7e2b-cf22-4d31-95cc-be14cfce326a",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "f857de43-51ed-4412-942f-c22d5190308a"
        },
        "item": {
          "id": "4d8ed32d-14e4-4d1f-9059-c40f97b69f9d",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "0fbd0c84-cbff-4044-a9f7-23b77a41b5a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2dde6c77-3805-412a-a7c2-a8a45efa6f0d",
        "cursor": {
          "ref": "43382695-19f0-42ed-bc52-a3e8a2d6e841",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "c89f1b28-1820-4c13-a898-c0ab8ab8e997"
        },
        "item": {
          "id": "2dde6c77-3805-412a-a7c2-a8a45efa6f0d",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "bc4dfbd1-d50e-48a8-acbe-57602080de11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c1f6446-3246-46d9-ae49-73275d61d09d",
        "cursor": {
          "ref": "93fa2f67-3284-4201-948c-114dfba910f5",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "91c9157a-1501-49f3-9c48-92e8b5917031"
        },
        "item": {
          "id": "7c1f6446-3246-46d9-ae49-73275d61d09d",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "8a1204ff-72b7-41d5-8d86-8233a8343584",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8066f39e-cb01-4d23-a572-0a5aa9a3a42c",
        "cursor": {
          "ref": "beeff22f-1537-4211-b839-742fa78c158b",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "011f915e-40d8-4e19-a645-c8a46505f04e"
        },
        "item": {
          "id": "8066f39e-cb01-4d23-a572-0a5aa9a3a42c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "480d0218-2b5c-452d-87e9-82970db189e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e5b7226-1972-4c26-9a74-202345b3cc00",
        "cursor": {
          "ref": "00e32bd6-e394-46bd-a7af-c0dfe871fac1",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "7826e217-7899-4fa2-81d5-4976ffcf8b3a"
        },
        "item": {
          "id": "7e5b7226-1972-4c26-9a74-202345b3cc00",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2237c13b-2a04-4f23-82b1-ba1f41ea5397",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c1ba7f6-46ce-41d1-8afe-38885449eebc",
        "cursor": {
          "ref": "8b6daab1-a614-4456-aae1-c7491beda9f9",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "9f9102db-de40-4868-aa9d-efbd66bdd374"
        },
        "item": {
          "id": "9c1ba7f6-46ce-41d1-8afe-38885449eebc",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ec9b8b58-5590-4f29-82b7-07433950ee6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed20ba4c-f4aa-4164-b5c6-f7468390f69a",
        "cursor": {
          "ref": "004afc98-2ebc-4080-ab50-4b679a859489",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "c194c69f-0477-42ff-9f09-bbc989483570"
        },
        "item": {
          "id": "ed20ba4c-f4aa-4164-b5c6-f7468390f69a",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "39e3891f-f9db-417a-a778-bb670d79fff8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f23f6a8-a35b-4ffa-b588-66cf806a1627",
        "cursor": {
          "ref": "c3d57a8f-e453-49bc-b7e0-c5e87443e1f8",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "b274bf86-10fa-4419-aa8c-e442fe52f998"
        },
        "item": {
          "id": "8f23f6a8-a35b-4ffa-b588-66cf806a1627",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "38000bcd-424d-4974-9d39-3703d695689a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d59494f-1d17-443b-831a-bf38141c653d",
        "cursor": {
          "ref": "96f2a0fa-d713-4260-9aa5-db4d8c9a0561",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "3f4a6f21-8871-42eb-b25c-32f359a32ba8"
        },
        "item": {
          "id": "5d59494f-1d17-443b-831a-bf38141c653d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "1c23827c-05d4-494b-98c4-66d709a30ae3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd1f2ee7-d2d8-46e3-aedf-bba693936086",
        "cursor": {
          "ref": "e33ce7ab-b8b9-47ff-8972-fac5b0b6b821",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "d8a31321-c494-4e7a-9561-1aabd0c0a217"
        },
        "item": {
          "id": "dd1f2ee7-d2d8-46e3-aedf-bba693936086",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1d869249-813d-4906-8782-df31462adc17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50c504cf-1177-4961-afd9-e02203b65c98",
        "cursor": {
          "ref": "695323cc-2bd5-4341-af18-35ec735f03ec",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "db35a30a-99fe-4b91-8514-ce0e80feac95"
        },
        "item": {
          "id": "50c504cf-1177-4961-afd9-e02203b65c98",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f0d6f46a-26c0-49b1-acef-4077a0643872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2be0c6b0-b170-490c-bdcc-9097988e10d4",
        "cursor": {
          "ref": "aaafdd8a-0b13-4959-8372-f3264e2caa02",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "e145af6b-4e0b-4f9f-82d0-b180178b1625"
        },
        "item": {
          "id": "2be0c6b0-b170-490c-bdcc-9097988e10d4",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "2f09ff3f-616a-496e-bd3e-f1ecb5eb609d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f57e66bc-e196-4bca-9252-11fc8506b858",
        "cursor": {
          "ref": "85b05429-6730-4cb8-91e3-13003a42b542",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "4e976d51-d5dd-4d70-b5af-c06755cc2958"
        },
        "item": {
          "id": "f57e66bc-e196-4bca-9252-11fc8506b858",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "7b9358ef-8ed9-4d96-b903-44f4383b3602",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91cc9361-ffe3-4453-8c93-7d43504eacf8",
        "cursor": {
          "ref": "828f756a-960b-41f4-92ab-fe85ff41f99b",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "f63408f0-f86a-4190-9132-f85fec3717c0"
        },
        "item": {
          "id": "91cc9361-ffe3-4453-8c93-7d43504eacf8",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b4c5b7e9-03ac-4a48-9548-d2941eab7bbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47394176-b348-4b40-bf72-561092d24be8",
        "cursor": {
          "ref": "bb68a1c0-70c1-44a1-b4a1-233aefb53dc6",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "05681f48-9576-4071-aac3-98a28c4c11e9"
        },
        "item": {
          "id": "47394176-b348-4b40-bf72-561092d24be8",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "b83ca91a-be11-4252-9852-7d0c653b1e50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "506c0323-076b-4093-ac54-437e624b50c8",
        "cursor": {
          "ref": "965099e5-e809-468f-99c9-6191308d4c58",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "e50221ec-d875-45db-8c99-27f511be45ce"
        },
        "item": {
          "id": "506c0323-076b-4093-ac54-437e624b50c8",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "2d52b42b-cd51-459e-a636-381abf45d20c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "010e3191-47ff-4996-9218-206ff15c1f27",
        "cursor": {
          "ref": "22bb4c70-1bb9-46bf-a4f8-f03e8c71e206",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "13e6c564-d9ed-43e5-91ac-a897ae400e2e"
        },
        "item": {
          "id": "010e3191-47ff-4996-9218-206ff15c1f27",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "928b92cf-dcd9-4165-891e-7bee314ef960",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac7dafac-cf21-4c2d-8045-cdc23bfc316f",
        "cursor": {
          "ref": "31f62daf-13ff-4bf3-8cc0-b156c472d24d",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "2a39d5d1-41b1-4ff7-ac9b-ea8913d8c953"
        },
        "item": {
          "id": "ac7dafac-cf21-4c2d-8045-cdc23bfc316f",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "00a5f721-a5ae-43df-95f0-7e7a40d837ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7facc5c-7e46-4dbf-b092-5438799a5e3f",
        "cursor": {
          "ref": "734ea9dc-b69e-4f95-855e-2ccc44dc0d52",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "1e1da14b-2d10-4715-8908-3c278bf0855d"
        },
        "item": {
          "id": "c7facc5c-7e46-4dbf-b092-5438799a5e3f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "81d06c82-d13d-40c6-84ed-19a6b542ab88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6aba01a-ebea-48ea-a821-e5f546be459e",
        "cursor": {
          "ref": "5d7ddcde-fac7-4243-9bf5-4b2b2bc221c3",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "933d17e0-1ff0-458e-87a4-5eec26342d2e"
        },
        "item": {
          "id": "b6aba01a-ebea-48ea-a821-e5f546be459e",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "4f55988e-f3db-4f00-adb1-2b2f6b793c3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d43d4a8-2b9e-4261-9124-afc36d463abc",
        "cursor": {
          "ref": "d6fab22d-e7b5-4ba4-a0a4-2f4802a046fc",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "726f8a99-1a68-4945-bb33-18d64fada4d8"
        },
        "item": {
          "id": "8d43d4a8-2b9e-4261-9124-afc36d463abc",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "04cc0b29-0975-4175-83c2-2618b25e1821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29b3a11f-0fd8-4525-8f9d-cce694843b99",
        "cursor": {
          "ref": "1df00752-6b9e-4f74-9cb2-18e0fe887061",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "b1dab993-a3c7-4c3a-929d-add54a7b4bbf"
        },
        "item": {
          "id": "29b3a11f-0fd8-4525-8f9d-cce694843b99",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "334fa2c9-dfdc-44ae-877d-7befd6db1310",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df826d46-5e60-4d5a-b210-30d1df5a1509",
        "cursor": {
          "ref": "04d5fdc7-7a9b-47cb-ac20-3826c13e0e49",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "172086ed-fbc5-42c2-a728-9b8eddd89d4f"
        },
        "item": {
          "id": "df826d46-5e60-4d5a-b210-30d1df5a1509",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e9071878-970a-4883-a127-4cdb5518fec3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "a3c645af-3ec2-472e-a27d-e5fb0965efea",
        "cursor": {
          "ref": "487cf428-31bf-43b4-ab3b-37a79ecb0e6f",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "764de191-6e02-44fc-ba76-dada140ff0ae"
        },
        "item": {
          "id": "a3c645af-3ec2-472e-a27d-e5fb0965efea",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "8868acfd-6d68-4824-9ee9-673950f77358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "582d8d7b-5901-4143-b48c-6c76a08c3e55",
        "cursor": {
          "ref": "db14f835-3c42-4d60-8885-25aa54fbfde2",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "bb8c65bb-bc8a-487c-85a1-610b92f53efb"
        },
        "item": {
          "id": "582d8d7b-5901-4143-b48c-6c76a08c3e55",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5832787c-52d7-484a-b806-1d975e0714ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "582d8d7b-5901-4143-b48c-6c76a08c3e55",
        "cursor": {
          "ref": "db14f835-3c42-4d60-8885-25aa54fbfde2",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "bb8c65bb-bc8a-487c-85a1-610b92f53efb"
        },
        "item": {
          "id": "582d8d7b-5901-4143-b48c-6c76a08c3e55",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5832787c-52d7-484a-b806-1d975e0714ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3676c38e-a503-474a-a8b1-8dbba2447cb6",
        "cursor": {
          "ref": "bd6f45ae-0c14-4833-ade4-601c1e04f9af",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "6fcdd0b8-a72b-49fc-a2a5-723df29582ac"
        },
        "item": {
          "id": "3676c38e-a503-474a-a8b1-8dbba2447cb6",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "69adb012-c104-4843-b0b1-f84efe216f30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0024165-0fe8-487a-81cb-9bc99a7301f0",
        "cursor": {
          "ref": "6484913d-30ec-4441-973e-6277357f0a64",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "680dc3ba-8cee-4682-a38b-8268b5075f3f"
        },
        "item": {
          "id": "d0024165-0fe8-487a-81cb-9bc99a7301f0",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "25ea2379-beaf-4876-b53e-87acb9cb8819",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de1ee857-42e8-45a4-add9-66c66409dfd6",
        "cursor": {
          "ref": "12bb8fb4-42b2-4e89-bc25-bde47ba892ef",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "56cd2114-7e32-480d-b44d-d108056c8d08"
        },
        "item": {
          "id": "de1ee857-42e8-45a4-add9-66c66409dfd6",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "cbbb6b27-7136-4c5f-b4c2-ee88d3150d96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f807229-de5d-46ee-a9fb-4e2818f5b52f",
        "cursor": {
          "ref": "f35252d7-dbbc-4453-a039-6a60620cfe0f",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "1680cb3e-c6e3-4bd4-bdb8-35d975083095"
        },
        "item": {
          "id": "5f807229-de5d-46ee-a9fb-4e2818f5b52f",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "1bfc8ead-a80f-42c4-9d53-4b3ad6d58769",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baf562e7-9848-4a53-afbd-2de10ae3ee77",
        "cursor": {
          "ref": "09ca1d65-58df-4152-b398-ae381e7297a4",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "c0a158e1-1420-4944-a11f-217ca12c88d0"
        },
        "item": {
          "id": "baf562e7-9848-4a53-afbd-2de10ae3ee77",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "9526049e-7f0e-464d-b73d-00f5ab2e82f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1cc0bf5-0f43-44dc-a140-2fcbbcc17f27",
        "cursor": {
          "ref": "07a39033-43cc-4ea9-b5e5-6539d2d938f2",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "a3055921-636a-48d9-98a6-d0258f9cfe58"
        },
        "item": {
          "id": "e1cc0bf5-0f43-44dc-a140-2fcbbcc17f27",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "10520702-ab03-4b67-9503-bd58932bff63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04659595-b473-4451-840a-d50303cf90ed",
        "cursor": {
          "ref": "33ca5843-d608-4977-9d9a-ced56def58c0",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "839903b7-1a7f-40d6-bd7d-05aba579fade"
        },
        "item": {
          "id": "04659595-b473-4451-840a-d50303cf90ed",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "f982879b-f598-4152-8ce7-6fde09a972a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7beda379-8110-46cc-9423-40720a8f5a45",
        "cursor": {
          "ref": "93d72448-8678-4f3a-b371-14b30035fdad",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "9806b4bb-416c-484d-a1a6-42d2e16becef"
        },
        "item": {
          "id": "7beda379-8110-46cc-9423-40720a8f5a45",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "8dc70419-2c43-4f96-9cd2-41620b64fc76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "358fb2d4-bf2c-48a7-bac3-93f180659212",
        "cursor": {
          "ref": "234e234d-6e0a-4216-91bb-52ddfca83386",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "12c9296d-d24e-4517-bfab-7b6039d8995a"
        },
        "item": {
          "id": "358fb2d4-bf2c-48a7-bac3-93f180659212",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "5e22e83f-d954-488e-9c82-690616f03956",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dec0eca-204f-4f16-957e-c132f3319363",
        "cursor": {
          "ref": "21c8be58-1688-4d50-9e5d-0bc06cad213f",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "44cdc117-55cb-499c-a009-165ea05aa2b0"
        },
        "item": {
          "id": "5dec0eca-204f-4f16-957e-c132f3319363",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "206739fd-2031-4ca0-b8c3-3069df6e92f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e8fdb27-a861-40fa-9798-155730ae7fae",
        "cursor": {
          "ref": "4ed5f072-0c71-4297-8c17-3699fff0421c",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "dffd7bf7-000c-478c-a834-bb2cb9ae93ec"
        },
        "item": {
          "id": "4e8fdb27-a861-40fa-9798-155730ae7fae",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "907a122a-4c74-4a12-8a71-93a5474bffc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c262dc2-7373-484c-aa72-1dd8b9ab2670",
        "cursor": {
          "ref": "93823687-45b1-4acb-a8a4-4082da6be0cd",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "efd87a0b-f7a4-4ccc-8f11-9b66e391afde"
        },
        "item": {
          "id": "6c262dc2-7373-484c-aa72-1dd8b9ab2670",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "91574565-2cbd-463b-b6e0-69d213000bec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "842cd94f-7202-4265-a5cd-dd53f0b00ddc",
        "cursor": {
          "ref": "fe54329b-5dc0-474e-ad80-e2d093107d72",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "19f0ece7-e45c-4a14-a320-037b5ae0c65d"
        },
        "item": {
          "id": "842cd94f-7202-4265-a5cd-dd53f0b00ddc",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "68a3aed3-a8c8-4d12-8d36-6d5eb41c2bb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15df4e85-ccd4-4e5c-829d-e0690d2e7411",
        "cursor": {
          "ref": "becf81d2-8db4-4bb3-9212-e8af3841edba",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "41a68b9c-3ba6-496f-8123-c936f27f294f"
        },
        "item": {
          "id": "15df4e85-ccd4-4e5c-829d-e0690d2e7411",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "4f57db0b-ef99-4631-a140-2f2ca220e985",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80a2afbd-bef4-40af-b563-142786e71c2a",
        "cursor": {
          "ref": "94c4ef9b-8552-4310-9e0a-4d1dc303a2f1",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "a6fff342-3d07-45a5-bc53-ec2804f8161f"
        },
        "item": {
          "id": "80a2afbd-bef4-40af-b563-142786e71c2a",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "a88d3965-021b-4b83-b9d1-66d1ade3af68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e6e3427-a234-4963-aba6-dcf6bebcdcb1",
        "cursor": {
          "ref": "4e187830-9edc-48d4-ab49-dbdce238f37d",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "b82d8f1a-1429-45ed-9f69-ccabc7ea5181"
        },
        "item": {
          "id": "1e6e3427-a234-4963-aba6-dcf6bebcdcb1",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "2b273448-6117-4666-8142-fb38f4aa9ca6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45c0c0fe-2d12-4fdd-a7fe-4ccb77ecc460",
        "cursor": {
          "ref": "914574c0-f309-4e2c-adec-4d234918f691",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "0b2bf74b-d131-4134-a8ef-eaecafc9666f"
        },
        "item": {
          "id": "45c0c0fe-2d12-4fdd-a7fe-4ccb77ecc460",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "77f46d0d-5ce9-48ac-8207-6393edfe48d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1238369-d1f0-4af6-8dce-29a0d5391899",
        "cursor": {
          "ref": "64babd96-32f2-4df6-9937-b0ed53b5f8ae",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "6b589b62-f0b4-43e4-abbc-c852d75c8e57"
        },
        "item": {
          "id": "e1238369-d1f0-4af6-8dce-29a0d5391899",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "cce27015-b522-4430-a165-8453615f5734",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3b1dbd1-6d88-43c5-a2d5-3f0ed483e2de",
        "cursor": {
          "ref": "a4a0aab7-3059-427e-bcd0-c9522db3378a",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "e0ea17f6-481e-4803-ad6a-17f28be60c22"
        },
        "item": {
          "id": "c3b1dbd1-6d88-43c5-a2d5-3f0ed483e2de",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "431b2767-630f-4079-81d7-3784013a5447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f1804b7-2432-4258-8874-c52b4b14fade",
        "cursor": {
          "ref": "2e0218c5-96f5-48b5-8945-7275186ca841",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "ce3a6d13-ff4a-43e9-aa20-9ebd45c9a129"
        },
        "item": {
          "id": "4f1804b7-2432-4258-8874-c52b4b14fade",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "2164c981-dd49-489c-a7dd-94153a23aa96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb7d0272-6473-424f-a490-0bc50112850e",
        "cursor": {
          "ref": "aa746ff0-36e5-4907-b1b9-44fb24024f3b",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "ee6f8f5e-faca-41d7-9034-61a65f4c65f2"
        },
        "item": {
          "id": "eb7d0272-6473-424f-a490-0bc50112850e",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "b611fd6a-7bbf-4a35-a7fe-ce8083763c7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a88884be-187d-4764-8299-512dff2416e5",
        "cursor": {
          "ref": "031f5ee7-cdea-4015-a19f-2919d68a1378",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "33d7d82c-77d9-43eb-9020-6436a5b18aa0"
        },
        "item": {
          "id": "a88884be-187d-4764-8299-512dff2416e5",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "649e4fbb-6361-442b-9b2a-75552a7054d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20df289a-a9ee-4d8d-aea3-eb75b47487fa",
        "cursor": {
          "ref": "303b1ef4-1768-4c5e-b8af-6090fce3bc63",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "e2b999be-689b-4f64-afb5-2fab922b7ef5"
        },
        "item": {
          "id": "20df289a-a9ee-4d8d-aea3-eb75b47487fa",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "4551b8b5-1e59-41fe-95cf-5ab1cf86435c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52dd4046-18bb-4926-885b-f4298fa3d7ad",
        "cursor": {
          "ref": "b366f01b-cdac-465a-bfd7-222cdce4e25a",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "37c61bc9-d461-4dbe-9408-4dda079993c1"
        },
        "item": {
          "id": "52dd4046-18bb-4926-885b-f4298fa3d7ad",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "d0a34b90-5e05-4c5c-bc53-7823b0ee4762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "076e3aa7-d72e-4ff1-9cc9-8678f8f05ed4",
        "cursor": {
          "ref": "fa0793f0-7d4d-4ef3-a002-5c88a015f88b",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "d259d9c8-43e0-4e31-9150-4f19c3c4ba08"
        },
        "item": {
          "id": "076e3aa7-d72e-4ff1-9cc9-8678f8f05ed4",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "5475037b-4e88-4a59-b27f-e9ced0ddbe9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f2ab4d1-6425-49b8-b4eb-6fdf7f96d100",
        "cursor": {
          "ref": "77c24f6d-01da-418f-a37f-e4a991f5e5a3",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e1471f18-d0a5-4115-9a9b-5a9c98dd38b0"
        },
        "item": {
          "id": "0f2ab4d1-6425-49b8-b4eb-6fdf7f96d100",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "f139e435-409c-48ad-a1c4-b0d20dc488a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a036c308-f8f9-402d-8567-97deef8e2128",
        "cursor": {
          "ref": "dafbd663-c93f-45d3-879e-ec27c9a6ff6a",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "16662662-a507-4f2b-a879-5ec0cdb2d87f"
        },
        "item": {
          "id": "a036c308-f8f9-402d-8567-97deef8e2128",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "5abc0f0e-71ea-4caf-8983-6b01e814e09e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd9e3620-b12a-4c80-b1be-3f667dde7536",
        "cursor": {
          "ref": "175064c3-b301-4813-a7e3-9438da6f733e",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "85af981d-2528-471f-bebe-1a8c03f55df2"
        },
        "item": {
          "id": "bd9e3620-b12a-4c80-b1be-3f667dde7536",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "2eda4881-5d42-4a11-8e3e-2a4a29ed361c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1453c758-65da-4846-bab3-84f9baf768cb",
        "cursor": {
          "ref": "829febbe-139d-427b-bf27-ca78d881ebd4",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "b00582a6-c870-4c7b-8a14-547909fa68e8"
        },
        "item": {
          "id": "1453c758-65da-4846-bab3-84f9baf768cb",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "95aab2d7-f22c-4879-af25-aee0f713faad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25257ea0-2e41-421a-9ddb-eecd61472c0a",
        "cursor": {
          "ref": "ba982498-3588-414c-81f4-ca98ad0411a8",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "0e33877d-7ece-4192-b852-ce3c8b168998"
        },
        "item": {
          "id": "25257ea0-2e41-421a-9ddb-eecd61472c0a",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "0871ad5d-ffe2-4771-a7a4-7d62246ca8cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1376a7ce-71c7-40f4-9c16-9697db06114b",
        "cursor": {
          "ref": "fe70a7c7-da91-439c-993e-acca5e7fabbd",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "2c44aea2-5091-4817-bfbd-1d8185df9f7c"
        },
        "item": {
          "id": "1376a7ce-71c7-40f4-9c16-9697db06114b",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "06cfe9d0-1a47-48ea-9635-ffc5354b8ff9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5cb1506-e458-4b9b-b83a-f4193c9350fb",
        "cursor": {
          "ref": "ee0e176e-d1e7-47b5-b7a9-fc966b7bf39e",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "48b582a3-2db2-4e71-b2b8-abf32c2ec900"
        },
        "item": {
          "id": "e5cb1506-e458-4b9b-b83a-f4193c9350fb",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "4c9522fc-da23-4070-a916-06ba145f35fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbfcafe9-017b-47e7-9c8a-962d0cc4b441",
        "cursor": {
          "ref": "c98cbec8-b683-489f-9d3d-53996f7a71f5",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "9588eccb-4944-4e48-b308-eb2a8a943a5d"
        },
        "item": {
          "id": "bbfcafe9-017b-47e7-9c8a-962d0cc4b441",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "5b979f70-7f51-4bd9-88cb-c30fb016d77d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd675c66-9787-403f-ac07-6012964cbfd0",
        "cursor": {
          "ref": "b7756d36-f0ab-4931-963f-1593919c561c",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "fa155d62-bee9-4c18-aae1-0f34d8c38407"
        },
        "item": {
          "id": "fd675c66-9787-403f-ac07-6012964cbfd0",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "1002a0d2-a9ea-4764-bfa5-7948b0e25a85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d60ba064-d050-45f5-900f-be9c2fce3ef3",
        "cursor": {
          "ref": "9ca82217-64bf-4e6a-901a-94abea5ab90d",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "de0a58f9-539e-4ed8-8639-c976cecb9ada"
        },
        "item": {
          "id": "d60ba064-d050-45f5-900f-be9c2fce3ef3",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "a59c9565-4689-4c6f-a74e-02b73adda7fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ddedb39-df32-4172-8862-052dafd2f242",
        "cursor": {
          "ref": "6ec0352a-3b63-4ebf-8825-c9643e04f53b",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "a3f62ed1-dc5b-42b0-99c6-ac6740e6192a"
        },
        "item": {
          "id": "9ddedb39-df32-4172-8862-052dafd2f242",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "55c53e8a-4a50-4b07-a91f-ac6dc02ee624",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a11e568-d1ca-406e-944e-ae554697cac1",
        "cursor": {
          "ref": "eaee1657-1ecf-45b8-9961-2599af9fecab",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "51e0a9bf-3100-4d5b-85b8-40dc7aaa5dd0"
        },
        "item": {
          "id": "3a11e568-d1ca-406e-944e-ae554697cac1",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "d43b968c-d74f-4e9f-8d53-c2e7112ab3f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f36fdae-82fb-464c-8f6c-a012eb7c3ee5",
        "cursor": {
          "ref": "90b82af4-1002-4186-93f4-34d5f737493d",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "f4d2e0d0-983d-4ddc-bad3-787165bf3d49"
        },
        "item": {
          "id": "6f36fdae-82fb-464c-8f6c-a012eb7c3ee5",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "eeec5637-f725-44aa-8692-2c32e98537eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f816fd05-9b5f-4c9d-aa93-df938e32a6e7",
        "cursor": {
          "ref": "18e84450-5875-4ca8-ae94-1163c0176417",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "02c1b4a2-e402-45c8-9e88-1b2b54178fcf"
        },
        "item": {
          "id": "f816fd05-9b5f-4c9d-aa93-df938e32a6e7",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "e4fc1353-6316-4c8f-8fd5-27cad466a09f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2adbcd88-ba08-4b03-bedd-33dfea6d1dab",
        "cursor": {
          "ref": "29b401dc-ec74-45ca-a209-92580dd22079",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "fd479b12-9b8a-4fc2-b20a-e3a7466f920d"
        },
        "item": {
          "id": "2adbcd88-ba08-4b03-bedd-33dfea6d1dab",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "cb1654a3-19f3-49d1-9f22-c507f32b7704",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21acd44e-8f43-41a8-a5ce-035a392c2283",
        "cursor": {
          "ref": "6ecfc842-7a06-4a91-85c9-5df2cc5f132d",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "91754b50-ac1b-4447-b7c3-42e68e7aadb7"
        },
        "item": {
          "id": "21acd44e-8f43-41a8-a5ce-035a392c2283",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "f385e5b6-82e1-48d2-9407-abd404300b60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e296a2d0-4bba-4052-b098-4704f04e1cb1",
        "cursor": {
          "ref": "7193518a-6f7a-4a29-b21d-55618d06ee81",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "6019abc4-9d74-42c2-a3a0-ef869442e6fc"
        },
        "item": {
          "id": "e296a2d0-4bba-4052-b098-4704f04e1cb1",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "62dd4b81-9114-4cee-b260-1603cfd8965d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4395c82d-ed4e-4970-a3c1-ff2e03af52a1",
        "cursor": {
          "ref": "1e7df288-2a8b-4748-a498-59339834f574",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "4032fd27-5f4f-4be1-9501-1c67e42ef502"
        },
        "item": {
          "id": "4395c82d-ed4e-4970-a3c1-ff2e03af52a1",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "cc90ebdb-725e-4e80-b624-1d051728e5b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1df93bfc-a4be-4046-bb49-1a203a0e8d1f",
        "cursor": {
          "ref": "26d3dcee-a2d2-4761-ba27-5a18272d7f11",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "ecdc8f8d-85a4-4dc7-a0da-eaf5faef54b0"
        },
        "item": {
          "id": "1df93bfc-a4be-4046-bb49-1a203a0e8d1f",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "bf41662a-ccca-411f-93b8-92d9d09dad54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65b40b07-1a81-406a-a542-a55e1e663252",
        "cursor": {
          "ref": "740fbd99-5a36-47f6-ac42-0f3df11cb43f",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "76327d3e-4837-49bb-8bd1-a730df924913"
        },
        "item": {
          "id": "65b40b07-1a81-406a-a542-a55e1e663252",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "13ad5c11-d93d-417e-94e9-8119c1feec85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3164588d-c775-4a74-ba19-feb1d69e3ea0",
        "cursor": {
          "ref": "bf1c8edb-94e1-4900-ac27-6a15219e3ee2",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "978e672b-4a33-429d-bc91-4ce7ed8ee77f"
        },
        "item": {
          "id": "3164588d-c775-4a74-ba19-feb1d69e3ea0",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "1d11d390-06f4-4975-bc7e-417f3619894d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d868a9e-95f1-4408-ac2e-4f90c8c8677d",
        "cursor": {
          "ref": "1026d275-ef9c-4d9e-9a76-79597fe38039",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "5981e710-1cda-4587-89a3-1c748f499432"
        },
        "item": {
          "id": "6d868a9e-95f1-4408-ac2e-4f90c8c8677d",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "807b5a3a-57f4-457e-83c0-29a2ba4cec9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f2a62ed-c0d9-4df8-b71a-586d300b77e9",
        "cursor": {
          "ref": "675f9ba3-fad1-4ea1-b471-9e1e911fb1c2",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "18fcd7cb-4841-4631-9689-dce335e20303"
        },
        "item": {
          "id": "2f2a62ed-c0d9-4df8-b71a-586d300b77e9",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "0ecb3f78-2705-48ff-8996-195bc3f99857",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "609a7080-70af-4b4b-8682-07c31a63ca95",
        "cursor": {
          "ref": "a8b83606-de37-43de-97cd-6decab8d1ec1",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "89ceda9e-165c-4c96-92bd-ba6d0f3896d8"
        },
        "item": {
          "id": "609a7080-70af-4b4b-8682-07c31a63ca95",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "6b585a47-da7c-4b37-9f5f-effa393d0b34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d7137c1-68dd-498c-911f-2d3603f8e003",
        "cursor": {
          "ref": "3046ad18-7156-4753-9fb1-07036350bdb0",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "3ab99fb4-aeb2-4cb7-b411-c50f7a0b1537"
        },
        "item": {
          "id": "7d7137c1-68dd-498c-911f-2d3603f8e003",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "f5a3541d-a451-4cfa-bcd0-62dbcc7044b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba34b6c2-97a9-4771-b8a5-d7e9bb03ff37",
        "cursor": {
          "ref": "184cc9c7-dfef-45cf-b8cf-7b6282e7ab2f",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "89463aff-cbb4-47eb-b2b0-f74d2cfd2fd5"
        },
        "item": {
          "id": "ba34b6c2-97a9-4771-b8a5-d7e9bb03ff37",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "f625151e-0e59-42f4-899a-9023bcb412ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aba0717e-95b6-497e-a168-f58c55375e18",
        "cursor": {
          "ref": "ce452b4d-83cf-40f9-a61d-4b0458c50a44",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "2ae46cef-a2c4-4442-a5cb-781cca2e7270"
        },
        "item": {
          "id": "aba0717e-95b6-497e-a168-f58c55375e18",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ecbb32d5-c16a-4098-9454-3b998c54d08c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23d8b5e3-a3a3-4606-aa83-890d83f31653",
        "cursor": {
          "ref": "997941f0-d34c-4c3a-8a08-57e900782ad5",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "6c35db14-7c55-4b3b-8aa4-c54e8a5795a0"
        },
        "item": {
          "id": "23d8b5e3-a3a3-4606-aa83-890d83f31653",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "f7e1426d-946e-4fee-b223-d96b6e57aa8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a721c782-019d-4136-8657-6b504d285004",
        "cursor": {
          "ref": "ac031863-ec92-445c-a969-39425c409031",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "c18b345e-648d-485c-9365-b2f88608fab3"
        },
        "item": {
          "id": "a721c782-019d-4136-8657-6b504d285004",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "a22c5aa3-44cb-4509-8583-d2eb8ff9e47d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e27e0927-3eb9-4a2a-bb04-704f26834d34",
        "cursor": {
          "ref": "b1c0159a-0067-472b-b65d-ef80257dbffc",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "73975e90-a990-4c94-835a-65598179d7fa"
        },
        "item": {
          "id": "e27e0927-3eb9-4a2a-bb04-704f26834d34",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "80b52f79-891d-4e03-9fc4-8d914dd4247a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f085f193-d339-4de6-9425-bc10ba996bdf",
        "cursor": {
          "ref": "51735e24-ed40-4267-8677-8d690b171678",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "0f41c1ce-38fb-4404-aceb-ea33e5e93b55"
        },
        "item": {
          "id": "f085f193-d339-4de6-9425-bc10ba996bdf",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "2b46bd43-dd50-4421-9bfd-167bedb98892",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c582d77-7fc7-4b20-b22f-19ebd1255c41",
        "cursor": {
          "ref": "c37ed080-fc6f-4e42-8d53-d85a95539448",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "df34f9bf-a68a-4c44-ba19-6ef39a090871"
        },
        "item": {
          "id": "9c582d77-7fc7-4b20-b22f-19ebd1255c41",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "383ff1ab-9f93-455d-b100-0ce9d52ca258",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa097eae-c214-4771-a9d9-1048b229819b",
        "cursor": {
          "ref": "385154c5-79b6-4316-a056-a2b9757cc36f",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "e1ead070-f7fb-4dff-91ba-a99a0b6662ad"
        },
        "item": {
          "id": "aa097eae-c214-4771-a9d9-1048b229819b",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "fc1ea816-685e-48f0-97a5-73cf4b6b81c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 189,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69912c19-7f74-40b8-8533-2e6c13361892",
        "cursor": {
          "ref": "95fbebc7-f641-4d33-aa4a-108cc1d58e04",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "a927c7ae-4551-45e7-8ca6-41a1ff4019e0"
        },
        "item": {
          "id": "69912c19-7f74-40b8-8533-2e6c13361892",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "d2c5d93f-a2c2-424e-98a2-2e16ea8565ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab4c41f7-9ada-475d-a5b8-9c3b36b6ac11",
        "cursor": {
          "ref": "03646cbe-e91a-4d7f-a2a6-fc4f592f2037",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "33a3e0b4-b204-4731-9951-152c3c669819"
        },
        "item": {
          "id": "ab4c41f7-9ada-475d-a5b8-9c3b36b6ac11",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "d7830d4d-0e8c-4dc2-90e8-ebd6ab6703c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96e8841c-bcc9-4c5c-b716-ad2546b3c8f8",
        "cursor": {
          "ref": "7245617c-bc53-43ea-9599-07def6693c76",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "005e12ca-99ee-4450-9813-22dcb88f6193"
        },
        "item": {
          "id": "96e8841c-bcc9-4c5c-b716-ad2546b3c8f8",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "8aeb446d-5f19-4e90-8bb7-362c7ae9959e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5959461-3764-4b82-a389-1c2145cee399",
        "cursor": {
          "ref": "86e2645d-e90e-4100-a269-359be956dcde",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "4c3a12e4-6ff9-4ee8-9c1d-57f9a92b9d19"
        },
        "item": {
          "id": "d5959461-3764-4b82-a389-1c2145cee399",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "b234614e-cafe-42f8-8fda-bafca90fdff9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d4631b2-34dc-41dc-ad2b-d566c5354af3",
        "cursor": {
          "ref": "b9f19b15-d76a-406a-96b0-cdc0d888bef3",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "4dcc7f71-c23c-4e37-b161-c2506ffa022b"
        },
        "item": {
          "id": "6d4631b2-34dc-41dc-ad2b-d566c5354af3",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "4109dd9c-490a-45e3-8e2f-253909ca9517",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c3c6a6c-16ca-4317-908e-c2fd952abbad",
        "cursor": {
          "ref": "734fe239-ab9b-423e-b355-84f69d6ac186",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "974c4bc6-3ecc-4617-9b16-3f92ae5fa069"
        },
        "item": {
          "id": "4c3c6a6c-16ca-4317-908e-c2fd952abbad",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "e0d38efe-72f9-4fcd-b268-4f9886916683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcd4241b-68c6-454f-987e-046e1a53140d",
        "cursor": {
          "ref": "e5dca5be-ef28-48f5-8ce3-011679123804",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "d4dc9f03-5309-416b-a9fb-19be25527209"
        },
        "item": {
          "id": "fcd4241b-68c6-454f-987e-046e1a53140d",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "2a4b4665-7a34-44f3-a660-caddab4eea7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8119ecd0-ecf6-49d1-8ff4-7e3fd9b1204b",
        "cursor": {
          "ref": "7a62dccd-0cfb-4bed-aef8-e61723ac73d3",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "4802d20a-ed0f-48c0-b60d-3e1e77e7d7cd"
        },
        "item": {
          "id": "8119ecd0-ecf6-49d1-8ff4-7e3fd9b1204b",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "f6c0adef-a152-4c6e-921d-0c0d233decab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d831bd6-e255-41ca-8535-f5bf60aa98a1",
        "cursor": {
          "ref": "bf7d6071-511f-4110-b809-9037c358288d",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "51927a60-63d3-4b57-90a6-4f46391110e8"
        },
        "item": {
          "id": "9d831bd6-e255-41ca-8535-f5bf60aa98a1",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "027ba9e2-822e-4bbb-ae02-9134f19bd022",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fe00dc5-86d7-40b5-a593-faeef3b96028",
        "cursor": {
          "ref": "01c5aa2f-6755-4f45-afbd-1a00886bc7f5",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "43b9a937-edfd-4355-9052-2a110067a97d"
        },
        "item": {
          "id": "0fe00dc5-86d7-40b5-a593-faeef3b96028",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ed767e66-0b65-41f6-8725-0c89755a9d62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1fa79a6-1bd0-42fc-b1f5-59590de6b287",
        "cursor": {
          "ref": "137702e9-5968-4b90-9afe-6f28e3cd11d4",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "6b20193c-4bcc-40d9-9683-da14a3c1d7d5"
        },
        "item": {
          "id": "e1fa79a6-1bd0-42fc-b1f5-59590de6b287",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "9def709e-75e5-432c-bf70-006ccc5d81ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d1f46e6-9791-4083-a272-8f38519de352",
        "cursor": {
          "ref": "c4cc3b0f-4367-4c29-bc67-1bf4c9b7ba84",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "0d2d2862-1fc2-46ea-b408-d9c6d567e159"
        },
        "item": {
          "id": "3d1f46e6-9791-4083-a272-8f38519de352",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "2a3605e0-3fa9-4e72-88a6-2fd53134627a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e027881-727f-498d-99e7-4b027ebcb661",
        "cursor": {
          "ref": "390ad8f0-4ec5-4bb7-bdd6-f72bf46a7c8e",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "d4050e7d-9d38-4150-ab4b-36f6f4262404"
        },
        "item": {
          "id": "5e027881-727f-498d-99e7-4b027ebcb661",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "9137a447-0639-49d4-b254-854ec38e9007",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8bbca47-ad87-4d41-9169-1da5755a951a",
        "cursor": {
          "ref": "de971c43-a1f3-47b2-9e49-f0da0f9aa5f8",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "5c354249-acb7-4767-a702-4f3f17953945"
        },
        "item": {
          "id": "c8bbca47-ad87-4d41-9169-1da5755a951a",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "5058eecf-d100-4f9c-875b-884aa997004d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50e0a717-9dae-41c3-9c59-4387e2c1bc86",
        "cursor": {
          "ref": "d21bdbcf-6770-41e7-8d84-66819f07b33f",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "5e6c27d6-d62e-4fb5-b578-58967ce4b45f"
        },
        "item": {
          "id": "50e0a717-9dae-41c3-9c59-4387e2c1bc86",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "e0dfcfe5-602e-4344-b618-c2e47458063f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ba09e7b-24d5-440a-9279-763c12752b6e",
        "cursor": {
          "ref": "e0f65d17-6b3a-49ae-8585-183931cd2fe6",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "1f8e2583-4d26-4fa0-8a44-5efb8aa078fa"
        },
        "item": {
          "id": "0ba09e7b-24d5-440a-9279-763c12752b6e",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "e1f60f6a-9f65-4169-aad1-cf1cff1746e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7e30248-40ab-4036-a3da-f6c20680ada0",
        "cursor": {
          "ref": "d1707a14-ae57-4692-9e51-aa094073455d",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "07671c40-301f-43ae-9d28-411ba53fd8c0"
        },
        "item": {
          "id": "d7e30248-40ab-4036-a3da-f6c20680ada0",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "a6aec983-9c79-49f9-a34c-65d9bb47b5db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fec07c18-a0a3-4512-9819-c31dbf03ca10",
        "cursor": {
          "ref": "6557616b-0a3c-49f6-9f6a-a3ea9bb2ddd5",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "4e377111-b5cd-4471-b978-2b174527bb2e"
        },
        "item": {
          "id": "fec07c18-a0a3-4512-9819-c31dbf03ca10",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "ac6d394e-1d09-4ad3-8034-80c0ba497b2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eb9b8ac-b6d4-436a-a549-66666862a3d3",
        "cursor": {
          "ref": "4249ecc2-8cc7-4e2c-a67c-a677190695d8",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "972678f8-fd9f-4172-89d5-f3455eee2f31"
        },
        "item": {
          "id": "1eb9b8ac-b6d4-436a-a549-66666862a3d3",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "90bd78c3-8fd8-4985-9752-3abddc792e20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4a76f6c-dab3-4775-ac12-713143ec601a",
        "cursor": {
          "ref": "fe3c3a11-1986-4f44-8879-f7286ac13342",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "30b777f8-9264-4299-85e3-b3917a40d6ac"
        },
        "item": {
          "id": "b4a76f6c-dab3-4775-ac12-713143ec601a",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "350d15b8-9880-44aa-8860-23b369600bc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07f662c0-eb06-4591-b769-84c1a1b7ce8e",
        "cursor": {
          "ref": "797a2d83-247d-48bf-82cc-6b0c311e1419",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "67302b78-02e6-46e2-ac79-afb3e7463db6"
        },
        "item": {
          "id": "07f662c0-eb06-4591-b769-84c1a1b7ce8e",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "a87c7f23-1401-4d39-8ff2-108eef93f310",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cf62ee3-2639-4951-899b-7287320f30b1",
        "cursor": {
          "ref": "ba197272-d7c4-462d-9cf5-26dc5c45a7e9",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "61572815-fcc3-49be-80a6-5a46167fcf69"
        },
        "item": {
          "id": "9cf62ee3-2639-4951-899b-7287320f30b1",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "41488e8d-cab4-4c46-9e0d-cea985de3329",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5d8fd19-17c6-4ec8-b43d-b9c352df7b7c",
        "cursor": {
          "ref": "2a2f6204-3fb8-42eb-92bf-7ff8299734f4",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "288315d2-cdb9-4994-bcf7-611a5a9aba71"
        },
        "item": {
          "id": "c5d8fd19-17c6-4ec8-b43d-b9c352df7b7c",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "bf974953-4cd8-4a23-a501-531da6cb1d1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b878b61-3540-4424-a086-d04fd766fc43",
        "cursor": {
          "ref": "ebc68a30-874f-4d99-a2e0-609442aa00fb",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "e1e6bedb-f8de-4499-92b6-8b44fe4862dc"
        },
        "item": {
          "id": "9b878b61-3540-4424-a086-d04fd766fc43",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "da4377a1-bd1e-4628-9c17-87e82b4f44e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d841b54-30e0-4e57-b00d-5e11a8efdde0",
        "cursor": {
          "ref": "eef5863c-415a-42f6-9026-82e79d556a6f",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "69f653b9-aebd-4d12-84b4-fd3dfa202c5f"
        },
        "item": {
          "id": "7d841b54-30e0-4e57-b00d-5e11a8efdde0",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "7aec3b88-bb9f-43bc-9850-59ee19c3e56f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45b3b42e-6534-400e-8345-afd5668caf49",
        "cursor": {
          "ref": "d8741609-9441-49f9-a9dd-87401cc1d2a7",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "dd8a079e-362c-46fb-a612-2f6bbc34347e"
        },
        "item": {
          "id": "45b3b42e-6534-400e-8345-afd5668caf49",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "792ca32a-6c99-4954-bbb0-17245f4b1d2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2af7d7fe-9baa-48a0-b5e6-589ecbba99d4",
        "cursor": {
          "ref": "60710a0e-bf46-4c45-a3e3-1cc556b0eadd",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "2ac08b82-1dc6-4301-a6c6-91741d88004b"
        },
        "item": {
          "id": "2af7d7fe-9baa-48a0-b5e6-589ecbba99d4",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "daa1add8-f911-4219-993e-84d3ed61090d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb9b3dc7-ad1e-4ed3-91af-ccb22861ac7e",
        "cursor": {
          "ref": "9c63140a-a61e-4ca1-acfb-a1e787e1cb63",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "0ef9c3d9-db8c-40da-99b4-b87e9a6fffc3"
        },
        "item": {
          "id": "cb9b3dc7-ad1e-4ed3-91af-ccb22861ac7e",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "e3df63b7-c8ab-4dcb-8f0e-6876cd8a465e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d0d85ef-06ab-4eb6-8079-94f666ff5ba3",
        "cursor": {
          "ref": "9865951d-3a33-478b-8fc9-fe0ad7fe5c32",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "42bcd05d-f26d-4173-aa79-f96d8738e4c9"
        },
        "item": {
          "id": "5d0d85ef-06ab-4eb6-8079-94f666ff5ba3",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "75ad3ac4-2f03-4105-9e78-e06511087bd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58168b2c-34f7-4aef-9679-8ad043826efa",
        "cursor": {
          "ref": "c36097aa-5204-40a5-86f4-0e748b411836",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "e959f26b-af0b-4b46-940c-178bd8e00b74"
        },
        "item": {
          "id": "58168b2c-34f7-4aef-9679-8ad043826efa",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "1362f133-1d0d-4043-a32b-abc1aeb19a8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "304057e9-15f5-489e-836d-c069f090339d",
        "cursor": {
          "ref": "2c8ca55b-213a-4629-aaae-ce1f65df9ebc",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "b04638e5-7be5-4f7d-80c3-91e33828ae36"
        },
        "item": {
          "id": "304057e9-15f5-489e-836d-c069f090339d",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "5ae4f55f-e7d4-4b54-afbd-9f06fe189702",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42c9e507-4162-4216-9386-262c7cb9386e",
        "cursor": {
          "ref": "017c1b3b-14ba-4b61-934f-3a9a4ff05709",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "a0610254-734f-4b33-bdf2-ff146cc8dcff"
        },
        "item": {
          "id": "42c9e507-4162-4216-9386-262c7cb9386e",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "0cf4660e-7e7a-4c0f-9385-5fcfaec1c1de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "042b0fa7-7122-41d6-9413-e0b0fd5c2de9",
        "cursor": {
          "ref": "5dde1586-ddf7-4618-b93a-c878b04c685d",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "c75a2706-c841-407d-b49d-8d842b82e345"
        },
        "item": {
          "id": "042b0fa7-7122-41d6-9413-e0b0fd5c2de9",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "936ee9a0-050b-4a4a-b898-b6202ffdb310",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "470b6745-45af-48ac-9363-6767c1143664",
        "cursor": {
          "ref": "4c90942b-0ab6-455e-851e-a949461c4103",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "7a20649e-5841-4c76-bb5a-17f4c53052f2"
        },
        "item": {
          "id": "470b6745-45af-48ac-9363-6767c1143664",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "fb45a89c-c689-4f29-928a-c975c1a34cc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0309523d-c9f5-4894-ba96-1e1e24dd9bee",
        "cursor": {
          "ref": "30bd97e1-9b41-4698-8a80-33f724887853",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "b135fbfc-fb6f-4eb0-a546-478c92b00d46"
        },
        "item": {
          "id": "0309523d-c9f5-4894-ba96-1e1e24dd9bee",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "eaec9866-75e8-4e60-8c65-cbe5e4739ec3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65c0cea0-8335-4dcf-9d5c-096a06d12034",
        "cursor": {
          "ref": "acef1d9c-482c-478a-b628-ec980bb11681",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "01761e72-a911-466e-a9d2-4d71b9e7a49a"
        },
        "item": {
          "id": "65c0cea0-8335-4dcf-9d5c-096a06d12034",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "c0af3602-82c0-4f54-b9ec-2066f7f9abb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1982714e-1afd-4525-8418-67d148a2b807",
        "cursor": {
          "ref": "7e3e5bca-d8e6-43f9-b28d-a8345ae94f3b",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "41474037-24ab-416d-a852-634e07e315f0"
        },
        "item": {
          "id": "1982714e-1afd-4525-8418-67d148a2b807",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "7cf452d7-5344-4874-b744-b9d99fc066c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e6cbf78-d49d-4185-b242-30fb635d3f78",
        "cursor": {
          "ref": "9602b64b-5e00-42a0-bba9-9dd706a650a0",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "c0d10063-868f-499a-abb3-626c1eb4a5dd"
        },
        "item": {
          "id": "8e6cbf78-d49d-4185-b242-30fb635d3f78",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "f1d2bea0-6050-4923-bd79-18a52db92cd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5fb4b2b-2e70-4650-80b7-1c0b839af604",
        "cursor": {
          "ref": "11880f0c-8d26-40c4-9961-d3efce6c2a1c",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "94b2f2a4-96cc-4964-af6c-810919cf5477"
        },
        "item": {
          "id": "e5fb4b2b-2e70-4650-80b7-1c0b839af604",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "30df691c-2265-4c73-b397-5f34dd2c2542",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "938b7a71-c064-4907-aebe-a64c12c29248",
        "cursor": {
          "ref": "52ac81e2-dc19-408d-af47-9f818b947a3b",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "248620b3-762c-4772-8dad-6c6ad8e5802d"
        },
        "item": {
          "id": "938b7a71-c064-4907-aebe-a64c12c29248",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "ff76b376-4c8a-4768-a903-983eea83afd2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39dde9df-98a8-4565-958c-a7ebcc693b19",
        "cursor": {
          "ref": "c5c90796-a4ff-4dc2-84b9-55507c757c28",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "9fa17fbe-78e4-43d5-83c7-93e2cd6d2fe8"
        },
        "item": {
          "id": "39dde9df-98a8-4565-958c-a7ebcc693b19",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "39e5450d-aa70-4bfe-ada8-022adced5cbd",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 63,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a57b4e80-2b6a-4183-a2bb-c04d6e23731f",
        "cursor": {
          "ref": "b1678e7e-86b6-4c8a-90e0-26ac6918c429",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "78c08918-5e5c-4787-8341-ccc51c141917"
        },
        "item": {
          "id": "a57b4e80-2b6a-4183-a2bb-c04d6e23731f",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "463a21fd-49e5-4d53-9c6b-f20cbd111d00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "c333f55d-dd84-46d0-bc6d-224bb476e5ea",
        "cursor": {
          "ref": "768acf91-a011-4056-a671-a7c0626faa43",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "4f3d495b-b347-47e1-b62a-e17b8e1669ee"
        },
        "item": {
          "id": "c333f55d-dd84-46d0-bc6d-224bb476e5ea",
          "name": "credentials_verify"
        },
        "response": {
          "id": "6074be48-6bb2-4daf-9a7a-a84f790a8885",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "2123fdf8-498e-4cac-8e62-0a6057aa5f8f",
        "cursor": {
          "ref": "36b1aafa-6ef3-4c9d-a838-bb0cc64f1830",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "bff8936a-68d8-43d5-b48e-114f30d03ed5"
        },
        "item": {
          "id": "2123fdf8-498e-4cac-8e62-0a6057aa5f8f",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "9fa512b8-0f03-4a8e-9ab3-d7841eb5814f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "eaadb0d0-fdb0-4912-91d5-dba98871b873",
        "cursor": {
          "ref": "018fa432-5ed3-4825-bb4d-5330db0bd7fa",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "c3b5cf1b-77cb-4945-8c40-8fbc5b297a59"
        },
        "item": {
          "id": "eaadb0d0-fdb0-4912-91d5-dba98871b873",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "eaadb0d0-fdb0-4912-91d5-dba98871b873",
        "cursor": {
          "ref": "018fa432-5ed3-4825-bb4d-5330db0bd7fa",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "c3b5cf1b-77cb-4945-8c40-8fbc5b297a59"
        },
        "item": {
          "id": "eaadb0d0-fdb0-4912-91d5-dba98871b873",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "eaadb0d0-fdb0-4912-91d5-dba98871b873",
        "cursor": {
          "ref": "018fa432-5ed3-4825-bb4d-5330db0bd7fa",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "c3b5cf1b-77cb-4945-8c40-8fbc5b297a59"
        },
        "item": {
          "id": "eaadb0d0-fdb0-4912-91d5-dba98871b873",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "34f50f9a-6f9d-4146-b371-3ba4c2ab69ed",
        "cursor": {
          "ref": "99061de2-076b-4b2d-898e-575a12fa7d39",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "7eeee117-b6c7-4ddb-a3e1-aeb14d0dcaca"
        },
        "item": {
          "id": "34f50f9a-6f9d-4146-b371-3ba4c2ab69ed",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "64796e70-a5f8-4dce-8cfe-75f5804ffa1e",
        "cursor": {
          "ref": "63077757-9965-415b-afdb-e76975d5433d",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "363183e6-1d71-4f8c-9c4a-3044eaa17e05"
        },
        "item": {
          "id": "64796e70-a5f8-4dce-8cfe-75f5804ffa1e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "64796e70-a5f8-4dce-8cfe-75f5804ffa1e",
        "cursor": {
          "ref": "63077757-9965-415b-afdb-e76975d5433d",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "363183e6-1d71-4f8c-9c4a-3044eaa17e05"
        },
        "item": {
          "id": "64796e70-a5f8-4dce-8cfe-75f5804ffa1e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "2f0512b0-f5f9-4dff-ac99-697afb44624d",
        "cursor": {
          "ref": "8e44f666-c441-44a0-9796-5fed9eab32f6",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "54f92d8f-5290-4ee0-9dbd-fef277f84f46"
        },
        "item": {
          "id": "2f0512b0-f5f9-4dff-ac99-697afb44624d",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "b4efe6e3-f780-4a6c-910b-047da7d864ec",
        "cursor": {
          "ref": "c9f4da29-6c3e-40f2-a26d-773f42de34e4",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "dacc299a-e547-4a11-9ff2-27bdbc50fb1d"
        },
        "item": {
          "id": "b4efe6e3-f780-4a6c-910b-047da7d864ec",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "b4efe6e3-f780-4a6c-910b-047da7d864ec",
        "cursor": {
          "ref": "c9f4da29-6c3e-40f2-a26d-773f42de34e4",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "dacc299a-e547-4a11-9ff2-27bdbc50fb1d"
        },
        "item": {
          "id": "b4efe6e3-f780-4a6c-910b-047da7d864ec",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "af2cfdbb-6761-4a64-ba5e-fa0b82636ad1",
        "cursor": {
          "ref": "3ca38aae-c9ef-4564-8d23-2fbd723154e0",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "249f2736-b031-4df4-85d8-f3a00bf3d67b"
        },
        "item": {
          "id": "af2cfdbb-6761-4a64-ba5e-fa0b82636ad1",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}