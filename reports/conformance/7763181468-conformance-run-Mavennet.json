{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "fce9f3d9-c883-48b5-94a7-905cb900758d",
        "name": "Clear Cache",
        "item": [
          {
            "id": "8d76f3c5-cd63-4894-9eee-3bb937599931",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "478eb2ee-721e-4c65-9d3f-1deb1944b373",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "c9ff1e61-48e0-47f2-bcad-ed108057a3b3"
                }
              }
            ]
          },
          {
            "id": "d554f46b-f791-4af7-bdbf-3bce6b707156",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5e59190e-5005-42d4-b72b-ea203b556db6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e65df621-3dc7-4696-a047-6a5117aa2186"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "33557f13-95a2-41d4-aea8-539de2a80026",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "51597a7b-ad36-4acc-af4e-2f6e4623143a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3c98e152-98e3-4092-9567-8d88f977343c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "90cb9cd2-1120-4458-a311-08e44953a1d7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "33f51e68-fd99-45e6-b677-af5c95d42f36"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "968191ee-cb87-4b68-ac31-d9fed9ef2f8d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "69222ed1-7e8a-4683-b9a6-905078456af1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8d66013e-4490-42e7-87d9-01e4403e3be3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "420a59c7-f26b-4fb5-b47e-f179183bdb07"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d83c56b4-93c7-4618-b3a6-4b00f5acd613",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "012bfbcb-27cb-47f1-9bf2-5d6d3e3a98ee"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5a77d3bd-388f-4600-b7b4-eeab7d026d0c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b6dc4e7a-1ee2-4695-a3a2-c5c2ae7b5d85"
            }
          }
        ]
      },
      {
        "id": "f57625ca-f129-4a79-816f-33f29db8c1a2",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "78d738bc-1b0a-4d70-831c-34d7cfb1bece",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1318fd47-90dc-415e-b68b-18ac2ab1dc1d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7c2cc717-b8d0-41b5-bc47-4dbb953c138e",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b34ab33-672c-4cf6-b872-68d12d98936a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "68c826ee-a6a1-4646-8497-0771a64e7ff4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4633bf17-b21d-4b99-bcf2-f94585feff11",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a449e9c5-174f-4f16-9cbe-f2212bc7b51d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "26c56ea2-09f1-4d0c-b01a-fae3d781e351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6538e71f-0e1d-486b-a5dc-6bba0da3b851",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dda3344-4d70-4e10-9336-8c07b512e9fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c90bf150-6b06-499b-aeba-2435ee6353a8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d8a2ef8f-566d-4344-a751-56499bc46637",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1dc07a55-cc2d-4cec-8127-8262abacdda9",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5aacf3d-bb28-4aea-a88d-75f2ae398da0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "43fedad4-8377-412d-9d54-0c0fe355e460"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6e8c6c5-1078-4f02-acd1-123fba3e1b7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "875f69c3-7153-49a0-bdfc-e157b8772ba2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b01bf2f7-7628-45ca-b5da-53129a0981f7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "050240a2-b833-4112-8f61-dee8defea3db",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "920b471d-f0ac-4323-bd9a-1326cba17bdc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "9657f9d4-fd7a-4a85-bb00-1138b8e1591f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "85092485-ee0e-4f86-8b24-bf65a131f7d6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "4e2a1945-14cc-408a-85c8-3b528f6f4fe6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d9b14fe5-5f93-446a-961f-1ae0516495ba",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6fd07fa6-0492-4e45-b3f6-9f22def0bd91"
            }
          }
        ]
      },
      {
        "id": "a5b5b308-169e-4831-8212-03c2b98c549c",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "14f3ea4f-0a2f-4123-aa2e-d8cb06b62149",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b677f9c3-68e7-4363-a416-226373600695",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "c3bf081b-5857-4cf8-8166-4929991b0709",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0a6c1b5-b6d6-44bf-975b-972fa41e3b1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b55e9377-de4e-49c9-baff-a94cf2aa69d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85a15248-d56b-459e-a1e1-e83b28dbf156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4741e215-cd49-452f-ae67-b3b3413e192b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9fe4a3e-b959-4963-97d4-d04ea1739dcf",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5665ec42-8197-4f9d-b49e-cf8928507d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13b8c384-b27f-4cce-a1fa-f26cd77e5a04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9d57ac6-6c2e-4063-964f-df6f3d87aee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "41e61f33-2844-4381-9688-e4fae85a8eda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8913764-624a-4174-bddb-afe00acf5498",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "240f7093-675d-460c-9c83-a889ae1122ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "153c8a74-4149-4dbd-862a-f8ea3e92a5c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22b2b9bf-f275-4d25-a57f-53663ac189ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ecb79f34-10b4-48ce-8dbd-088506479cfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb39b73a-b4fb-4edc-81a1-d675f924a201",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e805c564-6579-4032-a009-1bcb836a4f12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93ea9fc7-e267-4647-a24a-5a6c193ab821"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3186ce76-9041-445b-8f4e-137f4c2fa783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d7cb4775-95e9-42b0-ac5a-a2256275cee2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81a37478-8dee-4c66-83a6-4cf495eba3f5",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c158a7cb-7b91-4351-9fe1-2f1116a78c29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f645d239-5ba9-4bdd-8242-dbf9249fd9ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6169c9f1-9c64-4b01-923f-0f4ee52b89fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "381cf118-93b0-4cbc-8c13-bfe9968211a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cea4084-0848-4366-b29e-da3d94a33b83",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd222b12-1283-4b7f-a310-304975567e45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcd41e9b-5358-4278-8b4b-d4b151785af9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e597568e-f780-4933-a79b-a81c766f68ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "76bf43bb-69ab-4409-954a-eafda0764f9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b6ee127-e57d-42b6-b3fb-f9e84e770de8",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6afd1fc3-d64a-49a8-b98e-4b6a9d7d8683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f38b3e3-e61d-4da9-b637-82a8415febac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ac25b48-3e08-4251-920c-592951ecdec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "baa00351-864b-4028-8c99-14ec0ea291bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe27ae74-91c8-4b7e-b734-e5ee4b124949",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74658690-6e90-4f7c-9f67-3e704fd2d79b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfeedf30-e220-48f3-b437-c80bf6722249"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a8c4f56-8080-47da-94a7-0d527f344ce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c57ceec0-7011-4af6-9169-78b6f09ad0a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9ee003c-d03e-4a14-ab71-bfc26b573a8e",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78935100-88f7-47dd-a57f-e86eedd1b280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d34c02d-a3c0-487c-8961-351ca1011fb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b5469be-d8d7-4286-83d7-ea683518f756",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f84b5310-319d-490b-8eb7-109507d442a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "133ee2a7-eee5-4fc9-9131-b00c77e340a4",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b511f366-38df-4f79-8878-d85d6af15c07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b779b8ec-5d67-46a7-800b-9c29a8c29e70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a795f6a8-c60c-42c0-9b92-39222d8a6a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "12e9369f-a9b5-4e3f-879d-7a6d4009f2c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "926b3765-1064-4488-800f-b7be7f29ca07",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a38a15df-a0da-4919-ad78-207a21d6601a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09f3e45a-c05e-4a38-8987-80b0680a1cc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "708f65ba-2a76-4b58-a71f-f7a05d532faf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aa638729-9544-40b4-917f-b0e3135b578a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c6c44aa-e69e-410d-8968-866d67607618",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c2b40f8-1f54-47a8-bc81-aea4346e568b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bfdba54-469f-4c2d-b8bb-702aaad22ea1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "572b4bba-fdb4-4739-93a7-227a5ee742e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a6370d4e-c2cc-4ebd-9a47-4a76c735f5e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2541e3c-29ce-43be-b396-e5bd5eb55518",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f80a8dc7-fc4a-46d4-a1f6-08f5430cb7da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8a29b7a-a65b-4e6c-b3cf-b2a609fe843b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95a89123-b88c-45ff-b5cd-0bda854d46fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9be285d7-570a-4ff5-93c5-ba7e6bb3f47b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90f4d85e-73fa-4709-8307-ffc782a983d8",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2081c819-81b4-4ef4-9918-6483606626dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71f2c0e0-a319-4e1e-a01a-d6c1a83875c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0bc81a2-151f-4c4c-ab2c-1301b7b02618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "23a35aad-9c7b-4626-a525-f802ba29c6b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eb56ad1-8687-4548-9fd3-53b3cb8cc7a9",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aed7e8fb-a8a7-4edb-a944-5d27c6281396",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b75912f-fe2b-4601-94dd-a5afa53c05df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5441794e-957e-41d2-8bc0-9f4d24ff1b8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9985f166-c982-43cc-8dbc-8720086a49c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d01635a-d9f9-4a4a-a58a-0f9e4cd7b9c4",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85fb1839-1ac1-4fb6-b204-f7feedbacc33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8f7ea9d-6769-41a6-9245-15fd66f49f52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9940d4a2-3ba9-47fe-be4f-9cfc7fb754b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "47ce897b-6354-4006-9052-24f9b83ef7d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb422e24-62ba-4045-9844-03f9d1ba0677",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "349f284e-11c1-4142-b806-c5498fc1ea06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6eac7ce8-4be9-4971-9aad-22ba6792c5c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f93df7ab-a916-455e-838d-9fd228ad5af1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f4a89262-ab02-45ca-b8f2-c38c756757ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5d7ebf4-ffe6-4192-a0fd-5c6ea3409ec8",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff871044-4a34-4b0e-9ff0-a2ed1ce3fd6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b95d2af4-4e52-4bfa-9994-75dbe418f1ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b06af604-c1d7-427d-bfd6-9916c234b291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "9cdebd9e-b519-4474-b5a8-9b9974be3636"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30795b48-0daa-4fd7-833a-bd6a50ce3593",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1659bb16-5f77-4650-9131-ed288ddf8b4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a473bf4-9b97-4e17-a160-a8ee670bc0a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78f9fc30-e8a4-4632-a145-fdfbab303ddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "29d2b782-7dfd-46e8-8ce7-f4765b65bb15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faa15f5c-6adc-4e16-b100-d98d2a425725",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9ceb086-8d20-4ac4-853e-4532944eba57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d23e611a-eafd-49c3-bd34-cfbf6e61ede4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46c57a18-4dea-4017-b0da-4ad3113211f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "90ab6a9d-83b6-45ae-a5c4-e9e67fccd041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ef2fbbd-19ff-4a5d-b4b0-f060b254d8aa",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3d557f9-19cd-47c1-b062-b0ba3fdde018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f0fdaae-19f4-4cb9-8f10-7144592c208b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3f8e884-0c7d-4350-8261-ee2770c8a195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "01ec338a-b5cf-4c52-8364-49a6bdd10c8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ea1cd0d-c802-48c4-8a69-325063a853de",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c6b4a20-b912-4488-8360-3fe836703281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "130454c9-065f-4f1d-a9d8-682c5c0c79cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21861bb8-a6c3-4aaf-8c69-a9c4f8627072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ee1f4230-5759-4a01-9e4d-ec8107104bcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5e0be13-3ca1-44f3-b1ff-9def61c77724",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69878846-7926-4a9e-9bc6-bae544d9d62c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d40a458d-9105-45c9-9b1c-bb32cd667627"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9313c7fc-3d93-45bd-b232-249c70a9953e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "02492340-9b3f-4a45-adb0-e30fa4852a50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d05cc09-4d54-4844-a92a-fa173c8df996",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27dde23d-2850-4454-8c42-27d58eb5a554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4911c060-d9b0-4f3b-80db-78065f176f2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22be4889-6da2-4d82-a55a-7f766c359104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "06d96523-41c9-4966-9ccd-be30a413a27c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e612ff06-0af1-4d18-b01c-59de04863dba",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "807daace-23ae-48fd-8ede-109f0c16bc8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "981245e6-f7ee-40f1-ae8b-3b053d2498c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e21c4748-03e5-4069-830d-8248847e3ac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "10466b4a-f202-4593-a4bd-602a68faebd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e89d051-1fa3-4418-bc48-559647dc8fae",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "705b457b-43a4-4729-bd68-8c7af1dc5218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9236cac-08c9-4a51-87ca-fab4b954c251"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6bd7d60-c5ef-4f57-8c7d-c6cf667164b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6ef52dcd-c890-4b45-b3a4-56943dba534c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c277ac05-6181-42dc-bb2c-b4e4734dfad5",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1e2869d-f687-41c7-a456-1a12392de5b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01ee035c-a4b3-44cd-968a-d1421e662c22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78ce6bda-2400-4c22-bee6-1caf6208e98b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6d6f512-a028-4208-8b55-42291c3cec02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75578e5f-7a77-4b4f-8575-be0e43325f6f",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3387f462-4d51-485e-9da7-326beeeef53e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8497debe-5b15-4e69-a780-f071bbe4600d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df494aa2-0ea0-4217-b690-299066de8572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1b38fd3-2507-444e-a2ce-c13dcaa0b356"
                        }
                      }
                    ]
                  },
                  {
                    "id": "730b487b-09a1-440b-abe5-716e90bffcb4",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de00d9dc-98a7-4c5d-905f-debdaf052c42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c4aaf61-8f29-4007-919b-64e54b78ec0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b364d58-adf9-46ae-8ea7-fdc4ac1dd83e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "86c01459-4724-42b3-b191-59b4ad5c510b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1690ca7-4ca8-4129-980b-467f57753ac4",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7569614-b268-4adb-9f16-7fe5e707608f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87ae8028-30d7-46bf-a508-f294c0a44c2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d9aca61-6f0f-4068-883d-e0156f8e706c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9e25baf-e489-4bce-9e1d-913f64d784da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc057d4c-3d63-4b08-a358-6bd853903780",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb958695-8ceb-4ec8-bd3f-fbb969c00da1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ede42be-bdde-413f-9925-493b3d6a2b1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "007c6044-8117-4059-8e4b-f48909ebf31c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a582bf3b-6b48-4654-b937-b5694fa311b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "049028b9-4f5e-452e-b697-3cfdceb710c5",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f41a0a7-6995-46af-a0e1-cd8c484d6c1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cb672bd-bc8a-4923-a2db-5bbb0156d6cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54c38d91-d262-4205-88b7-62f94d661c7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "caa1f082-3609-4367-ac5a-f24720662daa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "404a07c0-82de-4828-895e-fbf6b8f2291b",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "277d8be6-64d3-4d34-85fe-edfb8ec3800a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f26b2e5-86d3-474d-8ef0-9179e0d2c8d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24a01b5f-4451-435d-8567-f283709215b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4e5d233-938a-4aa0-8bcc-d2ddbd9dd2e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e36db7d1-7a19-4edf-b2ec-689a5efce86e",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c88c4404-4f50-470f-834b-519e6c03d388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0056851-3c57-43e7-a251-53c738578882"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6736858f-5c60-4787-b571-5a91ec704cc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3a786aa-774f-4f43-a257-9faf47b0c2f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa296e85-9baf-4f41-aa31-42a9e3cfcec2",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af4b7791-50f7-4b45-87fd-63eb65f300ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "005c2c7f-5583-4ece-963a-ab9ab1de180a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a3118d2-9a04-4a71-8e0f-ef350e4f66fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "f4f86a1d-1d44-4f10-9edf-3c0751e4daa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25eaa957-789b-45e3-bc86-f654d15a9934",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f21cb329-fa7a-40c1-8acd-0bec70fb3ba7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3b2212cd-0478-4b54-ab4a-a007ab0fe9a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f88a6e8-bbdd-4b55-b980-b585fe1e6971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6725c134-2994-4a41-9ad5-cd472e80a157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "716dd0a5-8471-4bf6-ad08-4a309565c238",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "110c9f0d-3043-4388-b359-d3ed7cbbe187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dd250ee-9e18-4c5b-a4e3-b8f206c3fde8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e95562cd-2379-465f-8b5b-dbb632a39140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "687e75e0-417f-4997-8400-15ed5e206b57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c6059d3-06f1-47b6-be3d-9faf7b882881",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f32311a8-01c7-4d2c-abd4-476dbcf5edca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2eab25a7-0598-4284-9106-c25557cae943"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4f74b47-8647-42b4-87e2-e6042e0ff738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2c8132d-f3ce-4f80-8cd1-ebec5835da2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31289994-8c18-4200-946c-96a8920f7545",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38be7c0f-feab-4125-aafb-fe9dc92f39b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db9ed323-8b97-4d08-8550-98c470fe05f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d65661e-7282-4e7e-bf8e-a9f40171ee4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9c88cce2-b9a0-4c93-b01c-1318eee2a2d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59f1f744-b2ff-41c4-b810-d14452ef45d9",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "203ec25a-d150-4268-8865-98228aee33e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3632c80-370b-4606-ba4d-8e0bec75734f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dff7282e-4b66-4cb3-9316-b691c8387ab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3317968c-1c84-48ae-add7-c2f685f6d0d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd59d140-5e07-41a0-97ff-c94aae83f872",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1f99009-aac5-4765-a9f1-430e403e9a33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71cdfa71-4746-430f-96e0-5666af466961"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c2efa03-7403-4e4f-b713-d3e491e4b343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e32cac1f-8d19-4c43-a335-2ccfaff5d2b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50b2bc23-7937-4751-9411-f2094ae9a381",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db2a4f6e-da5c-458f-b60f-ad150b8f0391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56ed2808-23e0-4c2c-a1c7-834abffee40a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbe99f14-5369-493d-b45d-3c2f2dfd8c41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "73ebfc6e-7454-4459-9d7f-bae2c0540ab2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bc7d9f0-5f53-44cb-88f0-01a3baad1793",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f5598e3-ebd8-4dea-b236-97eac1b48af9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0760b8c4-ae8e-4d11-a721-c986313c20a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc8e3160-be07-4011-8a8f-4c8be27deabd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "5f5fd6b1-e0a7-4412-b2c5-a9acc02fca70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60f706b5-cf42-4581-9f1a-2c905e20c8c8",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3422bc6-612d-4c24-98ed-a2390165ba29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72f203a9-6adf-4c7b-9834-fe63d08a567c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95f5a817-e907-4f29-aa96-da6a7c41b38d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc841e8e-dd99-4cac-ad87-18337e3ede16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c27a8ad-13c3-4923-9845-7d9afaf8a919",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a1cbc74-2ed8-4d70-9b23-3aff40facef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "399801c6-e72c-4c29-b14c-51dd5cb3a088"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afbfcb6c-47a7-4831-9875-9fc514148e15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac27942c-2c4f-400b-a42a-cd65051d8ee5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f33f88d-f393-4340-82f2-65ef2a9ef6e3",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62c3fcb7-2408-4f87-bd23-abe4c4eb1369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61f4f40b-6768-46e9-9cda-2ef2aaa1a3a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6070ecfc-1fa6-4445-8728-6117bb27677d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b62a19ed-eb03-4620-97b9-65b6b89017ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f1000dc-4217-443c-83a0-1fa0faf896b4",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd4b6ea0-2def-4f52-b58a-e76e283d93fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86c4224d-7dbf-43c1-992c-2d6444da327b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a06231e-8028-461b-96b9-fc04fd313433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "660b7d88-313e-47f5-b57e-0706bbb19df5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2f37a70-e637-4c9a-a102-85f783c5b10a",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7d83b90-92d2-44ce-b0a3-b1426aa448f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "272674de-a0fb-4cd1-9e3b-1afc5cfd9945"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8785360-28d4-493b-9de4-77eee7aca32e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "adb075d7-be11-48fe-9cfc-3abb85cbec96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5246230a-4d40-4da2-b4fc-1165070d4d52",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27af51f2-f875-40fc-9083-84ee6bd28074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fed74f7-7277-44f6-89c4-9b04fb193f32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f83b0b78-fdab-4547-b786-d537df4cc5d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c74bd59c-eec0-4542-94e4-034f8bd0cf6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f32cb100-2132-49c4-98b1-c95db2f21bbc",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36d0c486-0ef3-4565-9593-f42cf6b30623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adc56aa0-77d6-4406-87d9-76dae78b08aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c57cab2e-0e10-4bb7-99f5-24e8b7b8229f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f6fab9fc-8951-4e04-8adc-16200b02c559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0350313b-828e-4c95-825e-c1d3e315d8ab",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f00c6cb-c20b-47f9-800a-6c68e77c39bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e5b6e81-fdbd-4466-9914-a2311c7f07e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb185015-6a43-4254-b130-4e0bd78015f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "592fe1b2-f31e-4890-b2f4-a8a7e2f62cf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de482a44-dc04-4469-b6ce-08b99680442c",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "332788c0-46e6-4b5a-8962-668b2c1428ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37bcc341-7fc0-49af-a7a0-6f300b1f184b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39e88e6f-40c3-4c45-889b-83d4c143f555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb4abc9e-b659-4bc7-bcdf-6481859897fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce39c263-bc75-4004-9dcc-0c6c0e9f820c",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e44b56fb-f8a8-4721-a2f4-c507eda9f72b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9f8ac03-dbfd-4f36-a27d-8cd5e303edde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b313d44-ee77-434b-85a3-ec078c3d514c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a82d65bf-2378-42c0-9b63-77a49bbfe350"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84f79392-1fce-40c6-b888-946ac5b2a848",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ec03cef-3c8a-4857-b509-33a543034729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10214444-286f-4e5c-8913-b0b045492755"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95320d51-6d77-4762-b80f-c9c1ef669f77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "10ed7cb9-d5ef-44db-b6fb-608877444eed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef708a1b-ee9f-4e07-b545-9290f225f747",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b04ba63e-0e30-4ac4-9a74-c2dec23a3e52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "279b23c8-481a-4cb6-9435-522e5ec03ca7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e212c2b-265d-4345-9d0b-dd24bf314f38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "42db063c-f576-4287-a570-d825964bf5dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffd8043f-0826-4fc2-85d5-67c817da4019",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "659faf25-0fc8-4363-a512-449508cbe826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c207b15a-d648-427c-9932-f04ed7cc6bd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72a5e689-9f6f-493b-9090-ffcd1d06b925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "af4470f9-b334-4523-bdcc-bd480ed7036a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56fbd47e-7171-47bf-b94b-e18fc6d7d7f5",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3b7e0d3-b7ee-40fe-b98a-b249e7cdfae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89504784-a14a-433f-9a67-2108fa15b374"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d06ad2e-ceb9-4e5e-bf27-374087d3902c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f0e7ea57-dfaf-4967-b2ce-07d369a22d7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f87dac35-9f50-42bd-bc8e-a9b7faa5f83c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "569d4626-3c2a-47a7-92f4-977981f0591b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "322ae686-53af-4370-9439-9a84e4b82558"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4da742c-e0c0-4daa-9660-821b640ec89b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4e0a5038-2c31-415e-9861-e5f176259345"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a9fded8-e5c1-466d-a833-f39f45204a54",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "601aea21-0668-4961-b277-8fba07e7f723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47e2ba80-ba88-46b3-aff5-7676d1d50751"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f640ffe6-5186-4eb1-9842-15e70d0e4c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "150e3a50-2784-4896-8bb9-4072759d5444"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8277490-c808-48fd-b3a1-fba1d803c17d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "977b5dda-4f6c-4fd6-9e38-43c3daac97cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b982a5d-d197-4965-a290-4367af4e5f89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cdeb124-8cf1-4926-8ce9-6beebe9abf17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b25de642-4c73-407a-88c1-246ab68042bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae2f7ebb-c8aa-4efc-88a5-e66b8ba6ba4c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab23f0df-4ef9-4291-bf36-37929754cccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2184315-9c25-45ca-9a7d-15e32b4b05f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25da0ecf-850e-4f5f-9144-bb74ee3a142c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "788657f7-20c9-4179-bff9-f205156d6e6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8328dc9f-6099-4c08-ad73-2e6fdfb7b9ff",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99597c35-9745-4baf-9320-aa238af4e43a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e9ea52e-e3e4-43aa-8b0c-5ee5e3193079"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0906d080-14c9-4cb0-a737-0d84494375ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c07be5a-6847-425a-85e5-8e9473d8a0e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c79f8a3f-5f52-4d45-9acb-6837435673f0",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0e11607-871f-45dc-ac60-8c0b17a0307d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e18d0aa-dfb7-4d9d-bacd-f3c17d38fa72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df83ccf6-d825-4790-9b81-e266c9d75d16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a07c4731-6197-496d-9c6f-4904e908ebe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7769e70a-4834-4d89-8b84-8d904266ee3d",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d29cb4b-b227-4385-8476-7a9eec59d688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91770808-cd0f-4957-a688-fe34df8fac25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f52961a4-fe06-41dc-98ab-d0833d4564fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9c52e97-abb0-490c-8e96-dce2a572d363"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56082afd-70cc-4b40-aed0-2bfa973caebf",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d232dea4-2ddd-4577-8760-123c658bf413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbaa6400-661c-4102-838a-c28e8c564e82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc1f78d5-7ea6-4fee-9c90-1f160705e059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1b3b924-aa3e-40d1-a9b2-88a5019f399e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d258a427-4e2a-4b4f-93ae-74b7597a9576",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acc4b358-e902-4690-92b9-8902c906b5b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c8a319a-2509-47da-b2e8-279e562c81f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87835dc3-0150-4418-9abf-64e3442d825f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a35e44a8-2777-41b5-8491-d3b64ecf1ea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5be8653-c4f9-452e-a156-153441457745",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3644134-38da-403a-8286-3b4cd4b16974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bbba25c-976a-496c-adf7-c8882bc63d6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53fe716c-bde8-4600-8797-1b871317ef03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b87bde70-3360-4527-b1e6-7f023d4ab103"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c00c28fc-eed3-4978-a348-25220c571312",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3799d501-6db3-4074-9698-61fd3e7d5a5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e35a36b4-3892-4408-ac3b-925f57f8bdbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "669ed194-2ba1-4f40-9637-0effde8d2c86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2bae291f-72db-4551-a1a8-69f3bfa7cf42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b33dd4a7-548a-4d8c-8adb-bbdb67dbefc3",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16f1f4bc-a878-4f60-8013-f7deb0788a00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e237fd5-b257-45e6-9b30-b37e7cb55f3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c7229d0-4e1b-4d41-bc79-7f294c15d858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "531d95fc-6125-4129-bc08-5e9d1b5f9f84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3119b4e-6af1-438d-b7f3-6c906b835d7f",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39810975-aee6-4e3b-b9b3-eec226c89f46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ea6117e-aa80-4b7f-bfc1-5319f6ce802f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e069286c-2f4b-43a2-9143-54a0ec0d8209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f65f9d3-cc16-44b5-bf3d-ebc9f5250f6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0a9c7fc-2347-4b59-bb68-7e55003b783a",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07284aa7-1def-48db-ad55-393af7051cee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1146d0f4-6a47-40fa-81e6-a60333791f39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "210fad48-f167-4234-84a0-24f57106c674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "376acc2c-2efc-497d-9b71-eb905ed50728"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a26a5b29-24f3-408d-9528-a31ba9e2c199",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f1c6f9f-61be-4fd5-a525-5017c5bd440e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c131f3d6-340d-4e9f-aa7b-ccf63714390d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60d72235-d05a-49c6-8dbc-920b6e9ee378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2cefd51c-3f05-4a59-a253-675c202656b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b71ecfe8-e876-4c7d-8439-e305fd4878ad",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55e1300a-e8b0-4903-b50e-cb88a8e852ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7a03a97-00d9-4766-a3f4-c746a392e3a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efb23ef0-47fa-4096-b4f8-17ae79b8917f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7243b64d-35d1-4683-8055-49125ab80f92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddbe5a6b-6d54-441b-9bec-d3cd56671e95",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ba5c208-e4ca-4cce-b6b2-a92e429511ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92cd2aff-02db-4a2f-8c8e-649ddf3e9396"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4f42ecf-6002-46b0-a7ab-0e81a5b89665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "81bd330c-2167-4b3f-b235-fe0d8391a53c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "733e262e-ea1f-4458-ab6c-d09bb5133de2",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23f003d9-1174-49f5-a457-750bedb981ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81e75653-596b-4668-806c-e62196bd6584"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21f8ce0c-8d78-4861-9106-016380759812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d577a55b-793e-4785-bec2-ddf8118ef9fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3497cc71-3ade-48e9-9e5a-5228c15714cf",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "485ab5a6-c2ce-4372-a1a3-dc9b6b32c601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25094fd8-90fb-4d7a-b20d-d0765d0a3e0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53107488-e1be-48ef-b884-6eee8553fbb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e621d8a-abd9-418f-a4d5-f7e710e5d6f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf29a0ed-a621-4a20-828a-d00ea2c10b11",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc7aa560-5b97-4db8-a384-6d935e4e752c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6bf8837-b8d7-44ad-b3e5-066fc15c791f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56df1265-c88f-4a7a-a15c-b801f62666dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ba4b402-912f-4746-8695-13946473d49a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a88e387-122f-44b1-9307-c7fb699814dc",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f0284c9-df80-46de-8b7c-e7308473b108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a824d5b1-4eae-46d8-9987-241bdbc6cf9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "befc7c36-c939-49f6-b858-a677976c6568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1650aab-f813-43e1-b977-11bf197be3a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b6cbbd5-5b68-4af4-a2b2-c3b61133a242",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67748f3f-6ec8-4691-bc54-77ebbaf946ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a67e90e9-f514-4346-bd95-101e7c2a4a8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f38c891-362e-4ce8-875d-693c43bf7452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1de0e4d9-5f1c-4384-bcf9-8ab205cc573b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e7fad0a-b0c5-4cfc-bc2e-e341f9ec16e2",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc8fb799-d9d9-4597-84db-ac0f45408029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75f1d1ea-369d-4a2d-a3d5-2ce2f606b2fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "913b8ec5-eddd-46c9-8950-8bee600b6b31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4f994e52-d2cc-4c74-a914-199f8f2cde1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a96c29ef-be50-4ea4-a6ac-9bdea2e5cb0c",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ce7d379-8c5b-4a69-9c07-94524d99c90d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "683aa9e4-4f0a-40f5-9687-15154aa6a339"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ed87972-3629-4e95-97a9-1091de024096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "05ba03f5-62e2-4d9a-82fb-5aa24e1efb4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "082ba70e-57c0-41a0-be58-4b44bde733f6",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d116ddf-9226-4e94-89c0-54f8747e8470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45f133fc-8156-49a9-b60e-6b76564d6260"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "460b2088-bb41-44d6-90fd-42e11a80fa96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9aa3af77-05f7-40a9-94b6-85f07ed3c219"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4933062c-a43f-47e5-bb1b-2f5f112335d7",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33a5eb72-73ff-499c-800d-e6ec30b7315d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40872deb-b466-42c1-ba02-fc7f9f3d4465"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c110b7a-5959-4661-9e2f-4e36eb9e840a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe435872-916c-4bce-8318-5a5b2177285e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce0f5897-e91c-459a-9521-4295d4a555f7",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a7e6462-d931-4252-b625-05f836aeef46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd855a0b-3655-4c6f-b905-cd46312cd4d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4731749a-e5e8-4183-b1bb-ab3f3eebabfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6e891c1-871d-469a-837f-b43363cad7c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ef76c29-6224-40f3-a3eb-caa495f7c8a0",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7a834c3-9924-4886-ab4f-2b178346febd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "953ae959-b5cb-4803-ae94-34229fbc992f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30fd35bd-e152-496d-9034-32c8c5d685cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "713c48b1-be9b-4426-a298-61f9aacd9d37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c064f3ac-dd83-4717-97cc-83ba5094754e",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d1f600f-4930-4c5d-85c4-0ce097b2d29a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cee225f8-8480-4691-a4fb-9c67e6098a12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e61ed2f3-13b3-4d3b-8e36-ae66f1ab62b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0abfcda0-addd-407f-8208-f65fa684f77e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d3ee8a0-0735-4933-9772-e8bb1df56291",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db67cf25-3fc4-4a9a-83b5-36c518666cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c988ecb-7431-4f29-99d0-7d69d48643ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b607394-9ba6-4d46-b34a-b77505b711aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a8388376-95ad-4957-98f6-397f6816a7c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e33b81e-9820-4c26-842b-082c01f4db29",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2238a14a-5524-4f27-aac2-c5fb33512105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58206b74-4e4f-4e50-9df8-29fca6d0b516"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae6bb72e-b1e2-46ac-93e5-4e0ea25d3f13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e74601da-b950-4110-bdd3-c8a82b5b3df0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a324180a-a2fa-48cf-81cb-9c2e425ab5ed",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "994e1887-43db-4e42-9656-36d9bf32ec38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63dcce2a-9615-4ad4-b464-228170350246"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64b8736c-690b-4d2e-9314-420c97d570bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e24c2b68-fb02-469d-9120-c08d428532c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9dca2c4-0134-4b03-99aa-fc1fffa4eca3",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69acd718-e53c-4afc-b7a3-fba8ef4ebd52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45fab6c9-98dd-4a45-95b7-7a0d5c1dd0e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8c70812-0933-4d9c-a0e4-ae841fd817f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8610cf2e-b18a-4250-8d8d-97450e32eab0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0ca271a-7b66-4022-b288-adb18005ffc8",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "643d01ed-71e6-443d-a3ba-638ce71dfa65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ae87d25-ac6f-4b39-b37c-e98d6fdc95eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07f1cf39-6ba7-498c-9953-e908c1a3a7c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2b36ed64-3670-4d7a-88d0-c44413f6eec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f496693-59d3-4ef9-aeb4-86a2f1c99915",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "766e94f5-f775-4f25-9b6d-f9ca85cc0e9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e5a43f6d-d782-4471-bddf-ad8755beb3af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7dfa6a9-29b1-46e1-9735-60dc76f1ee44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d9b27617-7b47-468b-9991-d5f10db52981"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7b33017d-33a2-4237-ba9c-e874ff9eb8f2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "358198c0-6a22-43ba-8e30-4b1a898bf457",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b84354b-5915-4ab6-a1e8-f1d0230b2109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5e76fe23-c336-45ac-b2e0-54134c8adf22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4be6f553-ecc1-4a8c-97cc-8a760edc00d1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fa1a8c0f-06d1-458c-bd46-17c39d9ae82d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "baccaab4-2723-4b0d-9d0e-722a871d2a79",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "69c649e5-98ba-4962-9fc6-d4d7cb69d059"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b437480d-05ee-45eb-ac6a-dcb74baceb40",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5d3b8522-ad70-47e6-8b0e-a27120b63cb5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4125efd0-e7fc-46f3-8e72-1b9c883e849d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "11047fbe-2c90-4662-8b22-80adcc4a9b41"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8e61d261-b6e7-4979-aa66-12cad066f9f9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d37aa7bd-42e0-4982-a004-ed1ca7902fce"
                }
              }
            ]
          },
          {
            "id": "688aa9c5-0fa0-4a6b-80ad-b4316629aa49",
            "name": "Positive Testing",
            "item": [
              {
                "id": "12f703ee-b409-4a31-b537-43c94801ea1b",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "ed0a506d-1c05-4199-81bb-81c6862e27f6",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33885788-c985-40c2-a03f-67e853c9dae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "1ca8a073-f425-494e-b087-3e8d03251cb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "210f61a7-740c-4536-b742-9511687d2488",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26f3ccd0-a8b0-40ad-b102-c76ab1b92e56"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "65049273-c271-4b23-9337-1a51fc1928df",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "606b9f49-05dc-4162-add2-644c22fcb528",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "201462e3-9081-4f87-a7d7-c9fce0cf6869"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "44e38a39-e428-4288-82b6-02364f30cf12",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0fabf6f4-3ad2-49c4-9285-a16d76451696"
                    }
                  }
                ]
              },
              {
                "id": "99249ebe-2864-4732-afad-b7394e9e8e9f",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fdb8b767-f6f8-429f-8574-b90934ea58c7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "60471d05-66d4-4ec3-8f71-a92b76b7d4ac"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4a95a0ff-7cdc-4c17-b8a8-6c942d7e0c71",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1f732fbf-c243-4a68-b372-fe7eb4d95437"
                    }
                  }
                ]
              },
              {
                "id": "6d76aaa6-c862-4fbb-af77-dd8d935d748a",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "15606da6-de21-4e44-b477-13509c4d0b98",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a8c5d3fe-6440-4603-a523-743c5d6a50af"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "34b653da-d044-4950-a129-ee183abe49d2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2367cda6-8a4a-4a23-a224-16705f9bdf54"
                    }
                  }
                ]
              },
              {
                "id": "623ccbf3-2526-4ed1-ade9-2fe96a10d561",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eaccdbae-28ee-4289-9346-823021397c4a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c2979e6a-719c-46b0-93bf-8443549974cb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "379d4aa1-6d63-4ac0-abbe-081b39c1f0ab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "182308cb-b4e6-4523-8b42-a2d6ede8b641"
                    }
                  }
                ]
              },
              {
                "id": "23e12c65-2581-4805-b285-f79dc3abc098",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ad3b463f-5d73-4378-a300-7d37409f894b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "498b83d8-06f5-4f8e-9037-d38f390120fe"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d4ca9532-ad84-4624-9fef-db0d194b5894",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "a85a97bc-0a82-4b90-aa58-0a33923ddc87"
                    }
                  }
                ]
              },
              {
                "id": "82991fd5-4d82-4ff5-a37a-9cc1ba102a97",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4d41a67a-e444-456b-8eb6-e9c0e372c93b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ab7b7fda-2711-49f7-ab72-e6d692ed1757"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "775df492-f037-4c05-b87c-546fb536b9de",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a029bd7d-96d5-4e1c-ac36-306b96eabc7c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0626cb82-33eb-40b4-9b88-13ef0618c091",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "feb5bfbf-cb8b-489b-b04f-93b1bb1b5262"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b5741e11-1438-45c7-be07-93b72169044c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fca1f94f-f5ab-4f4b-b2d7-babbcb0f1818"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0111569c-7791-4823-bf25-83752c11621f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "cab9e39c-d3c4-4138-acf2-485ea6be153c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1ce189e5-d953-4ab7-aa4a-b4fe114f1bc8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "92d9fb3d-887a-4af1-bd82-2d416ef69e72"
            }
          }
        ]
      },
      {
        "id": "f32dc5db-42e9-4eca-990c-f88b572a4c33",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "a24145af-4974-4e0a-bca8-9224c2c41db7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9c2616d4-2202-4102-9930-4846310a6128",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "49270f7a-e39a-4644-ab67-c71d1ba81a15",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b54009ac-81dc-410e-b0da-00f02f3680a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a723dd9-292f-40da-a043-02dbd1c4a845"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48e6e6e4-1084-431f-8837-f2461ca09db7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a8d0d19-3e71-4b3a-a0ce-94299d4661e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3de73b38-a203-477f-abb4-3e4b96c6526f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d1c7d4e-8141-4b50-a65b-239e60393a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9706131-8a0a-4a66-9986-b59096bb3b9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55748a51-3407-4e0e-8ca5-7b29754247e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "eff80aa3-449e-4f85-b972-13115bfb832a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "311694c0-f5ce-410f-bfa0-bb1c8ad077ef",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4f2afc1-0da8-48a5-a7f8-433ff0567e6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b60c3e8-9d5a-400c-9dd9-f410de523f02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0150fd25-3ef4-44ef-b020-d21611b71b3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9df340f-96dc-48e3-993a-b72183632a41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d8d2f81-4aed-42f4-805a-7d9479e7e77e",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "091ead10-1885-41d2-a3fe-6e7d0d441796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecad651f-ee4e-49fa-b98e-5e344d1abb1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65188d78-1374-4822-b59e-5c8e17e49476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f08922b-1bfc-4669-9b39-5971adbd3952"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e037cd06-b1b5-465c-9526-f4365b375e79",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b79624-fda0-4a7d-8071-01ee6cede8f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4165130b-69df-46f4-9f4c-fa8c3e92de79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a17af963-ef19-4504-909c-2f45054dbf91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "59894315-c503-4180-8847-4b4eef438527"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cccea3dd-e170-4d23-800e-d9e80bac81f4",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e00d3103-1e47-435c-aadb-1f78515b4f36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d32b7740-db51-427a-8650-5e6b565059c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fa6dd8c-f116-42c4-ac1b-c82c3f0ec91f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f65cf365-2347-445a-8586-a3c3a0088dda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22ef250e-0db6-4352-a710-2fc7d0cae095",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "817ec57a-b7ac-4fe1-944a-36abcf1e52dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1829a36c-a03b-4599-8122-0a6a57c621fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8703e1c-192a-462a-9d49-802fc2867abf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "0cf9e288-8e15-43b9-b2e3-c6e2a0a23455"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be0b8256-f103-4db7-af14-cc4e1f2ab3bc",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48771f77-c98d-4f50-8e4a-de130f84b98b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c851f6b-ff94-4068-9352-5f2bc0a9f952"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "459efe6a-e986-447c-b3cd-12561c580a3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf6822a9-abe4-46e1-930c-4b15fbb3b1eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7491ac5-5200-48a1-8f3c-1eb3334a240a",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e528a66a-51cc-47fb-8f1b-d58e8b847fae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e387d15d-025a-4d38-8e20-ffc59a8dff97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc85c54f-ab89-44e9-86c8-9df1c3119b64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa7f6cbb-68b5-4ac3-af62-b9c1e82cefdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4854aeed-2522-4c87-8b1b-66cbad89b163",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ca20a30-8eea-448a-81fa-99cb42a8e963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "492362a6-2e55-4631-8a89-4ce6f090251e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04e3a308-0204-4e33-896d-6ac754792e15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "83044b00-56e9-402a-99a7-ac2e1cac8fde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51465c87-4739-44f7-a4d1-11910e90f6b1",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "988a3f13-c50a-4ce7-abb8-45604ad890f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86d310e5-888b-45bc-b4c4-1ba11d516f65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1fdb197-9588-4360-ae76-08b416fd5300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "a3cead7d-43c9-4b14-b948-e02675c6597c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eec8ae68-cece-4122-900a-27e582b23789",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b81f9f80-f65d-4d5d-ae38-1ad569c25409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5136f56-66cd-4b07-9cf3-6e6a7d403ff1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef5344bb-89a8-428e-bd47-e87e704e2e4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "107f669c-2760-476e-b0b0-4f5bad58a4d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c724f67-d777-4c7d-9fe4-25baa87ea020",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14add4eb-aec8-4276-b07f-eb9651ba83e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e16eaaa-170b-4641-8e21-24f3ae971d6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8deac532-22f9-462c-85ba-734a8d145f47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d9a9606-e51a-4465-8812-fe6d918c16d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76ece697-5a81-4d09-b9b2-dc713a24b68e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c94dbc08-f55c-474c-8e43-2b2a4c520595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f03c74e-3be8-42a3-8906-b556367c4ea8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4091eee3-8833-4e36-8f26-fecfb5ac81d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c576c8a-e7fa-42fa-8b06-0531aa42d964"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87fefdfd-60ee-4c09-9b2e-89b16726809f",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95f7bb03-a03d-4cdd-9aca-2010f6f8daf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42cc00a0-aa86-4c33-8a8b-a61edb652c22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df132092-cc67-4343-b1f7-34353ab62354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9d06f1a-47b6-4c88-85c5-893ef428eb20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e2323d6-484a-4bd2-a09b-a4c6a7403677",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fd8f264-e37c-4f54-82f9-f7a0e1e214cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40f81676-9a15-49f1-9b5a-f68302160aee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3f811cc-1210-45c6-9c88-84cb0082c849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8673147-e16f-4600-ae88-631c2fd6f94a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dee9cca-e039-4f75-aa61-cf6bffbd06f4",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61567739-6712-4b36-a98b-deb0d0499c62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2592c209-475a-48e3-9f75-b19a524911cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79e4ef1f-ee7c-4646-964d-f952ba4b1ae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a688297c-8610-4a39-8f9c-cea9d8d90c2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62f70b43-5281-4d8e-8e5f-73099de63dea",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15743396-85cd-43fe-9415-f9edf8910909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0fb86f2-b468-45c6-9b9f-7af71acbf224"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "260c8765-fd69-4853-9de2-937c6ba36009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2584e07-1cbc-4a96-9045-3cebe58fa605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b24db49a-51d9-4819-83c1-49971ca7d319",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e38b19f7-5122-4576-b505-9ef203dce1df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "760a0c74-f9fb-4857-9e4f-68f62a3c1e93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edf21311-7d54-4ed5-8bf8-8b674b3387f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "83253b02-d565-403f-b1a3-3e7f5227799f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0586089b-82fa-4bbc-8789-edc03c402f74",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1a92ddf-525f-4935-a3f9-87d0e17d3f81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fe2b732-aa44-4e2c-ae0a-a7f61cbf1162"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adb7b314-ef02-4357-8fa8-2678f34f009d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "80abd6f4-329c-4832-9989-94b969f388d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c380654-c7d3-4e08-a7c2-ebb4f375ef5c",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8670971-2c14-4bf3-9129-d22b4254e0a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ee02953-3fd6-48ac-a3ba-cf1015b4ce6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ead4362-e9d9-4eef-9487-7812565d9bd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "710e526c-0c54-41bb-9b80-7796b507af4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5af4297-17a9-4183-b9ba-bb35dd777654",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd6966a2-5161-433e-86e5-95006e43cbd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e00728fb-cba4-4a44-a82f-0a35f514f66a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b897179-ec4b-4158-8274-24b011b4a8a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d07e48ac-f95d-4b08-9d11-347575ddd63d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7c06fd2-71d1-4209-888e-e8f560bd28a3",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61d47298-4ac4-40b8-9f75-ee24ad49f4ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "466abc66-605c-4f45-bbaf-f16536da8c96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45a464c9-f8aa-4699-9c3a-f12347fa5271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "18838769-2b83-48bf-803c-f25456fdd46b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3485bb2a-94ae-4dfb-bbbd-7b1812f1d446",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d5858a9-45cd-4538-bc7f-2e289643bdaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a75a2042-df4b-41fa-ac40-644df40769df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3df6ab9-88ee-411e-a097-1d1b6f6b3cd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "28a9002c-3da2-40d5-8f57-da0cbb1ce2b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ccb1eb0-f8d8-4ca6-b009-d68381bf2fa2",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1f61614-5e22-4384-9b4e-42a9901e722f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4ca775e-bb00-44f5-9cf1-d954e2cded9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea80c1a5-42e5-4934-9d83-b37c96d88cc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d0b11d3-92ff-4e12-baf0-424260679c47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fd2240c-72ad-4ba9-82d3-d0cc2224f29b",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63c09624-7501-42f6-8302-2e9dfc75e086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6294ffd3-d298-4e9d-b2dc-172fb41edc08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10a55ddf-b13a-4768-abd4-07e5f2220732",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d6e42ae-3bd6-45cb-80cc-f6183e4af514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8a70596-7e2b-4270-a9fb-0d4105ee6262",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f92fb2d4-aca5-413e-a471-3c2ff3fb4c22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38db2d4b-78f5-403a-a673-75c99942ba64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b33e9bdc-f11b-4b02-85d4-7652320d0f1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f573e13-bcfe-4a8f-ad39-9dda18ad59af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21da1871-4f71-4249-80f2-135cbedee069",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3308dc32-a88e-4418-9ca6-4d42de81fa4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "079540ff-8baa-4ce4-8837-23e1a70c29a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e6901ae-8504-44e0-bf4f-5d01381dd7e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "45e543de-c24b-4edf-9635-9b224a516c39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30f98f1a-fbdb-4b17-94bc-8cca6f20a54c",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85e038d2-a915-4cf2-b215-e3094acb6cb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44f8fd7b-8e1d-49ce-aa9f-8c9afb1faaf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfa31d97-c108-495c-9748-8a2897dc6793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9204fca8-f5a9-49d8-b918-93d79644d969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6455fb9-98e7-4e74-a8d5-eeacb594f2c5",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "518de07e-63b1-41bc-af67-8673c72cecee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d69c497-87c1-48ec-8115-7f16ceef667d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86a6e652-e5a3-4db9-bc36-27266014a3dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "114ec8ac-25f8-4d9b-9aee-1fd5adea84b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eee49fc0-46de-4f98-98e4-a30ea07b125b",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b480aeb4-c68d-4e6e-a464-980dd822aba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f7b479c-dc49-43ab-97b2-c6a11be9bd12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fa9c255-599a-40f3-99d2-ef230d8b0838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c1371d1-410b-4b45-bed9-798e7f103005"
                        }
                      }
                    ]
                  },
                  {
                    "id": "144df5e0-0f63-4b3e-b39d-44f6a14d85bd",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a703e5e9-d003-4326-bee5-923e730e9972",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3494ad3f-e3ed-49f1-afea-0003f5c2acda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c3399e1-b31a-4147-8e02-e764e91221e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "926b3152-e6ae-4bae-9463-7a987e5eea56"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fb213e3f-19e3-406a-b66c-5f2233237bcc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "25dab75e-d2f1-4696-be37-512219702ff0",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc818b25-239d-47d0-851f-32c66a7045a1",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "2b38ea4d-802b-4b00-9932-5d5ae27723c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8b2efa2-c499-4e92-b101-31abfa75ba19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c79a9ced-7256-4a30-99b4-004898a4c6ce"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b40f401f-fb1f-4cbf-a71f-ebe7a38e4c24",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "20d6364e-426b-4758-b733-8908ade43656"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4372a206-906f-41e7-8061-af77f1529e0a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e20d858c-2d70-47c1-bde5-457bd18403a3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bb233aa5-ce90-40e9-b408-bbca04c03c03",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "feeb874c-8909-4674-925a-cd1cfd16741d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "05fcbf14-e809-4fd9-bcd3-96a833dc3d90",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7d66c4b8-ca71-4b2e-8b7c-d9bb8a21681c"
            }
          }
        ]
      },
      {
        "id": "f119ca98-4510-42d4-945a-1adb7c0d64b0",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "81648c8b-1d5d-45d6-aeb4-9106cdd2f3c2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c9b9af8c-adb3-402f-aaf8-40b261c229c6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "741e6295-7f4b-4c16-9d37-5a53b3b619ae",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c7db3e0-085b-4ddb-961a-e5ae965cbeae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc647c1c-9a05-4a77-b3f6-11c7cb245765"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b35f8072-e1d2-4f33-bddb-dc2fb5a36aa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c87b3d6-cbb9-4222-ae81-1a2b0fcebe88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3efa10ed-8c54-485c-905c-ac8aff28ac25",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42708f2e-7515-470f-9469-a7e6f67d1734",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77831ee4-c4ac-440f-bae5-bbb25a15fc3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48a1e6e8-645c-46dd-a0ba-81a84e2a3a9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6cd6e86b-f652-4144-8718-b710d48f8502"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c798537-2a22-4a70-a93e-d4afd9e27413",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad2b99cb-fb7f-4d11-9bf7-6ab4d4ab65f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8df01027-ccfa-4ba0-90d2-64f51222fa59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb6176f2-37e2-4b92-9969-ca615186ec87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "43e478a1-7abd-49a2-a47e-915db3edd8e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79d0edba-5aad-4bd0-89c4-efe99e7a0b44",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "421bae53-0be5-4f1c-a33a-5849780c77ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd0d5bf6-c14d-4c92-875e-cfe38a48e1b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de40faee-6ae8-4a32-95a5-6108e0726513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8471d455-a2c5-4d88-9e2a-8951a34425ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "add1dcb9-e72b-415c-a343-25687027c753",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1884e15-2b37-406c-8b9f-e45c8b0fe4b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "943ede83-f28f-49b1-ab80-4c1a96032cce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "974ed746-4e79-41ef-9d3e-f2154698eab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cde3d05b-5fd0-4ef6-a7b0-a8ee256eb66e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5233062-47fb-4944-9b11-e62af4aca2d7",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad064f41-81a5-4bd1-af3b-e989a5630bd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9af7c756-613e-4076-b022-5cf36d5bfd08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea55b1af-5f23-47b6-a2ac-cc2bbb35434c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "15d5334f-7a78-4d51-892f-87dee4ae0cb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b00ace72-2f03-4709-b51e-1c922433b19b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "192e34d3-38db-48dd-a11c-46205e15b77f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb46e9da-ec3b-4d93-bfa8-45d4a5027155"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8d5992a-807d-49f0-b0a2-468fc0c7d4cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ca3b965-5b78-4aec-b16d-6417aa2c3e88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11533031-9a49-4f12-9c5d-4e399c22af2e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7094aa7-b704-4419-b422-493a5580f3e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84a5976c-379a-48ac-aa75-6fbbb93587a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "580b0071-e490-47a7-a134-760090d57bdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "40c6833d-743f-49e6-b251-6ebf004e34f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9f343f6-87fb-4bc1-b70b-643631ab35d3",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbed2974-c1d6-41ed-86fa-e6947152db4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efc3e3f3-12b4-4509-b691-996e3fac307a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c87db84-9237-49a7-b4a7-ed65d222edf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1cd29f51-83d3-4591-9d70-b8ce8be1d7aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89dedcae-f0d1-4228-9767-c60c27f3669a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b19b7d54-8c29-4860-a0ea-909d8f60e730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae83b703-4b3a-469b-9326-3feb962bdc62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fed72030-9c6f-4ed7-a562-26ab907012eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8220290f-81be-455a-9e52-548475c118c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cabc24ac-9952-45c4-b4a3-d6eb116ad0f2",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd3008ec-ed21-463e-8e4e-4c71ee35f512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21c9cf84-f4a8-4e53-872a-a4b1e86a11ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afb7c367-9745-44f9-bd00-4e92f2caf119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "3e82ffd3-ac3a-4d5e-b6ef-00ca2c912166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "261fb909-3baa-43fc-816d-057e23937ff7",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b5ecdfc-be38-4d75-9ecd-557dcb47bde9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a1ecbf0-bc30-43fc-848e-33dce6a00829"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5317633d-d495-4cbb-87f4-061444d49a3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6b8c8dc3-492e-4832-8f60-9f203203d39f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47656f80-c9bc-4cc1-a650-c3a9feec27f4",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01782591-6159-470a-8479-e57106d3fff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4994aead-e69d-4552-bca4-a7d623fb9671"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46bb86e0-6e19-4933-b6cd-6a9469ebdec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "de322b91-545f-4dc9-841d-534512bafed3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fb78bb2-a929-4730-ba00-53ee4003c98d",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e756f3b9-2fb8-48fe-b943-3ce2b71dacd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdfed985-7625-4b3c-89fd-9c0f9e949925"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb09c1aa-a292-4e09-a6e5-df4ac58ea74c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea69b52d-9446-40bb-a8bf-999a6775c90f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd093489-ff1c-4704-bd28-52c62a5c51c8",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5a1dec4-9655-4037-aad3-68c8963bc971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7cf5ffc-3bd3-48e5-a75b-1449777a9635"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39da6762-1e93-4fc0-ac6d-9df89da0b358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a639660e-ecc0-40bf-934f-b70e854a9fdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7503cfe2-8fa5-4767-ada1-89a93af85709",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dca08abb-f81b-4f15-aebc-5b5526aa22da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78573fe3-12f1-43cc-8979-a5f49f697d62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a42c20b-6ae1-46d4-811a-a8e2cb7ba505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4b7db67-a360-44de-94ce-6df4317ddf62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c7aeb45-5b8f-438f-bbed-d53eedb747fb",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1879aeb8-a449-4fd3-be5c-65fcef9b86c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "034e2289-21ae-4f2d-9c4d-7f6d4532c2b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bca7a5a4-1ddd-4bb1-8581-edb78f5bc4fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "51669c03-b063-4566-b998-e544422ba292"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17f34b3b-262c-4e6b-8e1c-ada8b6d596fe",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce5b952c-72af-4806-9059-7479095ee75b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "462b7912-1b6a-410f-aaca-c79fb927e9d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a695c71d-6213-4d6b-8438-e756d3436791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb14e87d-9763-429e-9ee3-0ff92775c5d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31438ebd-ad9f-4b32-ab13-cc13842ac2f7",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faea4a9d-0f89-46b2-869e-1483798ffae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f98b7b08-a23b-4af0-bd22-4a627f98f012"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26f57621-b353-4f34-9781-2285cfdf30aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ddb750cb-9f24-4750-9513-6643b771163f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "342709e2-dd64-4678-9451-7307ee8f3ab0",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62fb74fc-aca2-4c96-9414-b192a18cd945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c42528ff-075b-4945-8a6c-bb7f25474d02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54c8eabc-98a9-476c-b3b6-4d48456bc559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d61c26ca-6994-442e-8291-5c26d5a21664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f39a663f-991e-4e01-b491-351760286272",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fa5599a-69cd-4c9e-a5e0-a2aa71337078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7ed3bec-8a94-4e10-af64-8057e186410b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "218fb6f0-43dd-426a-9b49-8c4447013acf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2bb209bc-7445-4316-836c-97c87e038ad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec6f0825-1246-4676-9be9-74160269d232",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "598af92d-2708-44a3-b7dd-1c58b14dabef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "714791ac-0199-48b9-81de-072919f30021"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cf14c69-7a13-4e07-b74b-6ac10b286231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "781ba141-58b1-4c82-9d93-9df261578b30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0106866-92c7-4e44-8e50-c9c60418fcbe",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f27b442-39dc-4607-9b64-b49bb827cd3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd5282bf-f542-4c30-a431-6376a12f55db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bd17db0-bd45-4d8b-b644-0f69b8c30dea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4b807ab-e470-47b1-8b51-ffa322b2e561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8d15a5b-29e9-4439-9e66-1c3ba7d28187",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5569a9a7-91d2-4a43-895b-b8911c617fe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83ed0bc8-12e2-4622-9e8e-9e08a443ca5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34f19921-b39b-4c89-ad1e-1458f4d0fdbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f08368e-dbb0-492c-bb09-e5cd50f74825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1215ff9-e627-4ec1-b811-7b6731ff330b",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8974cb00-5d91-4ce3-8ee8-d07a64b53276",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f82c74cb-b9f1-4927-b402-e8926037b251"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4010743f-305c-4670-9ce3-48d4798c9751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b730c19e-0f62-4be8-b472-39549f98d02a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bff34824-cc87-4818-8bd1-602a7b64864e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd7e703f-635f-4631-8c41-01a5dadb913e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b3db7f2-c122-445c-8792-c934c1d73d1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1712d649-5b6d-48a6-85b3-749a1615d61e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "47b9f544-039c-4d42-9008-c9d444873506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce9cb3a4-feb8-41f2-b216-49469762b4cf",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09ca5196-5866-4d11-9223-db6a00b651e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aef1f09f-c98f-4fdf-be89-628083d6d5da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d91ee6c7-d76b-4761-b4bf-796a2ffdef7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "737e87d1-6b12-4b5a-8fdd-48e06c856e96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b460949b-7438-4653-ae4f-b396e81db84f",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "052c0bce-c321-47de-8f30-6b91b677137d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03cd44bd-65e1-451d-baaf-cd8a00916a2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af2a5039-39b1-4ebc-bab7-4d73f9072aac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3cab90c1-fae1-4d9d-aada-ce4501b669a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db36933c-7d0d-4dd6-a76c-d78ac7a28999",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17084d3a-8c44-4d2d-b771-b5e43baf9327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a979c51-0593-447b-83c4-1483a4c063b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23b64827-fba3-469d-a527-3c73abb20b2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec8805d9-c38a-4d43-a634-08897b7e8bee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9534ece-9eef-4a7c-9a40-9be395b0150b",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42dae82e-03a6-443a-9f3c-1e8c3fb13f40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf90799f-e0cc-4f7e-8d9c-98f0346c326b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5aa8728f-69ae-478f-85ad-87ac6133f682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "882d2a27-af15-4a77-8ab1-fa67c331f0f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b685ca7-aadf-442e-bb98-3d75d3b2aaae",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83dbb817-ba0b-45c6-b741-dd99bdc9ab17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9c0bf4d-3f42-446c-89ba-35405b638877"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "123153c4-3632-459f-ae08-0492ab4bb853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d543f1f3-f2d5-4306-b648-82d8745a7977"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e73b325c-8f2f-403e-9c74-de816fdd05b3",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22390bc9-f6d3-425c-aa7d-18567052a68d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53823b8e-d59b-4b21-8f14-c1dc599e3a1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41cc6d5f-26f4-4a31-8a68-51417b881e2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0af48d7-e21d-43eb-9781-4dd09774807e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f92cdc19-e07c-420a-859e-4369a162d500",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "810f2877-5291-43c7-a025-28154451ecb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1de4c9af-2aa3-4b3b-b559-390d298a734d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f71e76d-0f6c-4925-b437-706b52bb9c26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4cd7c4e4-b3e5-40d9-aa52-d2ad3c8ebf4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45ec2b94-70c0-4de0-82f7-e84243ea989e",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98ce2bd6-eb40-4e51-8c04-2a7887c60728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69d146bc-5837-4765-b931-3f82ccc5f234"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "971ba166-bed0-4244-8735-6f8fe19abc3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a05e7b41-47df-411a-8daf-d01533874dfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9089b8ee-2a73-4fc1-bd8e-91591a4ee195",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "965a22f1-478f-46fa-b345-7453fccac0f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "810bfc0a-ac37-4efa-a0e9-68c59f2707ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "808567c5-93a5-4fc3-930f-c7dd114ddbaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b8b4b7b-addd-42c0-a016-e02a50d64ff9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "739b9022-b640-4e2a-bba3-72523cf44424",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cff7e97-1692-45ff-b7d9-d307ad357e5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2aca9734-ffae-40bc-a0f4-bb226948079a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64232c03-e4a6-4641-b8f0-1afd3f5a4f40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bca7ff6f-446b-4b13-8725-641a234c34ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "587c6218-628d-47e1-8a09-bd3d831599cb",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "579ba083-754d-40ed-a44c-b528c55b3d4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0607d476-daf1-4dfc-8d7f-848eefbccad9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58c65020-6062-4df2-b944-7169308a9098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2775735a-06d1-4964-a974-f2d8f82d61ea"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ecbb58eb-3964-4ed9-a5f2-01f6eef4edd8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "750f0fd1-ecb0-4f73-a0a7-e330a1b5314c",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "319b05af-f7e8-4e50-8f79-b7c8993a4e60",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ef683b54-2f6a-4ae4-8896-ba6bfec12f98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c40f1755-093e-453b-ae8e-40b84389daf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "66e6e095-0f9a-4298-8329-022facd29822"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "01d82edc-7451-47d4-a82b-33e39d21909a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "44d8c67e-eb36-437f-ba03-be6ad83061cc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc6ff91e-30f2-4114-9f46-29b683108c2c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "48f66ad8-fc1d-429b-9cad-b71ab19dc2c4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ca3ab42c-fa57-4d40-9d58-db22669e608c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f0e6b268-f415-447e-bd84-5910f5e5d6eb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c795b26b-45a4-4e95-99fc-da727406f6a1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5c2e1c46-2e7d-4ed5-8400-2951492c3e22"
            }
          }
        ]
      },
      {
        "id": "108be305-284d-468d-ac10-6d6e3cacecc6",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "f50ea8af-ad2b-4d68-95a0-73ad78932246",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fe118ebd-5a12-4677-ab4e-ba589f7b1efd",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3a4dda28-55c0-4d7a-843a-47f6fb4b7f2f",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07aabf8a-9b9d-41a0-b806-663adf728114",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcc65175-5fbd-4fe4-a976-03ee0e610a75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05b4778e-6ee1-4d30-8921-918566382ab1",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37fd3605-781f-4af0-b786-20cece243143",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ff02610-16c1-4fc6-b85e-ac38a70a7408"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6627317-948a-4c7d-b23f-688cbc883e69",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d8d15a1-8f8a-4520-b03c-4e15dbe063d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b36ce8b-12ad-41e2-b9e1-0e61e0a2ce72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7711671b-a608-4bcc-99e0-db23f28f4ece",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c8a47ce-7172-474b-97ea-7139c962e3be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce2f7187-48d9-4fe7-b770-6e12ecce8f45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef9ec83f-f3ef-436e-b72f-defafd3d051b",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a597d63-ecd3-4bf6-8505-1645f95d3fbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbc27418-5674-423a-b165-cdf96c07d1c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb0ee905-acac-409f-be06-ef9e9cf40411",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33776efc-8fc4-40a3-8d93-e14fdb7de807",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a441fba1-0f65-44be-9d22-23f8be4e2ff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a72c80b-9c3b-494b-90c3-810fce828bf5",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f940850-3b94-40dc-a55a-c7fe8c726552",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdd59b74-dfab-48ef-8a89-284628b64464"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81e7b4e3-69be-4233-81f3-78c2b841ab25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63abe93c-ec93-491f-ae05-61fb6a86520e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a95b2ed-6df5-4283-a4e5-c81ad9a1a326",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52560f28-a08a-4dda-97b9-207d9629e1a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e1c8311-abbd-4452-92db-1834e3c5702e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "255ed407-3bdd-4c1c-b7ab-ab343c364689",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b7aa0c3-9b9b-4e9a-a1bf-95a38ce668ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f29d590-6223-4c41-80e4-6ee9229d4863",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60e1388c-4ef0-4d1a-83a3-90a419176f12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9729bc0-5392-43fc-8500-efa4655342a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a84657d-f4e0-4724-869a-2dfa662d65fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c0e70a4-8410-499f-bae4-a93b835cd6fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ccb632a-3f3c-4371-97b9-c9fec4e62101",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58fbf4d1-bb6d-495c-91d6-b7db8300781a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cdba2365-1fc5-4c35-b3d7-5e7d3eaa1c2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "711666b0-2bc2-423a-aa6a-c9a9cbc2e211",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d3f5bba-7a11-4a36-b979-ae3ad5b61b80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce58ee5f-6a81-48cb-8b61-0aa5033f7e29",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e33188f-c9a1-428b-b26d-b896006cd3af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ab719e0-1096-4e92-8679-18fc3ace27a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2c29333-7bc6-4921-be7f-9c93e41c3199",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0a7b2a9-f05e-4cdc-9f90-a488c4333f36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5b4c9de-d5b8-4112-ac97-4ae62662f5ca",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84e1b8c0-3b7b-4eed-86f2-209a0c1959e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3700e6f-55c9-4cf5-b52c-f529949eff2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb5b1aea-e212-4ebe-ab76-185060112180",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6078eb7c-8fc0-4e66-b1a6-6c9c599710f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8149d55a-98f1-4339-97e7-22ac8cd51794",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "727e22d0-8268-40b4-bf78-5b1f2eff82b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02e313de-dc95-4f0e-8d3f-47fe2d311b01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "737fb7a7-c064-43d4-99af-89b1aa31fc0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c464d462-69f5-42fb-b88c-a43c67f6a9e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84488cb3-e452-43f9-a8c1-33633e28bd21",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8840325-8069-4418-9fe5-15524b009eb5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c95941f-ac15-4da8-97f7-b407d75ae7db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b6d9f9f-56b1-4c34-bdec-e715e792d392",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c377140f-4976-4b61-8d95-0d3e986f8110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7403851c-9abc-4bdb-9dea-896b5f8e26c9",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a660a802-3f32-429b-b962-5935bfcd2586",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4386348-4eed-4a44-9241-461dce956a22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fac5ea54-5278-422d-b101-16a521c910a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3320fb0-c2a3-4960-b267-ee873c18e858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94a51e32-be68-4f96-a732-dfb3e408ded1",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8781dcf6-0d8c-4f3f-81ff-56bf5cd91347",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "69732246-7a78-4577-be91-45db21c2596a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53f5abac-0496-43e5-a76a-d7ca0555f608",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b37f86c-08ae-4cf4-bbb0-b40df47c935e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74346104-9a45-4a47-a710-6f49d735cbe1",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "611e1734-1d2b-4b51-b667-c1a8e4f01ff7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ec85538-15b9-41f8-bd8e-c5852e0c3cd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "649c6b77-9414-48ac-bfb3-9489c0b27443",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "805fc043-6851-4b3c-9e31-e938f2510b1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bdf7e74-695d-4fdf-9b5c-051e3fdefa08",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fc724ac-dab8-4d5d-9f1c-c2aa5f4fcc39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97dc1737-4719-44bf-81ac-1cf24594ae7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05a72c75-26dd-4d84-aec9-c5d9a5c16dd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a77d4f58-0fda-4617-aac6-8c34d8f07272"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a75ba77c-6ab6-4417-9e21-0ee25a6c68cc",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86f1a389-e9f5-4ba9-aeb8-89218308e1f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "851549f6-3569-4b6e-84f3-f15c21a4f0e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "041ece19-6358-4708-b6f6-7958d2ef9fb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "160c4326-ac79-448b-a515-0461f6837499"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07a07d56-5e25-49d1-bba4-cd80e1f73d0f",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "690b7bb3-ebd8-45f1-9c15-8dc4c744e3da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcaa0440-8833-4508-8c4d-2c69592f8fa3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adbb3f78-2c2b-470e-a813-44ec93d437b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81749f4a-7fb2-4070-9cf0-4afdf266327d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82db97b4-cca9-438f-94a1-9584969ea894",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "113af533-e42d-4858-bc77-e79c43df7235",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08e6d94f-3b97-4fce-b162-9219e2530c9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcc4fc8f-4b21-47a4-93bc-c4bc10c17833",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bde07781-e934-471e-b576-f4bab52be01a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cb36091-8337-43de-a443-c914a9c09c6c",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bc841a6-bac7-46d4-8553-31521c75c12a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb6ffcea-af03-4957-b5a6-6fd1c90818ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f7c0543-2400-4f1d-a528-206596b7c3e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4178ac2-e011-4e8a-8567-573310c558bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb83207c-d273-4170-8233-5a094c1950c6",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08a8b30f-e163-4cb8-90c3-002eaee59473",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71ae0a30-f8a3-4f4b-a7bf-2fd82170c02a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b893179c-7248-4b33-9261-a7382cf9283c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acf6d9fe-8428-4894-b72f-4d78879ebbe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dea454db-7239-4e9b-a10f-cff2bbf7efdd",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db9a695c-abb0-482c-909c-45e178b328f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22e858f6-f695-49e0-9baa-1083f92796b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f2912d2-304d-4c7a-97bc-a5f69d39b3b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "574f3217-f68b-47f4-be0c-05d986b0cdab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc60bf40-a0cd-4550-9cbf-87de2f256407",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1736512-2872-4fc5-a9e9-40f4c4d2ba8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54955733-8cc7-41c0-9d02-4a75acd6779e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfc163eb-5788-4644-baaa-8819582346df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "877f4d72-e8fc-4c76-b433-df54197a3768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e67f9ec-3c1b-4df9-a38a-ce7841da636c",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "540b944f-05e1-4087-9e03-58fdbc735ad8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1d974ef-f0c9-459f-8573-03e34df1bc73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee348a10-2a36-4ef4-9410-566b7d7a633f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc17cf54-426f-40e1-bbcb-eaf644506907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e25dfe24-3253-495f-9421-066c8226a073",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bb2b4c3-f285-48b9-b9d2-278e7fe733cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7192fa07-e412-4de3-ac3f-4623647aff35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36783d35-e2a4-40f6-90f4-1dbf36cc2998",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "889a3cd2-9f00-4a59-bbfe-c07155e4606c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce0f4055-acfd-4453-ab09-c0ac1b6e2c63",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12059612-47e0-43ea-b0b4-536001264c83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7b73fcd-9139-4f9a-8d12-16340faeadd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2d51130-49d5-4933-b32b-1d3a7109d34e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d2b20c8-7918-4146-b07e-8bdba9752d95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dedb39f-b741-4750-ad12-708bf8523b3b",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d664f14-da23-4b88-ad95-2450a3d9aa33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6479ab6-9e11-422f-8433-a36c764e6db9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf557980-3721-4934-8d31-75fd2a376290",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7abeb04-9983-4ff8-b690-39c8be4cf750"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29919e31-00e6-4657-8790-494a72c8dff9",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73f3ddbd-9c2e-4579-8c91-ad526a923ba1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "019ecc4e-4099-478f-a5ae-520d771720a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "505dae0d-b97a-4ab0-886e-8f7c7c305752",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dde6dfae-2e71-4929-80a3-48288bc63b87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d97a881-b9f8-422e-a819-8d28b98c76ce",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efc8a96a-dfe8-4baf-a2ad-dc470f7596e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b821c615-8ba2-4424-b0db-6562bbd05259"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d1f1e49-491e-4485-ae01-41d9b050efcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71901a45-38dd-4b89-b568-faba09af118f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad5da704-27ed-4a5f-9b7e-f4a53e792f43",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f461a90-cf04-4aba-9d9f-de16ca321d82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd6898fd-dc7b-4d82-a1a7-9c18a509e48e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00e200dc-6adb-446e-ac70-aea555f0d5ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ec99a4e-3044-4cc9-b42b-c266afad7f59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7157d424-82bc-4226-803d-0f334c710fcc",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da2a6446-214f-47ce-851e-9333e32ae9cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "622685cc-e7fd-4483-b7ca-0ed131dd79bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6f328ef-4b59-4cc6-ae98-e5ce51a3afd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4db1b3ac-4441-45ad-a196-fc01e0014a73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00cdaa79-65ee-42e0-8abf-c792cad74a5d",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6095b118-6099-44f1-ab10-f367d6cb94d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4d9a405-8e1c-488b-8ace-2d3e41a9bc10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "942d59a9-3d8e-4a74-a0f2-ef8c819d8398",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0198aa49-9250-47f5-9989-66180214ddd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3307d0d3-48ab-4145-ac17-359a8afa62cb",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a86d03aa-c59c-44b2-b6ca-50d79e397e1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ebbf4a7-2b32-49a0-abdc-b670ac373f34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec210da9-fa3e-4e14-b1d3-10e46c395a7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0750d34c-4e67-4113-891a-4c442eb4b6b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cba1cc92-d06a-4c05-b810-1c340a932322",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e70ff2c-9bf4-4689-8575-4c8a2df0404c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b337d63a-a114-44cc-8db8-cf90f5c1f944"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e857afb-baf4-42be-bdd0-8141d6ff3200",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "335b19bf-f32c-41c3-9e32-384064bd8b6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a00433a-7420-4327-bd09-a02a472d535c",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1881b448-05c5-4735-9c6e-d5d62a091414",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab4f3fbe-7742-45bd-b1e6-4f2253780aba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6cd483e-0017-461b-9546-d5d9a7d8374f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c00a72c-1f02-49a3-b7e5-588d98b71f73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa7e4d0e-472f-41d2-a23f-9426f552a2a0",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e67608b-5b6f-4ed4-a5c8-5153edf6994f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82a0ca6e-1ae9-42d2-912e-9cb776e6257b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8dbc033-e9b4-4539-a53c-086ac4910d6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ca469e3-274d-43b4-9c91-7d21039529bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6150716-2fcc-469b-9dd2-32333c25a5d4",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11bd0ce2-8ee8-4a8d-b7d7-785afa86e0cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f160f31-f10f-4bc8-be3c-8c38cb68241a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e2af812-59e2-4732-b155-5dd7694c84e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b28c409-5bc0-44cb-8635-e07fbf9f3749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72e33bcc-938b-44ac-92c9-8c4e5a5dda6f",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "014a1123-06f1-4753-b1a1-037119b698f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a7e37cd-66d8-40ba-a5f1-229d02c07ee0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ded1021-fa00-45b5-9c63-85661b6565a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e23347a-c420-4b94-80d4-81c00fb50bba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1420c847-1133-42cc-adf5-df2913778aa4",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54f4d498-415c-4a12-a03c-efbf7abb8beb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44721553-2b20-4463-8ce5-e28e0c0fa8dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f33cea1d-f9d4-426a-b794-4215896faa5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb4aaa20-da40-49dd-999e-27d0715749a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03601f1e-d859-4602-a4a3-e3a0bdf6a576",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a064d533-48c6-44b9-a5dd-0762d4337fe8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30f3899b-9a72-45e4-a7e9-18d08d308bc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "825681b0-d44c-4452-8e6d-c2e82aad54a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea4d18c7-17d9-42ef-ac20-2f7dea03f566"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e98fa93e-e66a-4ce4-b0fe-ee3fbf74f8ea",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36236082-cb9d-4ea6-b611-abfb38511f9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cafe7c45-cb67-45f0-981e-067f98f02ce8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32b30f0a-e037-4108-8aca-505b78467a35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84bebeca-7a35-4fcc-a708-a1bc832d8224"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c229cd6-c18c-4754-a59b-fe0a75683314",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5921d567-bfaf-4e12-8857-f33e93f0d6a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3f9f1f7-3115-4478-9856-7247966fc2ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7650d817-9a38-4f27-add8-8b26e1d5e1d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68a4c6ab-c94a-4fd0-8196-dc3b0801a025"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27152df1-7b4c-4c6b-91dc-504c12ba0c71",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "832f271b-5bed-4e59-95f7-08e250036c8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50ea314d-523b-437f-bc17-72e5789bc61b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3185e0e-1028-4f76-8ec0-7dc606c21555",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "732bc2f5-245a-42a0-be62-494a47592c07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e259af6-abc4-408a-a102-84301c69c0fc",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c507b422-12bc-4399-b55b-7eb4592d9fef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5f2d913-c31e-4a1a-baaf-e6ace91bf73a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abb1f0b1-4e4d-494c-a2a9-aa7123783df2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f604c9c-1e60-4fb5-927c-194634402088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "787e17b1-1166-4d58-917b-c8695cca1a78",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44477b05-c7c5-4c32-a449-5f71ff640150",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f51540c-a48e-4aea-afc4-389626c60db5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca2cb795-6749-4318-8155-2a8c613f3655",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71c719e5-f640-4f47-91a3-8a3740bc3c49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2284ef7f-1c2b-4148-84f7-bcba496db502",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2ef2930-41e9-4eb5-9448-d6baaa78581f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "717ff444-4daa-4f34-a8ad-c2f9f24d0720"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e4ff610-4dc5-460b-bf40-6858d2342a66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8ccc6be-c47d-4515-a256-58b8f500709d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c2a3c91-0e32-4815-a9a3-cb77ece830bc",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d521789-bb3b-44c8-9585-19a72d02150b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4750fe77-553d-46b3-be0d-e41e17feca07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4a561db-8739-462b-81d5-30675e72c335",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8992fa0-b8b3-4cb2-88eb-dbdc5710838d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55932b69-d455-4e6b-b5bb-7e92b33ac3f0",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c0ac6c5-e472-43c8-ba3e-fb5b3376d82e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d232b98-d85c-4863-8448-438088f141bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "204f213b-5c68-4fa5-9198-870bd6b6afa8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68accb57-a29c-4c80-8a82-16766d3a6dba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d950ba0c-8312-442b-b62f-3ce2b3c22a10",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38f64715-2672-492a-8c44-e42ce8eb9d8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab060796-64a0-4f07-9dad-c7ec3a76b0b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c597566-2736-470f-9243-7f2d0240dbfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a55533f-5d3a-469f-bb31-e20e54b5eee6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a0d83c5-f9d8-4169-92b5-8d8bde620db1",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "867b577f-f339-440c-9f0a-3ddf0b2dd0cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d34a5863-39e6-4e3a-a26e-37b17b2e27ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "225960aa-b81e-4a13-a174-5b000705a099",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9bd7720-afd6-4d96-837f-27bbd0440745"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44fa20b4-bb4a-4a69-8d93-3b93f4928b39",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b348fe84-4b23-45ee-9ef7-4c08a1912989",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e94322f-06fc-4c2e-94e9-0c564e50d080"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3748bc10-dfb8-4a91-9a77-4e772f30e6b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b5c3b85-b5b6-477f-9a75-478b44f6e972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45724bad-6170-4e32-ba8d-9872b3a56906",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3a10148-5479-4dee-b171-77d5498e0788",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d4a8598-cdde-42e9-9082-2fb370c181da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7203c601-6255-412a-9821-c931c1e1d3ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb753ab1-7f86-474d-9c29-16a25c9e9783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "223a0d04-660f-474d-a643-0c49b8785c41",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d0a1556-1f65-401b-97a4-9b17c6ed7749",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd1d02d9-b9c6-4af5-9163-6b90bad31861"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b97e721f-e4c7-400e-a183-75e1963bdfad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b330cfab-234d-4d6c-b529-d81c10145688"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f6dfbd1-e9ea-455a-a384-bde7c852f192",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7ca84fc-1251-4128-8243-ff8d5d09904e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "727c9847-e6e8-40c5-9a94-8b6fa094bb59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72939d87-df79-4ec4-a9a8-6e348bbd7517",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8700a424-6896-4809-b3d1-da1d22b730b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67d462d3-ebb0-487f-af6c-9db9fa311c2d",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9433542-be73-414c-98da-e1ca181056ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d947f5a1-653f-4bb1-9327-828563e2d95d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b666f7d-ae06-4086-be69-7bb9927d4d22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c35d4f6e-5c85-4558-acc2-a9e59246287f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd03d8c3-7347-4dc2-861e-0ad1d82ffa44",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d788c2b-33b8-443e-8981-1f5ced42c812",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d674fbbf-3e12-471f-96ab-e3a87cf55abc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42244cab-d147-4f38-b42a-403a30d1cc48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "011754cc-253e-4a42-9180-246a04d8e6b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d797a85-2c66-4cd3-8fd2-2e86cdca88e0",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52063562-89af-47df-84ce-087e59017dfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "658c07f0-b9a5-48f5-a590-d4874b733b94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "654c49df-5792-481b-ba5c-7268d241fcd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f138e88f-4603-409d-8a51-3b6478f25170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5acfca0-9b2f-4f58-b7ff-4ee30e81cf2b",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8333689-c4ae-424b-9e07-de2828f8e358",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c08023e5-237e-4ee3-b4ec-d9ba604319e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bce73210-2fea-449b-8cf7-c9564c36a63f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e89cec83-b4c1-4a10-b153-948ddfe56f7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fe28506-fdab-43a7-887b-1f47efd67904",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6644a5d9-86ba-499c-b8a1-664dade3748f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15e39b87-2a9a-458f-925a-117af15edab5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ca877d7-ea74-42b8-9d61-5e63dfb5c2fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7de5049d-00a3-4ad5-bd67-2685f8dd4a79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57f3808b-3233-4899-81b9-fa0c2a11cc68",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dc6f5e6-9d23-484b-94bc-13b151a2f2d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ceecbf8a-b058-4d5e-bbb7-5925a8e8f145"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4fd2395-2791-4535-bc78-37a7bcdb452d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00e65710-6b2f-41f1-a32f-277e4a5427ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a02577f-1b4b-42aa-a093-4de87c4689bf",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0079af10-c5bc-4aa6-bf0f-e1596c6b9bd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a10a5a0-55f9-41bf-baa5-c6e530c9f69c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9764e28-61cc-468e-8a4d-88e8ebb978bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94337478-4cad-4aa7-a3ef-587a2d130af5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70dcb63c-b496-407f-bd30-aa90893509b8",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c74e37f-3f48-43f6-8f11-b96f26303a14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9dcf0cf8-9eee-4f4c-8267-be2901b79801"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceb41df8-d93a-4ce5-b9d0-74c5bc108b89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a66e4acc-3616-42a2-a993-5e535c18bafe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2a57d71-6605-4fda-9f1b-af34a8008da3",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9105ffde-a2c0-454f-a3e2-a4970dc1c0f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3347303b-4ae4-468a-8035-ad1cdc6a0fa2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72405d2c-1563-4c55-be4b-85dfe3c2d879",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e81d63c3-a5c5-4f57-b1cb-0e8a9732622e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "040e99ac-e37b-404d-ac75-c8745ca289d2",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "676817b4-1416-41ef-8866-bc0ce950bb95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "404892aa-ce3e-46a0-b1aa-b372990042d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58411787-a8cd-4eed-946c-8b87a107f85b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ed76313-36d0-4a53-9779-aef78c4f6f69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95b30a4e-26a5-4a21-95d5-54560fb3a823",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9adc3147-3544-4659-83e6-6cea505e01b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7722c164-7df6-430a-b993-967349da57d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "198ab60c-c234-42ff-b601-bcd5ba67cba3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fe1ed76-1413-438d-9764-90f5447f6768"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00e0cbde-6d66-4c0b-8329-700d7cff9f33",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd8eb3c2-41e3-403c-8f24-e7a7ce91ab39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c62281f-87a2-4e0a-965e-30944513de8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a5c3e5f-1a2a-48a4-97a7-317fb7598072",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac83759d-19c3-49ac-bad8-8b79c294cca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c89857b7-937c-47ea-843b-ccd9f2293025",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66ada9c9-2db5-4605-b79c-774c9629c294",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5299fd2d-3c08-483e-9e5f-39a0f9a42b28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ee55457-10f2-44d7-a443-47158c151ca8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57e9577b-d7ea-47c7-9168-15e9b5f37d69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9ace84f-5586-47d5-b10e-4a3dc53b4307",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19bd5ee7-e7b2-4025-a474-5e57716bc1cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24b2b1ca-9ab0-4b88-86e0-bb44d086ae26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2550685-e8c7-4748-902c-7728b1a638aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f1429b8-3903-4854-bc2f-2f2e3ad830c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "938c5160-8db8-438f-824f-e01214035a88",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e5d217c-7418-44cb-a118-aed42aef832a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b35e51b-d19a-4b50-b4fa-331ac50e73d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8624d72d-ed73-49ea-a061-a92ec9359688",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d8a6a64-1763-41bd-9262-6ab63b1d142c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c8a257b-e427-4447-b2b2-609fc722bc3f",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6049868-11ae-4337-9230-a9c2af82dfbf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "246efaff-1a9a-440b-ab17-7dc31ccd9cb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f912415-d0aa-4a02-bddc-ab4a93c8ad0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96b654fa-811b-473e-aa03-e64f6ca2b1a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69067cc6-1a52-491c-84c7-eadca5615ae3",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "736aa7e8-b39a-4d25-92ed-1965f8c90cd0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e74a31c-e8a7-450d-abdb-d4e9bf34f4d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeb5ae01-70a6-442f-874f-ac6a4216e08c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68e42eab-5c6c-464a-b4a5-6f65860f0506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "991bfd52-4c2b-4d3b-863d-384607c4148b",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36e79a4b-1bbc-4e16-8eba-5767fe69a217",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6bf2a84d-b7ac-42ad-b0a7-1176a50737d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3d3c2a0-8fd1-4aa5-b090-bf6a6153f172",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71729e88-5fe3-4d73-9c90-e96bc3d3a3c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "040bcac2-7ff6-4ea3-aa57-be9fe88038a4",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "620c865f-fcf9-45eb-8ecb-f5fd2f05a6c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6ef5e37-7d6a-4f1e-bd24-0c168b67a842"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d54557ef-13e7-4e41-9a96-e383f7457cdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35ec4c63-6f7d-41dc-8b79-a01bb6c60426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "511a1e12-00cb-4311-bd68-07968befe812",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40538fa1-49e6-4abc-af5b-4fbec679b55e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79b838b5-dd27-4ad2-8a8d-dc9d1b4bfe2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c684a79-a684-467a-af77-4c16de283b33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f81d99d-c3f7-4e37-82c1-2e4607349633"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4f7cb7d-307e-42c1-8990-9c8bd9335348",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "111c5468-ce57-4daf-baf4-9c6f51ddb886",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56288d92-0147-49b0-a6fa-0f72c9570a77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9826c77-66c7-4250-84b6-ddd12baf6a75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06986e8b-d563-48fe-8014-2b93702d3b4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "650c1175-eb10-4dff-b221-d546a24430a4",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ba22da3-ddc7-4017-9291-7bab2bb50a4a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75b765fb-2868-482b-ad71-5202f8bede8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7adb2719-e2eb-4b89-9181-c6b897dfea57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e36fde08-eb9f-4296-a403-a667f6359438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9256f270-f502-477a-a401-d0249034cc79",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c756d0a7-6042-4c55-9c7e-871f8ab2047b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c9f4975-02c0-4072-b4df-8c4892ba20ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37576e5f-fcef-48b2-88a5-dd53d38f98ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a98037fa-e6fe-4c71-be10-cad055307629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4620c17c-02ed-4ef1-bb67-8fd7d1826b53",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "103d80e2-e559-4885-9787-66f770ef821c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48c2b79d-cf94-48a6-b359-3f119e32724f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c5599a0-1c0b-4174-92ea-12c376c1186c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec8ac5a1-6cbf-4361-ac96-a56d9aa0d28f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ddf3d9e-0214-46df-94de-ef46474c1eda",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e7cf329-f88a-4f1e-9d0a-c293f554e724",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf7fd629-5ed2-4c4c-bfb3-5b7f3180e7a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a375fe32-7209-4c7c-be97-d72ec098d9c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a8df965-9bb1-4cfb-ae9a-213b3721af4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acfc7efe-5b52-47a7-b5fe-b13e59ab7c34",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "798e792d-dc78-4970-911b-b85863d1bed6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7e7fe7c-2172-4b9d-9590-284dba43f7e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d22dd85e-4211-4ee3-be5c-526c84f8d853",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1d1610d-d2be-41f2-82d6-f35e93b6479e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fdfcaa4-c546-4694-b79e-187780eb5181",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a6eea9b-16f4-40e9-a1f8-7ba14b3e80a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d2ccb17-2634-423a-b521-c3c4c85a0ee6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1ec8f53-e2be-42b8-89ef-7e8541b2ac0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57196467-c9bc-4bc3-9235-0097f260cf26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12078043-5830-4dff-8def-1744f2fd27ff",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9285ac68-f891-4fee-a886-73baea3c605a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f872db2-945f-419d-92d7-a80ee1a8b747"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05c709df-1a64-4473-a7df-cf909bd8867c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c08c534f-afe0-4611-b890-fe6b21598eb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "913210b4-af55-4007-884e-e7e8f94e8d9e",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "390c4bdb-796a-47aa-a1fa-0e593df166de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ae8964a-f7f4-4343-83b9-0d1ef58f6e23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b28ed8a1-70e4-41f1-ac1e-a2fdba0cf9a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb5d312a-9a88-4388-be1e-444161abf551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0387066b-9f2f-48ba-a3ff-5cb5d27e6df8",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb5a248f-505f-4d9d-90c3-8568091ab4ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4f0b0e8-890c-497c-be70-bf4d8b346961"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bea20f6-0aa2-47b4-8b05-41881a4489b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4db5f7ae-be36-4595-80e6-c27899cfcc1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d31ecb48-b3b5-41df-a83c-dd82d55e5ace",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40d65b5e-fab2-4c18-bdcd-efa89f2dc50b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26879766-400b-42b5-b97a-90e0ce97ccb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b1098fa-fdca-443c-9480-9d7d9a9150fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5517a686-481a-44d1-882a-d29c00525059"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14293d68-7c05-47d4-80b5-b394c0e88375",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b13c6dc-2b4e-4e04-965c-e4841133345b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c20d5508-6ac2-4238-9fab-7e07eccb01ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45d6c3f9-b1e9-414f-9e4a-b20c0d364147",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd71ed14-4345-439b-9c81-070c42943c0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32a3bef1-8742-433c-97d8-76f0bcad44dd",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac8c0a61-20f7-4de0-a7a1-2af483cbecd7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b0e0a1c-4767-4cb8-8b3e-1205af585132"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fc4781d-561d-4d6d-913f-de7681f8267a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee4f6c4b-157e-4d4a-9faa-d7422900e979"
                        }
                      }
                    ]
                  },
                  {
                    "id": "485c540d-bd6c-4bb5-847f-e1179938a358",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d6c0ff9-3b9a-4055-bb78-2219538dec51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cffd21a7-bdd0-414d-84c7-cd5f69aa745e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc7b2748-e8a6-403d-8b9c-ebce36430b38",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdc4ff7e-17ed-4cc4-8623-c7967f991d38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c06af562-0818-44d6-a72c-d52100603b2f",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "565884e2-cc84-427a-b649-342a49bac319",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "adf45f1a-9d87-4e04-aa67-b8f68bbfda35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b601733-137e-4197-ae2c-7cd35917a30a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb5cc2e8-72c3-4031-88eb-7da05f5a0d7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12a33bb3-20a7-4af5-a9a8-b8a086914406",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3859879-15e4-42d6-97de-430dd916b62a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61374d57-d395-4829-9f73-b7d2268fb365"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a2f85ca-645d-4fe1-a37c-6d23b5806ff0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2495786a-d237-4165-b281-1b6b51b22cbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50498a67-8ef8-44a6-adb6-335f2b16295e",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d4ad30d-d38d-467d-9cc4-380df5ccbcfa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8fc2e4e-e3e1-4daf-a485-8523e5ce457f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a15964ff-2e83-474c-87ed-8c8ea0c3c789",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "925552c6-c5fd-4e70-b40f-52267ca5e30f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "271811c5-ec18-4233-8919-25e046084c52",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "078774af-67b0-4adc-a133-f4d163e6e0ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0cecb3f-0b44-4a51-81d2-d65599ba05e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab83d82d-5eb9-4746-b069-ece76457d32c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "554f391c-4f8c-4257-b45e-c322a8238a40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6f4a2ec-a496-46fa-be3a-1baeaa3faea0",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36396148-d84e-4401-8274-47fca21aa753",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8096d19a-3de5-4284-acbf-5d426981ce82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "360cdde3-37fb-4fbc-a12a-087cf11af437",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c46d9200-75b6-47fe-8d67-c023b10083ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51a42f62-7229-4533-b868-ff14817f06e0",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aa3c298-c81f-425b-8baa-8ab7e2fbaa11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9c0f473-3ddf-47da-ab93-5ef9ebd460f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74660c64-8900-475d-babd-4ffc1e7183be",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "357bd560-3ac5-47c1-9263-605d7612928c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aea637f-6906-4444-a1f8-6beea9aa54d9",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a73c85c-6f8b-4d7a-9d7f-4a19555c5e7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10d7a2a2-1773-4eb5-af41-87323a929097"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eedadfd6-2850-46ca-8bd5-bb26db72325a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "869bcf57-591a-4000-a3ca-ef849a9fd9d5"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bd53e4bd-34cd-44e0-b583-dcf649d96217",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5fa02ce0-63e7-4f0f-bf3a-6e6cff773030"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "79ac7e75-4f26-4981-b1cb-de09b28e22cc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e9b810d7-3fde-4e14-9199-64a798b192b5"
                    }
                  }
                ]
              },
              {
                "id": "ebf9a980-0a98-42ac-9293-d7a0b9ea7f46",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "43245171-6ab0-45d5-a105-2bc750a34db5",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3286051-5042-4a06-ad95-c01ef12e174f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "6fbf7ede-49b4-4c89-89da-e55e62f27553"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a0cde96-e8d6-4f61-8ddb-c436ce664cd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "067b47f1-7878-45eb-a8f7-7765775b57c7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ebf6e085-ddbe-4bcf-8dfe-5ec9be467a4e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "60036fa1-514a-4d5a-9a61-580b148c3432"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "33a7fe82-7148-4763-920c-8447574af08c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "26ca7bf9-ef5e-4abd-bc61-c0fbc7d908c4"
                    }
                  }
                ]
              },
              {
                "id": "fd6d82b9-b430-4452-9797-ce771bd95444",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "6bd7feda-f13d-4c98-8374-e47af27acfba",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3abb7bc6-be43-442b-820e-ecd5af13a63d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "f523f5da-389f-4f6e-85ed-1e9c8eb287b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a6de1be-8741-461d-a02f-52ffeb0caa7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc4fecb1-c177-4bb5-8798-61d48d018abb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0b3009c5-2247-4fc5-ac4f-1b730ef6db0e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "60bda0a7-9682-40e3-85ab-1e582ca1fdf5",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "450e5b0a-426a-4bdf-9aa7-e46cb8ac82e5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "25576b53-5597-425f-8cbb-3fb35923b127"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a50bfe9a-3307-42e2-9276-c2373956abba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "be792594-4357-47a5-8d33-c93c3804561e"
                    }
                  }
                ]
              },
              {
                "id": "4c0d77ee-76ea-4ac5-b748-9210f9ca8e38",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8a2fccf9-a136-4815-84ef-91f1dd1566ae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "048a4bb3-2e98-4cbf-a213-6c7ed9ea25da"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9dcb8432-19e6-499d-8714-7ed7dc1cfd03",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dbdfec2d-ebdf-4b39-86af-45d81e0fb088"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1585dff1-e3ee-4a0c-8e0b-a182a6d1c82e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "b7ec97db-c121-4344-aa4f-625f33e0c701"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a407415f-f2fc-4f8a-933a-be1ed18406bb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d94d0736-ecb3-4158-8041-03ffda348f5c"
            }
          }
        ]
      },
      {
        "id": "de35a53e-7efd-41ab-988e-817b5909c2aa",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "fff76f31-cc35-43eb-94fa-e16bee95bcf2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "278c368b-24a9-4095-a89d-1549a50d6c19",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8159420e-5c86-4a43-9ebd-cdae06a63f4e",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22bea1ad-7db7-4289-b575-8d661d637bcf",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "db40c164-2abe-426e-a0ef-f47ca1ba2de1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5181a92a-5a9e-4404-a9c1-e89643edd1e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5cbac4d7-4029-4b6b-a37d-ac7c6b1ef3ef"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a348c93e-7dcf-41af-bf74-c30963ab7ef8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d8251085-3ec6-4483-9d55-a2a07c92eb1f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c83286f9-63eb-465a-afa7-6cb211cbdbf9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "decd2a8f-b723-44a7-aef3-460bcf4addec"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1c62e54d-db74-490d-a8d8-a2b167532daf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f335847e-c9d5-4521-bfee-863015374060"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "16baa7d9-501f-4acd-bf2e-f63725188944",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "13071c6a-d45f-4fab-8b1a-2da5919a1299"
            }
          }
        ]
      },
      {
        "id": "2b7fdc92-e126-4053-8a1f-baced4a01296",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "26f2aa35-398a-459a-bd0c-482bd4743d88",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e058ccec-54da-4109-8bd0-99335e3734a7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7b8823a0-d538-42b1-92c6-d0e88181c906",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05395248-c072-4d08-a313-4d4457d070a9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ccaee06a-7b8e-42c2-8a99-2bf70e174299"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4006877a-753b-48be-8a4b-888797c837c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a5dca3e5-ac94-40bf-b795-7e376228925c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9a586370-ecd1-4521-aa4f-461c9802326e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a5c56e6a-e0e7-40bf-8703-7a11b7cbfed0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b2f26377-5b65-4ad3-8f47-4861643f6f4d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b6f4d990-60a6-49c8-949f-85f080360e96"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "df28e227-6310-4f3f-8b26-6af95595f9ba",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c36b303e-fe1c-4bc3-b9ce-f19d6b0cd283"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "666f548b-8562-43d5-b019-831cccf0a7b5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "535b1f4b-d06c-41a9-b665-dbb304a4de9a"
            }
          }
        ]
      },
      {
        "id": "03b66955-fe48-4511-92c8-9a3bffdcbfde",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "5d4bdabd-d926-418b-aa52-fd1f7e83212b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "32cf6308-cecd-4d70-b6a1-f2759c425b3b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3d508e25-7bf8-4c06-b8ff-57a795bd7726",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39fd2cab-7a75-4846-94a5-3c6fe71e8ce1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "48fbae44-dc24-49d6-ab17-5c0d875a2701"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea98bfae-2482-4656-a67c-7025a844dda3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c0ce5954-2aaa-4ab4-a53c-33919502856b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2abaf2fd-ff58-4b1b-b0bc-0f1e78c50080",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1896cd26-72cc-4bdb-b243-b66a23bb96fd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cda8ef38-84b2-46e1-bf3f-61114186688c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "96058164-b8cc-4555-bed9-edef46aa46dd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4fcee5eb-8ead-48ea-b04c-59b417a60ce8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "66fe054b-06d8-4602-af59-51e1f4473448"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5f087334-2ce7-4f1d-8193-bae38909c48d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c247354f-978d-4e7c-968e-cedbc4e90b3d"
            }
          }
        ]
      },
      {
        "id": "778bb669-e65a-4bfc-973f-9c167825d82b",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1f06fb43-b145-4f47-981e-42b075935db8",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e13ca0ce-b0d9-4107-acc0-d48a75846f22",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "b6dd72d0-2ad7-4afe-a8c2-000430ebe180",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5d5e0f73-5987-49ec-a70d-f6d5ac66abfa",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "05effdae-75ed-4105-a5d1-992f309be852",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 61.035087719298204,
      "responseMin": 4,
      "responseMax": 575,
      "responseSd": 77.55097133380644,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1706920443859,
      "completed": 1706920470513
    },
    "executions": [
      {
        "id": "8d76f3c5-cd63-4894-9eee-3bb937599931",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "2670e612-de34-4c08-9b56-f02599fa0f5c",
          "httpRequestId": "2c40b89a-2548-4cef-8f46-8f36eeabbef9"
        },
        "item": {
          "id": "8d76f3c5-cd63-4894-9eee-3bb937599931",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "98fde993-6ea0-4458-9b00-9c48c9ff781f",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 0
        }
      },
      {
        "id": "d554f46b-f791-4af7-bdbf-3bce6b707156",
        "cursor": {
          "ref": "76d3467f-3195-42d9-a6ee-370085773957",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "89d2ea24-e995-49de-9725-0fd12def82c2"
        },
        "item": {
          "id": "d554f46b-f791-4af7-bdbf-3bce6b707156",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "7f5337bc-b2e3-437b-a1e5-a0fa119c0120",
          "status": "OK",
          "code": 200,
          "responseTime": 4,
          "responseSize": 0
        }
      },
      {
        "id": "3c98e152-98e3-4092-9567-8d88f977343c",
        "cursor": {
          "ref": "6b30c3de-193a-4ba2-a21c-d1418e3b0090",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "5d80fdc7-8ed9-48b4-b06a-4943e91dda2e"
        },
        "item": {
          "id": "3c98e152-98e3-4092-9567-8d88f977343c",
          "name": "did_json"
        },
        "response": {
          "id": "22fb72eb-5101-49a7-94ec-587007262650",
          "status": "OK",
          "code": 200,
          "responseTime": 236,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c2cc717-b8d0-41b5-bc47-4dbb953c138e",
        "cursor": {
          "ref": "82f562d0-61e3-4cac-9768-84d9862112e7",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ebf4427e-7a5a-484b-99a2-b96e7e3d3911"
        },
        "item": {
          "id": "7c2cc717-b8d0-41b5-bc47-4dbb953c138e",
          "name": "did:invalid"
        },
        "response": {
          "id": "ee9c1569-5619-4397-b2e8-2d2056eea3fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c2cc717-b8d0-41b5-bc47-4dbb953c138e",
        "cursor": {
          "ref": "82f562d0-61e3-4cac-9768-84d9862112e7",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ebf4427e-7a5a-484b-99a2-b96e7e3d3911"
        },
        "item": {
          "id": "7c2cc717-b8d0-41b5-bc47-4dbb953c138e",
          "name": "did:invalid"
        },
        "response": {
          "id": "ee9c1569-5619-4397-b2e8-2d2056eea3fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4633bf17-b21d-4b99-bcf2-f94585feff11",
        "cursor": {
          "ref": "3c8e1c58-f7f8-49c2-81f1-7b375b62cc54",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "deb414f8-20f9-4680-a7fe-faf1d9464285"
        },
        "item": {
          "id": "4633bf17-b21d-4b99-bcf2-f94585feff11",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "fd866eeb-97a2-4c64-b886-993275c6894b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 89,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6538e71f-0e1d-486b-a5dc-6bba0da3b851",
        "cursor": {
          "ref": "2360608b-435c-4514-829e-7fa8b15c2f49",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "6bcfa9a2-fb6d-4673-b743-7153cf0761be"
        },
        "item": {
          "id": "6538e71f-0e1d-486b-a5dc-6bba0da3b851",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "b9fd90b9-456b-4eed-8467-2ed07ff4d5d4",
          "status": "Not Found",
          "code": 404,
          "responseTime": 38,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dc07a55-cc2d-4cec-8127-8262abacdda9",
        "cursor": {
          "ref": "6143e375-1064-4e2a-934d-8340203e3f3f",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b442f37e-49ae-4efc-9c59-2a9000f5b7d6"
        },
        "item": {
          "id": "1dc07a55-cc2d-4cec-8127-8262abacdda9",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "7b27b917-4289-4132-991b-fbf319bd4fe0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "050240a2-b833-4112-8f61-dee8defea3db",
        "cursor": {
          "ref": "a8a7368d-3aa2-4018-a8f0-b8a0d4caceda",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8fac1bd2-d0c7-495a-9730-079c8d1d6b92"
        },
        "item": {
          "id": "050240a2-b833-4112-8f61-dee8defea3db",
          "name": "identifiers"
        },
        "response": {
          "id": "fdfa73e0-721b-4f68-9b14-80a2c3b780ae",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3bf081b-5857-4cf8-8166-4929991b0709",
        "cursor": {
          "ref": "8f7c1293-18d5-49c1-acdf-1370386f04e4",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "8067f88d-2d89-4f65-8203-68c91ae5d4c2"
        },
        "item": {
          "id": "c3bf081b-5857-4cf8-8166-4929991b0709",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "9b588d34-7a34-49b7-bb26-c57a26b06e1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9fe4a3e-b959-4963-97d4-d04ea1739dcf",
        "cursor": {
          "ref": "4929926a-51fc-4768-b0a5-e9f7367d0aa0",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "3f7ba762-f351-45fc-9a3a-4d99023b25dc"
        },
        "item": {
          "id": "a9fe4a3e-b959-4963-97d4-d04ea1739dcf",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "eaee509f-7273-418a-acef-98a32d4c97a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8913764-624a-4174-bddb-afe00acf5498",
        "cursor": {
          "ref": "97f7109e-075d-4291-a6ce-1b0610582216",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "5f952353-8aba-4b0b-9ab4-1fd2fa2c7d36"
        },
        "item": {
          "id": "b8913764-624a-4174-bddb-afe00acf5498",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "bfdd328f-31f0-43cb-8a03-b8502fe108f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb39b73a-b4fb-4edc-81a1-d675f924a201",
        "cursor": {
          "ref": "636cff80-98ab-4b9c-9601-60e4c3501166",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c60ed21d-6ae0-418f-9b19-4ebedf0fd96c"
        },
        "item": {
          "id": "eb39b73a-b4fb-4edc-81a1-d675f924a201",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "626911cd-e920-4933-a85b-21a7c9855411",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81a37478-8dee-4c66-83a6-4cf495eba3f5",
        "cursor": {
          "ref": "1bdeb7f8-12c0-4613-9ff4-676a91c00a66",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "1a342678-4f16-49da-a2f1-f886886e63de"
        },
        "item": {
          "id": "81a37478-8dee-4c66-83a6-4cf495eba3f5",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "ddf149cd-2020-4a84-8851-095804c70e4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cea4084-0848-4366-b29e-da3d94a33b83",
        "cursor": {
          "ref": "4665d2d5-9878-4d64-9c5e-0b9a10f4adbc",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "599432aa-cd9c-449b-98db-dd956309ffab"
        },
        "item": {
          "id": "9cea4084-0848-4366-b29e-da3d94a33b83",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "bdea5383-0a75-4781-971e-1c7d96f51c5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b6ee127-e57d-42b6-b3fb-f9e84e770de8",
        "cursor": {
          "ref": "e26a3f07-2564-4939-970a-4210fbe65676",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "d1a0f96b-a56f-4a83-83fc-5cccc80595ad"
        },
        "item": {
          "id": "7b6ee127-e57d-42b6-b3fb-f9e84e770de8",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "5d00aec1-332f-46cf-b2e2-6aeb091997f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe27ae74-91c8-4b7e-b734-e5ee4b124949",
        "cursor": {
          "ref": "9d72e453-046f-47c2-85d6-d1c71409fcce",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "680a4c75-b29e-4b2e-91f9-ffdb5fae38da"
        },
        "item": {
          "id": "fe27ae74-91c8-4b7e-b734-e5ee4b124949",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "4041c96f-e2dc-4f36-9110-9ceb1c71eff5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9ee003c-d03e-4a14-ab71-bfc26b573a8e",
        "cursor": {
          "ref": "df8cbe23-f854-4ce3-90d2-62ee1def3f2c",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "1d6e7d4f-e6b7-42a0-83ff-50ee32a97437"
        },
        "item": {
          "id": "c9ee003c-d03e-4a14-ab71-bfc26b573a8e",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "7a3c2a57-7f0b-4721-94dc-699c49e3b00b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "133ee2a7-eee5-4fc9-9131-b00c77e340a4",
        "cursor": {
          "ref": "f95123bb-266f-4a8e-aa52-81cf6e1be46c",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "edf9705a-bcac-43a7-aadc-5ced9385f7e6"
        },
        "item": {
          "id": "133ee2a7-eee5-4fc9-9131-b00c77e340a4",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "522e544a-baee-46b5-866a-487ac00378e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "926b3765-1064-4488-800f-b7be7f29ca07",
        "cursor": {
          "ref": "2306c1ed-2c7c-416a-811f-7b8f8df25aab",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "6f2a91d8-c9df-4d84-b09d-273e9eadb54e"
        },
        "item": {
          "id": "926b3765-1064-4488-800f-b7be7f29ca07",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "a19d3e04-20fd-4b37-88ba-62c74eb0624f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c6c44aa-e69e-410d-8968-866d67607618",
        "cursor": {
          "ref": "8d464411-9b58-416e-8156-ce8f7356025a",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "41f5d690-033b-4147-9cd0-242010bb4329"
        },
        "item": {
          "id": "0c6c44aa-e69e-410d-8968-866d67607618",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "56e4dc08-ed2d-4768-87e0-9a69adb8cf39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2541e3c-29ce-43be-b396-e5bd5eb55518",
        "cursor": {
          "ref": "9a3ac532-fc1c-48ce-8788-0186ed73688a",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "055c6c3b-b1b5-4e6f-865c-9d18485bc5df"
        },
        "item": {
          "id": "d2541e3c-29ce-43be-b396-e5bd5eb55518",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "d6284606-fab7-41f2-a160-44e5f4703fe5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90f4d85e-73fa-4709-8307-ffc782a983d8",
        "cursor": {
          "ref": "11a34faa-1dff-4553-abc4-c1ac8ea9299b",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "33ce897c-2234-47d5-83c6-6e287c9aa50f"
        },
        "item": {
          "id": "90f4d85e-73fa-4709-8307-ffc782a983d8",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "784040c3-e994-46f4-bbed-28210e7d40eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eb56ad1-8687-4548-9fd3-53b3cb8cc7a9",
        "cursor": {
          "ref": "84c5ba90-9863-4cac-baf8-9ff82c16ba7c",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "4dd3117a-5764-49ce-b13b-c48f046744e6"
        },
        "item": {
          "id": "8eb56ad1-8687-4548-9fd3-53b3cb8cc7a9",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "a3f9dee9-14e6-44f5-9016-b1c967b6ac40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d01635a-d9f9-4a4a-a58a-0f9e4cd7b9c4",
        "cursor": {
          "ref": "909c55a4-4e49-4422-b903-1a9a05542638",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "4ce7fd6f-f077-41f0-a9d8-e848b6fc728b"
        },
        "item": {
          "id": "6d01635a-d9f9-4a4a-a58a-0f9e4cd7b9c4",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "36069c3d-11b4-4407-8057-541c593763b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb422e24-62ba-4045-9844-03f9d1ba0677",
        "cursor": {
          "ref": "4017408f-b0f7-45eb-9adf-413e578d6812",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "982f6112-5da1-4597-b0e2-ee5d654f9936"
        },
        "item": {
          "id": "bb422e24-62ba-4045-9844-03f9d1ba0677",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "bab98495-8b75-4b3f-832e-acb25bac6309",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5d7ebf4-ffe6-4192-a0fd-5c6ea3409ec8",
        "cursor": {
          "ref": "02e76477-e036-4df8-ae9f-e21cc54c0ac6",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "4e2ab27a-ad4e-4c34-b466-f0eaec4575e4"
        },
        "item": {
          "id": "a5d7ebf4-ffe6-4192-a0fd-5c6ea3409ec8",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "f9399abf-27e3-414c-a89b-4000086d75bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30795b48-0daa-4fd7-833a-bd6a50ce3593",
        "cursor": {
          "ref": "68e8ceaa-62e9-44e8-9d1b-da6ffc69e69f",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "cc53ee9a-01bd-4970-839e-6b1653bb62ca"
        },
        "item": {
          "id": "30795b48-0daa-4fd7-833a-bd6a50ce3593",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "9f1ae8e4-49b3-441d-8d4a-916037de3e8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faa15f5c-6adc-4e16-b100-d98d2a425725",
        "cursor": {
          "ref": "3fc4c196-a59e-4154-8ad4-2218250ef288",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "b9ae05ea-df3e-44b1-8ad7-e7342b11059f"
        },
        "item": {
          "id": "faa15f5c-6adc-4e16-b100-d98d2a425725",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "a4086bbc-50cf-474f-a54c-a8de217d5a57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ef2fbbd-19ff-4a5d-b4b0-f060b254d8aa",
        "cursor": {
          "ref": "1c02c753-9b41-4e23-99a8-c32991f6e599",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "bc6cce9a-c43b-489f-b90f-761bd02e2778"
        },
        "item": {
          "id": "8ef2fbbd-19ff-4a5d-b4b0-f060b254d8aa",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "16006621-a4c1-48ff-a814-ad1f6cc5693f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ea1cd0d-c802-48c4-8a69-325063a853de",
        "cursor": {
          "ref": "4a8c93d6-63c5-4044-be39-446365c3aeae",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "87b49bff-3147-4af3-a279-feedf82f1c27"
        },
        "item": {
          "id": "5ea1cd0d-c802-48c4-8a69-325063a853de",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "6b3c0b0b-f9ac-4feb-8a93-e810f9e7446c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5e0be13-3ca1-44f3-b1ff-9def61c77724",
        "cursor": {
          "ref": "96b7eec7-8e12-49e1-bed7-e4d553200a60",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "3ed4853c-bb9d-4970-8ffa-0697c740f404"
        },
        "item": {
          "id": "e5e0be13-3ca1-44f3-b1ff-9def61c77724",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "012f3377-940e-44f9-aa11-d23d35de7807",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d05cc09-4d54-4844-a92a-fa173c8df996",
        "cursor": {
          "ref": "0b66afd7-f220-4ceb-ba9f-c8dec82b1055",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "8a0d4fe0-9723-4874-94a4-d2881584c833"
        },
        "item": {
          "id": "4d05cc09-4d54-4844-a92a-fa173c8df996",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "209f402d-5333-46d5-8362-cf75722d851e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e612ff06-0af1-4d18-b01c-59de04863dba",
        "cursor": {
          "ref": "6d1e5526-f00c-4bd7-ada0-59c6f61cf7db",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "10e78747-1b89-4710-84b0-cc6ec4c308e0"
        },
        "item": {
          "id": "e612ff06-0af1-4d18-b01c-59de04863dba",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "8dcbc145-a059-436c-af28-f441c6b1c3c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e89d051-1fa3-4418-bc48-559647dc8fae",
        "cursor": {
          "ref": "bd2cb5bf-4156-4475-b7f5-c6c075dcaea2",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c71dbfae-275a-4f21-a3b4-f399e165ce89"
        },
        "item": {
          "id": "0e89d051-1fa3-4418-bc48-559647dc8fae",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "e0504305-f830-4e1b-ade6-67a6c6dd12d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c277ac05-6181-42dc-bb2c-b4e4734dfad5",
        "cursor": {
          "ref": "72bab7a4-e2dd-4e46-a62b-8e5728278469",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "e46b45d5-c99e-4a0c-b8e3-8a2c0ca0faf6"
        },
        "item": {
          "id": "c277ac05-6181-42dc-bb2c-b4e4734dfad5",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "5d98691c-a68d-436d-a9f4-998f1508faa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75578e5f-7a77-4b4f-8575-be0e43325f6f",
        "cursor": {
          "ref": "cb641c42-5c25-4c94-b433-94ab9d508fe8",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "1ce8de9f-14e9-49f2-bb22-b0ec680aa0b8"
        },
        "item": {
          "id": "75578e5f-7a77-4b4f-8575-be0e43325f6f",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "ee5e1530-170c-4e24-9c99-c5c987a1ef5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "730b487b-09a1-440b-abe5-716e90bffcb4",
        "cursor": {
          "ref": "85c43812-34f7-4df7-b138-91b0a620f774",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "3affce13-9480-4dfc-9aa2-a6f3f0f835a1"
        },
        "item": {
          "id": "730b487b-09a1-440b-abe5-716e90bffcb4",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "4f70f7c0-5d3e-465b-bd09-57ca7e9a639a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1690ca7-4ca8-4129-980b-467f57753ac4",
        "cursor": {
          "ref": "20554a23-7dfc-456f-b8eb-0a8d72f970ac",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "7d9c0eb7-4e3f-4f46-be18-36e723737f89"
        },
        "item": {
          "id": "d1690ca7-4ca8-4129-980b-467f57753ac4",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "0732a6b8-40e0-4a62-8aff-70f9bc56cfcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc057d4c-3d63-4b08-a358-6bd853903780",
        "cursor": {
          "ref": "1045adba-9073-4c42-9ce5-c9a1962e9f41",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "f238d06f-ce97-46d4-a23c-f837f8e9ce05"
        },
        "item": {
          "id": "dc057d4c-3d63-4b08-a358-6bd853903780",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "5478b8a8-7cfc-4e94-8227-2d510eac5ffa",
          "status": "Created",
          "code": 201,
          "responseTime": 575,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "049028b9-4f5e-452e-b697-3cfdceb710c5",
        "cursor": {
          "ref": "d53b770e-7ef5-4d14-ac10-e58eb5be6c0b",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "88e4a005-6961-4ac8-a003-a547c00863bd"
        },
        "item": {
          "id": "049028b9-4f5e-452e-b697-3cfdceb710c5",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "38836744-f870-4f1e-8b08-de6a67986362",
          "status": "Created",
          "code": 201,
          "responseTime": 342,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "404a07c0-82de-4828-895e-fbf6b8f2291b",
        "cursor": {
          "ref": "97ff5f11-8f0f-47fd-93b4-8a28d6f58d4e",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "5f3b5346-6288-41c4-9603-6c1ac3791d07"
        },
        "item": {
          "id": "404a07c0-82de-4828-895e-fbf6b8f2291b",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "9bf7689a-f356-423d-a4c2-c659e518dbea",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "e36db7d1-7a19-4edf-b2ec-689a5efce86e",
        "cursor": {
          "ref": "16e7b23e-1e4b-4032-99b6-45e91fae7d18",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "952a5e29-a28b-4d36-84a7-443fc9d29cfb"
        },
        "item": {
          "id": "e36db7d1-7a19-4edf-b2ec-689a5efce86e",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "b44b9c6d-350d-43e8-a94f-dc7ad9b3d676",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa296e85-9baf-4f41-aa31-42a9e3cfcec2",
        "cursor": {
          "ref": "a77eb31f-21ee-48a0-a174-d8281a2da90f",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "c2a92455-8ea3-4d22-a97f-d6ebcd9e5ae0"
        },
        "item": {
          "id": "fa296e85-9baf-4f41-aa31-42a9e3cfcec2",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "126d4c5c-8ec0-4964-9b25-59d325058bea",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "25eaa957-789b-45e3-bc86-f654d15a9934",
        "cursor": {
          "ref": "b7565f5a-555c-48c3-ba19-07e0ece9d87f",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "6f53f7e8-cffe-4b3a-93e4-349abf9901c8"
        },
        "item": {
          "id": "25eaa957-789b-45e3-bc86-f654d15a9934",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "efd4b39b-3f56-494a-8791-f3844ab36f4a",
          "status": "Created",
          "code": 201,
          "responseTime": 333,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "716dd0a5-8471-4bf6-ad08-4a309565c238",
        "cursor": {
          "ref": "ef8ae223-cc76-4a84-95a4-b74f88cffeb2",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "6be5f9ca-2472-4d54-b968-348f30734228"
        },
        "item": {
          "id": "716dd0a5-8471-4bf6-ad08-4a309565c238",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "bf57da91-5b65-431c-9ec2-61874ec95ea2",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "8c6059d3-06f1-47b6-be3d-9faf7b882881",
        "cursor": {
          "ref": "97512df5-ba3f-4b6e-a153-9d207543b286",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a4969e48-04bb-4860-8f89-4a2629ffa8b8"
        },
        "item": {
          "id": "8c6059d3-06f1-47b6-be3d-9faf7b882881",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "4118feed-660d-458d-842f-e45470d39fc8",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "31289994-8c18-4200-946c-96a8920f7545",
        "cursor": {
          "ref": "e00d1238-8969-4a1b-9079-af0d99142dc0",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "ded7e076-057e-4876-a5e1-9a1421372a71"
        },
        "item": {
          "id": "31289994-8c18-4200-946c-96a8920f7545",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "99bf3194-ef31-440b-bdfd-ebb10e4cd786",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "59f1f744-b2ff-41c4-b810-d14452ef45d9",
        "cursor": {
          "ref": "dc6b4da4-1812-420b-81aa-dc48c1635a59",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "ce2b5f40-5b7c-46ac-ad60-41d0b34c3460"
        },
        "item": {
          "id": "59f1f744-b2ff-41c4-b810-d14452ef45d9",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "1fbb0ac4-4e00-43ab-8981-544d7aeefaa1",
          "status": "Created",
          "code": 201,
          "responseTime": 242,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "bd59d140-5e07-41a0-97ff-c94aae83f872",
        "cursor": {
          "ref": "84c65a96-5c64-494c-aafd-57cd8f3ad8a3",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "6fd2207b-501a-4009-9486-d1109690d05e"
        },
        "item": {
          "id": "bd59d140-5e07-41a0-97ff-c94aae83f872",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "6f6846fb-4c27-47fa-98d9-08d7b0f64298",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "50b2bc23-7937-4751-9411-f2094ae9a381",
        "cursor": {
          "ref": "3e3c14f0-659a-42da-b89e-4617a47352bd",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "5a707e1f-f534-44e6-ae9b-33c3cb59601f"
        },
        "item": {
          "id": "50b2bc23-7937-4751-9411-f2094ae9a381",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "4f659dad-deff-4a31-99b8-25ac967699c0",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "2bc7d9f0-5f53-44cb-88f0-01a3baad1793",
        "cursor": {
          "ref": "78a0d7c7-2de4-4a80-aa52-04365ebf4923",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "5e796e9a-a162-4c92-8e5d-10463353c8ed"
        },
        "item": {
          "id": "2bc7d9f0-5f53-44cb-88f0-01a3baad1793",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "27d60836-28a2-48ac-8857-421616791d1a",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "60f706b5-cf42-4581-9f1a-2c905e20c8c8",
        "cursor": {
          "ref": "fe07bb47-299d-4a5e-83e3-58ca221eea22",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "a4d851b2-4895-4e10-912d-f3cda49866bc"
        },
        "item": {
          "id": "60f706b5-cf42-4581-9f1a-2c905e20c8c8",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "06e787da-f3f4-4fab-b47e-dd9d1f996eaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c27a8ad-13c3-4923-9845-7d9afaf8a919",
        "cursor": {
          "ref": "f6e9a01f-b826-480a-ab11-d5c2235d7ef2",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "6861be8f-7226-4849-bb29-fa537b5ddffa"
        },
        "item": {
          "id": "3c27a8ad-13c3-4923-9845-7d9afaf8a919",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "766b49e9-123c-417e-8d2f-25e32bb1170c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f33f88d-f393-4340-82f2-65ef2a9ef6e3",
        "cursor": {
          "ref": "3b283e48-3eee-43b9-8f24-51dc51ad6208",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "63534bcd-33b7-4e2a-ad11-2054d1654c20"
        },
        "item": {
          "id": "0f33f88d-f393-4340-82f2-65ef2a9ef6e3",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "8f12b611-8adc-4b25-bc4b-c9d2cc1960bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f1000dc-4217-443c-83a0-1fa0faf896b4",
        "cursor": {
          "ref": "25342bd9-0180-487b-a986-5c36f9e3d0f9",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "d6b323ff-c933-49c8-bf52-24e1bc633f05"
        },
        "item": {
          "id": "5f1000dc-4217-443c-83a0-1fa0faf896b4",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "4078f529-4f3a-4585-a9ba-520a76dee9a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2f37a70-e637-4c9a-a102-85f783c5b10a",
        "cursor": {
          "ref": "87b8f3d2-f81c-49c7-bdf8-c4514f5fa127",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "d606b805-53e5-4a70-9002-d838fc80c3f2"
        },
        "item": {
          "id": "f2f37a70-e637-4c9a-a102-85f783c5b10a",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "53bdb293-19ae-49b2-a55e-f0504e62d820",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5246230a-4d40-4da2-b4fc-1165070d4d52",
        "cursor": {
          "ref": "5afa2e79-af52-466a-af26-0bc4a226f3c1",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "419eb778-1465-42e8-b679-ad7e921a71b7"
        },
        "item": {
          "id": "5246230a-4d40-4da2-b4fc-1165070d4d52",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "261e30e7-f552-4179-9124-d7f7f76f060e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f32cb100-2132-49c4-98b1-c95db2f21bbc",
        "cursor": {
          "ref": "f4008ba7-7192-48ac-aaa3-8ab9ff4bad6a",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "c57f0d8d-eeee-40ae-9844-f59ad2ba85bb"
        },
        "item": {
          "id": "f32cb100-2132-49c4-98b1-c95db2f21bbc",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "9af09c9c-013c-4c78-8ca8-b490127d970d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0350313b-828e-4c95-825e-c1d3e315d8ab",
        "cursor": {
          "ref": "0ac18e43-8b65-4184-9714-b759b36d75a0",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "e3f7ce77-62f4-4075-801a-d2ea7282f327"
        },
        "item": {
          "id": "0350313b-828e-4c95-825e-c1d3e315d8ab",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "404e767b-0621-4a14-b19d-9b9efaf9a9ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de482a44-dc04-4469-b6ce-08b99680442c",
        "cursor": {
          "ref": "e78ab6ca-270f-4664-8c18-0b52a3c8e6b8",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "00164a22-2bd3-4c53-9a51-427f0853d2a8"
        },
        "item": {
          "id": "de482a44-dc04-4469-b6ce-08b99680442c",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "1bd7fc10-f2aa-4278-a2a3-dafb8ef1180c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce39c263-bc75-4004-9dcc-0c6c0e9f820c",
        "cursor": {
          "ref": "e17d91ae-35b7-44c8-b806-5c7c8314e089",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "30aec098-5b82-4130-a6ce-6b9930977326"
        },
        "item": {
          "id": "ce39c263-bc75-4004-9dcc-0c6c0e9f820c",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "9deb7c6c-0b24-4813-8204-61923394b7cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84f79392-1fce-40c6-b888-946ac5b2a848",
        "cursor": {
          "ref": "4b1b92fe-60bd-4ab7-98e5-2b0eea437da4",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "383c494a-3ada-4265-8052-4cd7db0d6192"
        },
        "item": {
          "id": "84f79392-1fce-40c6-b888-946ac5b2a848",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "a69b247b-ccfa-4114-82f8-e5ee7456f364",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef708a1b-ee9f-4e07-b545-9290f225f747",
        "cursor": {
          "ref": "90cce291-8605-40a4-af49-38a2bf5f7a9a",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "28e93f84-a96b-4aba-a3aa-b9f94e21219e"
        },
        "item": {
          "id": "ef708a1b-ee9f-4e07-b545-9290f225f747",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "e010c9a4-d02e-4aa1-bbab-04f4dc264d41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffd8043f-0826-4fc2-85d5-67c817da4019",
        "cursor": {
          "ref": "1c2df3a9-5fcc-46c6-a92f-3fda2fd167f5",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "33a40674-a069-4896-b886-bd7345576266"
        },
        "item": {
          "id": "ffd8043f-0826-4fc2-85d5-67c817da4019",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "ad4b4cf4-3f22-45e0-8d52-25adefc15cc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56fbd47e-7171-47bf-b94b-e18fc6d7d7f5",
        "cursor": {
          "ref": "2eb29ec7-4adc-4891-8489-435aa31c5dc3",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "925073a5-8549-4eac-b219-608f6e2af0d1"
        },
        "item": {
          "id": "56fbd47e-7171-47bf-b94b-e18fc6d7d7f5",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "40131c9d-f038-4820-a89a-d4cef995940a",
          "status": "Created",
          "code": 201,
          "responseTime": 249,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "f87dac35-9f50-42bd-bc8e-a9b7faa5f83c",
        "cursor": {
          "ref": "c852a449-585e-4a08-8c56-8e2ae95f843a",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "5f0895a8-36e9-41ea-a2d2-102270064742"
        },
        "item": {
          "id": "f87dac35-9f50-42bd-bc8e-a9b7faa5f83c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "f4a1a96e-35b4-440e-a0b2-1b6bbdc60017",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "1a9fded8-e5c1-466d-a833-f39f45204a54",
        "cursor": {
          "ref": "96feb95e-ffec-4d41-b9f2-0d2c1c443c92",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "97844533-d37c-410c-abef-c128f8bae9a5"
        },
        "item": {
          "id": "1a9fded8-e5c1-466d-a833-f39f45204a54",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "b5575ff6-a728-4c83-b627-ea4c3560023b",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "a8277490-c808-48fd-b3a1-fba1d803c17d",
        "cursor": {
          "ref": "49147af7-3c19-47e1-a8f8-4a561676c175",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "90e56e74-4e1f-44f3-8d63-74e9dc445308"
        },
        "item": {
          "id": "a8277490-c808-48fd-b3a1-fba1d803c17d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "d97003e6-cb08-4482-a0d3-0a48a6f6c62f",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "ae2f7ebb-c8aa-4efc-88a5-e66b8ba6ba4c",
        "cursor": {
          "ref": "38a950e5-a4b2-4862-b5c2-5e113333161c",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "722afcaa-7983-47c2-a85f-45713126f838"
        },
        "item": {
          "id": "ae2f7ebb-c8aa-4efc-88a5-e66b8ba6ba4c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "d01bb6a0-2199-4de7-980e-e5ab544ae174",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "8328dc9f-6099-4c08-ad73-2e6fdfb7b9ff",
        "cursor": {
          "ref": "9c401189-ee3b-48c6-a8cf-546530e56c70",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "54b16025-4ba3-494c-a47b-b7cd7fab858e"
        },
        "item": {
          "id": "8328dc9f-6099-4c08-ad73-2e6fdfb7b9ff",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "4a4b6bd1-c269-4f84-a0ef-0329f0ba9e61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c79f8a3f-5f52-4d45-9acb-6837435673f0",
        "cursor": {
          "ref": "edd38779-b371-4468-b07e-f5fd0119c80a",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "e2ded343-98d7-402c-ba6d-91db81493a37"
        },
        "item": {
          "id": "c79f8a3f-5f52-4d45-9acb-6837435673f0",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "34a3b57e-97f9-4016-8b9c-eda7f582dbc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7769e70a-4834-4d89-8b84-8d904266ee3d",
        "cursor": {
          "ref": "ed02d89a-c98b-4f8b-8689-7917d4bfd332",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "8cbf9134-fb80-4f3d-b285-d6c9863d5567"
        },
        "item": {
          "id": "7769e70a-4834-4d89-8b84-8d904266ee3d",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "77e98778-7e96-411e-9875-d352866e715d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56082afd-70cc-4b40-aed0-2bfa973caebf",
        "cursor": {
          "ref": "00c875d0-0bbe-4d4c-ba67-f12f954bb79e",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "5d4ac452-0a79-4114-86cb-677c9dca31fd"
        },
        "item": {
          "id": "56082afd-70cc-4b40-aed0-2bfa973caebf",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "3137eb5f-def8-4cf6-a1df-b87dc05aa46a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d258a427-4e2a-4b4f-93ae-74b7597a9576",
        "cursor": {
          "ref": "f944b99f-eadc-42b7-9ef6-09647b18cee1",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "c0789caa-3874-4d92-a9ce-b94d2db4362a"
        },
        "item": {
          "id": "d258a427-4e2a-4b4f-93ae-74b7597a9576",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "b517096e-17af-46a6-8ba8-82ca2863c35a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5be8653-c4f9-452e-a156-153441457745",
        "cursor": {
          "ref": "fac45b3c-276e-486f-a6c8-93d9064b54f5",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "663f3697-bc0c-42cf-8303-ad4cb825d065"
        },
        "item": {
          "id": "b5be8653-c4f9-452e-a156-153441457745",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "fcfabe15-3821-4352-aa05-9f9b16048835",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c00c28fc-eed3-4978-a348-25220c571312",
        "cursor": {
          "ref": "4eb668d7-7400-4fa2-8de6-876086c96f30",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "0f469825-25d2-4c64-bbe1-0dcdc52b11c1"
        },
        "item": {
          "id": "c00c28fc-eed3-4978-a348-25220c571312",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "e88dd9ad-c5b8-4982-8b62-be735840c948",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b33dd4a7-548a-4d8c-8adb-bbdb67dbefc3",
        "cursor": {
          "ref": "07dd6ab8-d748-4f9d-8e3c-0c386dba1dce",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "c189cfc8-dfc3-498a-aaed-a6189e2dfb93"
        },
        "item": {
          "id": "b33dd4a7-548a-4d8c-8adb-bbdb67dbefc3",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "e55502d8-e9c2-420f-9aeb-2e15f2ae87e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3119b4e-6af1-438d-b7f3-6c906b835d7f",
        "cursor": {
          "ref": "6fcf7ff2-e6ef-4003-b8d1-e94e19bb1922",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "c040f462-1395-4c01-bf86-c27b5ce48b75"
        },
        "item": {
          "id": "e3119b4e-6af1-438d-b7f3-6c906b835d7f",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "4f002e35-f48e-476e-a0a4-ee4e146c5219",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0a9c7fc-2347-4b59-bb68-7e55003b783a",
        "cursor": {
          "ref": "f384eb02-20ba-4591-91a7-b97ad300f45f",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "ff140258-26ab-4161-a2c3-36e99cd9fb4e"
        },
        "item": {
          "id": "c0a9c7fc-2347-4b59-bb68-7e55003b783a",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "3a9c00fd-5297-4b10-96f9-b9b45f8f508c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a26a5b29-24f3-408d-9528-a31ba9e2c199",
        "cursor": {
          "ref": "1088e2b7-54b3-4393-88bf-870319b76897",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "97b952fa-dc9b-4031-8fc0-e2da0da76cf5"
        },
        "item": {
          "id": "a26a5b29-24f3-408d-9528-a31ba9e2c199",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "d937e234-cc79-4e32-9ea6-8cd1f459ceed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b71ecfe8-e876-4c7d-8439-e305fd4878ad",
        "cursor": {
          "ref": "99a34ff1-cfba-46dc-9e86-c6ba5f625275",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "fcd7c93a-ea74-4e36-a9ae-b4ac0b70c902"
        },
        "item": {
          "id": "b71ecfe8-e876-4c7d-8439-e305fd4878ad",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "8d8441e7-052d-41cd-9d21-0ec32e7345c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddbe5a6b-6d54-441b-9bec-d3cd56671e95",
        "cursor": {
          "ref": "28ce294a-1302-48db-8342-6f1bec9626a6",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "d3877301-55ca-4f29-aef1-c325e4876c83"
        },
        "item": {
          "id": "ddbe5a6b-6d54-441b-9bec-d3cd56671e95",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "51c64620-f9c9-4c14-909c-d70ac5f8eeb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "733e262e-ea1f-4458-ab6c-d09bb5133de2",
        "cursor": {
          "ref": "e150761f-b567-40c6-ab7d-6789393342b3",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "0e9f1cf8-a5ad-439b-8911-18e0dc8bea4d"
        },
        "item": {
          "id": "733e262e-ea1f-4458-ab6c-d09bb5133de2",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "8f1da86f-6701-48fa-b9b5-403b63ffee6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3497cc71-3ade-48e9-9e5a-5228c15714cf",
        "cursor": {
          "ref": "b00f2a74-17f3-4093-a608-77434eb04a87",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "1c3d0274-8b15-4ffa-9d10-345678ec8730"
        },
        "item": {
          "id": "3497cc71-3ade-48e9-9e5a-5228c15714cf",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "d12a8ab4-d168-4b1a-b84b-b0beef0e37bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf29a0ed-a621-4a20-828a-d00ea2c10b11",
        "cursor": {
          "ref": "8adac45f-1fce-4ac5-8e23-8f504e15df19",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "c40afb45-8695-47f2-b4de-f3aed6d00a3b"
        },
        "item": {
          "id": "cf29a0ed-a621-4a20-828a-d00ea2c10b11",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "bd7a5762-a87a-4f13-a270-e53f9e582c05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a88e387-122f-44b1-9307-c7fb699814dc",
        "cursor": {
          "ref": "58377d61-0342-4e7c-a79a-a23d27518e4d",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "41ffe69d-0df9-4b39-80cd-b9e494d681b7"
        },
        "item": {
          "id": "9a88e387-122f-44b1-9307-c7fb699814dc",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "61710bbb-d1ea-4e02-ba4c-bc08d3d9c19a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b6cbbd5-5b68-4af4-a2b2-c3b61133a242",
        "cursor": {
          "ref": "ea0f14d2-7d52-41cf-9b8e-3288bffa0a04",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "0d8e3812-5cab-4362-820e-99c60755f8f0"
        },
        "item": {
          "id": "7b6cbbd5-5b68-4af4-a2b2-c3b61133a242",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "5af813d2-2b42-4866-89cc-e2fbed8f1315",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e7fad0a-b0c5-4cfc-bc2e-e341f9ec16e2",
        "cursor": {
          "ref": "63940ad5-9525-4481-9987-18e48546d5aa",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "5f9284f0-09f6-4bf9-a23a-80176c4206e4"
        },
        "item": {
          "id": "1e7fad0a-b0c5-4cfc-bc2e-e341f9ec16e2",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "2920366a-f3f0-4da6-9f37-86caa4b99200",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a96c29ef-be50-4ea4-a6ac-9bdea2e5cb0c",
        "cursor": {
          "ref": "d92dff17-0520-42ea-b4d5-d861ea525aa5",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "d3b54079-c327-439e-9748-8d4478e7c258"
        },
        "item": {
          "id": "a96c29ef-be50-4ea4-a6ac-9bdea2e5cb0c",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "c357d4d7-02b4-4fd7-ab5d-5527b1945a7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "082ba70e-57c0-41a0-be58-4b44bde733f6",
        "cursor": {
          "ref": "02ac350a-08ef-4040-bb98-2ef492091999",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "5c1087fe-2de7-4624-8c27-4e2bb57d0384"
        },
        "item": {
          "id": "082ba70e-57c0-41a0-be58-4b44bde733f6",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "853d0a54-54cd-4e41-9046-4c0e0d840a85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4933062c-a43f-47e5-bb1b-2f5f112335d7",
        "cursor": {
          "ref": "a2a1d139-78e3-4445-b75e-b144fb54ad31",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "470bb464-a04f-4c98-a9e0-6e4e675aaf0f"
        },
        "item": {
          "id": "4933062c-a43f-47e5-bb1b-2f5f112335d7",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "714b6356-df5a-438c-b530-c6fae5561ced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce0f5897-e91c-459a-9521-4295d4a555f7",
        "cursor": {
          "ref": "5212cf96-c499-47af-9dea-58806698d13f",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "7904660d-9d42-4fd9-92dc-d47cf1705a67"
        },
        "item": {
          "id": "ce0f5897-e91c-459a-9521-4295d4a555f7",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "ffc4ecc3-6dc6-40e8-82cf-4edc6e07749d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ef76c29-6224-40f3-a3eb-caa495f7c8a0",
        "cursor": {
          "ref": "833759cc-e339-448d-9c12-8126a605289e",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "6bcd1a8b-4de2-4c12-be5d-ea0a29b8beef"
        },
        "item": {
          "id": "3ef76c29-6224-40f3-a3eb-caa495f7c8a0",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "b29059e9-63e6-4cf6-98df-ef7518898bbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c064f3ac-dd83-4717-97cc-83ba5094754e",
        "cursor": {
          "ref": "4e6c91b4-7617-4fc4-8e8e-4cef17829134",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "3aa01312-71d0-4864-a5d9-1184a300c197"
        },
        "item": {
          "id": "c064f3ac-dd83-4717-97cc-83ba5094754e",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "15f21162-d793-49cc-a66d-a23151999caf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d3ee8a0-0735-4933-9772-e8bb1df56291",
        "cursor": {
          "ref": "75f99df4-07aa-4a5d-8b8e-438a5149b334",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "a1baefda-cefb-415b-a232-ec88d85b6a9c"
        },
        "item": {
          "id": "8d3ee8a0-0735-4933-9772-e8bb1df56291",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "1fc2df93-c3e4-432a-950b-ebfcb6c79cc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e33b81e-9820-4c26-842b-082c01f4db29",
        "cursor": {
          "ref": "b0390b55-fd93-4acd-9d21-e929eba36cca",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "0b272391-9f7b-46ff-92c0-91cc47354663"
        },
        "item": {
          "id": "4e33b81e-9820-4c26-842b-082c01f4db29",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "3a080093-6826-417b-9a09-1889fe365fc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a324180a-a2fa-48cf-81cb-9c2e425ab5ed",
        "cursor": {
          "ref": "cbcb4ab0-0853-4da2-97f1-6d79fc261681",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "2cfdd856-e6ce-450f-ae0f-d30389f1c7fc"
        },
        "item": {
          "id": "a324180a-a2fa-48cf-81cb-9c2e425ab5ed",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "e8beb7a9-5a75-4d26-88e1-b7380b38f799",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9dca2c4-0134-4b03-99aa-fc1fffa4eca3",
        "cursor": {
          "ref": "7d5d8bcf-3285-4247-a5fe-330e6d8c05ca",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "a204d884-58f0-4c0c-9102-467df9541dc7"
        },
        "item": {
          "id": "b9dca2c4-0134-4b03-99aa-fc1fffa4eca3",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "864b37ce-47cd-4733-977f-62433fd4dbea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0ca271a-7b66-4022-b288-adb18005ffc8",
        "cursor": {
          "ref": "71d0b4e8-893a-41fb-9bd6-aa6286fb70a0",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "8f6f0f44-4ba2-4103-be24-b0244de2200f"
        },
        "item": {
          "id": "e0ca271a-7b66-4022-b288-adb18005ffc8",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "25eff2f6-9117-47ce-b5ec-0363f0607159",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f496693-59d3-4ef9-aeb4-86a2f1c99915",
        "cursor": {
          "ref": "485bd563-c450-421a-884e-d1377f8fe6bc",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "3e6713fb-a314-41e3-943a-30eab83b42b4"
        },
        "item": {
          "id": "8f496693-59d3-4ef9-aeb4-86a2f1c99915",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "68ba2637-90cb-47e5-be69-2958f325d721",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "358198c0-6a22-43ba-8e30-4b1a898bf457",
        "cursor": {
          "ref": "4ccb4d56-ad1c-44b6-9d0e-99529ab9699d",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "8466bee8-a5d7-4094-87e5-88251737d505"
        },
        "item": {
          "id": "358198c0-6a22-43ba-8e30-4b1a898bf457",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "4f121b11-3555-4c05-8357-6e826ed4f7a7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed0a506d-1c05-4199-81bb-81c6862e27f6",
        "cursor": {
          "ref": "52218a16-58c1-45c2-9796-a5a528075b78",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "5fdc83c3-6d1a-4a75-982e-91f59f94c440"
        },
        "item": {
          "id": "ed0a506d-1c05-4199-81bb-81c6862e27f6",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "4d9e645e-6db3-46e1-a3d8-3a36e0866324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "65049273-c271-4b23-9337-1a51fc1928df",
        "cursor": {
          "ref": "a80f5d78-556b-4654-aa0a-866218b8bd1f",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "f33cc25c-8c35-40b4-a477-f32ecfbbb56b"
        },
        "item": {
          "id": "65049273-c271-4b23-9337-1a51fc1928df",
          "name": "credentials_issue"
        },
        "response": {
          "id": "585ad0f5-f490-4d96-894d-3def32af8627",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "99249ebe-2864-4732-afad-b7394e9e8e9f",
        "cursor": {
          "ref": "c069a7d3-91b1-4175-8003-ad693d35f638",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "48a4df63-a3c9-4426-ab92-f744f36ac8d0"
        },
        "item": {
          "id": "99249ebe-2864-4732-afad-b7394e9e8e9f",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "4eee7887-f83a-459d-a60f-079e7774d2cb",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d76aaa6-c862-4fbb-af77-dd8d935d748a",
        "cursor": {
          "ref": "e4683244-4657-412c-bca9-f648f05086df",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "90657ed3-fe7d-4c70-9d1f-6bdf43da59f9"
        },
        "item": {
          "id": "6d76aaa6-c862-4fbb-af77-dd8d935d748a",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "d0b6cc52-bb5d-479c-9266-dd12cf0736bc",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "623ccbf3-2526-4ed1-ade9-2fe96a10d561",
        "cursor": {
          "ref": "48f289ea-63eb-4243-8bf2-eec4c872868b",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "19f964ba-3c88-4a71-947a-413fc0b22ab6"
        },
        "item": {
          "id": "623ccbf3-2526-4ed1-ade9-2fe96a10d561",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "322bc823-4e94-4f19-b91c-0c318f8eab04",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "23e12c65-2581-4805-b285-f79dc3abc098",
        "cursor": {
          "ref": "fdc9efa4-a902-4cc1-a40c-fead21446ad5",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "7e0c292e-3fcc-47ff-ad67-274ace44a5b7"
        },
        "item": {
          "id": "23e12c65-2581-4805-b285-f79dc3abc098",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "fc3bd55e-6544-4fe3-a2fd-b68aaca96b80",
          "status": "Created",
          "code": 201,
          "responseTime": 330,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-02-03T00:34:17.127Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-02-03T00:34:17.127Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "82991fd5-4d82-4ff5-a37a-9cc1ba102a97",
        "cursor": {
          "ref": "75c894d1-1202-43cd-be28-a4e2d0fa2a58",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "6277fabc-cf6c-464e-a3f9-aea655e9a8d3"
        },
        "item": {
          "id": "82991fd5-4d82-4ff5-a37a-9cc1ba102a97",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "a90832e7-3132-4f29-9d06-6e42a4c397b8",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49270f7a-e39a-4644-ab67-c71d1ba81a15",
        "cursor": {
          "ref": "3014a553-b8bf-424b-8765-5054e1c5c840",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "4b16d5a6-5c50-4929-9f94-849a263b294d"
        },
        "item": {
          "id": "49270f7a-e39a-4644-ab67-c71d1ba81a15",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "51c6200f-7f26-4247-aa1a-ef3df3d1b7c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3de73b38-a203-477f-abb4-3e4b96c6526f",
        "cursor": {
          "ref": "70314cb3-d7ef-4f38-b46a-aa8a6cf823d0",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "c2846c01-14b5-422b-891c-b1f3beb8dae1"
        },
        "item": {
          "id": "3de73b38-a203-477f-abb4-3e4b96c6526f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "dbed0403-7b71-48e2-93e8-cc2ae70f96a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "311694c0-f5ce-410f-bfa0-bb1c8ad077ef",
        "cursor": {
          "ref": "a4554587-604d-4251-85b0-6cc27a79e5bc",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "c08af782-456a-4390-b672-be236b005a42"
        },
        "item": {
          "id": "311694c0-f5ce-410f-bfa0-bb1c8ad077ef",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "5af4a4a5-3133-4dc2-9b9c-b6f3a283b0b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d8d2f81-4aed-42f4-805a-7d9479e7e77e",
        "cursor": {
          "ref": "c6cee50d-d6f3-4776-8cb5-b7e606f3eda9",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "e8b02563-abd6-4e71-815a-2a8bbbec009d"
        },
        "item": {
          "id": "9d8d2f81-4aed-42f4-805a-7d9479e7e77e",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "13c0abe2-7fcc-4f7e-8cbc-e17bab9b198f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e037cd06-b1b5-465c-9526-f4365b375e79",
        "cursor": {
          "ref": "709ea4d6-4e9a-4537-a1e4-62af002e40dd",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "94174690-ca21-4043-9acb-1f5d41f6c91e"
        },
        "item": {
          "id": "e037cd06-b1b5-465c-9526-f4365b375e79",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "482093d5-6151-4422-9b8c-7a50109fce1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cccea3dd-e170-4d23-800e-d9e80bac81f4",
        "cursor": {
          "ref": "676be33e-e510-425a-95a4-5b11de7089d8",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "8c4e5ac5-85cb-4f4f-959b-1ce392940980"
        },
        "item": {
          "id": "cccea3dd-e170-4d23-800e-d9e80bac81f4",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "6833185c-fee9-438b-ab71-9caa0b6ae020",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22ef250e-0db6-4352-a710-2fc7d0cae095",
        "cursor": {
          "ref": "38ecc86d-dadf-419e-b4d8-b41e046bb380",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "e03414ce-236b-4ba9-86d2-87b3fa0bf7bc"
        },
        "item": {
          "id": "22ef250e-0db6-4352-a710-2fc7d0cae095",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "31706934-7bbd-473c-8578-c532b1684c1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be0b8256-f103-4db7-af14-cc4e1f2ab3bc",
        "cursor": {
          "ref": "ae6f1b1d-e93f-450d-b784-4a8360594a6e",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "9c1dc384-692e-4aa3-b56b-4ebd5bcf786f"
        },
        "item": {
          "id": "be0b8256-f103-4db7-af14-cc4e1f2ab3bc",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "706aaeef-0396-4766-8f0f-3380d8cce60d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7491ac5-5200-48a1-8f3c-1eb3334a240a",
        "cursor": {
          "ref": "7c48aa49-7987-4c52-b347-c754d506a014",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "819e3113-5a12-4ec3-855e-2020b9a5eb08"
        },
        "item": {
          "id": "f7491ac5-5200-48a1-8f3c-1eb3334a240a",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "04217dbc-8208-46b8-be2d-da81f91015cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4854aeed-2522-4c87-8b1b-66cbad89b163",
        "cursor": {
          "ref": "8db814fd-a7a5-413d-96e3-e6d62b779a0a",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "d123ac20-dd6f-41f8-ac86-7c75290b32ee"
        },
        "item": {
          "id": "4854aeed-2522-4c87-8b1b-66cbad89b163",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "4e41ec81-34e4-4d91-b7ba-8eff367d4419",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51465c87-4739-44f7-a4d1-11910e90f6b1",
        "cursor": {
          "ref": "d7847394-bbbe-44b2-88c4-48556d55c0c0",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "b8051c66-5be2-471d-bbca-40b603f4a70a"
        },
        "item": {
          "id": "51465c87-4739-44f7-a4d1-11910e90f6b1",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "6449c552-a0f5-471b-aad5-d349df4ac93e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eec8ae68-cece-4122-900a-27e582b23789",
        "cursor": {
          "ref": "b00e28b2-2def-4a32-b222-16ae00718fc1",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "fec15f15-e8a9-4c2f-a824-db27d18630d1"
        },
        "item": {
          "id": "eec8ae68-cece-4122-900a-27e582b23789",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "bf688096-fc95-48cd-a03f-87725a418f7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c724f67-d777-4c7d-9fe4-25baa87ea020",
        "cursor": {
          "ref": "73ab0406-f348-4b69-b88d-da2924071e1f",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "6ad5606d-eb40-45ff-9a1c-3b22845e2451"
        },
        "item": {
          "id": "2c724f67-d777-4c7d-9fe4-25baa87ea020",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "465553e6-ff1c-4e46-a569-d7e1e3f87abb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 79,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "76ece697-5a81-4d09-b9b2-dc713a24b68e",
        "cursor": {
          "ref": "2a8feca5-ed90-4670-9992-becc1866c334",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "6a2604eb-a905-419f-8f20-0049cf7d8793"
        },
        "item": {
          "id": "76ece697-5a81-4d09-b9b2-dc713a24b68e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "0b940782-a495-471c-8613-7442f882455d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "87fefdfd-60ee-4c09-9b2e-89b16726809f",
        "cursor": {
          "ref": "3ef22a61-e939-4c3b-8f48-b1bf608565a7",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "dd6df9ae-b2f4-42e6-a2f2-4f65db605cf3"
        },
        "item": {
          "id": "87fefdfd-60ee-4c09-9b2e-89b16726809f",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "27dae6d4-d951-4cf6-8c99-87b875bcd409",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e2323d6-484a-4bd2-a09b-a4c6a7403677",
        "cursor": {
          "ref": "941ca254-2df7-490a-8e07-e061afbef8f5",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "b59987f6-cbe8-4471-8718-0f84a42b2fed"
        },
        "item": {
          "id": "5e2323d6-484a-4bd2-a09b-a4c6a7403677",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "513f339b-afb7-4aad-b24b-5948c8a28ced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dee9cca-e039-4f75-aa61-cf6bffbd06f4",
        "cursor": {
          "ref": "e4978953-59fc-4b62-a168-86a9445c0693",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "72f29568-d17f-4e9e-ae9c-497eabcac1c8"
        },
        "item": {
          "id": "0dee9cca-e039-4f75-aa61-cf6bffbd06f4",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "ab5fafce-4220-49e3-aca0-7b67d8c67fb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62f70b43-5281-4d8e-8e5f-73099de63dea",
        "cursor": {
          "ref": "9bfdf006-255f-492d-9b3d-3cfdb67ad777",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "bbf3913a-02a4-4b58-a2ad-d2031ea053da"
        },
        "item": {
          "id": "62f70b43-5281-4d8e-8e5f-73099de63dea",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "dd5b09cf-0ad7-4b6a-a00e-1e8cf0bd9c8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b24db49a-51d9-4819-83c1-49971ca7d319",
        "cursor": {
          "ref": "bd60078a-4c59-4ec0-84af-2fa26eda01f1",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "5a170c0a-3822-48cf-9382-ae96cc742d22"
        },
        "item": {
          "id": "b24db49a-51d9-4819-83c1-49971ca7d319",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "5e4e0fdd-d88c-42a8-8d74-1a090d6b190a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0586089b-82fa-4bbc-8789-edc03c402f74",
        "cursor": {
          "ref": "ef5d68a9-320e-4c9b-a8ca-ba8102b0afe1",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "cf136980-1036-4a7c-a862-3981e7a56468"
        },
        "item": {
          "id": "0586089b-82fa-4bbc-8789-edc03c402f74",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "a3c1a566-8429-4593-abab-c6bf2573d47d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c380654-c7d3-4e08-a7c2-ebb4f375ef5c",
        "cursor": {
          "ref": "31b6a103-4cc6-4e72-8d40-805cf80f7437",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "9817c7ee-ea56-4068-9484-40ea9bfe844d"
        },
        "item": {
          "id": "7c380654-c7d3-4e08-a7c2-ebb4f375ef5c",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "2718afd3-716d-4bfb-a6f1-74df448b923c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5af4297-17a9-4183-b9ba-bb35dd777654",
        "cursor": {
          "ref": "56ecaa55-919d-497a-b66d-541437b25993",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "10e98955-4f17-4853-b7ae-6c94ccef6eeb"
        },
        "item": {
          "id": "d5af4297-17a9-4183-b9ba-bb35dd777654",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ed45ac9e-a229-4b3c-b9b1-2d2516f34171",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7c06fd2-71d1-4209-888e-e8f560bd28a3",
        "cursor": {
          "ref": "a9bebafb-5871-4715-89d2-f49c090b593e",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "4840aa2d-dfc7-4397-9c9c-2b98b4e176ea"
        },
        "item": {
          "id": "c7c06fd2-71d1-4209-888e-e8f560bd28a3",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "3c51197d-9c84-47a7-94d3-091ec985fefe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3485bb2a-94ae-4dfb-bbbd-7b1812f1d446",
        "cursor": {
          "ref": "3029d714-b632-4464-b2e7-26fcd128a255",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "72cd6653-f85a-43ec-b7bb-9c22d8b154dc"
        },
        "item": {
          "id": "3485bb2a-94ae-4dfb-bbbd-7b1812f1d446",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "9016ea7c-f1f8-4503-a0ee-3510ea3b2645",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ccb1eb0-f8d8-4ca6-b009-d68381bf2fa2",
        "cursor": {
          "ref": "9d760dd6-73f1-41fa-b8f8-8d0a8e4d9395",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "21093dbc-e6a1-4ec2-84e6-453dcf145d57"
        },
        "item": {
          "id": "8ccb1eb0-f8d8-4ca6-b009-d68381bf2fa2",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "16fa325f-e8e5-4513-86ca-38e7bc9b905a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fd2240c-72ad-4ba9-82d3-d0cc2224f29b",
        "cursor": {
          "ref": "731c3361-94fb-4b51-a9d2-fbbb2dfc1f61",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "6ea8dcab-350f-47b1-bf5a-6126964302cb"
        },
        "item": {
          "id": "6fd2240c-72ad-4ba9-82d3-d0cc2224f29b",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "affb0828-96de-4c22-9d33-337cf504dd5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8a70596-7e2b-4270-a9fb-0d4105ee6262",
        "cursor": {
          "ref": "32e3e6ef-adfa-4bfb-9f61-68ba170a6121",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "5e827173-793c-41b6-b636-aa7cc9d47ade"
        },
        "item": {
          "id": "d8a70596-7e2b-4270-a9fb-0d4105ee6262",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "8c925d63-23d7-40ca-a3d3-b8d6f3b18ede",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21da1871-4f71-4249-80f2-135cbedee069",
        "cursor": {
          "ref": "12f65d87-b3f7-4f53-8e5e-dfbb7d04da5c",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "30166656-2b1b-4f64-9383-d4ac5c915d11"
        },
        "item": {
          "id": "21da1871-4f71-4249-80f2-135cbedee069",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "489af2fb-a7de-4bca-81b1-ad49c2d29ef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30f98f1a-fbdb-4b17-94bc-8cca6f20a54c",
        "cursor": {
          "ref": "57f7a123-f543-41a8-b2e5-a95649926fcc",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "2f2dd7dd-22fe-4e6e-805c-a87a284562d3"
        },
        "item": {
          "id": "30f98f1a-fbdb-4b17-94bc-8cca6f20a54c",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "43500804-f420-408e-aa42-eac4e943a502",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6455fb9-98e7-4e74-a8d5-eeacb594f2c5",
        "cursor": {
          "ref": "db4326f6-8322-402c-ac58-4f6890879f92",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "361ebba9-d389-4850-a114-93d7d5ad9ac9"
        },
        "item": {
          "id": "d6455fb9-98e7-4e74-a8d5-eeacb594f2c5",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "9c471d38-d661-4631-b59c-47833630bbf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eee49fc0-46de-4f98-98e4-a30ea07b125b",
        "cursor": {
          "ref": "2193b7e8-aa4b-4ab8-9a02-4085ea24b456",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "a1d3becb-6bcc-4d5b-99fe-5fcf48398e6b"
        },
        "item": {
          "id": "eee49fc0-46de-4f98-98e4-a30ea07b125b",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "d6d666b9-80d0-47c6-a3e9-6fabd5a8add4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "144df5e0-0f63-4b3e-b39d-44f6a14d85bd",
        "cursor": {
          "ref": "c6e1a782-c8ff-4a21-b048-dccfbc5c6701",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "d5488428-f9b8-4025-b737-0a27908124a2"
        },
        "item": {
          "id": "144df5e0-0f63-4b3e-b39d-44f6a14d85bd",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "5c55dc59-2cee-40fa-990d-5b9786782c6d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 69,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "25dab75e-d2f1-4696-be37-512219702ff0",
        "cursor": {
          "ref": "1dc9ad93-bf7d-4efe-9b47-36b36cc2bab0",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "e168871b-3954-4203-9e21-9f94d610e7a8"
        },
        "item": {
          "id": "25dab75e-d2f1-4696-be37-512219702ff0",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "10533bff-aa84-4a09-a21b-08e7a64d7361",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "741e6295-7f4b-4c16-9d37-5a53b3b619ae",
        "cursor": {
          "ref": "b59c89b3-2e1e-4a58-98dd-f8f3d1343285",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "6d8106f2-91bf-4841-9c5b-4094eea9524f"
        },
        "item": {
          "id": "741e6295-7f4b-4c16-9d37-5a53b3b619ae",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "bd9aab02-2843-4577-868d-913c38267cff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3efa10ed-8c54-485c-905c-ac8aff28ac25",
        "cursor": {
          "ref": "2e03aa6f-8dcd-4411-8d39-c71649b29d0a",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "59ff9dd6-f53e-4c4a-8bdc-728456a0b4d5"
        },
        "item": {
          "id": "3efa10ed-8c54-485c-905c-ac8aff28ac25",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "bd1be703-4d27-4554-9a65-46dca3382143",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c798537-2a22-4a70-a93e-d4afd9e27413",
        "cursor": {
          "ref": "c610fa05-eb6a-4bde-ab6c-dccb0c09750e",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "b21ecf2a-d237-436b-adf7-5f8fa1e220b1"
        },
        "item": {
          "id": "7c798537-2a22-4a70-a93e-d4afd9e27413",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "e3250b14-2409-4f80-9ea4-21d80909d4b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79d0edba-5aad-4bd0-89c4-efe99e7a0b44",
        "cursor": {
          "ref": "cd5f652a-c695-4c2f-afd0-02148ff5d95e",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "f4798c69-7577-4dcd-8338-cdf7138056a9"
        },
        "item": {
          "id": "79d0edba-5aad-4bd0-89c4-efe99e7a0b44",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "09e6148d-4f16-4372-bec4-2522ae0a5d2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "add1dcb9-e72b-415c-a343-25687027c753",
        "cursor": {
          "ref": "471ee773-404e-45d9-b72a-cdc102d874c4",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "83f146ba-5d39-43d1-b33b-be8903e2943b"
        },
        "item": {
          "id": "add1dcb9-e72b-415c-a343-25687027c753",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "09fd4b81-b30c-4bf4-b132-4240c09fef6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5233062-47fb-4944-9b11-e62af4aca2d7",
        "cursor": {
          "ref": "33a2e449-9c98-4fb2-822f-9368d0ff1d2f",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "7220055c-9cff-4113-aed9-26b6f4b43d49"
        },
        "item": {
          "id": "a5233062-47fb-4944-9b11-e62af4aca2d7",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "0a7b3c62-64ef-4f45-bd06-b5726c082235",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b00ace72-2f03-4709-b51e-1c922433b19b",
        "cursor": {
          "ref": "262dbc19-e266-4b26-a070-88e7c3362dac",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "72b24d97-8e71-4967-a917-cd09c240ede2"
        },
        "item": {
          "id": "b00ace72-2f03-4709-b51e-1c922433b19b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "8393807c-5532-456e-95cf-7c267891c5cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11533031-9a49-4f12-9c5d-4e399c22af2e",
        "cursor": {
          "ref": "e9c7d845-a67f-48b5-ba17-fa2a4b907d37",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "98285b80-421f-4894-a02a-dd6d37decb85"
        },
        "item": {
          "id": "11533031-9a49-4f12-9c5d-4e399c22af2e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "1d97d43e-d056-4f67-95dd-0666cfc7eb3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9f343f6-87fb-4bc1-b70b-643631ab35d3",
        "cursor": {
          "ref": "48b1bc9b-077d-43c4-a254-a3001b34812a",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "a3a870b8-7339-4a71-821a-8b0d4421f443"
        },
        "item": {
          "id": "c9f343f6-87fb-4bc1-b70b-643631ab35d3",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "eeed331e-06c4-45a7-8eb0-1b500b6b42f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89dedcae-f0d1-4228-9767-c60c27f3669a",
        "cursor": {
          "ref": "7673bf01-3476-419f-bf8b-8f83b427f579",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "b030f05a-9b42-41a9-b5f4-8b9a3943a4fd"
        },
        "item": {
          "id": "89dedcae-f0d1-4228-9767-c60c27f3669a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c24143e0-f4cc-427e-a858-4ff747f4589e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cabc24ac-9952-45c4-b4a3-d6eb116ad0f2",
        "cursor": {
          "ref": "bdc400d8-c0a9-465f-a7aa-c596a8decfba",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "340aee1b-ed94-4966-9b91-b2ca5bc966ea"
        },
        "item": {
          "id": "cabc24ac-9952-45c4-b4a3-d6eb116ad0f2",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "04cf379c-6d3d-42fd-bae8-4b1af3874563",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "261fb909-3baa-43fc-816d-057e23937ff7",
        "cursor": {
          "ref": "8d54d692-449e-4e0b-b810-5049be4e3247",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "7af718cf-1623-44de-ac5b-9430e2a59490"
        },
        "item": {
          "id": "261fb909-3baa-43fc-816d-057e23937ff7",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "63103515-6e34-459f-9eba-32d46a17d707",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47656f80-c9bc-4cc1-a650-c3a9feec27f4",
        "cursor": {
          "ref": "a465667b-5000-43d2-b2f7-8cf2e3a1e59a",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "d720fef1-2e37-43e4-9ef3-0d7cc36ff894"
        },
        "item": {
          "id": "47656f80-c9bc-4cc1-a650-c3a9feec27f4",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0a683db2-0a25-4f22-8ee6-fb0b2940ed1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fb78bb2-a929-4730-ba00-53ee4003c98d",
        "cursor": {
          "ref": "7b533c59-bdcd-4646-b98f-d52dce8127ce",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "b9efe5da-a982-48b4-a8ee-ea6e6b25b635"
        },
        "item": {
          "id": "2fb78bb2-a929-4730-ba00-53ee4003c98d",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9a12c2c0-da39-431a-8d18-d4e85997e0ec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 86,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "bd093489-ff1c-4704-bd28-52c62a5c51c8",
        "cursor": {
          "ref": "0ee77c52-2eaa-4702-b487-9b59ce46b3e1",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "1aa66bfd-725d-4e1a-b8d9-fc80e2361a42"
        },
        "item": {
          "id": "bd093489-ff1c-4704-bd28-52c62a5c51c8",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "03cf6e06-1105-4121-bb97-6e474f8c8f77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7503cfe2-8fa5-4767-ada1-89a93af85709",
        "cursor": {
          "ref": "bf76b0bc-1eb9-4b5e-833a-7633f813da73",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "cfcc6911-d842-41d2-8db3-6f9b9c66dee2"
        },
        "item": {
          "id": "7503cfe2-8fa5-4767-ada1-89a93af85709",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "aa7184b4-528f-4cc0-9b03-aa8c7ae3154e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c7aeb45-5b8f-438f-bbed-d53eedb747fb",
        "cursor": {
          "ref": "b17c8991-b6bd-46d6-bc64-341d90ff5c9c",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "78b40eb1-00a5-46d0-840f-c5be3848b3f5"
        },
        "item": {
          "id": "3c7aeb45-5b8f-438f-bbed-d53eedb747fb",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "fa799027-8215-4254-ae96-2f7d09dd7d1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17f34b3b-262c-4e6b-8e1c-ada8b6d596fe",
        "cursor": {
          "ref": "31e8dfc8-1c0d-41de-ae08-52e84e93a08f",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "5dfcc586-9bc6-49e6-912f-9461332427ee"
        },
        "item": {
          "id": "17f34b3b-262c-4e6b-8e1c-ada8b6d596fe",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "83d049e8-15b2-4f73-a813-3eeb1bbd32a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31438ebd-ad9f-4b32-ab13-cc13842ac2f7",
        "cursor": {
          "ref": "d84bbe8b-bc20-4b1e-b62b-0a02350109d7",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "d5d7b47d-2577-4548-b39d-51375c25908c"
        },
        "item": {
          "id": "31438ebd-ad9f-4b32-ab13-cc13842ac2f7",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "c2321e16-097c-49d5-a754-feaf5116e2ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "342709e2-dd64-4678-9451-7307ee8f3ab0",
        "cursor": {
          "ref": "b67e8400-2325-4f5b-9247-a0dcf2b9ff4e",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "5a8283e1-5051-45e3-bbef-e1b024b41121"
        },
        "item": {
          "id": "342709e2-dd64-4678-9451-7307ee8f3ab0",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "666e8fec-e6da-46c6-972c-b651f02ef52f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f39a663f-991e-4e01-b491-351760286272",
        "cursor": {
          "ref": "e213dc48-3424-4b94-89d9-87b48e7a10a0",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "5d98bfd3-00f8-4273-875f-c83de3b8530f"
        },
        "item": {
          "id": "f39a663f-991e-4e01-b491-351760286272",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "2d37eced-502a-43ae-8b09-0ea56c5b3781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec6f0825-1246-4676-9be9-74160269d232",
        "cursor": {
          "ref": "e4528797-8970-4d2e-91ae-285e3d3e5690",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "44442752-40d9-4e39-9d1c-f5225a66801d"
        },
        "item": {
          "id": "ec6f0825-1246-4676-9be9-74160269d232",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "9b82387e-6211-4112-8d77-526afb9481bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0106866-92c7-4e44-8e50-c9c60418fcbe",
        "cursor": {
          "ref": "ff3b4a83-790a-4630-91aa-9e118e5243ca",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "33413e0e-6d77-4429-92f6-3d8f9eae624c"
        },
        "item": {
          "id": "a0106866-92c7-4e44-8e50-c9c60418fcbe",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "56630dc5-f708-4a8f-9b72-74bb3bc9f41e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8d15a5b-29e9-4439-9e66-1c3ba7d28187",
        "cursor": {
          "ref": "307c7faa-d4b9-4d80-86d7-1423f30bbfac",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "18d0b207-0219-4226-a3d8-b406b7a93267"
        },
        "item": {
          "id": "b8d15a5b-29e9-4439-9e66-1c3ba7d28187",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "79d0e600-92c4-44c6-9920-c534267d4521",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1215ff9-e627-4ec1-b811-7b6731ff330b",
        "cursor": {
          "ref": "7dd746a4-375c-4b82-9ca0-91cd7068c16f",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "f303f932-004b-43ac-96ee-8d57c71c5632"
        },
        "item": {
          "id": "b1215ff9-e627-4ec1-b811-7b6731ff330b",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "04d3fec3-7d83-4609-993d-617ef328960a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bff34824-cc87-4818-8bd1-602a7b64864e",
        "cursor": {
          "ref": "96f57a05-d2d3-41cf-8e3c-36d094f3bf99",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "ff848824-bc23-465c-a054-e5fddddc8c52"
        },
        "item": {
          "id": "bff34824-cc87-4818-8bd1-602a7b64864e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "0d6d146f-34ce-4d59-a998-4e7e1fc9de39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce9cb3a4-feb8-41f2-b216-49469762b4cf",
        "cursor": {
          "ref": "5a74eb19-56ea-4f92-888e-d47c99df925d",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "bb3ef7fa-d1b0-417b-b7f7-1d2086145a99"
        },
        "item": {
          "id": "ce9cb3a4-feb8-41f2-b216-49469762b4cf",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f2ce8adb-cf53-4bfc-ac69-0fa9f9fe568e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b460949b-7438-4653-ae4f-b396e81db84f",
        "cursor": {
          "ref": "48db27e1-a0b3-4e49-8c9b-aef2b215c5d4",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "703ef06d-6136-4209-a5d0-1475b2a9b99b"
        },
        "item": {
          "id": "b460949b-7438-4653-ae4f-b396e81db84f",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "aeac56e8-9796-467f-a866-2180924c2d65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db36933c-7d0d-4dd6-a76c-d78ac7a28999",
        "cursor": {
          "ref": "e31ccc26-309d-4c9b-995d-eae73b8c0a4f",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "8d2c3d14-f964-46e3-bb2b-2e7372e4ef1a"
        },
        "item": {
          "id": "db36933c-7d0d-4dd6-a76c-d78ac7a28999",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "324e22bd-a6e4-4948-97f6-c7e4cb80953a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9534ece-9eef-4a7c-9a40-9be395b0150b",
        "cursor": {
          "ref": "8c7c7fb4-25c0-4c87-b3a8-b51fafeaee0d",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "ecc01d03-5f2c-4aaf-b1b1-73cbf27a14dc"
        },
        "item": {
          "id": "a9534ece-9eef-4a7c-9a40-9be395b0150b",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "5abe8e18-1d05-44ec-a307-ff3ff835f07b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b685ca7-aadf-442e-bb98-3d75d3b2aaae",
        "cursor": {
          "ref": "a1fea465-54ca-43b3-857a-fde18799dc4d",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "d6444d2e-42ae-4a98-806b-47c09aac93a8"
        },
        "item": {
          "id": "6b685ca7-aadf-442e-bb98-3d75d3b2aaae",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "cbfa0998-5c98-4afd-a430-011fbd07afdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e73b325c-8f2f-403e-9c74-de816fdd05b3",
        "cursor": {
          "ref": "959df473-e09e-402b-9443-cf73f8f6e063",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c710a5d3-7a30-4682-a4b1-0e319dad4ebe"
        },
        "item": {
          "id": "e73b325c-8f2f-403e-9c74-de816fdd05b3",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "38ecf678-b3c9-4f25-9122-a632b4571715",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f92cdc19-e07c-420a-859e-4369a162d500",
        "cursor": {
          "ref": "c698e67d-4768-448b-a182-d8e40f7981fe",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "38fde383-e317-4fa0-ba03-daab639f5904"
        },
        "item": {
          "id": "f92cdc19-e07c-420a-859e-4369a162d500",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "0cf10b73-d587-4e89-8db8-aa2f63757377",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45ec2b94-70c0-4de0-82f7-e84243ea989e",
        "cursor": {
          "ref": "f56d63e6-2cb7-4c3c-874f-efe97deb649f",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "3291a4cf-00ed-4ef1-b521-7b883cb36d2f"
        },
        "item": {
          "id": "45ec2b94-70c0-4de0-82f7-e84243ea989e",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "f3edb1e6-a63a-4e11-a171-ac2d135c8bdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9089b8ee-2a73-4fc1-bd8e-91591a4ee195",
        "cursor": {
          "ref": "aa41c254-8019-4170-ba06-e19013a40da1",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "9ef6c575-f277-4e61-b448-8a20ff8f1025"
        },
        "item": {
          "id": "9089b8ee-2a73-4fc1-bd8e-91591a4ee195",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "7ea3c7d3-dab0-4a22-8554-03b4073571f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "739b9022-b640-4e2a-bba3-72523cf44424",
        "cursor": {
          "ref": "3fa6c18b-06b9-452b-adcf-4097f46e85b3",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "753e79c0-75e0-4aee-a493-13146d1744ee"
        },
        "item": {
          "id": "739b9022-b640-4e2a-bba3-72523cf44424",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "4b7f195b-8263-40a8-ade1-c86684ecf7f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "587c6218-628d-47e1-8a09-bd3d831599cb",
        "cursor": {
          "ref": "cfff9b46-0883-44b8-a220-0cc28721565e",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "de70c9f4-55e2-4109-b1f8-c6639f6d97a2"
        },
        "item": {
          "id": "587c6218-628d-47e1-8a09-bd3d831599cb",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "e90afbad-45b0-4f3b-96be-b6261b40a515",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "750f0fd1-ecb0-4f73-a0a7-e330a1b5314c",
        "cursor": {
          "ref": "c5cc11d0-58c5-4f43-968b-56ea857405df",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "53534a7e-b434-4961-a49d-bc0119adb3cf"
        },
        "item": {
          "id": "750f0fd1-ecb0-4f73-a0a7-e330a1b5314c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "184a8593-7e3c-4182-9b35-b4e3b6695c6f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a4dda28-55c0-4d7a-843a-47f6fb4b7f2f",
        "cursor": {
          "ref": "6f331163-b82c-4959-b574-504dc5d0ecd7",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "63b31cdb-89e4-42a4-bc3d-a7776c67b654"
        },
        "item": {
          "id": "3a4dda28-55c0-4d7a-843a-47f6fb4b7f2f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "6c2a2a3d-596d-476d-8555-67f98c3ffb5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05b4778e-6ee1-4d30-8921-918566382ab1",
        "cursor": {
          "ref": "0538b241-4be1-46d3-b63a-cb84d09d1aa7",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "9c3693ea-e85c-4515-b1d1-e930476645e5"
        },
        "item": {
          "id": "05b4778e-6ee1-4d30-8921-918566382ab1",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "07433042-68db-47af-b22d-04291994154a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6627317-948a-4c7d-b23f-688cbc883e69",
        "cursor": {
          "ref": "c8db73df-7451-4917-a0f4-1d9da5b19af3",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "c209b731-1423-41dc-ab62-f77036cc7e1c"
        },
        "item": {
          "id": "b6627317-948a-4c7d-b23f-688cbc883e69",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "6fd7c319-0be7-4ff7-a572-1d9498e1045b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7711671b-a608-4bcc-99e0-db23f28f4ece",
        "cursor": {
          "ref": "54c487bc-20cf-432a-806a-65d94d18ffa8",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "17b82002-5b60-4c10-91c0-23d0b01cd4e8"
        },
        "item": {
          "id": "7711671b-a608-4bcc-99e0-db23f28f4ece",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "42c22ac7-963b-401f-bc82-3a5e61f0375a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef9ec83f-f3ef-436e-b72f-defafd3d051b",
        "cursor": {
          "ref": "f1298323-f89c-48d8-a8de-a0b1823cca82",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "da1f18dd-83ea-47a0-8e3b-56ce7941464f"
        },
        "item": {
          "id": "ef9ec83f-f3ef-436e-b72f-defafd3d051b",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "0d549b12-90e3-4a34-b91a-1aa78e04004c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb0ee905-acac-409f-be06-ef9e9cf40411",
        "cursor": {
          "ref": "44781845-e7c5-4139-b9f0-ecdd20998cdb",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "a03b284b-5c92-47a7-b2f0-3463a76ae036"
        },
        "item": {
          "id": "eb0ee905-acac-409f-be06-ef9e9cf40411",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "a3484958-0f1b-44c5-bc8f-4df5f5f02852",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "9a72c80b-9c3b-494b-90c3-810fce828bf5",
        "cursor": {
          "ref": "cf0c657c-8b2e-40f3-a6eb-d3aedc0d5f15",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "c20a473a-ec8f-435c-8982-1dc89dade072"
        },
        "item": {
          "id": "9a72c80b-9c3b-494b-90c3-810fce828bf5",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "f6c7f0e2-9bc9-4b3d-b17e-e4dd07cc84fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a95b2ed-6df5-4283-a4e5-c81ad9a1a326",
        "cursor": {
          "ref": "cb0d35ba-6204-4cdc-8c2c-83c0eb34dfd6",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "de66dcc1-7a42-423e-bf90-639954de021c"
        },
        "item": {
          "id": "7a95b2ed-6df5-4283-a4e5-c81ad9a1a326",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "155bd024-0519-4237-89ba-884ef06d93f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f29d590-6223-4c41-80e4-6ee9229d4863",
        "cursor": {
          "ref": "2f04773f-e712-4e10-a629-b9bff4543087",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "865d0fa8-d0e5-4419-954f-85783dbf5814"
        },
        "item": {
          "id": "4f29d590-6223-4c41-80e4-6ee9229d4863",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "845b03d4-7bac-4371-afc1-73431d2d8c31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ccb632a-3f3c-4371-97b9-c9fec4e62101",
        "cursor": {
          "ref": "a0380c29-d09a-414b-ac03-5976e90c9305",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "53f2b1b3-7b24-49e5-b960-037a672886be"
        },
        "item": {
          "id": "4ccb632a-3f3c-4371-97b9-c9fec4e62101",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "e43083a6-3ca3-4dde-860b-76c92a3558cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce58ee5f-6a81-48cb-8b61-0aa5033f7e29",
        "cursor": {
          "ref": "2a9faaa9-266f-48f0-8dbf-2a0f45f93508",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "ce1e4677-5aec-424c-b568-1782cbf4d794"
        },
        "item": {
          "id": "ce58ee5f-6a81-48cb-8b61-0aa5033f7e29",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "875ebc14-5adc-4c29-acb0-86c3582dfda2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5b4c9de-d5b8-4112-ac97-4ae62662f5ca",
        "cursor": {
          "ref": "90023981-c5c0-4d3b-a6f2-4f1c2bc41f8b",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "3c83f5cf-07b4-49fa-b206-4ba1711d62ce"
        },
        "item": {
          "id": "b5b4c9de-d5b8-4112-ac97-4ae62662f5ca",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "abdac104-0f88-4e9c-a60f-edcf6225ff2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8149d55a-98f1-4339-97e7-22ac8cd51794",
        "cursor": {
          "ref": "a25422d6-6b07-48db-b336-029e9838d9f9",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "a389bed5-0484-4882-a672-b289803495f3"
        },
        "item": {
          "id": "8149d55a-98f1-4339-97e7-22ac8cd51794",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "158514f5-83e0-4986-84bc-d577ab95671c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84488cb3-e452-43f9-a8c1-33633e28bd21",
        "cursor": {
          "ref": "1b9a8208-505c-4958-86d2-1aad9ef6ba86",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "5e75777c-dda9-4222-9427-8d525f567881"
        },
        "item": {
          "id": "84488cb3-e452-43f9-a8c1-33633e28bd21",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "79bf533c-ffc3-429d-ad0a-1196578620a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7403851c-9abc-4bdb-9dea-896b5f8e26c9",
        "cursor": {
          "ref": "38a18e35-7173-4b7d-bce8-fb9f54a86523",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "ce86def4-b194-43d1-a2f5-735597fffcd4"
        },
        "item": {
          "id": "7403851c-9abc-4bdb-9dea-896b5f8e26c9",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "c045367c-cd18-41ba-a91a-09a4b69ab2d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94a51e32-be68-4f96-a732-dfb3e408ded1",
        "cursor": {
          "ref": "5a00f1dc-8926-4fda-9c55-5bce249629fd",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "6c843488-18ec-4bd2-ba51-86b54ac3f27c"
        },
        "item": {
          "id": "94a51e32-be68-4f96-a732-dfb3e408ded1",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "4cb052fe-d049-4d88-bb24-f366de4f73e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74346104-9a45-4a47-a710-6f49d735cbe1",
        "cursor": {
          "ref": "1779f617-9634-4e39-93fd-ad15bd81fea3",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "583dd692-26ef-4062-8efa-95c1cb15cf56"
        },
        "item": {
          "id": "74346104-9a45-4a47-a710-6f49d735cbe1",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "d529fb00-dcdc-483b-8000-fa6337f5697b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bdf7e74-695d-4fdf-9b5c-051e3fdefa08",
        "cursor": {
          "ref": "5f5a239f-cd17-4220-963f-68c671bb23d8",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "573d9004-9006-44c2-afa9-a4ca01a66558"
        },
        "item": {
          "id": "0bdf7e74-695d-4fdf-9b5c-051e3fdefa08",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "34879fcb-dec6-4c5a-862b-ae308ef4f19b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a75ba77c-6ab6-4417-9e21-0ee25a6c68cc",
        "cursor": {
          "ref": "0e4f7b04-3158-430f-be63-f67785eae750",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "8b84629f-6234-4532-9836-a1d7401f7e16"
        },
        "item": {
          "id": "a75ba77c-6ab6-4417-9e21-0ee25a6c68cc",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "83cd0c2b-76ab-4bea-b21b-f29078b3e6c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07a07d56-5e25-49d1-bba4-cd80e1f73d0f",
        "cursor": {
          "ref": "3393efc9-cbb9-4794-9749-33d56f1b95d8",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "47e3a550-3be9-4691-864a-36de9750781f"
        },
        "item": {
          "id": "07a07d56-5e25-49d1-bba4-cd80e1f73d0f",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "df7117cf-c6d0-48ed-8aa1-eaed6bf4e7c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82db97b4-cca9-438f-94a1-9584969ea894",
        "cursor": {
          "ref": "290a690f-231b-4f20-a848-26df2298acf4",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "26921f0d-d956-4cb7-a8db-b8612a88556a"
        },
        "item": {
          "id": "82db97b4-cca9-438f-94a1-9584969ea894",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "0f39e1b2-b364-4f88-980b-414e7a7084ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cb36091-8337-43de-a443-c914a9c09c6c",
        "cursor": {
          "ref": "f6815372-f299-4530-bc36-96dc83380b51",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "33c6021b-b4c4-46de-8daa-9e1cc0d4294d"
        },
        "item": {
          "id": "7cb36091-8337-43de-a443-c914a9c09c6c",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "80a9a845-9dc3-4292-8334-e66cbdb8ee2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb83207c-d273-4170-8233-5a094c1950c6",
        "cursor": {
          "ref": "1fb73337-997d-41c9-8de7-8c89b157c426",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "d1a32f7f-a1a3-46c5-9929-dfbc3fdff7cc"
        },
        "item": {
          "id": "cb83207c-d273-4170-8233-5a094c1950c6",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "d195af46-3eb6-4a4f-9201-da529d3b9fcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dea454db-7239-4e9b-a10f-cff2bbf7efdd",
        "cursor": {
          "ref": "9be81037-608c-40ef-ba49-6baa7d060015",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "6d1fac65-723f-40d4-9170-bf65b39c14e9"
        },
        "item": {
          "id": "dea454db-7239-4e9b-a10f-cff2bbf7efdd",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "6c4f2a94-0944-4dfb-8177-2c81e4f66d84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc60bf40-a0cd-4550-9cbf-87de2f256407",
        "cursor": {
          "ref": "82dc3976-232f-402a-92c6-d172f20a0e7a",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "e6486e96-d66e-4f2c-b3f7-a88a68d19f96"
        },
        "item": {
          "id": "bc60bf40-a0cd-4550-9cbf-87de2f256407",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "5f5591bf-58e0-4e0e-8338-a0a99511050b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e67f9ec-3c1b-4df9-a38a-ce7841da636c",
        "cursor": {
          "ref": "4369bcc7-1da4-4057-896c-2c78e9243ed0",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "7b49eb53-e48d-46ae-8e18-96f214e94940"
        },
        "item": {
          "id": "6e67f9ec-3c1b-4df9-a38a-ce7841da636c",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "9f81c854-df91-487b-9135-7a541cbcee3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e25dfe24-3253-495f-9421-066c8226a073",
        "cursor": {
          "ref": "ae62e00f-0b74-47ea-8888-b1a62911fc49",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "69979187-7fb5-42b5-8722-c71b2e4530f3"
        },
        "item": {
          "id": "e25dfe24-3253-495f-9421-066c8226a073",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "193cd78c-97a2-44fc-8e3c-dcb72554c5a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce0f4055-acfd-4453-ab09-c0ac1b6e2c63",
        "cursor": {
          "ref": "2fc556c5-b476-4bb6-abce-b0e8d790cf06",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "028bd333-0e51-4450-9586-a76b14c6fdbf"
        },
        "item": {
          "id": "ce0f4055-acfd-4453-ab09-c0ac1b6e2c63",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "66655b67-8f72-4a87-9af8-5f4377c8d035",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dedb39f-b741-4750-ad12-708bf8523b3b",
        "cursor": {
          "ref": "908de750-df13-4888-abdb-2b870053eaba",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "ef9d0851-79e4-4b9a-a44e-cd379ec6f5ef"
        },
        "item": {
          "id": "0dedb39f-b741-4750-ad12-708bf8523b3b",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "f2b156fd-4c4c-4f91-8e73-5ede990844c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29919e31-00e6-4657-8790-494a72c8dff9",
        "cursor": {
          "ref": "4f554ba9-ff5f-4f53-b2ff-927edae46c0a",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "6c6302a8-a087-41d1-bdc5-8435e2afaa94"
        },
        "item": {
          "id": "29919e31-00e6-4657-8790-494a72c8dff9",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "89acad3c-8f82-4a1d-9c26-5b6830b16edd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d97a881-b9f8-422e-a819-8d28b98c76ce",
        "cursor": {
          "ref": "de0552da-cb3d-4c07-bfbf-4eae9fad6b4e",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "fc7e1e8c-37ae-4615-b918-5805790ce875"
        },
        "item": {
          "id": "3d97a881-b9f8-422e-a819-8d28b98c76ce",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "1745c271-8470-4958-95f3-d297e3df0d0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad5da704-27ed-4a5f-9b7e-f4a53e792f43",
        "cursor": {
          "ref": "db991adb-3c23-44f6-b967-92600bb9f7c6",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "d1d4661d-afb6-47fb-a2a0-b8a1965b0fac"
        },
        "item": {
          "id": "ad5da704-27ed-4a5f-9b7e-f4a53e792f43",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "4ba0157e-3cd7-456f-973a-9f781dae86cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7157d424-82bc-4226-803d-0f334c710fcc",
        "cursor": {
          "ref": "ddd6bb59-602f-425a-9984-fd97d48ceaef",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "16cd5122-f82e-49f9-9702-67e2aed0eeb1"
        },
        "item": {
          "id": "7157d424-82bc-4226-803d-0f334c710fcc",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "439efdfd-dec2-4704-b346-998ebdb5d840",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00cdaa79-65ee-42e0-8abf-c792cad74a5d",
        "cursor": {
          "ref": "1d12eab9-4511-4bb4-a62c-58bbc3195664",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "6fb24520-83d2-46e7-995f-ac7d45b8e412"
        },
        "item": {
          "id": "00cdaa79-65ee-42e0-8abf-c792cad74a5d",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "d654ab4f-e2ef-401f-bba8-68141c21e5e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3307d0d3-48ab-4145-ac17-359a8afa62cb",
        "cursor": {
          "ref": "3eee29a0-4763-44bf-8730-357f5c5ec7c1",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "47863b98-8520-4ddd-850c-be1ea7c127e7"
        },
        "item": {
          "id": "3307d0d3-48ab-4145-ac17-359a8afa62cb",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "f914310d-d208-4d23-9fbd-e5e130e24492",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cba1cc92-d06a-4c05-b810-1c340a932322",
        "cursor": {
          "ref": "01456e90-db9d-44f1-ad16-64ec321b08ea",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "438d7b7d-e9e6-46fd-af74-c43daa872202"
        },
        "item": {
          "id": "cba1cc92-d06a-4c05-b810-1c340a932322",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "c9a8a43c-7939-472b-8b05-233feedb103f",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "4a00433a-7420-4327-bd09-a02a472d535c",
        "cursor": {
          "ref": "a059453d-618b-46fd-95cd-dd2f8f0d530e",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "351283e6-914b-4e03-89c3-fdab4e597658"
        },
        "item": {
          "id": "4a00433a-7420-4327-bd09-a02a472d535c",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "a0649e37-88ac-4115-8831-58690f9e3f91",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "aa7e4d0e-472f-41d2-a23f-9426f552a2a0",
        "cursor": {
          "ref": "635fb34f-49a4-40fe-961f-118bc5daf8a3",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "4d847148-e88a-4065-b1a8-ce7b881f1fe1"
        },
        "item": {
          "id": "aa7e4d0e-472f-41d2-a23f-9426f552a2a0",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "8b1ad3a1-cf8d-4cc4-b7f7-9bc6acc290c3",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "b6150716-2fcc-469b-9dd2-32333c25a5d4",
        "cursor": {
          "ref": "dcc7939c-024e-4beb-b26b-bae387174ab8",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "e79b99e1-53b6-4457-b0fd-259b56cd0339"
        },
        "item": {
          "id": "b6150716-2fcc-469b-9dd2-32333c25a5d4",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "8dd2c457-b5a5-4205-8962-ba47c7c6d9c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72e33bcc-938b-44ac-92c9-8c4e5a5dda6f",
        "cursor": {
          "ref": "a4e6ffba-6959-40e9-bd0a-81061741c14c",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "1d413c41-0618-4b19-ac85-a74f6a6ecfc4"
        },
        "item": {
          "id": "72e33bcc-938b-44ac-92c9-8c4e5a5dda6f",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "dbc122cc-afe0-452e-ad59-3cfa36687e04",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "1420c847-1133-42cc-adf5-df2913778aa4",
        "cursor": {
          "ref": "a84270b6-514d-4dea-890a-61286864736b",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "c5173f9e-0274-4ddc-87c9-91f4d45ff058"
        },
        "item": {
          "id": "1420c847-1133-42cc-adf5-df2913778aa4",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "9b41729f-7380-4f48-91dd-1256af1053c6",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "03601f1e-d859-4602-a4a3-e3a0bdf6a576",
        "cursor": {
          "ref": "98ccec41-1b9a-4176-bb7c-61153d41ef52",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "f8afdb2b-23f2-496f-a77f-873288ae5e36"
        },
        "item": {
          "id": "03601f1e-d859-4602-a4a3-e3a0bdf6a576",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "3c08bdeb-a0e9-408b-9a5c-2c5266cabc2f",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "e98fa93e-e66a-4ce4-b0fe-ee3fbf74f8ea",
        "cursor": {
          "ref": "309f175c-5124-491a-bb52-feb1dd70da6b",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "2f0bfffb-d119-4900-bee9-05ece6c9d961"
        },
        "item": {
          "id": "e98fa93e-e66a-4ce4-b0fe-ee3fbf74f8ea",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "48dbe7ee-cc9e-43fb-961a-814b763ea760",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "5c229cd6-c18c-4754-a59b-fe0a75683314",
        "cursor": {
          "ref": "9fb78604-615b-43c3-988a-213357399cfa",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "cd9cba83-7247-484e-85b3-3abc4014c02d"
        },
        "item": {
          "id": "5c229cd6-c18c-4754-a59b-fe0a75683314",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "fb112bdf-98ae-4b42-81d5-8ec6a3179c2a",
          "status": "OK",
          "code": 200,
          "responseTime": 188,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "27152df1-7b4c-4c6b-91dc-504c12ba0c71",
        "cursor": {
          "ref": "598ba0a0-f80e-47eb-8213-92c180b9d2c0",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "e5b1b322-270c-4ccb-8152-c537ccfb3973"
        },
        "item": {
          "id": "27152df1-7b4c-4c6b-91dc-504c12ba0c71",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "96e5a1a2-ae47-4753-8471-8488c8d4e3a4",
          "status": "OK",
          "code": 200,
          "responseTime": 211,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "0e259af6-abc4-408a-a102-84301c69c0fc",
        "cursor": {
          "ref": "f0c010a0-2fe8-4cec-b707-2ffc612acf83",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "8d909945-ef84-4fef-86d5-eaf7b9081559"
        },
        "item": {
          "id": "0e259af6-abc4-408a-a102-84301c69c0fc",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "300c16fe-b435-4a68-ba70-2b06d0a7032d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "787e17b1-1166-4d58-917b-c8695cca1a78",
        "cursor": {
          "ref": "497bcb2c-3b47-4830-aaff-4a9c5391ed40",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "754b80fd-5fa1-4cbf-bd71-9416f7da5c6b"
        },
        "item": {
          "id": "787e17b1-1166-4d58-917b-c8695cca1a78",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "cb6916d8-5d31-417a-8861-704df4f668fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2284ef7f-1c2b-4148-84f7-bcba496db502",
        "cursor": {
          "ref": "1b584b52-9ae3-4c4b-982f-ef6d272e25c8",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "e5699cea-c206-4228-bd10-a74c25b2b5ad"
        },
        "item": {
          "id": "2284ef7f-1c2b-4148-84f7-bcba496db502",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "f9ec1170-1e47-4b19-86d1-16723adeb710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c2a3c91-0e32-4815-a9a3-cb77ece830bc",
        "cursor": {
          "ref": "7ca66846-0d04-4a79-858f-2cb608b1d048",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "e2822429-8e33-421b-a5e8-15ff66067f21"
        },
        "item": {
          "id": "7c2a3c91-0e32-4815-a9a3-cb77ece830bc",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "a1d499bf-0349-437a-8a7c-b79542b81873",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55932b69-d455-4e6b-b5bb-7e92b33ac3f0",
        "cursor": {
          "ref": "c8c09de8-3ef9-49e5-8256-9a46183c6f3e",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "3876d6d6-0ce9-4b38-a857-18fb18795ca2"
        },
        "item": {
          "id": "55932b69-d455-4e6b-b5bb-7e92b33ac3f0",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "f7d33528-380f-4265-b570-9408708c0b44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d950ba0c-8312-442b-b62f-3ce2b3c22a10",
        "cursor": {
          "ref": "3cadcfc7-8d1a-4631-941e-1a3bf3309371",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "41e66bdf-eec6-401c-906c-472986cadea8"
        },
        "item": {
          "id": "d950ba0c-8312-442b-b62f-3ce2b3c22a10",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "41cc0e39-0c78-42c1-8fd9-7184724d6d0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a0d83c5-f9d8-4169-92b5-8d8bde620db1",
        "cursor": {
          "ref": "6a898cf3-26b7-4c6a-a367-e805eb960ded",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "d23f77fa-ce0c-4597-b226-b6e475a212e9"
        },
        "item": {
          "id": "2a0d83c5-f9d8-4169-92b5-8d8bde620db1",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "fa38bd5b-057b-4dd9-992e-f32a5885ae76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44fa20b4-bb4a-4a69-8d93-3b93f4928b39",
        "cursor": {
          "ref": "90594925-10cd-49af-a2de-d11a592d32d0",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "d43351b1-8406-47e1-811c-d069c45494f6"
        },
        "item": {
          "id": "44fa20b4-bb4a-4a69-8d93-3b93f4928b39",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "cd3c8dad-8276-4c7d-b085-daa8bd6a8dcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45724bad-6170-4e32-ba8d-9872b3a56906",
        "cursor": {
          "ref": "b9fdb7e6-ac7a-40bc-b18f-b4bdf9c599cb",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "b1242719-dc46-4842-ac69-b48c3542a230"
        },
        "item": {
          "id": "45724bad-6170-4e32-ba8d-9872b3a56906",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "f0e3cb1f-cc53-4495-89ce-786c16995cef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "223a0d04-660f-474d-a643-0c49b8785c41",
        "cursor": {
          "ref": "280f442b-4067-4b73-943d-64ca97069914",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "710ea6a4-2104-433f-83fb-6b6081c326bd"
        },
        "item": {
          "id": "223a0d04-660f-474d-a643-0c49b8785c41",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "b9c80f68-7512-40e4-9971-128047eafa8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f6dfbd1-e9ea-455a-a384-bde7c852f192",
        "cursor": {
          "ref": "8d5229b0-2adc-4e2c-a3ed-c29620760402",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "c58ea5a7-519a-4245-9f74-d47f466b1a5e"
        },
        "item": {
          "id": "9f6dfbd1-e9ea-455a-a384-bde7c852f192",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "611900ef-4164-4a66-a935-8d2248bf2f7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67d462d3-ebb0-487f-af6c-9db9fa311c2d",
        "cursor": {
          "ref": "131485a1-a7aa-4c57-a8dd-d9e10552493f",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "073e2f16-a432-4693-beab-7a6f0af6660d"
        },
        "item": {
          "id": "67d462d3-ebb0-487f-af6c-9db9fa311c2d",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "6ca225ca-3b8a-47e3-8395-fefb787463f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd03d8c3-7347-4dc2-861e-0ad1d82ffa44",
        "cursor": {
          "ref": "38b33de2-fcc1-4dd6-a92e-27a7a1443549",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "d54dec3b-3c2a-49fd-b9b3-11f54454edeb"
        },
        "item": {
          "id": "cd03d8c3-7347-4dc2-861e-0ad1d82ffa44",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "c791c1ce-71f6-45ed-9b77-52308d977fe8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d797a85-2c66-4cd3-8fd2-2e86cdca88e0",
        "cursor": {
          "ref": "9066e833-bfc8-4ae8-9010-95220a286551",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "4bd8ec96-5216-4b97-af36-cfa2cf5cc0b3"
        },
        "item": {
          "id": "3d797a85-2c66-4cd3-8fd2-2e86cdca88e0",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "a0e8f2da-2b1c-4661-9662-681cbe928bd4",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "d5acfca0-9b2f-4f58-b7ff-4ee30e81cf2b",
        "cursor": {
          "ref": "46f49a3e-ed69-429e-a414-9cf4cba4e084",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "a69736f9-69e3-4cb7-a078-e8f2a1282db3"
        },
        "item": {
          "id": "d5acfca0-9b2f-4f58-b7ff-4ee30e81cf2b",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "d6b92c46-6cb4-4096-b113-c6c2bdce52a2",
          "status": "OK",
          "code": 200,
          "responseTime": 240,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "9fe28506-fdab-43a7-887b-1f47efd67904",
        "cursor": {
          "ref": "4e26e6cb-e2eb-4503-8069-c4201694ffb6",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "2d954024-ebcb-4391-8963-cc43da6db5cc"
        },
        "item": {
          "id": "9fe28506-fdab-43a7-887b-1f47efd67904",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "34672bba-ab45-4519-aa6c-b9f028bbe93b",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "57f3808b-3233-4899-81b9-fa0c2a11cc68",
        "cursor": {
          "ref": "91214118-d9e9-4f10-8c8c-73dc6b367326",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "ecef8cd6-b498-41aa-98f3-a7ca80717cd8"
        },
        "item": {
          "id": "57f3808b-3233-4899-81b9-fa0c2a11cc68",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "626649d2-bb1d-4ea9-982b-129c075d97f9",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "6a02577f-1b4b-42aa-a093-4de87c4689bf",
        "cursor": {
          "ref": "9bff3b68-eebb-4ce0-b975-3aa242d6d41f",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "a3f8e5a0-b71a-48d9-8604-4c6a4c29663d"
        },
        "item": {
          "id": "6a02577f-1b4b-42aa-a093-4de87c4689bf",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "da5a71db-a386-4e81-bf70-dd546a60cfe8",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "70dcb63c-b496-407f-bd30-aa90893509b8",
        "cursor": {
          "ref": "878c1b33-f84a-4471-8a6c-04ac3baa326b",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "cd29e204-f720-4f3f-9e90-6f841486582d"
        },
        "item": {
          "id": "70dcb63c-b496-407f-bd30-aa90893509b8",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "eca8b830-e8d1-4423-8317-cbce26cebd4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2a57d71-6605-4fda-9f1b-af34a8008da3",
        "cursor": {
          "ref": "e5cfae08-74b1-4582-9ccc-96ccb865c5cd",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "75db5193-819b-4615-bf39-2800f47eb7a3"
        },
        "item": {
          "id": "c2a57d71-6605-4fda-9f1b-af34a8008da3",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "efcfce85-6b21-4d86-b758-6818d2e38dfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "040e99ac-e37b-404d-ac75-c8745ca289d2",
        "cursor": {
          "ref": "3f640823-172a-4b3c-b0b4-5c7c126e91aa",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "02bb2d92-8183-403d-8714-ca44c790a188"
        },
        "item": {
          "id": "040e99ac-e37b-404d-ac75-c8745ca289d2",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "3b532d27-7eef-4ee8-ac72-ceb427ca6d51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95b30a4e-26a5-4a21-95d5-54560fb3a823",
        "cursor": {
          "ref": "ce92c40b-4086-466d-9543-4775e58f111d",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "5abd102e-2978-4a68-b5a1-18c6c4c59911"
        },
        "item": {
          "id": "95b30a4e-26a5-4a21-95d5-54560fb3a823",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "6b86e803-9892-4a26-82bc-5fe7dfd57dca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00e0cbde-6d66-4c0b-8329-700d7cff9f33",
        "cursor": {
          "ref": "fd9b5989-6888-43fb-b5e9-201fc36b6ff2",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "32fddbcd-4f00-4133-86d3-0c74a5191656"
        },
        "item": {
          "id": "00e0cbde-6d66-4c0b-8329-700d7cff9f33",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "2479c0a6-51af-4616-9416-bbadada34f39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c89857b7-937c-47ea-843b-ccd9f2293025",
        "cursor": {
          "ref": "8e42eabd-12d3-4ee5-b5c9-e6b8d3cbb601",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "0411b40a-5e70-4aaf-be3a-5fe45831dc65"
        },
        "item": {
          "id": "c89857b7-937c-47ea-843b-ccd9f2293025",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "96aa8680-6cdc-479c-ae48-bf4f2efad474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9ace84f-5586-47d5-b10e-4a3dc53b4307",
        "cursor": {
          "ref": "ac9e111e-b12e-4452-9e2f-87cf8dead147",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "7d90e6b0-4bc3-4085-a886-505b72b829e5"
        },
        "item": {
          "id": "e9ace84f-5586-47d5-b10e-4a3dc53b4307",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "bdc2f848-e2a7-4171-aa48-7a9071cda709",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "938c5160-8db8-438f-824f-e01214035a88",
        "cursor": {
          "ref": "0755a7c7-3a0d-4acb-8730-ea914fa41492",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "56cb5915-f2d0-48cc-8233-ef20a989a349"
        },
        "item": {
          "id": "938c5160-8db8-438f-824f-e01214035a88",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "20d5bf00-13e7-4dd2-86cc-978762cf961e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c8a257b-e427-4447-b2b2-609fc722bc3f",
        "cursor": {
          "ref": "573ebf4a-e1ef-46c4-af69-a3e042b4530f",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "8e85d834-16f9-4746-8831-56133c929966"
        },
        "item": {
          "id": "9c8a257b-e427-4447-b2b2-609fc722bc3f",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "011a4546-c70b-4885-a745-84ce06c46d7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69067cc6-1a52-491c-84c7-eadca5615ae3",
        "cursor": {
          "ref": "717f51e9-ea5b-46b4-bfa4-83ba641d254b",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "295560d3-3a35-4ebf-a8d7-49732f9dc878"
        },
        "item": {
          "id": "69067cc6-1a52-491c-84c7-eadca5615ae3",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "69cf5ee6-1b86-4b9e-8ecb-d5bf0ae15da8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "991bfd52-4c2b-4d3b-863d-384607c4148b",
        "cursor": {
          "ref": "9a01626a-8788-4046-b714-7e606277f219",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "358255cc-d5b5-41ef-8c1d-16325e3a9470"
        },
        "item": {
          "id": "991bfd52-4c2b-4d3b-863d-384607c4148b",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "52cb3918-17f6-4db7-8b66-3a5aa2413f6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "040bcac2-7ff6-4ea3-aa57-be9fe88038a4",
        "cursor": {
          "ref": "1e0e6aad-1136-479d-ae0d-c9f57741a085",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "df10d774-3c47-48a4-9945-826ec8aa03ed"
        },
        "item": {
          "id": "040bcac2-7ff6-4ea3-aa57-be9fe88038a4",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "168179c8-3308-44ee-b4c9-fd5a8d1a550a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "511a1e12-00cb-4311-bd68-07968befe812",
        "cursor": {
          "ref": "14e60873-c75c-4368-8bbf-6075a3bcf811",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "be5afa3c-e664-46ff-abbf-2303beed6ea1"
        },
        "item": {
          "id": "511a1e12-00cb-4311-bd68-07968befe812",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "9f0c6355-1fa8-41df-875a-28a95fc7bcd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4f7cb7d-307e-42c1-8990-9c8bd9335348",
        "cursor": {
          "ref": "1c295a18-958e-4769-9756-e705bd1c4044",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "ad59f1bc-746c-448b-bb13-e483580e9caa"
        },
        "item": {
          "id": "b4f7cb7d-307e-42c1-8990-9c8bd9335348",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "8478adf2-2382-48ff-ad32-2b0c18f9e85a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "650c1175-eb10-4dff-b221-d546a24430a4",
        "cursor": {
          "ref": "03886684-feba-4491-bcd0-5d877246900d",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "d2ede316-fe6e-40be-afe1-5557e41eba92"
        },
        "item": {
          "id": "650c1175-eb10-4dff-b221-d546a24430a4",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "bbf3b467-056d-4f66-83ea-7abda4ce701f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9256f270-f502-477a-a401-d0249034cc79",
        "cursor": {
          "ref": "710f1103-0d9d-4311-8451-91c26c19dc16",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "88c65027-8ae4-43ca-a89f-b2d21c8ac1b2"
        },
        "item": {
          "id": "9256f270-f502-477a-a401-d0249034cc79",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "885379eb-c3e1-44cd-bb42-97cf138e86af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4620c17c-02ed-4ef1-bb67-8fd7d1826b53",
        "cursor": {
          "ref": "056eb505-8c73-4499-865d-6bd79de2bc21",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "9b0937f8-33b4-4840-a6ed-9579028e3f11"
        },
        "item": {
          "id": "4620c17c-02ed-4ef1-bb67-8fd7d1826b53",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "833a46dc-364a-4faa-a927-9f7a4c718abe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ddf3d9e-0214-46df-94de-ef46474c1eda",
        "cursor": {
          "ref": "65940390-ba6d-4132-8032-e9ac5c573088",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "d27de3ae-7fc8-430f-8e5e-bdf23336fd37"
        },
        "item": {
          "id": "6ddf3d9e-0214-46df-94de-ef46474c1eda",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "bd338a87-9992-4bfe-9020-c409d350f501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acfc7efe-5b52-47a7-b5fe-b13e59ab7c34",
        "cursor": {
          "ref": "d20d36bf-d5ee-4a62-80b1-707ebc1a4ec7",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "7e25850e-8389-402b-9ed0-6a22eae80251"
        },
        "item": {
          "id": "acfc7efe-5b52-47a7-b5fe-b13e59ab7c34",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "085d426c-1e35-4939-95f6-533b6d9b7d5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fdfcaa4-c546-4694-b79e-187780eb5181",
        "cursor": {
          "ref": "cfce74e8-158d-4364-ba66-91077c416eef",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "68405ef7-1735-4d57-af29-dec648eab9c1"
        },
        "item": {
          "id": "4fdfcaa4-c546-4694-b79e-187780eb5181",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "3a75d3cd-8fc7-4455-87ac-37355c04da0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12078043-5830-4dff-8def-1744f2fd27ff",
        "cursor": {
          "ref": "1a9ca752-7b5c-48bd-a0ff-793d250ce41b",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "24595105-f37f-4c21-8ec1-056a6b2b94e4"
        },
        "item": {
          "id": "12078043-5830-4dff-8def-1744f2fd27ff",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "6342fe70-387d-4ecf-856f-beacfd6b334a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "913210b4-af55-4007-884e-e7e8f94e8d9e",
        "cursor": {
          "ref": "a759b783-b73c-463d-ac74-4d2885ee38a8",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "998fa466-787b-4879-a622-bf7e3757d1a2"
        },
        "item": {
          "id": "913210b4-af55-4007-884e-e7e8f94e8d9e",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "f813f49b-9429-4c45-970d-fe5787fa07f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0387066b-9f2f-48ba-a3ff-5cb5d27e6df8",
        "cursor": {
          "ref": "fe5e7457-c849-447f-b346-d3fb378deb8b",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "a62fce49-bc7f-4523-9235-658278d25bbd"
        },
        "item": {
          "id": "0387066b-9f2f-48ba-a3ff-5cb5d27e6df8",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "996ce8b2-3e0f-4dd1-a617-4e0aa17a6074",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d31ecb48-b3b5-41df-a83c-dd82d55e5ace",
        "cursor": {
          "ref": "f522730f-6a65-49f2-8c90-2f2dbafcb1b3",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "9e8daf59-ca0d-43bf-a303-154cdef0170f"
        },
        "item": {
          "id": "d31ecb48-b3b5-41df-a83c-dd82d55e5ace",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "5cdb8fdd-8bed-4c3e-a6ab-257cae67cf23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14293d68-7c05-47d4-80b5-b394c0e88375",
        "cursor": {
          "ref": "19fa0f99-aca5-4846-89ae-a3ea457b0479",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "e0d4e03c-ec59-4e53-a131-2ba73c0d5eef"
        },
        "item": {
          "id": "14293d68-7c05-47d4-80b5-b394c0e88375",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "527c9b10-2de0-4e74-aa8f-1efb6ffdc6a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32a3bef1-8742-433c-97d8-76f0bcad44dd",
        "cursor": {
          "ref": "277d493b-2183-4539-9871-531bb1e37cef",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "8f12d2e0-23db-4e34-801d-813337718244"
        },
        "item": {
          "id": "32a3bef1-8742-433c-97d8-76f0bcad44dd",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "c1d244ec-09bf-45d5-a7e6-0937d0419ad4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "485c540d-bd6c-4bb5-847f-e1179938a358",
        "cursor": {
          "ref": "ca225381-40c9-4540-a718-de615e790e29",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "a9633e76-421e-4809-a770-01a7129e4215"
        },
        "item": {
          "id": "485c540d-bd6c-4bb5-847f-e1179938a358",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "a71817f2-37b8-4457-84f9-46b26c9be368",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c06af562-0818-44d6-a72c-d52100603b2f",
        "cursor": {
          "ref": "1797c773-70e2-45a1-b907-ea48fc806735",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "786ac381-c5b4-4e0a-a84b-a9a5747d5d18"
        },
        "item": {
          "id": "c06af562-0818-44d6-a72c-d52100603b2f",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "2fda89d9-ffa5-4b43-b89e-42820450288a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12a33bb3-20a7-4af5-a9a8-b8a086914406",
        "cursor": {
          "ref": "faa4cbeb-f565-44f6-a833-330f648f0ab6",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "0642f73c-e475-4e9f-b51e-4732d458de8e"
        },
        "item": {
          "id": "12a33bb3-20a7-4af5-a9a8-b8a086914406",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "74ae30c0-3153-4477-a9f3-1c7377f1e788",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50498a67-8ef8-44a6-adb6-335f2b16295e",
        "cursor": {
          "ref": "b07045a5-e994-4381-8f16-62fa2f228016",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "fddf120e-77aa-458a-aace-a424e869d7e4"
        },
        "item": {
          "id": "50498a67-8ef8-44a6-adb6-335f2b16295e",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "254358a1-3aa3-4af3-b734-d8b5b26cae3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "271811c5-ec18-4233-8919-25e046084c52",
        "cursor": {
          "ref": "51ab2a82-5595-4968-8efa-421456671a80",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "edb77d57-0a8f-4520-adbf-aee37b0bbcec"
        },
        "item": {
          "id": "271811c5-ec18-4233-8919-25e046084c52",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "5437f267-80b8-4391-aa5f-056b88c05f21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6f4a2ec-a496-46fa-be3a-1baeaa3faea0",
        "cursor": {
          "ref": "f4dbcf90-cd15-4960-82b2-fd12a2b29272",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "aac48b05-08d3-4e1a-a83f-36fdffd456d4"
        },
        "item": {
          "id": "f6f4a2ec-a496-46fa-be3a-1baeaa3faea0",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "98314af3-7690-46fc-a9d8-da130311f3ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51a42f62-7229-4533-b868-ff14817f06e0",
        "cursor": {
          "ref": "1934b7b6-3da3-412b-85eb-ab82a7cc1734",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "57134d9d-630f-4df1-85a4-1764b05ccda7"
        },
        "item": {
          "id": "51a42f62-7229-4533-b868-ff14817f06e0",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "e38a0006-3e6d-421f-9580-fbbeb25701a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aea637f-6906-4444-a1f8-6beea9aa54d9",
        "cursor": {
          "ref": "5b136f7b-d323-462e-92a2-8710d35b3f06",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "d204bf06-846b-41a1-ae58-bc54fa8f473c"
        },
        "item": {
          "id": "0aea637f-6906-4444-a1f8-6beea9aa54d9",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "6da8dacc-b5b1-42dd-84fd-890fa8005ff3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43245171-6ab0-45d5-a105-2bc750a34db5",
        "cursor": {
          "ref": "edf6f66e-12c1-4888-85eb-443fff0b8758",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "e7818e21-ce69-4973-b13a-84a9ee681384"
        },
        "item": {
          "id": "43245171-6ab0-45d5-a105-2bc750a34db5",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "b2d68fad-702c-4656-84bd-840447ba5ae0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bd7feda-f13d-4c98-8374-e47af27acfba",
        "cursor": {
          "ref": "e459eeeb-411a-4300-ad9e-d0a0f98450e3",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "1b40d7c9-8a72-4250-b54f-64786f7c89bb"
        },
        "item": {
          "id": "6bd7feda-f13d-4c98-8374-e47af27acfba",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "12829668-2188-4d21-9fea-490498aab6b4",
          "status": "OK",
          "code": 200,
          "responseTime": 148,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "60bda0a7-9682-40e3-85ab-1e582ca1fdf5",
        "cursor": {
          "ref": "9b0bcf96-ec03-4de1-88d5-6017a1c2e4c4",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "6f1dc202-3258-43aa-8d44-e4994a996173"
        },
        "item": {
          "id": "60bda0a7-9682-40e3-85ab-1e582ca1fdf5",
          "name": "credentials_verify"
        },
        "response": {
          "id": "052b19f9-8f47-4f4c-9098-69d8d285369e",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c0d77ee-76ea-4ac5-b748-9210f9ca8e38",
        "cursor": {
          "ref": "ef7d6b74-6e4b-431a-a3e7-55fcbd241bea",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "fefbd580-dd23-485b-a88d-c13f00e803c6"
        },
        "item": {
          "id": "4c0d77ee-76ea-4ac5-b748-9210f9ca8e38",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "b3b704cb-5020-4b28-b3a3-0ca74881f63a",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "8159420e-5c86-4a43-9ebd-cdae06a63f4e",
        "cursor": {
          "ref": "97c81382-bb61-498c-a8dc-3b13ca181179",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "cb25e7da-4f20-4e65-99a4-cb309f1c195a"
        },
        "item": {
          "id": "8159420e-5c86-4a43-9ebd-cdae06a63f4e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b15af7ca-0020-4a7b-b875-f02fb0f035c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 14,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8159420e-5c86-4a43-9ebd-cdae06a63f4e",
        "cursor": {
          "ref": "97c81382-bb61-498c-a8dc-3b13ca181179",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "cb25e7da-4f20-4e65-99a4-cb309f1c195a"
        },
        "item": {
          "id": "8159420e-5c86-4a43-9ebd-cdae06a63f4e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "b15af7ca-0020-4a7b-b875-f02fb0f035c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 14,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b8823a0-d538-42b1-92c6-d0e88181c906",
        "cursor": {
          "ref": "3fd9ec2e-1bab-4afe-9ab7-90dccb489baf",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "2c055125-3bfa-46f6-a094-c02273f7502a"
        },
        "item": {
          "id": "7b8823a0-d538-42b1-92c6-d0e88181c906",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "028b45ed-70a1-4992-90d1-f1e8b5e510b2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d508e25-7bf8-4c06-b8ff-57a795bd7726",
        "cursor": {
          "ref": "c063aa84-9eab-4b4a-85fc-8fd90ab88f5c",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "b1c4f6aa-37fc-48d8-8760-a1eb2258edd1"
        },
        "item": {
          "id": "3d508e25-7bf8-4c06-b8ff-57a795bd7726",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "bd5d120f-495d-45a5-b699-d51b42a7ad54",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 15,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}