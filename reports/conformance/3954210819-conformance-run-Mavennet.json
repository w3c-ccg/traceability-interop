{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "76a05c42-71ee-4b41-b0a8-6c45c771a87e",
        "name": "Clear Cache",
        "item": [
          {
            "id": "70d9a4d1-3253-4e2b-96a7-726ed6f4f953",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "edfbe90a-c2df-43f0-89c7-e458a32276ee",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d3176c1a-ea42-4c5b-82a0-ce94b7e51d84"
                }
              }
            ]
          },
          {
            "id": "f4f39b35-2304-477e-8edb-6077acbc0470",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b6db7276-c20e-4699-9b88-b5349ccf42f5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3b1d8228-c10e-4e30-ac7d-a0ffc32848bf"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "66857e81-80ff-4542-b05c-209ac4444534",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "55ae8892-4e40-4e74-b2fe-9c1b7371ce5a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2b6ecd32-301c-41d1-96ef-a061232b2700",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "522a5a2c-4f22-4e12-8707-aaae94e824a4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9b2b38d6-4e0d-4bec-beb8-c19f0f22f5a3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "27579e05-cf54-4764-9bac-6a4a5b0280dc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b290c97f-d6a2-4f76-8977-ee589b147c9b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "78270411-3d6f-40ba-8d46-49b7ca29a709",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "366701a2-8664-4bdf-8f72-1051ed6428bf"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "32d04e05-a3c5-4ba2-b9a7-e6c07ff1892c",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "8f65d407-a508-40f3-be91-2b9c2f64bf17"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "19a8ce1c-0f59-45d1-a0a5-6432c796fb01",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6d80ed64-bed5-41d5-ae1a-1626c14f9002"
            }
          }
        ]
      },
      {
        "id": "6e8e632a-e465-4aaa-a891-7b20fb78468a",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "5c2f58ae-7be5-4a2a-b927-73832e11e865",
            "name": "Negative Testing",
            "item": [
              {
                "id": "91e4a781-acb0-465a-ba7d-95419e003b09",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "db5e41b9-fa4a-47c1-9c1f-be0f847d2ad5",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8379195e-575d-47a2-8121-56a994c5da4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "77be6568-7a08-450c-8b6f-d49774c1c98c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a50a7cfb-4947-4bb8-9af6-8e23924ac457",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6dae696-6151-45a0-91e1-46eb30b1e696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "39b1a38d-c55a-4e7a-8a41-9367ad787d58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53840eef-fa33-4278-bb1c-83c465537cf4",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4680c137-8214-4441-bd29-8d4147b614aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "082beed7-93ac-44e8-a27e-edfe47f47664"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "601b49e6-cc51-46a1-a1bb-3e506f0b3ead",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "561d83e5-56a4-44a2-acd9-208b3c37254b",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f82408d7-7c2a-4c3a-badf-4a3251d400b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "86b85582-ebd8-44cf-af6e-328c1c20dde3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15dc32aa-70dd-450d-8626-3d24020157ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d398bef0-17e6-4a6e-bc5d-6ede36282096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17c1435f-5fcc-4791-a2c3-be21d68544c3",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29cbae7f-ca10-408e-8e74-5ae37f94eea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "053fe802-fcab-4efa-b42c-7c35fa71a670"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10c9726f-43e9-4409-bd1f-594ce7d344ff",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "19f8e209-9b90-4a48-b5da-150c9bb79b16"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "97d89df8-2f37-40ff-81e0-72c644e92305",
            "name": "Positive Testing",
            "item": [
              {
                "id": "aad77d5e-e717-4f6c-adc0-746d6d3f549a",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7d28eab8-52df-44ef-b5aa-be32ac58ca0a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "1ddd196b-684b-4953-878b-7cc7e15a1753"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e6861c7e-c8bd-4b01-875e-a12e376bac44",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "c0f15d31-5dc2-4d99-9094-dc56920f1b87"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5c69bcf2-4d23-4be3-a49b-c2f212d6b9e5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7073ae2c-09ef-4941-887c-b23273a7fdd9"
            }
          }
        ]
      },
      {
        "id": "8e9904ee-88ea-42a3-9f45-70add8c6b5ac",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "a8cfa232-e838-430c-9fb8-e539fe841975",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2197276a-c633-44b7-a8f9-fe6e66af3c6b",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "5154a364-45ce-4d19-b2c2-0d791ed5fc81",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fbd62ca-3f7b-4224-b3ea-a7ad662d09fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b73ccdd-4a89-4233-95be-b29a8906a061"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1071b209-0b87-40b7-82f1-4bc73e8ae0db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0eadbedb-a5cf-47bf-bae2-1204f8b73633"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e7a7a4f-9475-4e08-a11b-e200f610a8e6",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d914e928-6ef3-418a-acfd-45ca79cb1a80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73c0e6e1-15ad-415e-9b83-b08e5032fb87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3714cb21-3417-4552-a695-f03f54b6257a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62b2b4b6-31a6-4f57-bbde-7edface66e2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c5c8550-ce19-4dca-be46-8517aa5be37d",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81ecb305-00a9-4469-99f2-902b825ac5d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea5d196b-519b-4abc-ac9f-90b6c0cdeaf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d9aedc7-15fe-47ce-9608-5d88f97938be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "446ab562-ff52-47d2-a417-f7f209738489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47c9c530-ae38-42ea-ba2a-aa9eedae3ea1",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9061f79-64dd-4830-83c8-1adc5a17804b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58995bd9-b313-40a0-83fd-6590630c2586"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b36490a-3db4-44bf-aeff-731d5b046154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6e4ef723-4b19-4994-b0d1-3f5c17926ba6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fdd04c5-f73f-4462-bac2-f4e0191a6b97",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b982c9b5-f479-4218-866b-5966398c3320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c55fc37-fbe7-4795-bf0c-cd564b45cf2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7653f83d-393f-47c4-b04a-c04e0345d4c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6e92f297-8d1c-49f9-bc32-5b36583c1b1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "425cf73a-d05b-4e2e-9034-009d4d4b9ddd",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e217f67c-05fb-44b3-b1ee-58428c9a996f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f806cbd3-2044-465d-b692-b3598f808650"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07411d47-651b-4902-955a-7d4fdeb8e240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4bf834de-38c4-4628-bf2d-7a2a8d05333b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63666b5f-f49b-4348-90d9-804ec83edc00",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "972d4bf1-dc66-452d-a34e-1de5ee241376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "632767a5-7880-461b-8aaf-726d30713d1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d149692-3a5c-477e-a272-f1d31a868881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "52c283f4-bf03-41ba-b734-20849840d720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a6786ac-e040-4b21-8c67-fe81ac9c96bc",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fab7cab-2fc6-4c49-ae69-ec8ab8049dec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "517470f1-b731-4b67-b23a-b9260b197ae5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbe93aa5-52fe-43be-ac0f-2f60f604c82b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1d766ce7-3311-419d-b7bb-9d565ab64f2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62dd067b-9d19-497d-9f66-e5edec742b9b",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b076a81-fc1c-4db4-841a-c8a4fd1a31ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90e7d131-989d-448f-af12-5f45b3c739d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18b19150-e58e-48b4-bbab-d2fe21a9e181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "921c2a94-2675-4475-a48f-6e107ac84401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd9010b9-e276-46e4-ade1-daeb0dc91221",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2c91a2a-3b63-44ab-bece-a44c05e16a01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55832ca4-1db3-4c88-8b66-0503e1c213bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87582fc6-0b54-49d2-bdc5-aa099e5af41a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cdd6defe-201e-464c-98c9-3168b66a6c71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d86de749-67a3-45b8-b924-a96f4f1a1768",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da348aa2-2443-4550-adfa-b2bc36d26782",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f82cefff-d476-47af-ad47-afada44db122"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efc615a4-384a-4568-80f6-f9362bc451d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0596854e-ea8f-4ddc-944f-38e51503a6d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42b54741-2a5f-4cd0-994f-c491654b5964",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "941c1994-f728-4ce1-bbbb-dc81809ea854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57028c4c-0005-412b-b76e-6e303486ece1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e44415e5-f340-4701-8ccf-12e124ce1b75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f2d612d3-1d50-4fd3-86e4-20ce528266ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50ee7e6d-b67c-4fd4-9695-e32b6d403518",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd2b69ad-3847-4caf-925a-52894e387502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9605ce7-eb00-43d6-a0e3-4b3ea087424a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bdb3312-8206-4337-b9cd-ec8befd45865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c1cb40e-cf06-425d-b861-49799aca14ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50168463-eb8b-4524-ba10-faf6cea93572",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc585735-111d-4c22-92c5-2f7aa72bc7dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa779a49-b924-40b9-8328-a6fa5e56bf8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd973d15-4811-4ea9-96c1-4e0dbb70780e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "0dacca08-09ba-4640-960b-f609a2918379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0396732e-7812-41f5-8d7d-69a970322fb3",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd3d8f37-ff98-4c2b-aef8-ad3f10e92e36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb40c41c-f352-4efe-be95-5db995cf29b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d91ccd54-7410-44d9-af5e-fa93443ac61e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ec0fa279-0a53-4bbe-85ca-891ab3bcb29e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e52ffdbd-4ee5-4c9f-a9cb-5047778ee593",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c3c598b-3293-4829-ae07-1328325cdec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81c0c9e2-9e74-47c7-b501-6cb2b19c7c91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61c38eb7-da4b-43f2-815b-182354cbc7fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2c065545-3086-418f-b7ac-f06a40fe9fb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73ca0373-2d68-49ce-b131-cd6ced6ffb0a",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7893034c-c9dd-4226-8c30-9b538bc419bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cc0f520-a70d-4e77-9124-9ecba37d25ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ad23bfb-b76f-47f4-94d7-97279df02c2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a17a5390-d3c6-4462-8ea3-27e4ac284f15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddb68e13-e30c-4929-bf58-1ab65276ce17",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3db7351c-ab78-43c3-80ff-a61e6dd1e57c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3be1cbaf-4034-4b0e-a6cf-e671cac397ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a26b4c9-f626-488f-aab6-fc1cf9e666d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "36033a25-2432-43f7-9982-94a9a0620611"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c7a3c64-93c7-45e6-a55d-212eed70874d",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a1b69f0-4a8f-47b3-96f0-dcc04fa84d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "502645bc-cc81-4658-88f3-e49ff9f866c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f490614-fc68-4ddf-9443-675cab624009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "93529cbc-9d98-4ff7-a48a-3b4e93573a3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e138458-763f-4a88-a6a3-67e6d6f1c937",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebabdc97-40df-49cd-bcbd-63546562b109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a639117f-ad40-4168-ac34-7ec5a2265589"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5ac3b66-6bbc-47f0-910f-11b1c5b2e7a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e6f36ae-5275-4862-908e-09738030a922"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c875263-0a01-487c-b863-cd2898f9720e",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7210f10-321e-4ad6-8c12-3aa60368393d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d2c5816-8618-4d7e-8958-4d5ff77e488d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "135935da-9c17-4594-89b8-40d8c19dfca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "48822ca2-54f2-457e-bfa1-318a7a52aad9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d4a07ee-cea2-400a-92d0-56e285b2e4cc",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac0cc9dc-c55f-4d74-ba64-c9ec05431746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2742520f-2c7f-4d21-9174-79eb21e375b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96af7891-844c-4dc0-8e28-d05873197131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a849497-857a-4031-b1fe-a428cad9255d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5317afba-a764-4a74-b51e-47b1437467c2",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b902104-9d48-40ad-bd78-03685f679b61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "203431fc-a767-45ad-94e8-13b4a08ffbea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f80afa26-137a-467c-ae67-096f3f14a6ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "39a7931c-42bb-45a6-935b-1a3b27c8e73d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64608c68-f6c5-4234-853c-a92948ac19cb",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fe083c2-4a03-4b21-8e60-fc2166819a6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b575244d-401e-40bb-9b5e-30852933d320"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c9cd202-ede5-40ef-9d6d-9882076ecc89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "be87b7fe-39d1-45c1-a371-d63ffe27e9de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20913bac-8fe8-4c25-ba47-4dd6662e1ed6",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e00d643-7aed-4269-b159-3590023aa042",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e838fbb5-3aa2-4efd-9f0e-1070dca9e3c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42f37474-8e25-4a94-9a7c-e7cc0048056e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0094013b-98ec-49a0-b623-d923cae2404d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ae48bba-b956-4d3c-b2ad-99f862b9fd5d",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "595d15f5-552c-4fb9-ae54-23fdc52961e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e9f75cb-2814-4c42-b764-d11686e53e83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "243e64d2-1736-4489-9ab5-d7cea0dbd6b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ab4561d-b1c9-4d98-9f6b-5f806061fb01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a99968a4-7248-4afa-8d7e-78167e48adb3",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9e80ead-0d79-4388-a428-fa614773543c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f845eb4-d192-47d3-ada5-4acfa8c7b6ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45d70702-5914-43a2-bec0-5278178d93d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3946eca2-13ef-4704-8112-ba686c5c95b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1d3d61f-b783-4000-a996-0b0319bda9b2",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "113de5f9-0dc1-4c7b-ad75-938de384d98b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3bd81ad-eb0c-4855-b4af-9e647a57df62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5ac779b-3352-4bc0-a8a4-bad7ba706031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4846c982-f30a-46bf-bce6-2aa6a2497aa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4942e9d0-65a0-433d-98b9-89da52cc7289",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d049e70-4b44-42fc-9c52-a1688b37e681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fda60a11-1420-481b-b32a-70218f5ad494"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a1ec182-12a0-4dea-a865-a2ed92318ffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6aefdf85-5c9e-4d8e-a056-4bd6faf64299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b01a1861-da28-4116-86f3-2acb11071dc2",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fca4a4a-6d8a-482c-8bd2-5d7b19d6c5b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76394217-f4c8-45dd-93c2-32167890f468"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2435b19-383d-4954-a986-300a52902bfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b29bedf7-b056-4b9a-9103-1ed4b67c1d28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0debe927-2f6c-47f0-bf15-efebb88de042",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "273b46ab-efc3-4714-8c0e-125343d00c88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7269c1c1-5716-48f8-b8e8-086e1723caf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "663f804b-ecef-44b1-8c18-572c78f11851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3aad0106-f470-488c-84fd-4be4ca410282"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7ce8014-9b42-4839-9891-c8c97e4e7a51",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa085b48-f230-4561-804b-1778871c5802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b549b08-ff7c-4162-a022-1ae400cce5fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03c01388-129e-48e2-aff2-a81ea9371e29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "9909cfde-d499-48d4-a96e-72d19f0c6947"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fbb2ac1-f46d-44b0-a1eb-a0959f775184",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "577b4cc4-aff8-494f-ba82-af6d20b7f73c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6233875-b1e9-4c2b-be75-667193880d83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ce3d616-8efb-4e08-9bd1-ab1643172ef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e08b4ef-0381-4209-83fc-88cbc27a1c98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff3296a5-7d3e-4680-96b9-58d38f78cf6f",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e917e429-3906-446e-9b35-becfbbf982c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27229d12-d889-41b3-aa4c-91b869679008"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f1aa767-53c3-4a49-9870-f55a85857769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bed04a05-aa1d-40b3-9280-0d835f0ef291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54cfe3b9-3f41-42d6-8860-7bc49bf93158",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b13a5c1e-ed9d-41ea-8eef-7d08f2e75934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9f0c3e7-3b32-4850-8fda-1264e3efbd78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30c02ea9-36a4-417b-8007-aa5217b4882e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1decfcf-42c4-497b-8b5d-a191caa1f11d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dbd2859-45dd-41a5-b338-b97a3c40a1b6",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "646a0cd4-72bb-4022-8b14-5ae12f9d3b04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10f37484-69b8-4848-94f6-20490b9c777f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86e876cd-8f87-4510-a28a-d7abbc9f58af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "81dbaed2-9353-413c-9442-c5103da952cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7138613e-2b9d-4c16-84f4-ead7d82612e2",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d377e003-4919-4384-9847-ce61b97e484d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a804941-f344-4658-9611-d6f510041295"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d2d1623-871e-4713-9687-02e48aa04aa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "07f170a4-4b56-4880-883f-3ec0a55d0b85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c24a138-7717-45ab-b4c2-7b4b65c404a0",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "418a0b74-28b0-4a26-9367-7808b8288bea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b9464e4e-718a-4326-80e4-203febf77869"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aec14924-6cb2-46ae-8358-d4df4dfc0788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "38b384b1-7486-4f12-b6cf-1c18931921ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "162a9b74-4189-4269-b0ac-8ac03ebfca0c",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a72d486-ac30-486c-add0-57726b3d5844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7e0c91c-0b2e-4ecf-83c5-41e03ec2d217"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8982d8dd-c5cd-489d-8b45-444259d58ec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4754da40-8d93-41f8-9322-a8fadc62d194"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60c72bc5-25c3-4b66-8b3d-0fa165cdbbca",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3474a499-93ac-4500-b374-0ba198ea284f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b025405-45bb-412d-b05f-25783833cffc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "220a08bb-e5a3-41ea-96e2-3b60f5fe5e70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "36aac7b5-1da2-4493-b59d-2a0331541db9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b994430-6f9e-493d-963c-85e869935d9b",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "537d9052-ce6c-4ee9-9152-8690b223fb2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecd5acab-8930-43d8-b87c-b0f29a8b4bef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3484cf07-74fa-4b46-ab92-9022b005dec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c6654e7a-e8c2-4194-9018-940b92e2055e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2dc9ec1-425d-4788-83d9-6e71449ab1de",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85983e77-021b-4923-89ab-de2bedc70989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "823a2e54-a19d-4318-a784-845ad0429de1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beca0a7d-893b-43ed-855a-9aea0b1d0746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "326c8382-7191-462a-ba61-ee4c44277ac9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3d7f78d-20dd-4d5d-a543-c5a27c18fe1b",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ce1c3a1-660c-44be-b535-573c64233589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af80e6d6-b519-43b7-aea9-f6939a5fd6ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84b2ad41-d035-475a-be8d-0338a8ec9ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "569704b5-1430-4399-a7b0-544b0220c2b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73ca96aa-b5a8-4165-b13f-86f360b11405",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a781148c-64f1-47ec-93ff-fb0b979c4591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8bebdc0-9732-4dfb-b51d-d9150457ee33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea2b2e0b-5759-40e6-84b4-e79d4c1ccc80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "bc7804f3-bdad-421e-a305-d24398e0abbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afd0e523-b200-4a13-9b2b-ed0f218d001d",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7c24927-df0d-4856-915d-ee9e8ddc7d4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6681641-c17c-443a-920b-07297d29a009"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05346eb2-5a3f-4e24-9c99-5157980420df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c197143-98b0-471a-a326-118eb4191707"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48076754-53b5-4ac0-8086-5a39bd8776b4",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52b21517-bb16-49a2-ab37-a4b99dad6496",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38503939-2bfa-46cb-847a-34f3d813335e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "871b7dd1-3d0c-4e8c-807c-224c5de45cb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a16052d-04d2-499a-a3ab-ee559141e533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a03227c-f404-4cee-965a-22925ce87db0",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dc86632-0847-43a6-87ec-e0d9670bc5d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2bdb01a-7f43-4164-b051-a44153b94b3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c41cde97-696d-4372-9b20-5ffcce02d989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "157e4d51-410c-4d49-9708-fc1aedb6efa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00b806dc-f36f-47e8-9e95-c74d534df91e",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f924734b-17d9-4e16-a6d4-8fad38832ff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3117997a-2620-41f6-a9bc-925797a36dd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83d53db4-52c5-47a8-96b7-9b9a16d61f99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "05f9f3db-7c8d-40e8-8caa-6401ecfadd0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "616af89a-e9d0-4cb0-9e5e-8141c15c821d",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f8480f3-6a0d-46aa-965a-92ad49a5cc01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f9ca95c-4fac-4840-b393-1788ee77ca28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc155130-e9e9-4a2c-ade7-054cbdbaef10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bcd91d76-507f-42c6-97cf-1d526bf9d29e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a65dc40-a305-4f67-877c-562a136d8c4f",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7ada05f-0f7e-4ddd-a857-ca431df43164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "438bd2a0-dbf1-4bdd-acdc-b79907863ca0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c66e5a5-0475-4572-8ac8-e05bfbda1611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cab07e30-bdb8-440b-b576-a54c1ae22c2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20eca9c4-8c47-4a56-aff7-5ad5c7535bbf",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5e106f5-0bf9-4f11-a907-91174b7b05bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc7eb8c9-4fd1-42cb-a067-c435ceb61e0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a426cd5-c0a8-42cf-b128-54c72320116e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2dad387e-c80e-4749-95ab-2d163862a9ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd5f25bc-be15-4b87-b2dc-8184c699e88c",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e185845d-d932-4045-af48-c198cf90a538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d37137a-d8a6-419d-8d06-1088197ef961"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0afe52a3-eaf8-43d3-bae8-e4222bd7bd2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a4f78434-e6c0-49c9-bcc4-8154c873971e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a50c69d5-02e0-4883-b6e2-025c2f925950",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "893cfe97-93a8-4b3a-98c2-919544bf11fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98cf4362-03d4-4ae0-b344-c4f50a046e6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cb465b9-ba2e-4b7d-94df-f2bd95471620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "0a55688a-2d09-4008-a55b-f9111e7c5209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e88a4221-564b-4f6f-9a4d-c16475b4af84",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "979c9918-4d8c-4af8-bf3c-1ba09438acd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a305479-b518-40a5-bf3d-a35300fb7cad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ce6057f-402b-45d5-bb22-4de5a3693751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bcdd0dda-71f7-4467-b4cb-6c51c99cf8d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3f34e5d-b193-4898-91b1-271fa81041b1",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c74cab3-b549-42d6-85cc-79008dd63ff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acaba7eb-54df-43eb-84de-01f235c54920"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d979638e-e8bc-4f26-89eb-9cf82d264059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1a42faff-0094-4536-a600-f7bfa9ea26a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b8b3ac1-4f6e-45c9-92f4-bf58482935b9",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6909be0b-c868-471e-a630-10a5114d823a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7fc8a84-737a-4eb2-9654-abb836447395"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c38a358-b42d-4301-a7e8-d0ecf0eaab94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7917e8a2-4bf3-4df7-b07c-2be929c0e621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f74f6d8d-5e01-4c8c-8255-2cb81c1a239d",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d21b6e8-bd84-426b-8fbd-fe05ed0bda0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5be4fd8d-73ce-4c89-9934-6e74245b5a84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d63c98b8-5e46-4398-8ac5-12827010e695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "178587c2-ad3b-47aa-9390-dde0a5f5847b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52856277-a394-4bc3-b833-ee18cc3038a2",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5937d9b6-e95f-4373-93b5-13231c6eac50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88361ef7-a113-4324-acc7-f74f25fc7e7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62db7b58-37ff-4765-9e13-490d83442d2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "25ae9bec-2f30-44fb-ae38-0cd47cb1b0b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ab17337-2c84-45d4-85d1-03984232ef8a",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17812dfc-5f75-4501-904d-238e67451c42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bd2ac25-b8bc-4c43-835e-74c992b2725f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "810f914f-3dab-4027-bb8d-b43d5443b242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b4eb62e-d17d-4c8e-8489-a77de7d62b2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b95e9212-467d-4192-b469-ab2e9b52c23f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa16ad23-8d5a-484e-9b15-144a6909a58b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f451fa1a-2bd3-4a15-a683-e4692c4eb752"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "363da4c3-7196-4e2d-ad5a-f12946bd5328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b72ccfc1-cb45-4e76-b6aa-2aa326efdebc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d65fbc1-3564-4706-9eb2-fa09ed8115e6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "032e6791-c1b1-4331-9657-8e2bde857505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9de4c31-ae42-4c33-969b-401827227821"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f999c3d-886a-427b-a751-6f364f7dc85a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5e19214a-e89f-42c3-b258-b26e3f5adb6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81be53a3-8231-4106-98eb-fc84a8255bdf",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94e7f89d-262f-4e39-8b53-377230ee9439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "916e83ce-c373-443b-8a71-705b60551d83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daf841a7-d87a-438a-baec-ad17dd6fcecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0ad6f0eb-8b81-4ebf-9a31-0166cfdcc848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27b1bc34-1437-4e5a-a2f2-45524f4d27fc",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccb69b45-56f2-4330-b4d6-d7528333a6cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a58f06e2-7380-4900-922d-ea5d5b3d3fca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03899c4e-7626-4de9-86ad-e6bf93bca72c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3af00fb8-f617-49d0-9744-509e84449568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8271fbaf-d63d-4b4b-bf52-20a3a0cbe489",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d02c6c15-5f8c-4a73-8d36-0c2ab1181b40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd6426e4-428b-4736-94c8-effc5764c41e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6bf4809-69c7-4886-91b0-ef2f3132fe23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "c850ac80-622e-4703-8d44-be441bbf7dea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dcfc93b-cb6f-4218-a1b1-50fb2e659da4",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfd43e8e-c03a-4389-b3ed-534abd757987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0882704f-dc29-49de-83e9-c5d68481db32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "606afc88-c196-42e7-89b5-fe2a34a10060",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d4183d5-12d2-4237-b58f-757b9e311c88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fb22dd5-2003-497a-94d4-8022b9e1e36d",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70289762-cdd0-49fb-b504-0c2b508825ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f8066f6-0f8c-4e35-8dba-38712f0b2cd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b64c4f7-d573-4739-b38f-6620d4169c20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0792b9b9-5470-410a-b937-8be217dd9f65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ebf8da7-b9a2-4489-ac07-a596dfa67ca3",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ab7a97e-7758-40ab-ba28-403984180f9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7aef47f-c0a0-4507-93da-0ab745fa37b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24742484-25fa-4469-b0e3-4deb20693fdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "41843d11-59b2-4853-b608-f6cbf4d24f25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "194ff2df-b1d0-4108-b33a-c4e52914b230",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "738c7f1f-abc1-4641-9ca2-eb7dbda3a2c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b94a4f71-e143-47a7-8c7d-730954034ae2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e610cd4-f6c3-435b-a09f-13e69602a0a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "56ebbed1-a9c2-49f1-9edb-6264e0b830a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d770e93-704d-4431-afc8-10b3c6ee3c5b",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25a018f7-04c7-4fce-b0d4-c823903b800e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "352fae7f-ae53-4f1a-aabc-b645269af147"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d64c160d-bef4-4775-a860-d67259234854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d9492338-2cdf-4c02-87e3-5c7a5e8b5c6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "694cb902-89d3-4d1c-bddd-3a7bdeb9c89d",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1d5a45b-4dfe-4408-b750-131709820971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43c94097-ac1e-4ffb-b853-e1484378e8c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c8efc4c-6716-4b8f-9191-bf552a02f036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "4fa91dfb-46a7-43f2-a198-9432ef079e4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a87b425-398f-41f6-ad83-3b62b47c05fd",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4d44d0c-f678-4cbd-abb1-9950d4bfa65f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77e63974-d30d-4bd1-be1e-d7b2e6bfc4ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c63b43d0-cfe0-4b01-ab19-5491b0580131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0449395-3537-4a54-accf-2d684ade94f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65b25ecb-d717-4ec5-96a9-91c45288634a",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ff95bf8-f471-4683-8177-1e55604bd225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b404fdc0-8cc0-465b-ad22-c17729be27e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21761c5f-5f91-4ce4-9e95-650592bf9bab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe6a5564-85aa-448a-8518-2dacc3594b05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "101f0d79-b760-49ac-98ad-1ccdcfd0e400",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "def5db71-5d40-4228-a180-b163434e2d73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3249864c-d71f-4c97-95ef-3cbcf7dd61cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b831b8d9-fa17-4278-a7ab-1ca0c0b8e9e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "486998df-26ff-4159-975c-c84e015d1993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19f2b170-3fe0-4935-8882-979e98d1740d",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e078be61-1574-4ea2-b506-3ad6e5cc4b9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5345cb1-5ffe-43cb-86e9-341b8a8e4ab1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac5232e6-e9e3-4223-8e65-4adebd56af5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "001ec315-73de-4951-ac35-e53ae69930ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80614512-e657-40c5-8b83-2d91cbe490ab",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a69d6221-1404-4a9e-890a-12008921d89a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cb54c52-4937-4ba6-84cd-4345391024a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3e9196e-fac5-495f-a6dd-abbf21026779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b1d535ed-b0e6-4108-9688-25396edce068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a897a95b-2a1a-42d9-bb96-a7dba679a890",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b91d301e-b654-4e74-9f7a-fda6e06c76e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4364ec72-87ef-426f-84a4-130c41965d68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4ef9991-7665-4383-9b5c-ac90878e5f9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "80d362c8-1f7d-412c-8ccc-271e35689bf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a593305-b761-45f2-9a5f-fe098846be9c",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a32cee62-6bd9-4061-af5e-253a8f64216f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "976f8daa-adc1-4f45-8991-4b5776fdbaaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8f0f0b0-fca7-4ad1-92e2-ea111b738858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc363d50-fe86-4835-b578-fa7bdde3f469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0d9a9ab-a08e-4f3b-a781-fe23b80c2eb7",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2651980-c275-4465-b09a-9eb9272f5b25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df99df3c-2192-40cc-9b4f-17ef95b096a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b3fbb38-6220-4c51-92b2-2c3d2c4ee025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e71b9c1-d4d1-41e7-a4dc-5b725ed04e1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8edbb8cd-5274-432d-a16a-a942b2862daa",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33d1a3d2-75de-48d8-8a88-e1b2e7bbd2b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79de4ed5-3813-4a3e-bace-7704526e2be7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92580b0f-5ca0-4124-9cbe-09a23ac292b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2589a672-99a5-448a-8243-4757943a773e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c0d01b0-53d9-44bd-85de-29510b65c5c3",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dfb4f5a-432d-4983-952d-bd0f9be62fcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e783b9e3-3c96-4e1e-9d20-3c7adbe47da9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d4491d7-912f-4bca-998b-bb39a9489d54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1f8fd2d-929a-4520-9e41-9ba62e16a39f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d78ddf4-c4a7-4cdf-80c6-30b402c55e16",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5abcb43-8f2e-482e-badb-b987e8c9f8f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb3fc01f-ccec-41e5-b97b-b63f672691f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1803df9-dcdb-4f91-b699-5793e6cf826b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "47f64895-51b9-4d2e-b7ab-5cf03a385b95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bc89c1b-8bd4-47be-ba91-6b66de75a376",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfc1a49b-3731-4581-ab51-10f91c71647d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a9fafb0-dfcf-4f2d-bf29-5a138cc7cf50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30f1531e-8467-4039-904c-8272a8b95d72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e2aee04e-67f8-43cb-8ac6-1dbbbbb3462e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3f40788-e70c-4944-8578-edc9571afe1b",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e3f427a-a065-4f38-83c5-8ed7d84a972b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25018692-9e06-4552-b855-4949f4c78d0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08db7dbf-b525-472d-a1dc-e7e0d853bf15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "77ba17c7-2680-4301-97e6-0dd99fcd75a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9026deb-1901-4167-9b47-ff652a316dcc",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a2c3065-9f82-4154-ae93-692da2e37168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36be97ed-5f5d-45d5-8066-8bf9f17cfd6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7aa630b-2738-44db-b6b8-791239f39d4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1864c1bb-2b1d-467f-bc7b-83b51f48600b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7650ff89-9b36-4e63-99ec-9c8c94328828",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6a96e74-ecc2-4fc5-9d51-a45e3aec0e30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14c351b8-699d-4b53-bb01-01ad0ffff5b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "251ad402-f2f6-4e58-a966-b40bd96c30e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a1d3242-a1fe-452d-a250-3eb6bb252c07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf1c0403-e8a7-4fcb-b188-31d420734bb0",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7640842-e191-485a-9edb-3a1262949b9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e188fef-0db0-4b5e-98ce-e75e1bdae181"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1da5fa7-bee4-443a-a3de-99b1be1f470e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "984e0d06-0fe4-45e4-abe8-923c57d9a149"
                        }
                      }
                    ]
                  },
                  {
                    "id": "482342f8-a566-4539-bf65-ebb3dfcbc42b",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92126b82-56af-44b5-8cb4-8267a42eb046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "987267b5-a3f3-42bf-982b-0d2cfda72e7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eca984f7-d55a-41bb-b165-af44cbbfd754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2ec59c2e-109f-47b8-893b-7f5f545c4d0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f63d1fb2-4c72-4fe3-b924-e18b527f17f7",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67bbe68d-ac7a-4129-9271-a974c0dc5d83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99519c73-6c4d-46c0-bef9-62f25cb056b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7d1d266-4034-455a-8d0e-ba6bb26177d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "37eecfea-7f45-4fe6-9ef0-8dae9afe2686"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e7ea170-d0c3-4375-82f6-813e86a22194",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "504ad0d7-7b17-4dc2-8bb6-f298dcff750b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a333dad-ef2a-4e8f-8fab-61d0afcb44dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eebb666c-8107-405d-a08f-59a1e8a5fc7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "30901710-73d7-48ee-a518-8a8a5bf579f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79f2dc5d-d64d-4505-b859-ca83060d8dee",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f92d2ff-a907-4af3-8ed7-994e0602de68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8785d837-33c7-440b-b223-a820b220ee10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "290d2b9e-0929-4238-8959-b709b1e4f514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4f5cb4a9-d40b-4af5-a0f6-b1218ad74493"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41f434d9-42ba-48a1-a54c-4cd05fd4bac2",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd5ed580-34fb-4f82-aed4-0b792e176277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99770895-4d7f-4433-8163-1f6874262b8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34c4b512-e3bc-4e17-a0a3-603b0e61dd1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "047c36a5-8fc4-4f45-a55f-d436205daf53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69d3e903-9745-474b-bd7e-b7f6c5a46785",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1537d92a-7a16-4cce-b9b3-f3de1628d1df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d21a5b34-87e6-4ad9-8fc3-6339c07222b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97528807-a17c-426e-be24-75ce2a704b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "83670d7a-8e48-4b26-94e1-702a9b4f70f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b0c802c-2626-4f0c-8182-93d28724362f",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e6c9905-2593-4005-b9e9-7eda459f0c0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1734e553-d581-42fe-b096-60b3c4af764b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c7adfcf-c2b5-488c-8df2-e19f6a7a1fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "aa9b6c94-bd2c-43d4-8bbb-4f03a57f57f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f097a3d2-e49a-4d3b-a37b-c62f8621e508",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8bb9b2a-5776-407c-b6eb-e26b88f33bf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c2339f90-93a3-4026-9677-8fa4758df328"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a2610d0-d6fb-4b5c-8851-1fc2a5d8641c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "35ee78b5-614b-486e-9b2c-7abec9c136d2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c0eabe61-657e-42c6-9b3a-754a6bdea2d1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "31e4ce03-a07d-4a4f-a7db-544f247d072c",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "409baede-b98e-46dd-8172-3d408f2d33b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a1ad13ff-db8b-4da5-a198-d698e6c3515d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02aa01b8-362f-488c-8c31-d9a094717ff8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "44c259c4-6dde-42bb-93aa-fee7a96bfd1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f23a24a-4750-49fa-aec1-aa9e7eca9ecb",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55c5ad2b-6c33-463d-a305-e4c2566becb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "589b06f1-299d-4c36-a270-8ca2e1895c9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fd00116-c1e0-47cc-9f5a-4f51a32858c4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "8822282c-f466-485b-bbf0-7d148a2a852b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "82d2bc68-0d0b-4b3f-8759-b7a2b0fec356",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2c0091d5-2130-45ab-938e-301f1116e5d2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed175150-d3f5-465f-81af-c9cdf3148f30",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "547bd614-9475-4f38-a287-365126b28715"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f5d4539c-fc5a-4f16-9583-4d4906b58fd8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7b536ef7-f1ab-4b2b-9a5f-406d37ef5aef"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6988c8c8-c0d3-4cca-936c-1e544ed0cdb9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "73d7201e-4057-48f1-9be1-89917bd3f021"
                }
              }
            ]
          },
          {
            "id": "a5c06d27-a25a-419a-a804-f0e40b28d9fe",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b9221c92-f321-46d8-8fb6-09e00065adf4",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bd09cf0c-2f33-43c3-9f04-d7890ee89c38",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c08d4642-0d7c-4a31-b1ad-b7bdf8e67785"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "27b776a0-cf38-4d40-9e77-a08bb93c7734",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ca8b8178-f38d-437c-be76-961ba5b0136f"
                    }
                  }
                ]
              },
              {
                "id": "4f5b0d15-f791-4ba5-aafe-cb93f5165ac0",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "922cc6cd-bb02-4b4c-bd2b-94206d0d9232",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cf3a7c5c-400e-4c64-8e47-ef5443ed8920"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "13895dc1-64c1-4fa8-8152-be80f1762419",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "898af9f4-63f3-4fe3-885a-ee5e94cf688a"
                    }
                  }
                ]
              },
              {
                "id": "550c5b90-b1b3-476c-a1b9-962091b02244",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d392faf0-707f-4b43-8deb-6139fb9ec8c5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0f1af7be-9742-417e-a944-1888370e32a5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2213e629-3cb7-4bf2-9796-30984d29a00e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "7c1bc93c-5756-4681-80fb-590aa9062b3e"
                    }
                  }
                ]
              },
              {
                "id": "0505357a-ec1a-4db3-855e-37902bdec028",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3dd33227-f143-4005-aa9c-c8ad7ebe5279",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8b9e06e1-2c6e-455f-a133-457228472405"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "56161092-6186-4961-9e63-f1fdfa3badf1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "8161b82b-766c-41bf-856e-57de131eba77"
                    }
                  }
                ]
              },
              {
                "id": "9fe4e16e-a50c-419c-a86f-e88d56aef845",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "62a9509d-ef7d-4880-826c-8e7d91585df2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "283cc403-0800-4ede-9d9d-12b9f5adfade"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e80cf5d3-42b1-4b8c-8121-7493a5be5c2d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "01c7ceb3-9720-4a1c-b56e-ba650ca898cb"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1ed22259-a43c-4379-8442-c5cb2a5dcee9",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "642d8a98-688f-4ec2-9f37-e9da4054957c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "aaffefa6-152b-4743-82f5-6cdeb32fc32f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3dfa7f33-5423-412e-bfaf-5800f4df7b5b"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1d155591-1bfb-4cf3-a7f1-3036c7f23233",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "d26117bc-e21b-4f13-b81b-2d7e31b01534"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "097b24a2-32b0-47ac-b5ab-fd5677e52795",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ad512790-3894-484b-a0d4-0606ec7908b3"
            }
          }
        ]
      },
      {
        "id": "64d1019c-8fc1-4dca-af54-ab4c48f3b121",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "d9bef125-b8e3-414a-a5e5-e4e65b7f4182",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0b10dd82-f202-42c4-8f4f-9093ae45b9d4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b6874642-6fc5-4a8d-97f1-974c5997b8ba",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b875add5-3169-450f-a8d1-940c1f3fae35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "453f84e6-b9a7-4dd8-ab03-749a43c9048c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21956f82-ce09-4bea-9c40-5206438707bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c74237f-2bb6-41b0-9813-a6056ee136ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fb7ec1d-111d-40f8-b05b-52cc7798172b",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83cc41a8-01b8-4f99-921b-ac58af7f3374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f26b860e-0f8e-48ce-a4e3-6e91c75f2eb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10ced7fe-1906-4981-9c9c-3620af6cc73f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9df076a4-d450-4b3f-aa72-5ce42a3712a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffcba28d-beb1-4b92-8ec3-7cb867077bb9",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59f058a9-1172-4da7-9756-6ff68ac086d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89f62bce-7f0d-46b0-a910-494c514383e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69231a5c-e70c-4243-a852-1cf3f24a5779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f5d6ca4-da2e-42b1-adf8-c0182605d52a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1759fc2-b7ea-4c0f-87a2-01cd029dd63a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "570644d3-e88d-4549-9889-4d951eb19079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd4cc2f9-1ef2-4075-a75c-b9631473942e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45567103-f488-4838-ac2c-90fa9c34580d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6caf725-21a7-402d-8880-d54c86c5a25c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "563dbbe5-c73a-4404-85c8-73bb92a75392",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21218c90-eaee-47ad-b1a0-b82a953a8061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a6fcd3f-6f7b-456a-a175-420d64163d20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e55159f6-eaeb-49ae-8534-738eafe0f8da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0a3c77b-734c-4fbd-b94f-08ec93b67149"
                        }
                      }
                    ]
                  },
                  {
                    "id": "860ce9f7-af87-428d-b1d0-2a151027bf8d",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e63269a2-fa08-4a87-809a-9c785ac1f9a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b41ce8a-cf01-4bcf-aaaa-23a8bccd739c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc362269-57bf-4867-b80a-20c1f4815dec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8d8d5144-1231-45c1-b020-ce45adf6238a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "384c784b-c3a5-44b2-bd34-e3228e763a5e",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef93aa38-219d-40d5-9b2f-6444918dd6e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb0849b2-848e-4837-8227-fa338224b88b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ddb905c-a974-4d2c-b073-94a30337b287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "cae5000c-04a0-45dd-93fd-96b66efaea66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04d00fbe-df13-4721-9a77-20ffbe5588f2",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfb5f57f-489a-4934-a0a0-4dac63ac6f6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfb55154-59b6-4a09-a178-49e7042fd41b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "302355c1-1d17-45ab-b9df-54b60c08cf81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e52f0ab-27fd-43ed-9f7c-183f24b9f4b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "080ceced-d2f6-479c-b957-9885fd124ce6",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c324d45a-cb4d-4201-81c6-a24fe7e8af4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2c6ed18-7776-408e-9303-07d5f3ce43ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74514796-7ac7-4ce0-a007-e7879d7769e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "395ff711-085a-4787-826b-b0e9b4f181b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7795934c-772f-4375-94a4-df9c71acaca2",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b8ca868-924b-4220-aed9-001230fc0b75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "839096cf-c1cb-412a-bcc3-06e982b1c61d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afde31ee-6596-4cea-976e-b07ca8c52301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bb587ace-b5da-4291-af45-8adf1cea7d67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d2cde5d-f37b-4be5-b8cf-1f3397723cd0",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "695e5b0c-7992-495a-937e-bd313fb2b59c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ff7d27c-8944-42c1-ab4c-ea31cb21888c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97c7deec-152c-4e40-85a1-1aa8be2994b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "9abd7e5f-3e45-4adb-b9ea-c08c57c5ffd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "994ee43c-5d64-4949-a2ce-9a3195df02ca",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b101f2f0-aa07-40a5-8223-6eef409aac35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9249a5e5-6c74-4e21-9953-5a8fc39f7f9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c04f47fc-72ab-4bb3-9922-7a16465c9e7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ee74c415-5a8d-44b3-b355-5b1a1e19f8f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6822d14a-6600-40f6-b35d-d16d2cc7b38c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5bb9145-3458-4a37-b0f3-028a7386b9bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9c1cda8-9557-4d0b-94b7-49d0ed0e9d00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dbf967e-3d99-44be-aaea-753677dde29d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1306cec-be48-4b80-82b8-4727de816b81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78bdc860-54c3-4999-80e6-b475546740f5",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f69f8254-6784-466c-a0a6-3cc3dcf46741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5121fbea-5437-4d1c-960b-043e5d983763"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42ac26ac-c74f-4f1e-b788-5dc5d6bb5c77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "0fa31a39-580e-4c78-aa40-197c8b56b683"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0177d19-703e-4dbb-87ba-62e3b58060d5",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27c38aba-6a43-4974-98b6-6db37bddfce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "767d70b3-beeb-4aa9-8aaf-22fe61586717"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dba92c29-f6fa-4491-8af8-04e5a993885c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f324a66-cfb4-4e51-ba4c-7148d8bd26ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feed235a-49be-46b4-8bfd-b685f9a8d80d",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "557b981c-8b8a-4e90-b593-7a1eb0d18294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4270dba1-2652-4f21-82d2-604760cad3ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db9a9a12-00f5-4b75-9442-415848a514a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "82cf3a25-0f78-4c96-850a-e3b0a40b08df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c387adef-a143-42f5-b111-cdbae6f3d22d",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09e77da2-1c4b-437c-9dd5-993209acf5cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "809d9ca5-c138-41cc-b089-9f6986c628e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6d88b63-53e1-4580-9c29-211ed35d332e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "9dd6daa8-5471-46f8-8af9-15f75685b572"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f081b03f-d2d5-4377-910e-30ed5ad43670",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "717b9c85-0123-4ea9-b680-066105e68f51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b25babf2-daff-4b32-940f-632b07950a78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34399b12-6fe5-4c05-a1ee-e39c208ab090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f70eddf6-8edf-49e6-af8c-4f7175f3f9fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e31c853-e468-4aac-b924-b5fe97cb0b1e",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed10ebca-6df9-40d1-8fa8-f51a98c9e921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24a90887-7943-4028-8df9-e774914b86ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "831b4491-7be8-4b35-9b91-566a98c7bed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd1d8283-6e7a-4aa9-888d-66890a5d3312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4d79986-7dbf-4a81-9fc4-80e258db8aa1",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9389c443-8a65-4a96-aff4-fb500daeb114",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20ecb75f-b691-444d-a903-004df35bba60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dce23d7b-e24e-4083-9f97-5cadfe6f6ce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "779ceab7-4221-4c5e-b18f-b404afe1a881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e48e2826-c867-48ae-9710-3fb1690b7f24",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af6f8dc0-ab95-4452-95c0-21de3e0e0b84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55d70971-8426-4aa6-b670-1da49b1aab2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbb4a48f-7e19-4c75-8199-03417d766746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f53d5d4f-5117-4fdf-b801-e14b58398547"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63ae25e4-5a60-4068-b296-6b4d806773dd",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bad8df56-7211-4e61-a558-852ca50dae67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f06fe55f-36ea-4b1a-a321-bfca495291c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "740ffa9e-0f9d-4d53-9adf-19278f783765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ae7b3fe-a5a4-4ee6-b4ca-8750363ca28b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7509bce-13fa-4e1d-95eb-de987d186abb",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acfc05da-66aa-427e-b068-3e077b48c187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a9cad06-e6e7-4619-87c0-c43cac032e34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81d04195-487a-404c-a7cf-f9dcce21d10c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a692789b-60c0-418e-ab60-946532382be8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ac3207c-7e74-4ab3-9efd-d681ea7b3bc4",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd76c088-25d7-478b-b467-479341457019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72dd1d89-1d87-452d-a1ba-5b6b83fadd9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "740c4413-228f-45c2-a890-9c5d6173df5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3bf3885-9bee-40d0-9813-9c4f103c0bf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a04fe81-f116-40af-af4c-36eb8109c2e4",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9985d56a-f353-4f37-8ecc-90619102a3d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e149907-d223-479d-9f96-b64835ab257f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6d56cf0-c3c6-450f-a97c-fd2d3ea47505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c33f276a-7ebe-48e0-876a-7fa62d4ccf9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5441da88-f39d-470a-b9b1-88e2da790aec",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7332d943-648c-49c1-ae7d-bd6cbfdcf87c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a51d9ff-33b5-426c-9afe-a3aab76c517f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "440cf193-dcea-49ad-8442-4da8856640ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "60ade390-2e7a-4f03-964a-fb27f9a2aa17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3f1f398-7dce-4667-891b-c23afd4bd606",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31bdb3c1-71ac-4ad7-bccf-9b0df3e7338b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dab7da5-12e3-4370-a730-a5f385296499"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b72fd517-5a5a-43e7-938c-2140b6acda51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7273d697-7c24-43d0-8816-fe627a4a62e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc981e88-6c8f-42d3-be24-418bd00ac83d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7f50788-b143-4bcf-b698-a795db65216e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f57af97-48ca-42fc-982c-538a9a465c20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43b9c4aa-be03-4741-813d-3e8b12d28ffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be737fe2-7b82-46da-99c1-12bf294fd164"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5827e393-cb84-40bb-b28b-061c5fe193bf",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f9b67e5-febe-4377-be1b-73f808373441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b82dbf5-80cc-447f-a14c-724c7af21bfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "367b2e46-33b5-4108-80df-b5cc95a28109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "703aaddf-95a3-4c1f-b5e8-f047e0437843"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a96c750-3319-4bee-abcd-00c244c38c15",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07aef16c-b1ab-4359-943b-a36dd6394037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37ff14cf-5698-4612-a1b4-355badad9a44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9e94277-6f0f-4a44-b5a4-63cb138e1d4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "562747d4-57a1-435b-b11c-3adf57516ea7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21adbacb-cbef-4b8c-9241-c74786280c09",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50b2b80c-fa04-41b7-8c19-bd70f6d96d95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a722873a-621e-4d64-9910-acc8cc3cf1e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a18fe6c6-6351-4461-9b2e-c1d9c669dce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b33183f4-0a2d-4efb-9ae4-390646cbb89e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7cd8db4-9406-46de-a214-0fa6aa0cfba8",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c32d2297-529a-4d6f-8bc9-c5e7b09adc5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adba7a6d-be54-4b9a-be76-b7bc3ef7d662"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f831f53b-6781-478a-9920-1d2af6e890b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "151c4556-1f83-4a0c-9b0d-fa9f97aebbcd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9464c513-06b4-4cff-8bba-d2f04abc62a2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e231a3c6-8d8a-4a70-8345-0748861e1b6b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f751df85-6103-43e2-8701-ebc10c3dc436",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae29aaf6-4ca6-4423-aff4-2f9202c4ab92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26d16b6c-815c-4789-9cd1-80b7be382317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7df35397-8996-417e-8408-5a147a2c93c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c74f1dac-2b6f-4b19-9e90-f451e3cdac8d",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6296b931-df4d-4b8c-8f06-c8a08a3f41b4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "2d20fa3b-d4de-47d6-a4df-b415e542e338"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7056e8e-c3b9-485b-99af-8713a38bc594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ec2138c1-2203-4e85-8631-9dbf49a2ffdf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "906f683c-2876-4f78-a004-c7fbadeeb18c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9a5ff41a-58fd-44f1-9b23-f70a63d51c5c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fd21d7d7-0701-4ae6-98b9-c3b8ec9a3ea1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "046f71db-f518-4417-a99f-d316ffbda63b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ed13b8ca-9d82-404a-90ae-590aadc8bd8e",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8bc4f1ec-83bf-4727-b285-042c9dec0569"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "46c69b87-c633-4577-a5fc-eb7c431836bb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1b016410-2345-43cd-bfef-e79f8194b496"
            }
          }
        ]
      },
      {
        "id": "d2f3bdcc-a33c-4433-a022-79414fd7c9c9",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "7971edfe-39ae-4c7b-9075-d20c3ed1b5a8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d52ac74b-867e-4495-b283-28b796902093",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "4e89f39f-2121-4593-a488-bed232c912e1",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26f4d0df-0d42-4362-a538-0e94131d7847",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8681efc-7aed-49ac-bfaa-a76950b890d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8f22d94-65e1-4e3e-82a8-a18026487e01",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0d6a522-3861-450b-87f9-6e45f18f17db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85a1298b-7293-4dbb-80dc-b47b333cc8ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc03f732-3732-4d27-87df-ce4ab6851a7f",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a485d49e-f446-4f45-924b-5739ac847e16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "046d7103-2bf0-4af2-8989-f310d5f025a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8109c8f-2a8c-44c9-99e3-f731f0f01ecb",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72c8d8f0-84a8-497b-b50e-aa2f22353746",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b81e8390-efaf-4558-838b-e44983456973"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02add223-5b8b-4903-80fb-2c1006180922",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d92e9d22-7b7e-4642-912b-d9e09aecd2cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1416d03b-8e55-4eb1-8950-75c7c7449a43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc7aa2b5-6b68-4ba4-a650-29b4d03540f9",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8263657-0c12-47f5-9d0c-fa4f0dc30509",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45cbae09-d9bb-4178-aa2f-736b51decb21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b9e8ff2-88f7-4527-8043-4badb066cad2",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2ba75fe-c6df-44cb-9305-8be6ecf4aa03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "310d85e4-5d1c-47c5-acbc-e5009f34c1c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a210e095-fafa-41a3-ab01-f780298bff27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6647fbca-e6c4-49bf-ab76-1cde15800507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33bffdaf-c75c-469d-bdac-17e0d2ab6cc2",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd63a0f3-c457-4450-ab2e-5121be31f02b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be9acbee-c9b5-4e0d-8900-1fa891c59cd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4055c6db-e43b-435b-bb96-6afad6cf77a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "029d97a5-70df-4ea4-b451-a9e038459ccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d577c91f-4392-4e88-8b39-a429e62b9a56",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "108a40bc-487e-427e-98b7-45ed98019ab5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6edc5c2-3d65-48d9-83cc-b095e83fd503"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4b38fa8-cc5c-4b01-a953-615cd2fb6c06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3981c38f-2ffe-40a1-a99d-daa463c65f8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3713b7e8-b54b-43f7-9ed0-0d9b832d5a6f",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fcb9304-9674-42b8-ac89-ad54ab601984",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b558a186-5052-4a6f-b446-db81801b9111"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ee29f92-17b6-4890-aa69-28201a8f55ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b0a772c-6dda-45bd-8d78-ccf421df96a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08cd977d-c733-4d9e-9bbd-435162abb1b7",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84929494-39cb-4d4f-8665-f49bfacb9139",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dc1efdc-fd34-4268-ae2c-af87d1ab2b9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a444bfb5-662e-4a3c-9d91-97fbdafd6f58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f27bc81a-8c61-45a5-ac10-99ec30542b16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6470a37c-6ed6-4f7f-868f-fa8227bc0a9d",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a41b008-2ea1-4355-9daa-e8db93e18c17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70302c68-97cf-40c3-a615-09409cb6c503"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cc0aa7c-fb00-41fc-af22-b8e92056cb63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c2f2fc0-5dd7-4cdb-8c19-b81ce8d09656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18017d71-6cf0-4d37-8399-04e166806c4b",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d49c4d-0026-4240-8ab9-6e817ba08c0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91bf0c47-c6cb-471b-b941-219990b36cd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbf0fb65-2a4a-4c0a-9dde-d39f15dc45d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03169d64-c7d8-46e0-88f9-6c1ba66809d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e262071f-58d2-49ac-a801-0d1926c08c9a",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51c2ef6d-8c3c-4ee6-826d-dabfda071656",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f9b9f2a-1490-498a-9a39-d08111b1cecd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "731b8280-d57a-4ab5-b0ed-f3e21e59450e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c30f0c0-d686-4898-b36c-42862090df4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a8db701-b86b-4d05-a8a1-7af233cb48fa",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c47a5fc-d3a7-40c7-9e56-8b5d1a67b95b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc3be057-8bee-437c-baeb-61728bb5a91b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1a3f90e-c401-43f2-a0ba-98070964d0bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77ee6ef7-6c69-40b7-8299-37b58cd316f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f03e2483-6297-482d-914b-110755e700b4",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b058e641-40b1-4a89-bece-3c9330c7db06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7c7d069-7ce1-4a24-aadc-837886e5f6a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cf45c81-1adf-41be-933c-2da020cbda4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0548ca18-c3b5-4b19-b49b-eb6136b8607a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d107f818-4967-4145-a02e-da237455b028",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ee61664-d9d2-4b8c-83bc-ca666700aa2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc964bd0-221d-4f0f-9867-5517bc79c07a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55fade15-3f11-4f4b-8cc9-98ae73d5e001",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b9aa0e1-1933-4cd0-bc70-a710e07b48e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6636154-44d9-447a-b611-a6c2014e6a79",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6776c043-7a26-4c56-b27c-10cb76ae9d8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8586187-9f6e-41af-ba6e-0d9682dd5d0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33140862-afce-41e0-a4a8-f181085453bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "596dc0db-70e7-4043-88e4-31dc452efea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02197f22-ca59-4651-a6bc-c45893ddc610",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23671b86-1d69-4a89-a619-5299c86ec6cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2f84650-bd84-4c19-a9cc-e204f36703f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3ae063a-631b-4f59-95b0-b9837f557eb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c38ed65-9190-4444-ae44-99a29cd0010c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13c378f2-5314-4699-8279-5efb17c3bf46",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c7fedec-670a-4bca-9636-260f03bef01b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b379eaa5-173f-459d-a3e7-2a93cc3135ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f8171ef-1862-4745-a8d4-976c5ad9623c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99ab5c2d-cfad-4764-ab86-db948a47986f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40405be5-a6fc-4559-b10c-72b7fd83662c",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c54d975-f956-4f59-9509-3a86ead67480",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d4e4ae2-6cb1-4757-bc94-f7b6763f162c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c929d1e3-e768-44f5-947a-9014cbdecf2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "286166df-50e1-4e33-9bac-5e7c891f320e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09f86222-de72-4986-92d9-1621fdd3ab75",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9a3403e-b08d-498f-b44f-196c85ccc525",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a3bb3dd-ecce-495f-a831-2b78e769ced4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "487060c4-5720-4d88-b106-b437625e6fb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "895559fb-4eb1-499f-820a-b5d1861dde9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93b9f3f4-0993-4459-a541-ec31bd7dc4f3",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21f8fdab-8ad0-4295-8621-c8a580e9b70c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b01999e1-d6b8-4ad4-8ba3-61487e78bae8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bbb2937-33cc-4bb5-b695-b258611d35ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38742c43-2fdf-45af-bb70-88ed81f18395"
                        }
                      }
                    ]
                  },
                  {
                    "id": "796304fc-9062-4d13-ad52-65f4c2a4a6ef",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "124ed8cd-f5b0-406f-812a-ea6d872aa35d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8aabf482-7244-4246-8fe0-cf4c3e62f091"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bdcc5ed-2971-4c65-a04a-703dd33c99fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61558d3e-9c73-442c-9965-9bce81bd2552"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f67c78d8-940a-449d-a2a0-20b93e7f6e55",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a29073e6-8b29-45a2-beb5-bcf48337f4ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2f7bd06-fc9a-445b-bcd5-e31876148af1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efe37d0e-961f-4a08-a63f-6650a250ae40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e25d940-2086-49e4-8966-c6cdf1d5ca47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "288e968e-ce42-45b0-a6db-ac73f16a3660",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39697889-6caf-4e31-ae07-dc90a82215f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4349cde-2cb4-4ff7-80d5-3ea31a007d97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49d6cd7d-f7bd-43d9-9599-f44d69682044",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d408a5fa-418b-4593-856e-ac474055251f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7771cad-def5-465b-b610-3265b2fb02c9",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e8901fa-342a-42d0-bc6e-8f0ccd6edfdd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7d410b0-bfd4-4434-b760-47c721190e5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5081246f-462b-43f3-bc61-5ca8b920708f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b930812f-b621-47f3-bb20-3d3e2f6da84b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2d3fcc3-6a94-4045-b03f-bd591b602700",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c472e804-4999-40e4-ab0b-30550b96a961",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1bc3133-f7f9-414e-837f-a2998dc45c11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f63d26e-a084-4d65-a085-b946d43acc68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7548480-477b-40d6-9ad9-b15bc1297c83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d59fd3da-2b20-4ec7-a415-1ebdb6e1ca46",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d4ff91d-41de-4403-8702-7ad195f2a886",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d47c7d5b-7abe-4f83-8003-af75a39f55c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "046784f3-f68c-43bb-9d7d-fa70ee401046",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2c5a089-c6e8-48a3-be0c-eb9dcb9a4325"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e023172-7cbf-4bbd-b472-d4ec50b084cd",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8954c30-411f-439f-80cf-d2881f2d02c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af2122ce-3a30-477b-8730-be7368bdbce3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e674cd73-2fae-473a-b7ea-d41fa60807b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b871770b-e456-41ca-8e98-bede677db886"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c536acb-fdda-46b2-8d00-952990284a8b",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "105455da-df1a-4208-8739-ad46403fd683",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3624ef61-20f6-4784-80b3-2e6f2456cc7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c4a4673-2350-4970-9788-58ec0b5010f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5495099-ab67-4a23-b989-989333e43822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08194e49-707b-4abe-9acc-7df1556ba2a4",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98a2de8e-918b-4ec8-9926-a9223ce3d33b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b051783-c031-4401-933a-c8affa4a53e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2a3da81-1239-4214-a75b-4bd8c2a5194f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd27b222-751d-4641-9e77-738faa472a74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bc681a3-a03a-47cc-8280-a02622f72279",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8accf849-fd7f-4f00-8cdc-9ba5e6f322f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56d58d34-acc7-48fb-8d99-cca44c677f88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3b87ba6-13cf-4f35-a18d-010b51f06e79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eefe3c5d-646f-429e-942c-c12bb92a68f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbb8a873-9982-47e2-a106-bbe7a3d4cf9c",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38d6f965-3513-4f2e-a556-140b2aaec61d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "768a7d96-ef68-41de-a27f-0876b60f8243"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32871d30-a174-494f-b0ad-9e61176b71dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcfcd4c4-c1e2-45aa-a185-1b9f413ce2e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e445458-274b-4eda-a6e1-1bd735cf39e5",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77222b82-73b6-4d73-9f9e-5a0c1b61b097",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6110f68f-548b-433f-a75d-d63eb1908aa1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c938bf20-0b86-46f4-ae6e-5a04b4b22658",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e19f3420-f3a7-4f4d-af58-2c61b223db8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1761a99e-6e32-42ab-8581-3e6fde455fe3",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ea821d7-5c7e-4d64-9789-7718377a391d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccebbbfb-c1f1-41cb-9870-9d072c90ddab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96c9cc59-7058-4125-8e8d-37e59cc6673e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ded66065-5074-4caa-8da4-a07b1efcec96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aa7fcbf-5595-4fd6-9971-f7cd2c76c330",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce9b4e80-5628-41b7-82c3-39d6e73f14c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "506c3eb5-7f01-4089-943f-9a2dc06395c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c3dd858-f2b2-4cad-84c7-927df7fe54bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9adbb5a0-9a7d-4308-8a4d-5ef61e6c702c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b675e55d-8b66-4b99-ba42-6c3cfdc4617a",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13834669-2037-476c-9a23-2902f040654f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dac81e3-2c45-4f60-a2dc-e2cc53265f1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d32de432-dbc8-4948-881a-3c81064ecc95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d36e5db6-7f01-4a7d-ba52-729388eae93b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d8c06f8-d167-40bb-9720-33912136dd90",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4632e240-d00f-474e-93b1-255965dae6fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9aa6199a-7c25-4a27-bad6-fee668357835"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b99a61c-627c-45bd-8529-03a35bc9947a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d74561e6-6a6f-424f-ab25-9a73e0bb56a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3564036d-7b24-4b68-9c85-74d8b9705a55",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2aa66f0-b964-4b6a-96bc-75677d740fae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10e5e2a9-f0a0-497f-8797-9b6f5fb46637"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2224d8f5-cf27-4d84-9582-4f7bb10301a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc0339b4-0aaa-43ab-9030-75222a8cd337"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5cbf596-f30f-4a00-a36e-ce283d5098e6",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "328aa0f6-492d-4d9b-b841-76e3afd5f442",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7f8e1f3-ba32-4153-970f-d8e8a991ff7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba39cc53-fe9c-4263-9e22-8399e1fd70b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16262d1e-a5a4-4795-9e1f-6223c87582df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a9119ab-a51c-4325-a7e3-c6030828fac0",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8eb0294-4545-4e67-9cfc-450b9f390261",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "296c5071-1340-4209-a7ee-7ee8ae2430b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee67a4cf-4b6b-4480-882f-f7c4d48899d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0142545-4527-41d4-b171-1aa2f97f2cd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8ce3ea4-2912-4e17-9f55-838cf95d5cfd",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7307e1a2-111a-4d59-bde6-b1bbc4df594b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8164180-879a-464f-b1ba-1871b830a44b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cc036c7-5977-48f7-b2c7-592d84a950ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87de101f-1e31-42ee-8ab6-4b906ab399b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44f3d2ba-bf0b-41f6-b952-dd99312de91d",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c38f953b-e982-4675-9456-07d37ec077ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4519d759-eb8f-4ae1-94c1-8f7a876dd1db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "091e3ea5-4d8e-42d4-a20b-93c63d22bc2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fe3837a-937e-4f78-9b48-04cb39181e27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "375135da-4b24-4470-8a0b-9dedb71544c4",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2984897e-b9d0-4a51-821a-443fa9cfca0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70f19e2e-e209-4dfa-b3b5-5a512f094702"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6746fdcd-de82-4312-835c-3294bd300bb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da71c9af-b9bf-435c-8f1b-3a5eba845c17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "835b8e50-15f9-4bc2-9589-335403f01a61",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ae85322-060f-4f23-965e-d6c6536c2096",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05ebc2eb-f4a6-450d-87e5-e94ada9cab14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "722159f9-4fda-4b72-90d8-2a78b2b92b78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "594433da-4d3c-45d9-86ba-3dec91535862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0554f956-5c75-4d88-b728-4567229c10aa",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b131ee61-d68b-4e5e-9370-a07f2c0cca70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4466d5ac-3dd0-4abd-9a13-5412d7f00527"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fdf24e8-33ff-483d-80fb-ead47abf2c4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3fcaf6a-a331-417a-8720-97359e5f440a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96af4f0c-1c58-42c5-acac-902597763337",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef2a598c-3852-4d5f-acc7-ac479c0cb718",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "017fbcc3-c66e-41c2-82a7-a4f739c9032c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dea43bb-e18e-4b9b-bd48-07227b5ca223",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cda7d66-26e0-49a5-829a-60c9cc92ddb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2f1a00e-381e-4d84-b191-23d62b58e095",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "488cb3da-be31-40a0-8fcb-50757a662222",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a96ab1ef-a105-4a1d-9ada-19395c0e1e9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "072a1bd0-f2b5-4b37-8c91-964341d78902",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "430c9466-17a0-46f4-947d-5672ab46d165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9128669-9577-40ea-8605-0827f0a5fd71",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de8ea8a0-a573-42dc-91f7-e8d157166817",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "565ab279-d2d2-4deb-8cb4-28a859792802"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f58466c-c73f-4855-bffa-60785a9d1ee3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b85ba6e8-12c0-4da2-8e57-e448ce38e423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cfd682c-6edd-4acd-82e8-e2cf2bb19a76",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca96a410-a2b3-42e8-ad97-c5eb3d21de5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5474d352-cf8e-48bf-ab54-6e9c4811a415"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09f5c1e6-dd76-45d7-9c74-48cfb55dd96d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30c57375-f060-446c-8d03-5e4904d1ad33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "262eb5f5-7cd9-4ea7-8628-077519a2eb7c",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2ea2811-6208-4bab-86cb-70ec6e59aa7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b0abd65-f402-46d8-9da3-6923dda359a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "841e8055-3fbf-4df9-8429-b59499e447b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ea4f08c-a92a-4f36-b08c-c9e60278c6b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edb15e0d-6bce-41a2-8ea1-da3ddcbaee93",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a37f522c-1b3c-48f6-a7c8-0fd017b3ec83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae3e19be-f182-4b15-9879-a6503d78cb7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3289fe7-bdd8-4a94-8e44-4848a6883cf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1440f915-373b-478a-b034-71a559cb4342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c9af15f-57c8-497b-9a9e-07327837ecc5",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d1d3571-9250-4c01-9447-525d38f20416",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc3d7ae0-71c6-4bc0-9eb5-8ba3c84c290b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3089182-f850-4987-ba84-c9eae5a392e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee47596f-a10f-4478-bcfc-b785a1e6d4a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a2fde1a-7d92-4e28-8c90-9f7d9bc1f018",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0589ba9-654e-49ca-a90d-b44c71277b7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff25c385-2dc4-44e2-91d7-a8da0b7c425d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc73cf6f-240f-4408-aed9-130388baec18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "521310fc-456a-426b-a02a-7d40cdd4d824"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcd1ad13-5200-4891-8a65-6e80f4eaee3d",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1adf55cb-f445-44a1-b184-48c45fb1a688",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19c54b8f-3030-4cbc-95e0-addd544250df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7db4e03-ff79-479f-a36f-32d6acdd331b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6c9a3f4-132a-4b32-a495-7231e040e38c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb85d887-5f54-4df0-9f8d-d9801589c9bf",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c82f0e4-5ed0-48be-beb7-d498a6a4b190",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d466381-9603-4cf4-90e7-f022e152a9f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e159300b-b270-486b-916b-cbdb452f9a47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87b5ee60-df65-47dd-bee2-bc1998219f8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "227fa831-8759-4afb-abf5-aa3ea1c5fa8f",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e44de896-151d-482a-9203-a1ff5a536036",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e523a107-0070-492e-88c5-c416aba56c49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47f6fb2d-d843-4099-b545-391716fb7c1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95e6fc70-415b-4e9f-88d4-9220cfab68c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c95d6897-6f25-43f1-a1e2-022d02ff24d2",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8832cd3-88b7-4f34-b233-adc342e2008c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c15a231-8e6e-41ff-a597-4a018be8cdcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8b1c06b-e6f2-4425-8662-71514031bf42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3f081a3-915e-41be-8933-ce2e209014ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ca0619c-f776-4828-bfac-3536e6b84ab1",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16d8d2d4-c82a-4649-b39a-e5ff44ed64d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "725f8e65-ede9-4d85-8b46-4febf8c79024"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f2cd804-d112-4ebb-b4cc-6c0491571e97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1b324e8-b825-418b-aaea-6276229553ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a447dfa-4a60-4281-b407-2a03a87a84db",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "634ac1fe-4faa-4236-b4ee-0fc8d9f05d42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d368e5f4-79ec-42eb-a758-02f292922966"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29dcdb65-6888-4611-b38b-322c42eb6b2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6724b4b2-11a7-43a3-8ea1-ab063d98c9a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60676571-05d7-4ca5-bef3-6c11916cca07",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6f5c1d7-02db-4695-ad7b-27309688b18c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c4464b3-6552-4253-ad7b-b1563aa4a1ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e709fe8c-91eb-447d-b389-633114e4ca3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08a31937-2c56-47c1-874d-aac14b292829"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a817b326-8ef7-4028-9dac-70395377f1dc",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d235564-5a77-4f58-8498-c137ee354b7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67b3fe48-0ed2-418f-a597-b026be751ef8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68a0b4df-0727-432c-8141-02e34472bba0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1996004-f13f-41d7-a2df-ca84d64496f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5267287f-a070-4b6d-bf14-16d183ffb947",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85798993-3429-4288-9540-10eee5db8ad2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb332536-24a3-48e6-86c0-4e2b31cd7212"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "060cf858-6e83-4e27-a24b-d63237426f0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f103697c-7984-4ea7-b2ed-4d5d0543f62c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "642f83d1-6a60-43aa-bf53-9fa4f3103578",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20f6dc15-b5bb-4858-b069-41b0df7b7c31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d6c43e7-e603-413a-bd90-a0b8e30f4f49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85c80055-222f-4ddf-8bbe-90a581a00b51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc132458-1007-441a-8303-b4393ac700b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b3174c6-7a9d-4a7c-89c5-3332dc3e42f2",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8296b56-e615-47c0-8807-df5b52c3fb50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e136c33-d899-4e27-8d23-a348dd8f650a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49a4b051-0ac5-4134-8c32-2f3e8da03b3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d644070b-b759-4adb-93a9-d8c92ac2da35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cae5d64-d1a1-4605-8b3e-752564ec5e6c",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2302626f-a108-4f9b-be27-a8b95353d09d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9e92a26-cad6-4895-a7b4-e91a4e5f53f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd0205cd-dabb-4acc-a3ce-2f107d29167d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f3aa692-e2cb-4c5a-80a4-bfff0b71de0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8705d41-1720-450e-9bdc-2ad13c67e0d0",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fe776d6-9483-470e-9716-da9389fbb841",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc8d5295-5d58-4a9f-9ed7-50e0f1a6a05d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5ab91bd-9b41-4e35-a9ce-d0d456b09597",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfd7ae99-0a06-4526-be76-b8b53743b93e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c2ed502-9511-4eee-9ff3-635d0f1d3b8a",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b455570-a170-4098-a5b3-bcd3c2716938",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "953511bc-fc9d-4886-affd-a9502d6da261"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6790c4af-02fe-4cee-acae-d923ca3517b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88d0f9d2-6e5b-41bb-9b0b-318876b96e0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74f43eb7-b7e9-415f-9693-2d38fbc533fa",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e530e864-6e8a-438a-8f68-340772c27998",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ccdbd09b-e0d6-4307-96bc-d17f61646296"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00fbee45-cfb2-452f-acd5-2ee7cafcd7be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7031f9e-78c7-404f-b610-81d5ab2366f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "149cbcaa-1cd3-4d43-8714-3a31eb631187",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bd756cd-f18e-43ec-9cf4-89e827b1e47e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "971dbfb7-4e23-477c-81f4-502a789dfbb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "381cdb6c-61d3-478f-a912-60f0d5cfc63b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffa82775-fc2e-4eaa-bfd0-21f2ec6d01c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8dbbcaa-7d4c-4958-9969-69d48b13b76d",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46a3153c-c7ad-4342-9e67-14f97ab06eb2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81e1b59f-c3a4-4e2f-86f5-d721bd6fcb0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6de60386-c222-489a-852e-e6a4aed8458b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5130faeb-29d9-464c-b17a-771a8c62f872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98dd45f9-f14b-42f6-aa8e-5fcbd76560d9",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ea3d299-f668-489d-894b-6e066cbb22f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfc963cd-c2b2-41e8-90f9-39bf9954e99e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7b113e0-9a20-4e69-b7c7-6aa27419c80c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00bd9598-d7d5-47f6-b161-047a8fd07623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c8fd30c-34d4-4597-bed4-1e11c5da131a",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ceb2162-8ca2-4a74-8d73-b8993e55d857",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73b7a8f9-e54f-4946-a426-18bb46672e9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "052c1f26-9ce0-4c12-9288-105b1a5c54dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93779e5b-441f-4e13-963f-c8425fe5db5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96949cfb-e727-4a74-b3e9-fb72d46ae415",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41e5700f-9827-469e-9a90-547994b1f0be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3329357-aba5-4caa-bb1e-ffac8f00d0fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88bbd4fa-d7b5-4781-9058-64f5794025db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "633e0e4c-c27c-4022-b62f-b1d96a2a4361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d620d30c-ce11-45f0-b011-f99288629262",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "027932d6-cb0d-4215-a2d5-6ffc532a272b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e98e874f-2d53-44ae-a4f2-0c855269c09a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2cb65a2-6510-4deb-bd90-1bb9053804fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20186549-edc7-438c-9802-a32f0b27d0ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc1a64e4-9d45-4832-8843-fc7062398ba7",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7355893f-96cf-40e5-a7ee-36a8c469c573",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "140c5b56-665a-4340-9603-6459455602d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65adc391-ec95-4373-922c-bbdd80a1f596",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83120b08-a73c-4873-b6ef-b679ac0eb52c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6903450-a61a-48e5-8e09-5ec27b0c3683",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45915144-69a2-4fb9-a7cf-4857172fdf92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbe28a1f-b914-4ea5-a9eb-a78e9f45cfe4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3af2b121-a589-4380-a574-179f5081a2ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c144de0-e198-47ac-afcb-6a824e381f0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a79a4a0-b5f6-49e2-b323-ac83bb9e07de",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6bc136f-8118-44fb-99f3-aa0cbc1b6663",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56121365-dc46-4334-881b-83dbe91dac46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3ba862c-3c65-4b0d-8e6a-728c98b5b1ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "735fd6b5-30c7-4b1b-8a0f-50d20080b892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e12778be-6cd1-4a09-bc59-54ee3d1614c0",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8211c0c9-7ef0-49ee-a22e-6a17d7a3c8c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbe70235-970b-43ab-9500-a60c15de8fef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97ab72e8-d7f1-47a3-a466-36dd17594745",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b5684f9-fae7-48cd-8c44-5caa82d71a27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7d0e130-b9cd-4c6f-9ca2-92055413952b",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6263a49-91a8-4e86-b713-ef3d9648cb80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb3c7c7e-3eb9-4b7e-ab18-147bbb008f5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "644e5db1-4a45-4657-b958-d325178ceefb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bde4e84-2b84-4b40-bbeb-68cc7d618ec5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6f1ac0d-2e96-4182-a572-4989c8f00483",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0207ee24-9fef-47cb-a606-477855932f2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "daab5243-0aea-4a3e-81eb-c66cf6a36c3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29f90f49-57e8-406a-82ca-f7edeb70c959",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a3ca3e7-07ba-411d-9d64-a399b5b73147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c3ca5c9-74f7-42ea-b6da-d0a434ad3beb",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af8d6ef6-0b56-408b-80c9-fcaf4e5adbfa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28f60f2c-c871-4e51-9b77-ff531a97140a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72e13831-3574-47ef-81c1-9ecb92fdd32f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00d031de-7dee-49e3-9ebf-860f32d1513c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f859ed99-5b0d-425c-a823-64776e472510",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68ecfebb-0943-4101-ae81-ba30b4ef27a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00cb882e-5486-4136-9011-a58b36a2a707"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4e86e5c-1935-458f-bbfc-8e7e0dce76d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4c78bec-b0f2-406e-8d28-8d248f4b1b3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e748c0a-3060-4c7c-93aa-57f527fce52f",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0767c22-1835-4cf7-a558-e285c38bf65f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12e25e76-87f7-4b31-8380-ae2e0ab7e25a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47cd9fca-cc3b-4948-8408-f233ce14d78f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95cf006d-0f7c-4081-8c96-987ed38efea5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94bf5642-ca76-4b3a-8390-cfa71c3484d2",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1594800c-932c-44d1-a730-51b718ec8aee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b6e8aa9-870e-405f-8b88-8076dee3326e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e955ce1b-f92b-443a-912e-691289b19625",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe9aa920-d445-4efd-b0da-ceb9b843a0ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4e263e9-b49d-431e-8c3f-816e77c7125c",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e009dcf-d4df-4c68-827f-5b75626e92c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "355f45e5-512c-4dd3-a9c1-86a3acdcff6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbb751aa-97b8-4205-b8d5-b46e86cc1055",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14d6bc09-c51a-4f49-87cc-149262517f7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "389ccb22-4b4c-4476-b92f-fdb007b7c91f",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5af77ab7-e1f1-459e-82a9-6336690527ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "284cd577-6cbe-43b4-9878-05fee7db50cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "176bde00-96e4-489a-8388-a949789f46d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d4c9246-f059-4c90-991e-77e976b87501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d111b969-ca33-4ddd-9ef3-3bb2a2714676",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a01c0a08-07ca-4256-b1fa-08750b3eab78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9479a00e-0839-493d-bbe7-b8249d766216"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a380e3e9-6b6f-4d56-9769-517fa31899c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "499390cf-deeb-42be-95fe-5d617d5a072e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e69d0e4f-35aa-438a-9b5a-3147f7d0fb78",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd47527b-d3e0-4d47-9319-14366c9f810d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "231dbb3d-996e-40fc-a23a-7efc89be0708"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc595fe7-cfcd-4f33-878e-0ddc7491f055",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09f310c0-41dc-4439-bcb5-812c652acd3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "804cc4d4-f7d2-4277-967f-bd087bcfeb2f",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52a69e6f-749d-4740-852c-ae88bffc47ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3852c962-8d5f-4f42-ae41-baa0a78d5da2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dbe125c-a269-480e-afe0-890e1a82db7a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5fc7626-7112-4aab-a8e2-a1599e8497b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90cdba9c-ea0e-4825-9d58-b7d61a0292ef",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdd545e4-28b4-415e-963c-275ec88ec26a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d79d7713-3907-4ffb-96f4-bdfbfa148b4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a37af77-b005-42be-a75f-60ff3836d62c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc3c4e2b-aa7e-468b-9d2d-d0b79f8efe98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b19a76c-aab9-4060-9263-c9740230e63d",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11544724-d136-456c-a58b-37c845e40a42",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8efe5ac-ccf6-4d95-b0bb-883963f8c78d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaa30deb-78a3-41d6-acae-489cae1362c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d151aa02-fe87-4242-913b-e03d56ccb008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dd1cfeb-33c3-49ea-9837-31b471e5e918",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cc3a885-d6d5-4bf3-87cc-80811677002f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ef6c6c5-f959-431f-aaf2-4d8f54a7af1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "092997b2-160b-42c2-a81d-162bd7adc020",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5092c68d-effb-453e-bc20-a6103694bbdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6a8a67a-7cf5-4621-981e-52f48793dd9e",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "410509c1-3def-48e1-8415-b0da80e76ce4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "350d7583-6ede-400d-9408-273dff80ae66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ce2a106-b062-4041-a927-9db10b317b95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4738aad-c650-4544-9d19-d98577987744"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5442125-d847-439f-b1f5-c7ec6f5fd2bb",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c67814f2-39ef-4142-b702-814e8352cbef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c15a57a-4093-405f-8f4d-d767ebd2a3c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "845b76ba-6332-4b13-9b85-cb14d91d1774",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72367551-597a-45a0-81d4-bb2eaf2f8150"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed2091f9-fe97-4bb9-a0b2-61a322689158",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bcaa8fb-8394-4403-b8c5-4a1449104865",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed971b14-07d5-4876-8591-822a381bf6ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64f30690-b357-4860-9eb9-88e214aa1b8e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e54e84a2-7379-4321-ac16-70e60da252b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d767bfa0-c604-4f40-8051-b5e9e4c88fe0",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3ee844e-ee5a-488a-987f-a3f52ee83f03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b8dee17-7887-4583-a5f0-dc39cf312a1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16a749d6-8224-42c9-a25b-0c65ffa6a17e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69832d1e-3e33-44fa-b2e8-82e43ec4efc5"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eade2c5c-f7b4-48a4-9916-38729d5c606e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a05fe095-5d45-49da-8e68-4d8a3e7321fa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cb76eeb8-57ad-4957-b5a4-0252c652b02c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4f7be571-2994-455f-a07f-54c4e38fffc7"
                    }
                  }
                ]
              },
              {
                "id": "c95113d9-314e-4fe5-b052-9ffad134b598",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "afa43ec9-1253-4b3d-b056-9eb3e243786f",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1b3abf6-8caa-45b0-9fc4-e2d1e4c5873f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a8647016-aeb2-4d70-95c9-30f122a26b94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a42bb71-8e08-4674-b1da-28d43a635063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8a2b9bba-1e8c-4237-b91d-f1cc30bd6782"
                        }
                      }
                    ]
                  },
                  {
                    "id": "826a9ea6-16ba-4fd2-924f-429aa65baf10",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89a544fe-0802-458c-ae4e-c237579c935c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "88553405-f65e-401e-a320-87eac88f4170"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9970c46a-10d7-4e05-9cd1-d1a7e80457bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "df9fb202-e816-4281-a091-0bd47db362d5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6efad2a4-7869-4c63-b490-6513f14bb541",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "796fec60-16e7-4da2-9b38-6dc4709487a3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e87cb3ce-69b6-43e4-8425-66822c25f5ca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "93c5e3a4-127b-4b32-b89d-2c0857430700"
                    }
                  }
                ]
              },
              {
                "id": "b9276fc4-5758-4498-b455-cebfa5b92dac",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "7a91a691-bc4a-432b-abb3-a3be9540c427",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9e2e203-caa0-4329-85b0-9c9678242e6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "dbfdd6eb-db15-4f96-b062-dd9a14fdd33f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ba59454-4b4b-479b-94ea-f141b4a0c3c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d336489d-a931-4580-97a4-87bb59afec59"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0556985f-03fc-47c8-8c93-affb08156c81",
            "name": "Positive Testing",
            "item": [
              {
                "id": "05485ee5-20f4-4d24-a40e-44841f11f7b1",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8bbf53fc-2542-4f80-b070-b0fc182f2586",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "13ab9164-471d-4c1c-a67b-c7212cfa7456"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "096e8f17-bad6-4a82-aa9a-4a3af552d26c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e3c203e0-b82c-4607-afc1-8ba54f57d610"
                    }
                  }
                ]
              },
              {
                "id": "fa93bcbf-4691-46ad-ba7b-2bf948e89fca",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aae56811-8e14-44d3-84ca-864984a8f110",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "625701f5-fed6-42ea-81fa-c0791374bd96"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5a5cdb01-a79b-48bd-b5d7-faec3ab66bf2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fd901235-8f26-48f9-9300-4f2710a225e9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "94d4c589-f65e-4f2e-9653-7daa79300ea8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "f50d882a-a278-4e4d-a6dd-b6e7f49922d7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7ef8d765-8e3f-4acc-a0e0-cebdb26e9a04",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dea44e8c-8582-4ade-82f8-fbf5a5e754c8"
            }
          }
        ]
      },
      {
        "id": "5cbf1c9c-7069-4d95-9590-260e9e7ddc65",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "35d0fb83-f511-4a35-a0a3-428f7e75e799",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2f3128a5-8afd-4145-8611-31cbe0226f9e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "84425b7d-27dd-445b-b4c9-6a907f3c6a57",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d19773af-899e-4fb5-9bf3-d9b69a1d4d4f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "fef32de0-0419-4cb6-b315-eede4353d2c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77fea0e0-6e56-400b-a382-e376576a3d19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bd7f1182-3090-411e-bfae-302273a84aae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc9a0164-5406-4fb5-9f05-33b478cdcaad",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf04d7f8-6847-423e-908e-a1bdad27d513",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "72bff9f7-2665-417a-bd9c-328be3beae46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10455dba-303c-488c-b634-aaf43ee26e99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6a3bb980-9642-40b5-b73c-7ea8695f50fe"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fb34e06b-3ce4-4a4e-ba89-60916a239775",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4d4ea1bc-0645-4406-a239-893a767460cf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "77f51712-4329-400f-b44f-c2e5f47fe7f4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "22d96a5d-d8ab-4048-864f-06100779c7ad"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "42aca1eb-255e-445e-8dda-d3f026932214",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "7ae3d392-a0eb-4af2-9b3d-87d0df9d6db2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "654767d9-6bce-4005-8b26-47313bf48bd9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f582be73-6a4b-401d-ad86-41f9eed13fe3"
            }
          }
        ]
      },
      {
        "id": "d91e157e-ecf5-46ee-bfa5-a792a2f221c3",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "dc5712ac-ef10-4de9-afc1-805f7921f49e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d5ca7f92-92b5-4943-8596-d99cf062f5a1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6b25fd97-b3cf-4347-be11-a78dbb2785de",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52526293-94a4-4fde-846b-b3715b1fe457",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "392e4306-55fd-4fa4-8ab8-b5d984ba03b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1eb4b1a-3be0-4c36-8fa6-9bccb85fb110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8f18023b-ce5f-4eb3-ae92-dad9c9590d88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41b80695-eb07-4dc4-b29f-a7479d7e6803",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cc5f777-864d-4db7-b30f-0b6c23e80e6b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "44780d11-7388-4ae1-b851-bd6721522686"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f1aedab-7bb9-419d-9034-1eb48a49c5e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4a4f832e-a8ce-4cb5-b8c6-42b0e475b85d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d4755654-2e4f-4b60-beb2-422eecfde21b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "02080af4-f938-4ef1-a08a-cf4ad39842f0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "aa5e6a74-a795-4c8a-87f4-60cf3190689f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c09d87ab-0187-43c8-89cb-be0a8e2cc6fe"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "30b0328b-5687-4ab9-afce-44d540f3a078",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d868612c-f2b9-485f-a316-92a74fd5da0a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "06317d54-2b9c-42d0-8b32-7764a1bcd091",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "820091f1-2e56-48df-bdec-21451e165b1e"
            }
          }
        ]
      },
      {
        "id": "4e5e7178-316c-4783-bd46-50bfd7941892",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "40d788ef-a521-4932-8f2b-9285488dd448",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2ec8b6d8-7621-47b4-b24a-e7e63e2bbeb2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "11798b4b-b401-4714-b5ac-d24c4254ecfd",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "848accbb-8d46-4956-8d49-03070060c2d0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6e25c0b4-3264-4777-a2e9-d33a457b1c3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "344a95b3-715c-45ea-a841-a212a022881c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "212babbc-380f-4282-b064-5b889d20f856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee72ad2-5f80-4760-a116-51131381f585",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "070e5ddd-3fe5-4702-833d-b08ca4049819",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "31aebae0-848a-4017-aa72-0eacab16f2ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f2f9e6c-f68f-472b-aced-e4916c776797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a7e04658-718e-4c65-aec5-c5c9110fa9a4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a77c72c4-99d5-48c8-9c88-e019f525d311",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2723c32f-18dd-4267-9ef9-44e4fcedf4ab"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "99c858c1-a582-4110-b5f4-a27752c0bc62",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "76cee1a3-fb98-417e-a0ce-d580f6c363c4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "383213bf-7555-462f-8912-363dcefcbe03",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f5cc0598-3f6e-4f16-b2e5-6b363815afdf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fc9390a8-40ea-403a-a315-fd8eecd48c65",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0be50425-b67c-4c2d-873e-2aacf5b85e55"
            }
          }
        ]
      },
      {
        "id": "fae46e2b-2147-4665-9b08-6ddfece3b7d2",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "67bfdaf8-73b9-44fd-9478-d2e752daa4e7",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4d9f524d-c0d1-4eb9-b38d-49de85916e32",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "7fad131c-c53f-4452-8d1c-6fc2980eb504",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f297b697-773f-4f9b-9708-ee183684cd84",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "12469e59-5aa7-4b09-a15f-27854ddbf27f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 6
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 270,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 342
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 6
      }
    },
    "timings": {
      "responseAverage": 843.193841707431,
      "responseMin": 9,
      "responseMax": 7616,
      "responseSd": 1676.8293704202788,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1674088818020,
      "completed": 1674089053028
    },
    "executions": [
      {
        "id": "70d9a4d1-3253-4e2b-96a7-726ed6f4f953",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "173ecfa6-e3f9-4d96-ba94-5e25b5bb987f",
          "httpRequestId": "61272e06-8549-4388-aa97-0aa9b50907d6"
        },
        "item": {
          "id": "70d9a4d1-3253-4e2b-96a7-726ed6f4f953",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "64aa9068-a854-4ade-9461-ce77d7083e78",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 0
        }
      },
      {
        "id": "f4f39b35-2304-477e-8edb-6077acbc0470",
        "cursor": {
          "ref": "6f66d937-ec86-4c2a-b704-4d527d112cd0",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d22728db-5551-485a-8884-e48bfeae0685"
        },
        "item": {
          "id": "f4f39b35-2304-477e-8edb-6077acbc0470",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "77c56e2a-ec97-4276-a555-347a5320516d",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "2b6ecd32-301c-41d1-96ef-a061232b2700",
        "cursor": {
          "ref": "9e4169ad-fd1b-4c6f-b45f-7bcd8e83f9b0",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "51cf2c40-ce89-49d6-ad89-05719b693912"
        },
        "item": {
          "id": "2b6ecd32-301c-41d1-96ef-a061232b2700",
          "name": "did_json"
        },
        "response": {
          "id": "706b6c1e-bf06-4f6b-bd21-f036037da6e7",
          "status": "OK",
          "code": 200,
          "responseTime": 574,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db5e41b9-fa4a-47c1-9c1f-be0f847d2ad5",
        "cursor": {
          "ref": "8911bf2f-94da-469d-8bb1-c8430ac688d0",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "065aa862-91f7-4211-9c88-6720dfa14994"
        },
        "item": {
          "id": "db5e41b9-fa4a-47c1-9c1f-be0f847d2ad5",
          "name": "did:invalid"
        },
        "response": {
          "id": "ab4f71e9-fec3-4e56-9fe4-5564ffc3672e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db5e41b9-fa4a-47c1-9c1f-be0f847d2ad5",
        "cursor": {
          "ref": "8911bf2f-94da-469d-8bb1-c8430ac688d0",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "065aa862-91f7-4211-9c88-6720dfa14994"
        },
        "item": {
          "id": "db5e41b9-fa4a-47c1-9c1f-be0f847d2ad5",
          "name": "did:invalid"
        },
        "response": {
          "id": "ab4f71e9-fec3-4e56-9fe4-5564ffc3672e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a50a7cfb-4947-4bb8-9af6-8e23924ac457",
        "cursor": {
          "ref": "bfafd667-03c0-4e72-b834-56625fa6c474",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "b42db001-c041-4149-99af-1f75c8a8bf5b"
        },
        "item": {
          "id": "a50a7cfb-4947-4bb8-9af6-8e23924ac457",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "7a6f76bc-1718-4336-9736-bcb8bf97ea78",
          "status": "Not Found",
          "code": 404,
          "responseTime": 421,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53840eef-fa33-4278-bb1c-83c465537cf4",
        "cursor": {
          "ref": "17ef4a62-c95d-478c-b487-a9f6ebb5b292",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "7105d49e-72a3-454a-9745-747217fcc9ac"
        },
        "item": {
          "id": "53840eef-fa33-4278-bb1c-83c465537cf4",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "e67b621e-cb8e-4baa-ad77-b91fea55f7a8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 94,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "561d83e5-56a4-44a2-acd9-208b3c37254b",
        "cursor": {
          "ref": "4f6dd72f-7116-478d-91a1-274a913b9074",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a79c16a9-51c9-4953-98a9-17bf805397e8"
        },
        "item": {
          "id": "561d83e5-56a4-44a2-acd9-208b3c37254b",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "667f6431-e8a5-45ed-8f0a-37c76c98c78a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17c1435f-5fcc-4791-a2c3-be21d68544c3",
        "cursor": {
          "ref": "71d3510b-9234-4e84-88b5-a9e0a2151408",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "646fba16-b62f-40eb-8133-04a853cebf37"
        },
        "item": {
          "id": "17c1435f-5fcc-4791-a2c3-be21d68544c3",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "59d8c764-7571-4b17-925e-f3c011fe9ed2",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "17c1435f-5fcc-4791-a2c3-be21d68544c3",
        "cursor": {
          "ref": "71d3510b-9234-4e84-88b5-a9e0a2151408",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "646fba16-b62f-40eb-8133-04a853cebf37"
        },
        "item": {
          "id": "17c1435f-5fcc-4791-a2c3-be21d68544c3",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "59d8c764-7571-4b17-925e-f3c011fe9ed2",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "aad77d5e-e717-4f6c-adc0-746d6d3f549a",
        "cursor": {
          "ref": "1888c18c-6199-497a-84f2-5e5588f32aaa",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "39c73e16-f23f-42dc-9b49-d511b27830bc"
        },
        "item": {
          "id": "aad77d5e-e717-4f6c-adc0-746d6d3f549a",
          "name": "identifiers"
        },
        "response": {
          "id": "856479bd-0fec-4aa3-8988-49ed4d4544c3",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5154a364-45ce-4d19-b2c2-0d791ed5fc81",
        "cursor": {
          "ref": "6a519109-e559-4721-895f-9722b1b8f857",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f2c9e474-3e56-4b53-9af3-dbf52658ca45"
        },
        "item": {
          "id": "5154a364-45ce-4d19-b2c2-0d791ed5fc81",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "3f9f1fc2-a3a2-4272-b722-daab4e244772",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "5154a364-45ce-4d19-b2c2-0d791ed5fc81",
        "cursor": {
          "ref": "6a519109-e559-4721-895f-9722b1b8f857",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "f2c9e474-3e56-4b53-9af3-dbf52658ca45"
        },
        "item": {
          "id": "5154a364-45ce-4d19-b2c2-0d791ed5fc81",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "3f9f1fc2-a3a2-4272-b722-daab4e244772",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "0e7a7a4f-9475-4e08-a11b-e200f610a8e6",
        "cursor": {
          "ref": "4096aa6e-91d4-466c-b621-f2f946386620",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "dda58bff-2aaa-4de9-b775-8226d69ec9c3"
        },
        "item": {
          "id": "0e7a7a4f-9475-4e08-a11b-e200f610a8e6",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "95ad93c0-85b3-42ea-9bbb-f6c8e2be6a46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "3c5c8550-ce19-4dca-be46-8517aa5be37d",
        "cursor": {
          "ref": "9e9327bb-012e-4170-9cc9-81cda0ef59f9",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "48d0d40f-4ea2-4397-979c-cf5edf8fafe5"
        },
        "item": {
          "id": "3c5c8550-ce19-4dca-be46-8517aa5be37d",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "77ac503a-aec6-4ac2-9ae8-a75937d43b1e",
          "status": "Created",
          "code": 201,
          "responseTime": 164,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "47c9c530-ae38-42ea-ba2a-aa9eedae3ea1",
        "cursor": {
          "ref": "93c2481d-025a-441c-af9c-bf58790412a7",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "e4031440-2920-4482-bc8c-7bb475bbb3f0"
        },
        "item": {
          "id": "47c9c530-ae38-42ea-ba2a-aa9eedae3ea1",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "1a5e89c9-90f5-4323-859c-e00f49c4f060",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "1fdd04c5-f73f-4462-bac2-f4e0191a6b97",
        "cursor": {
          "ref": "732ac465-a732-4694-a39e-df590f950ff0",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "57f9e82c-23f4-4c29-ac1e-5bcee20324f7"
        },
        "item": {
          "id": "1fdd04c5-f73f-4462-bac2-f4e0191a6b97",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "23170bdc-991c-42fb-8915-e10256aac613",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "425cf73a-d05b-4e2e-9034-009d4d4b9ddd",
        "cursor": {
          "ref": "db908846-245f-4573-a516-813c041c233c",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "693e0d4e-990c-4464-8d94-defb259d1787"
        },
        "item": {
          "id": "425cf73a-d05b-4e2e-9034-009d4d4b9ddd",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "fd797117-3779-4147-b66c-c01b862a4574",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "63666b5f-f49b-4348-90d9-804ec83edc00",
        "cursor": {
          "ref": "846a38e4-fbc1-41bb-880d-4e40ea08cff1",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "78e6bfb2-9fa0-41e9-9b1f-421ce0d9a49e"
        },
        "item": {
          "id": "63666b5f-f49b-4348-90d9-804ec83edc00",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "dbc5fa45-17a0-4bf7-a76e-a0ad1856e05e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "2a6786ac-e040-4b21-8c67-fe81ac9c96bc",
        "cursor": {
          "ref": "92df3353-ce56-4b80-94f3-37e0cfd73f93",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "d7f86564-f80a-4d88-895a-4769bd81b357"
        },
        "item": {
          "id": "2a6786ac-e040-4b21-8c67-fe81ac9c96bc",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "b689d02f-9cac-45ea-9c28-7357e61e0070",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "62dd067b-9d19-497d-9f66-e5edec742b9b",
        "cursor": {
          "ref": "771667e0-d35e-48bb-9782-fe76b89b871e",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "bfd9309c-235d-4946-b70e-b894f0a08549"
        },
        "item": {
          "id": "62dd067b-9d19-497d-9f66-e5edec742b9b",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "d144a82e-c7e2-4e2d-bf74-a1fb16697bce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "bd9010b9-e276-46e4-ade1-daeb0dc91221",
        "cursor": {
          "ref": "624ab364-9a16-49f8-a09a-466bb37f919d",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "7ffb284d-cb43-4756-b74e-a7849de97e18"
        },
        "item": {
          "id": "bd9010b9-e276-46e4-ade1-daeb0dc91221",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "7b54dc49-4eb6-4ad8-b9ab-d649b92fde7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "d86de749-67a3-45b8-b924-a96f4f1a1768",
        "cursor": {
          "ref": "2e38d504-b05f-4a75-8485-c53708f6be95",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "3a0e966f-8f36-4079-8b17-89dfa2ac886d"
        },
        "item": {
          "id": "d86de749-67a3-45b8-b924-a96f4f1a1768",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "30a2925e-9267-4191-bb7b-8d4ed42d1f59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "42b54741-2a5f-4cd0-994f-c491654b5964",
        "cursor": {
          "ref": "80120d8f-252e-4496-922f-1eb4b9290475",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "e65028e3-40dc-4fd6-a1c4-df40bcbe88b7"
        },
        "item": {
          "id": "42b54741-2a5f-4cd0-994f-c491654b5964",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "89056b1a-7a51-4a78-9439-c7218592215f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "50ee7e6d-b67c-4fd4-9695-e32b6d403518",
        "cursor": {
          "ref": "320c179f-b155-4236-953d-2741c0b06ce5",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f6a25175-2125-4ea9-8c47-692e8ff38733"
        },
        "item": {
          "id": "50ee7e6d-b67c-4fd4-9695-e32b6d403518",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "df2b1a29-3f55-4e04-87e5-d88e05e2ba57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "50168463-eb8b-4524-ba10-faf6cea93572",
        "cursor": {
          "ref": "23a175a9-8f35-4c73-a7c4-e7c7ba314580",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "38ec4541-91b7-41a0-a76f-899a9279eb16"
        },
        "item": {
          "id": "50168463-eb8b-4524-ba10-faf6cea93572",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "1571ae2d-8d4a-44c1-8976-fdcbd462f380",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "0396732e-7812-41f5-8d7d-69a970322fb3",
        "cursor": {
          "ref": "40309495-4ed3-409d-b223-af797e1037d9",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "4fca6014-c09d-462a-b0a7-125a5ba32f1b"
        },
        "item": {
          "id": "0396732e-7812-41f5-8d7d-69a970322fb3",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "717c550c-6b37-45ef-8e6a-455c101166da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "e52ffdbd-4ee5-4c9f-a9cb-5047778ee593",
        "cursor": {
          "ref": "048741be-95d6-45ff-834a-aff10a480cdd",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "6b52b1e1-63bc-4fbf-9658-10e6af569be6"
        },
        "item": {
          "id": "e52ffdbd-4ee5-4c9f-a9cb-5047778ee593",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "cbbd263a-1891-4ab2-9bf7-3ab293e52671",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "73ca0373-2d68-49ce-b131-cd6ced6ffb0a",
        "cursor": {
          "ref": "cfbceb16-1053-49c9-b3b5-4d91e49f07b6",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "3b91103d-190d-4b8b-8dea-6e8324fce631"
        },
        "item": {
          "id": "73ca0373-2d68-49ce-b131-cd6ced6ffb0a",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "d4854aed-e3ee-48d2-bbf4-ef02e7a5165c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "ddb68e13-e30c-4929-bf58-1ab65276ce17",
        "cursor": {
          "ref": "d1406a9f-7a00-4cfc-b1fc-669edf315c1f",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "db24603f-bcfc-4db1-9c37-76e45d142ea5"
        },
        "item": {
          "id": "ddb68e13-e30c-4929-bf58-1ab65276ce17",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "2f0a1f81-39fb-4320-8c27-ff66ecf746a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "8c7a3c64-93c7-45e6-a55d-212eed70874d",
        "cursor": {
          "ref": "bae1eb82-3bc4-4fdb-a8c0-0c25d3717195",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "59ee9036-db7d-42e5-b04c-14381d07fa4a"
        },
        "item": {
          "id": "8c7a3c64-93c7-45e6-a55d-212eed70874d",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "e6d47c22-3ed7-46d1-8bf8-b4bbe61f409d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "5e138458-763f-4a88-a6a3-67e6d6f1c937",
        "cursor": {
          "ref": "d62e3a71-0f4d-400d-aa90-25c6a7292ce1",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "830a8ff4-19a5-4033-9661-99afcd3aebe1"
        },
        "item": {
          "id": "5e138458-763f-4a88-a6a3-67e6d6f1c937",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "df3696f3-aebf-4a40-92f6-9b3b42fcb1ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "3c875263-0a01-487c-b863-cd2898f9720e",
        "cursor": {
          "ref": "ba24eedb-4115-4d5c-a453-579a76e0f585",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "157f5b5b-6f11-49a8-906e-e73421f08a61"
        },
        "item": {
          "id": "3c875263-0a01-487c-b863-cd2898f9720e",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "69200a58-ce44-468d-971d-cd28ce40f3e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "5d4a07ee-cea2-400a-92d0-56e285b2e4cc",
        "cursor": {
          "ref": "86873fd4-0f75-4b2e-9d45-1b1d430c4290",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "baea74f7-ae07-4a83-a971-7c08a27829e8"
        },
        "item": {
          "id": "5d4a07ee-cea2-400a-92d0-56e285b2e4cc",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "8393eca7-855e-416a-9d7a-dafc1ba1128b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "5317afba-a764-4a74-b51e-47b1437467c2",
        "cursor": {
          "ref": "af8c0afe-3dba-43c0-a42b-fc64e4a9a518",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "deb01508-0d3c-4606-893d-604da38f40ab"
        },
        "item": {
          "id": "5317afba-a764-4a74-b51e-47b1437467c2",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "9c78181b-6b13-4302-b9d3-dcbbb9c100f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "64608c68-f6c5-4234-853c-a92948ac19cb",
        "cursor": {
          "ref": "e2a31e4a-d3c3-4b20-9f71-b08468e6fc20",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "31b1b22d-fc10-4530-ba15-a6a4bda8fbd2"
        },
        "item": {
          "id": "64608c68-f6c5-4234-853c-a92948ac19cb",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ec6c3a02-0822-4683-b04d-b242d12a0414",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "20913bac-8fe8-4c25-ba47-4dd6662e1ed6",
        "cursor": {
          "ref": "82d79431-050b-4740-9c2d-647d684e4a6a",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "1627ec0f-000f-4344-9315-0448d6b32ab6"
        },
        "item": {
          "id": "20913bac-8fe8-4c25-ba47-4dd6662e1ed6",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "5c94d1d3-c688-4cce-84de-e5c4dd65446d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "7ae48bba-b956-4d3c-b2ad-99f862b9fd5d",
        "cursor": {
          "ref": "3fe84e17-c66c-433f-9de2-66130fd04562",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "b3006765-eb86-4363-9eec-bd3b9bf163a4"
        },
        "item": {
          "id": "7ae48bba-b956-4d3c-b2ad-99f862b9fd5d",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "80892272-9d92-4584-8b0e-a98a834b370a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "a99968a4-7248-4afa-8d7e-78167e48adb3",
        "cursor": {
          "ref": "0ee74c95-d1b6-4d8c-976a-ca52e400cff1",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "9e8ff042-5a77-444e-99cf-5d89d3b9174e"
        },
        "item": {
          "id": "a99968a4-7248-4afa-8d7e-78167e48adb3",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "954e5b86-9f22-4d00-b096-755a58ba4673",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4708,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "c1d3d61f-b783-4000-a996-0b0319bda9b2",
        "cursor": {
          "ref": "278db070-17ab-4bf2-b3a8-c2eb7e298ad1",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "142a9b69-0525-4c4b-af69-bad7d40710b2"
        },
        "item": {
          "id": "c1d3d61f-b783-4000-a996-0b0319bda9b2",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "18f72439-29c1-4307-b4dd-ec2ddca6f75f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6342,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "4942e9d0-65a0-433d-98b9-89da52cc7289",
        "cursor": {
          "ref": "f61edcce-cb31-4a90-92c0-98e9fbde06ea",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "aa208b59-855f-46a0-a589-f7e309f03baf"
        },
        "item": {
          "id": "4942e9d0-65a0-433d-98b9-89da52cc7289",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "df8ea05d-efe1-4c45-a260-2380e4b15b87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4048,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "b01a1861-da28-4116-86f3-2acb11071dc2",
        "cursor": {
          "ref": "4edc9fda-5579-4fee-9ad7-e7ee34a8b942",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "ee55f8bc-940b-45a7-b5b0-7dea51ba6a2a"
        },
        "item": {
          "id": "b01a1861-da28-4116-86f3-2acb11071dc2",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "ef3417c7-38f6-41ec-8aed-f686aa58a751",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3946,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "0debe927-2f6c-47f0-bf15-efebb88de042",
        "cursor": {
          "ref": "46b470a9-a950-48ee-99cd-6732312b5075",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "1ed5331f-e601-41e2-8a28-d6130dd2bb0a"
        },
        "item": {
          "id": "0debe927-2f6c-47f0-bf15-efebb88de042",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "975a3ac2-0d48-4597-8288-b2184278a67e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 3956,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "d7ce8014-9b42-4839-9891-c8c97e4e7a51",
        "cursor": {
          "ref": "843c2e77-7912-4738-aa30-ba9ac967b1e3",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "c85a9536-310f-428b-9efa-6829deb077e7"
        },
        "item": {
          "id": "d7ce8014-9b42-4839-9891-c8c97e4e7a51",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "c8659a52-2754-4f66-a7bd-1726b5fe57c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "1fbb2ac1-f46d-44b0-a1eb-a0959f775184",
        "cursor": {
          "ref": "3a96c73b-395b-4d70-9784-c3ac409b8fa8",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f58a3517-1ca4-4ca1-9580-cfebe10437ca"
        },
        "item": {
          "id": "1fbb2ac1-f46d-44b0-a1eb-a0959f775184",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "681aca9e-b513-41a1-91ed-f403ecf99f61",
          "status": "Created",
          "code": 201,
          "responseTime": 3921,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "ff3296a5-7d3e-4680-96b9-58d38f78cf6f",
        "cursor": {
          "ref": "4273992b-4c29-44e2-bdbb-85cc2b0c3c6f",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a5c9a00e-80cb-4299-acfc-f9f9445fde65"
        },
        "item": {
          "id": "ff3296a5-7d3e-4680-96b9-58d38f78cf6f",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "878f4200-fc01-44d6-ab1e-8d201e82be61",
          "status": "Created",
          "code": 201,
          "responseTime": 4004,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "54cfe3b9-3f41-42d6-8860-7bc49bf93158",
        "cursor": {
          "ref": "bb34d62b-6dd8-4008-a1ec-3c55f2139fbf",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "c955aa1a-94a6-49e0-8a4a-45add4db050c"
        },
        "item": {
          "id": "54cfe3b9-3f41-42d6-8860-7bc49bf93158",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "1b586c18-41c4-4d94-bc3f-968f198dbedc",
          "status": "Created",
          "code": 201,
          "responseTime": 5460,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "7dbd2859-45dd-41a5-b338-b97a3c40a1b6",
        "cursor": {
          "ref": "acf37ec5-d904-4f67-80f3-591645984384",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "821842f1-f463-4dcd-b695-51d7eb2e63a4"
        },
        "item": {
          "id": "7dbd2859-45dd-41a5-b338-b97a3c40a1b6",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "62fb2c27-90ce-488f-bc7e-334ef3ba875b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 131,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "7138613e-2b9d-4c16-84f4-ead7d82612e2",
        "cursor": {
          "ref": "be0ba083-5f3b-4b51-98fe-725fe9daceac",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "1647ff88-aaf2-412c-aabc-d88c53a6cbb5"
        },
        "item": {
          "id": "7138613e-2b9d-4c16-84f4-ead7d82612e2",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "1dbb3964-4da5-41e4-91fd-bfb065c2973d",
          "status": "Created",
          "code": 201,
          "responseTime": 4091,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "6c24a138-7717-45ab-b4c2-7b4b65c404a0",
        "cursor": {
          "ref": "42a89812-1be0-4539-9d48-aa3b2e90cc94",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "799d5c30-05c7-48c9-a367-7cd8ed5bb1cf"
        },
        "item": {
          "id": "6c24a138-7717-45ab-b4c2-7b4b65c404a0",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "3807f324-7f10-4117-b594-b0f8f2b12d67",
          "status": "Created",
          "code": 201,
          "responseTime": 4012,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "162a9b74-4189-4269-b0ac-8ac03ebfca0c",
        "cursor": {
          "ref": "19d9cb8e-5f09-496d-b264-13235910825f",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "02d64276-24a7-4dd4-9bbb-216485dd2419"
        },
        "item": {
          "id": "162a9b74-4189-4269-b0ac-8ac03ebfca0c",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "6f84f2fb-bd1e-4a22-b1d0-8d0a19ddb33d",
          "status": "Created",
          "code": 201,
          "responseTime": 3758,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "60c72bc5-25c3-4b66-8b3d-0fa165cdbbca",
        "cursor": {
          "ref": "75b1feee-f840-4bae-8999-779124aa6736",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "77b4254d-31bb-42a8-85fc-ba5985c86b53"
        },
        "item": {
          "id": "60c72bc5-25c3-4b66-8b3d-0fa165cdbbca",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "8d4806c1-efae-4d85-94ec-f3be139151d2",
          "status": "Created",
          "code": 201,
          "responseTime": 4594,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "5b994430-6f9e-493d-963c-85e869935d9b",
        "cursor": {
          "ref": "179589f1-aeb4-40b3-9135-d8e35a7f554f",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "35dcf507-aaf3-4295-a1ec-4fb5dcf37bd2"
        },
        "item": {
          "id": "5b994430-6f9e-493d-963c-85e869935d9b",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "b42540d5-1ec0-403b-87b8-777f39371a26",
          "status": "Created",
          "code": 201,
          "responseTime": 5322,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "f2dc9ec1-425d-4788-83d9-6e71449ab1de",
        "cursor": {
          "ref": "840393b8-1957-4994-9c9b-1ae5ee7490b6",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "f8e6f57e-6cdf-401d-8168-ba97270ec397"
        },
        "item": {
          "id": "f2dc9ec1-425d-4788-83d9-6e71449ab1de",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "a23474f1-0208-4f49-9026-7215353b64e4",
          "status": "Created",
          "code": 201,
          "responseTime": 3929,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "b3d7f78d-20dd-4d5d-a543-c5a27c18fe1b",
        "cursor": {
          "ref": "a77bbce2-1919-4f6a-b5fd-9720127db2e0",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "e6225cfb-5646-44a0-b41c-2e1bf210ed5d"
        },
        "item": {
          "id": "b3d7f78d-20dd-4d5d-a543-c5a27c18fe1b",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "cedbd7bb-ac79-400b-82e2-58c390f6c17c",
          "status": "Created",
          "code": 201,
          "responseTime": 3978,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "73ca96aa-b5a8-4165-b13f-86f360b11405",
        "cursor": {
          "ref": "c7ccf014-0db9-49ed-b9ba-4db124035e36",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "07fb684f-00c8-4eef-8f91-653a4f27f4fc"
        },
        "item": {
          "id": "73ca96aa-b5a8-4165-b13f-86f360b11405",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "46f52cf2-a288-4f6a-a19b-338f4681dbde",
          "status": "Created",
          "code": 201,
          "responseTime": 3831,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "afd0e523-b200-4a13-9b2b-ed0f218d001d",
        "cursor": {
          "ref": "f6abcea6-2336-42c1-8f4d-0f60f48d4123",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "c6c3f772-90c8-45eb-9c23-550a37f60ba4"
        },
        "item": {
          "id": "afd0e523-b200-4a13-9b2b-ed0f218d001d",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "03ccd8fb-3f80-4650-a188-01656f73605e",
          "status": "Created",
          "code": 201,
          "responseTime": 4028,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "48076754-53b5-4ac0-8086-5a39bd8776b4",
        "cursor": {
          "ref": "958c8482-e5fa-4171-9bee-c5029c581f41",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "b3c7c152-8635-4b68-a9b6-2d7568787f41"
        },
        "item": {
          "id": "48076754-53b5-4ac0-8086-5a39bd8776b4",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "f4fd941f-347e-4843-a7be-2dad947aaa79",
          "status": "Created",
          "code": 201,
          "responseTime": 4320,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "0a03227c-f404-4cee-965a-22925ce87db0",
        "cursor": {
          "ref": "324d266a-496b-4d00-94b9-db862747d3a8",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "24f8cfb9-fc1c-442d-b93c-1b25f018cf4c"
        },
        "item": {
          "id": "0a03227c-f404-4cee-965a-22925ce87db0",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "ee2f1385-8d62-4a26-bddd-b907872fd849",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 853,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "00b806dc-f36f-47e8-9e95-c74d534df91e",
        "cursor": {
          "ref": "40a7c45e-fa36-4bbe-a338-3e8717aa5c59",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "8f57e09b-0324-4bb2-babc-3a3737a99bad"
        },
        "item": {
          "id": "00b806dc-f36f-47e8-9e95-c74d534df91e",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "2af564bb-1b10-4230-a01d-4ea5797515cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 434,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "616af89a-e9d0-4cb0-9e5e-8141c15c821d",
        "cursor": {
          "ref": "9162ab61-de75-4bde-8fc0-56942e33cdb1",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "4bf94aba-ef33-402c-804d-1821fcfcc6be"
        },
        "item": {
          "id": "616af89a-e9d0-4cb0-9e5e-8141c15c821d",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "2b27a80b-e0a1-4ce4-9121-3c0d7b3a8650",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "9a65dc40-a305-4f67-877c-562a136d8c4f",
        "cursor": {
          "ref": "03da3bcd-389f-4015-b1c3-47cb3a5bbbbb",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "7fcbaf8a-516b-4180-b16f-8388c58b100f"
        },
        "item": {
          "id": "9a65dc40-a305-4f67-877c-562a136d8c4f",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "1a347e64-1c8d-4f16-a8f8-c0111eee954b",
          "status": "Created",
          "code": 201,
          "responseTime": 4243,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "20eca9c4-8c47-4a56-aff7-5ad5c7535bbf",
        "cursor": {
          "ref": "3ac07e33-9d6e-4400-99b1-e15517cbaee0",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "bbd22e95-ced0-49fd-ab2b-a95a696911e7"
        },
        "item": {
          "id": "20eca9c4-8c47-4a56-aff7-5ad5c7535bbf",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "b811a5ac-97db-4b08-b485-73927cc65529",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "cd5f25bc-be15-4b87-b2dc-8184c699e88c",
        "cursor": {
          "ref": "f9a2baac-dc86-48de-b52d-b5b4f51476e5",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "427a9ffa-eec2-43ef-9712-338fb1d8394b"
        },
        "item": {
          "id": "cd5f25bc-be15-4b87-b2dc-8184c699e88c",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "9035e4aa-49ec-44e7-80db-dc7174389df1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "a50c69d5-02e0-4883-b6e2-025c2f925950",
        "cursor": {
          "ref": "0cd34de3-355e-4d73-b255-eac5e607e1ff",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "6135d61f-b5a1-426f-8c69-34d25511adcc"
        },
        "item": {
          "id": "a50c69d5-02e0-4883-b6e2-025c2f925950",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "51fccd7d-587e-47d1-9f3d-d19298cfe26d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "e88a4221-564b-4f6f-9a4d-c16475b4af84",
        "cursor": {
          "ref": "3233a397-4a08-432e-bc58-c3b1cfae1716",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "c853e5ff-dd72-432d-8eb6-da70ccbf60b2"
        },
        "item": {
          "id": "e88a4221-564b-4f6f-9a4d-c16475b4af84",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "f8e69ef4-9235-4c5b-a3d2-3d866e0a06d6",
          "status": "Created",
          "code": 201,
          "responseTime": 3971,
          "responseSize": 709
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "e3f34e5d-b193-4898-91b1-271fa81041b1",
        "cursor": {
          "ref": "3890b6d3-46cd-436b-b05f-cda36a3f42f1",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "12efe44f-847e-439d-8fa4-82a5d10448da"
        },
        "item": {
          "id": "e3f34e5d-b193-4898-91b1-271fa81041b1",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "308f5c86-ba76-4d1c-8eb5-951eb918bdd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 74
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "4b8b3ac1-4f6e-45c9-92f4-bf58482935b9",
        "cursor": {
          "ref": "bf5f1a0b-e449-454a-9f34-6daf07b24fdc",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "beee2293-08a9-40a6-b73c-44e889bc6418"
        },
        "item": {
          "id": "4b8b3ac1-4f6e-45c9-92f4-bf58482935b9",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "5720170c-8442-4198-9ed1-3251588db63b",
          "status": "Created",
          "code": 201,
          "responseTime": 4113,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "f74f6d8d-5e01-4c8c-8255-2cb81c1a239d",
        "cursor": {
          "ref": "0fdc15f6-6bb1-4425-b0ac-5a2ec26bdeed",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "b81494cb-283b-4e86-acdd-31484f0061ac"
        },
        "item": {
          "id": "f74f6d8d-5e01-4c8c-8255-2cb81c1a239d",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "16342bb0-27c2-48f6-a9e5-42247c2703b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "52856277-a394-4bc3-b833-ee18cc3038a2",
        "cursor": {
          "ref": "b2381729-c0d6-4123-b73c-6cfd70d51be7",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "d3372e98-8dfa-4bda-9e2c-9b253e574935"
        },
        "item": {
          "id": "52856277-a394-4bc3-b833-ee18cc3038a2",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "bf573107-024b-4396-86d0-42165c82e8ad",
          "status": "Created",
          "code": 201,
          "responseTime": 4307,
          "responseSize": 707
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "5ab17337-2c84-45d4-85d1-03984232ef8a",
        "cursor": {
          "ref": "bef1fbed-4c11-4850-997a-28a25d11e923",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "7b797286-7a25-45ef-a03e-dc76e52863de"
        },
        "item": {
          "id": "5ab17337-2c84-45d4-85d1-03984232ef8a",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "7a2838c1-d3ef-4d6d-88ad-0bf133f7d2ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4005,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "b95e9212-467d-4192-b469-ab2e9b52c23f",
        "cursor": {
          "ref": "c321bf51-33c5-4fdd-8b25-a0789169ac2a",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "807fd6c2-0796-4cad-846f-808d754c9f5d"
        },
        "item": {
          "id": "b95e9212-467d-4192-b469-ab2e9b52c23f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "6874bb86-bb1c-4c1a-9640-7fe9e012bbad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4865,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "5d65fbc1-3564-4706-9eb2-fa09ed8115e6",
        "cursor": {
          "ref": "c0f8c73f-9d56-409b-9887-c91039b6c3d0",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "d14389e2-b204-424c-86aa-4b58abac15ca"
        },
        "item": {
          "id": "5d65fbc1-3564-4706-9eb2-fa09ed8115e6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "036f47a0-a10f-4716-9c77-438f77650cb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 527,
          "responseSize": 78
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "81be53a3-8231-4106-98eb-fc84a8255bdf",
        "cursor": {
          "ref": "65aa2a69-f8b2-47de-9d1c-2fb387c29446",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "9e1ef76b-cdd6-45a8-87d1-39c87c8e6dc1"
        },
        "item": {
          "id": "81be53a3-8231-4106-98eb-fc84a8255bdf",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "fc633059-7013-4f9e-93a5-f6ce59d59762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4154,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "27b1bc34-1437-4e5a-a2f2-45524f4d27fc",
        "cursor": {
          "ref": "34992de8-cd64-4e09-ac8c-cecd3352e291",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "204aa022-32e9-4a32-ad68-c4e507eca8e0"
        },
        "item": {
          "id": "27b1bc34-1437-4e5a-a2f2-45524f4d27fc",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "3ebd1e89-9833-468d-8742-d9464ea99871",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 91
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "8271fbaf-d63d-4b4b-bf52-20a3a0cbe489",
        "cursor": {
          "ref": "d927ab81-092d-4c0b-9c16-0a14d043c4c6",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "279e452e-c9db-4ba6-88a3-2734cb3f2800"
        },
        "item": {
          "id": "8271fbaf-d63d-4b4b-bf52-20a3a0cbe489",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "f5a60b5a-6e3a-44bc-80bf-80f114134225",
          "status": "Created",
          "code": 201,
          "responseTime": 5332,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "9dcfc93b-cb6f-4218-a1b1-50fb2e659da4",
        "cursor": {
          "ref": "71e36780-664d-45c7-b2e2-01c346c11e87",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "ab671f80-fc98-4d96-a705-94e33bccbc87"
        },
        "item": {
          "id": "9dcfc93b-cb6f-4218-a1b1-50fb2e659da4",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "7a5f8dae-e2b2-4a2b-94e0-009641ec78e9",
          "status": "Created",
          "code": 201,
          "responseTime": 5144,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "4fb22dd5-2003-497a-94d4-8022b9e1e36d",
        "cursor": {
          "ref": "2e261f6b-bc6a-4b80-b3ad-1fe969ef7a69",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "de0516bc-eb2d-456c-9640-af9576a104ff"
        },
        "item": {
          "id": "4fb22dd5-2003-497a-94d4-8022b9e1e36d",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "e480f8bd-14b1-43ac-baab-e71d8f825d12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "1ebf8da7-b9a2-4489-ac07-a596dfa67ca3",
        "cursor": {
          "ref": "9da49d59-9714-42f2-ab28-dbb83cc66312",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "1561c922-90dc-4758-8b56-e9928b142434"
        },
        "item": {
          "id": "1ebf8da7-b9a2-4489-ac07-a596dfa67ca3",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "ffcb5f49-a27a-4716-af62-9c23e1ea46a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "194ff2df-b1d0-4108-b33a-c4e52914b230",
        "cursor": {
          "ref": "94fc3a17-1809-4df3-aea8-72423200e7ea",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "c3435a16-af18-4eff-a160-83acf25b9a3b"
        },
        "item": {
          "id": "194ff2df-b1d0-4108-b33a-c4e52914b230",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "507f4d64-dd8c-47dc-b853-8ae5b446f6d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 91
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "8d770e93-704d-4431-afc8-10b3c6ee3c5b",
        "cursor": {
          "ref": "0be9d9c7-4637-4dcb-87c9-3cb7598c5d39",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "f5aa6f49-2d25-4a9a-8dd0-82330a778f81"
        },
        "item": {
          "id": "8d770e93-704d-4431-afc8-10b3c6ee3c5b",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "b35a8542-7092-490a-92dc-80bf387e5c19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "694cb902-89d3-4d1c-bddd-3a7bdeb9c89d",
        "cursor": {
          "ref": "139aecff-18b8-4440-a640-43e4b4f30403",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "7d823461-ac0c-4aef-a9d6-eb652491ac2c"
        },
        "item": {
          "id": "694cb902-89d3-4d1c-bddd-3a7bdeb9c89d",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "f18ce349-7b5c-4ff1-9fe2-a477a8eed3c1",
          "status": "Created",
          "code": 201,
          "responseTime": 4347,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "9a87b425-398f-41f6-ad83-3b62b47c05fd",
        "cursor": {
          "ref": "334d5f11-f6e8-4b4c-a254-e7d967f83b68",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "7cadf973-f230-41e8-8a9b-4e8d5d4bd00b"
        },
        "item": {
          "id": "9a87b425-398f-41f6-ad83-3b62b47c05fd",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "31983361-7dbe-4fc6-bec8-d9b7745a3fc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "65b25ecb-d717-4ec5-96a9-91c45288634a",
        "cursor": {
          "ref": "ff8e19e3-6366-4cbb-89b1-e86d66e12a0a",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "2b04afd5-07fb-4780-8211-5bdfac87c829"
        },
        "item": {
          "id": "65b25ecb-d717-4ec5-96a9-91c45288634a",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "570e5f5a-88b9-4afb-b0b8-fa20a7e4d471",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "101f0d79-b760-49ac-98ad-1ccdcfd0e400",
        "cursor": {
          "ref": "7b0c8a8b-749b-4c37-805c-060bfe5e4667",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "1be2d130-0f18-4a75-abc6-cd40dedc63cf"
        },
        "item": {
          "id": "101f0d79-b760-49ac-98ad-1ccdcfd0e400",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "c5a25f48-5fe5-44ea-87e6-aeab2e983f52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "19f2b170-3fe0-4935-8882-979e98d1740d",
        "cursor": {
          "ref": "3d83ef1e-7c05-46e7-96d0-fadf3feaa3ff",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "279de449-cf71-4098-8680-f096d9e049d8"
        },
        "item": {
          "id": "19f2b170-3fe0-4935-8882-979e98d1740d",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "d9621661-39d9-4b54-8c86-04acba75c983",
          "status": "Created",
          "code": 201,
          "responseTime": 4370,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "80614512-e657-40c5-8b83-2d91cbe490ab",
        "cursor": {
          "ref": "fe95a229-55ea-4c33-9e19-f769125ced2a",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "e7af5c9e-b04d-41a1-b684-9d573580d70b"
        },
        "item": {
          "id": "80614512-e657-40c5-8b83-2d91cbe490ab",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "5ce1bc7f-968f-4680-a0e6-22c66fcc2972",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "a897a95b-2a1a-42d9-bb96-a7dba679a890",
        "cursor": {
          "ref": "b19a073f-db37-48dc-a762-5fca718dbd81",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "9c789026-d373-4614-8957-98c389ae6da1"
        },
        "item": {
          "id": "a897a95b-2a1a-42d9-bb96-a7dba679a890",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "d7df5b20-bd7a-4817-8073-4fe2a31dd104",
          "status": "Created",
          "code": 201,
          "responseTime": 4302,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "2a593305-b761-45f2-9a5f-fe098846be9c",
        "cursor": {
          "ref": "8a374172-beea-497d-95f6-5373ad7a7ed5",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "46a8f854-de5d-47a5-a343-2a84249fff42"
        },
        "item": {
          "id": "2a593305-b761-45f2-9a5f-fe098846be9c",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "77336405-678f-4f89-bb40-0be503c04164",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "c0d9a9ab-a08e-4f3b-a781-fe23b80c2eb7",
        "cursor": {
          "ref": "52cdd045-78e2-4e26-bf0e-5c8d93624edf",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "5d3e6646-2e55-49c2-98be-7cd3a1681a83"
        },
        "item": {
          "id": "c0d9a9ab-a08e-4f3b-a781-fe23b80c2eb7",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "89c506e9-1db1-4e42-8e8f-3e7df27504b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "8edbb8cd-5274-432d-a16a-a942b2862daa",
        "cursor": {
          "ref": "836868bb-83b8-47fa-8f9f-e298627be879",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "ebe03af0-10ba-41da-8ef3-810846b67a50"
        },
        "item": {
          "id": "8edbb8cd-5274-432d-a16a-a942b2862daa",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "39390c06-bf5e-4b21-a414-43952114d053",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "9c0d01b0-53d9-44bd-85de-29510b65c5c3",
        "cursor": {
          "ref": "8b031dca-a018-4688-8169-1a2debc804e5",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "77239889-c53d-4f21-bbc4-b83714877fce"
        },
        "item": {
          "id": "9c0d01b0-53d9-44bd-85de-29510b65c5c3",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "b3d3be05-af59-439e-a112-3444a0e18599",
          "status": "Created",
          "code": 201,
          "responseTime": 6245,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "2d78ddf4-c4a7-4cdf-80c6-30b402c55e16",
        "cursor": {
          "ref": "f5c9a2e2-edda-4d74-b269-06ce0b47458e",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "04b11f75-c9d0-4e6e-a8ef-61be976eb7e2"
        },
        "item": {
          "id": "2d78ddf4-c4a7-4cdf-80c6-30b402c55e16",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "0dd9ac7e-371e-4240-8c5f-b9c1e6043f85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 453,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "9bc89c1b-8bd4-47be-ba91-6b66de75a376",
        "cursor": {
          "ref": "c3c8c702-8f23-4e44-8cf0-13eb98d32df6",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "a78531b3-108c-4759-90d9-5349c65f1987"
        },
        "item": {
          "id": "9bc89c1b-8bd4-47be-ba91-6b66de75a376",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "f2bdd2c2-6c48-42ef-8b26-319c8e8aad1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 247,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "f3f40788-e70c-4944-8578-edc9571afe1b",
        "cursor": {
          "ref": "568efef6-0777-46a6-861b-162b74aa94c8",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "5c488679-a3e8-4d96-a6b8-32b7fd516f5c"
        },
        "item": {
          "id": "f3f40788-e70c-4944-8578-edc9571afe1b",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "97135398-24df-4957-ae62-79d4f225896b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "f9026deb-1901-4167-9b47-ff652a316dcc",
        "cursor": {
          "ref": "c0d7143b-194b-48a3-bfea-7e661499c32f",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "b53bf55d-6e3f-4ae2-b601-841b33fcb2cb"
        },
        "item": {
          "id": "f9026deb-1901-4167-9b47-ff652a316dcc",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "339a4732-d6d9-48bf-9d01-2846c3f243e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "7650ff89-9b36-4e63-99ec-9c8c94328828",
        "cursor": {
          "ref": "70f765a7-78cb-4623-982f-4332d90c0554",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "eca0260b-c7a8-4047-9dc6-66c6a02d1dbb"
        },
        "item": {
          "id": "7650ff89-9b36-4e63-99ec-9c8c94328828",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "ee9f5891-e1ab-41a0-9e5d-49b8c5144823",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "bf1c0403-e8a7-4fcb-b188-31d420734bb0",
        "cursor": {
          "ref": "d1b3e7d2-1143-4892-b5c4-f29648bdb459",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "20d9ae1f-8c96-4bae-aef7-e2fa5e0db427"
        },
        "item": {
          "id": "bf1c0403-e8a7-4fcb-b188-31d420734bb0",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "8d246ae1-6891-483b-a6b3-b131ff181329",
          "status": "Created",
          "code": 201,
          "responseTime": 4619,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "482342f8-a566-4539-bf65-ebb3dfcbc42b",
        "cursor": {
          "ref": "40d55d80-6ca5-485b-bdfa-b8c00b666df7",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "5fd56968-bbf2-4f29-8ebd-89d4a9966619"
        },
        "item": {
          "id": "482342f8-a566-4539-bf65-ebb3dfcbc42b",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "af3cf351-6acb-438a-8289-0b637086b4cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "f63d1fb2-4c72-4fe3-b924-e18b527f17f7",
        "cursor": {
          "ref": "8c658d36-4134-4efa-9579-8b9bcf432bce",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "3d6b7222-f625-481f-b60a-9fb1a962d042"
        },
        "item": {
          "id": "f63d1fb2-4c72-4fe3-b924-e18b527f17f7",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "c8a8e552-a7fd-47ef-bfaf-42b50efda47f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "3e7ea170-d0c3-4375-82f6-813e86a22194",
        "cursor": {
          "ref": "3d219c0c-4db0-4747-b870-5238607ca714",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "e8cdae22-ec80-4306-925f-2567a91e165d"
        },
        "item": {
          "id": "3e7ea170-d0c3-4375-82f6-813e86a22194",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "8150a232-914a-4fc4-a80f-d208314df068",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "79f2dc5d-d64d-4505-b859-ca83060d8dee",
        "cursor": {
          "ref": "69d2eafa-e23b-47b6-902a-483256079514",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "b8d72bc2-d22c-486f-a16a-f8e7a454e5dd"
        },
        "item": {
          "id": "79f2dc5d-d64d-4505-b859-ca83060d8dee",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "4f331041-5dfc-4381-a9c5-f5f40e6a09ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "41f434d9-42ba-48a1-a54c-4cd05fd4bac2",
        "cursor": {
          "ref": "16376b03-32e8-42ca-a79c-e21cdb7f8721",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "252a6d51-ceb0-486b-a589-c555f022fe78"
        },
        "item": {
          "id": "41f434d9-42ba-48a1-a54c-4cd05fd4bac2",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "2e9ba03b-5fa2-48cb-a94b-ff3401fb1ced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "69d3e903-9745-474b-bd7e-b7f6c5a46785",
        "cursor": {
          "ref": "6724a5fd-9b19-4fa0-98b6-5cf0c5987354",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "dafd07e8-b77e-4f4a-9a6e-7e7dc92bbb99"
        },
        "item": {
          "id": "69d3e903-9745-474b-bd7e-b7f6c5a46785",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "3681c0c4-9a35-4b26-97c0-1a8861acca37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "0b0c802c-2626-4f0c-8182-93d28724362f",
        "cursor": {
          "ref": "b55f0813-4172-41a9-afcd-a25d0c961835",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "e3980c80-4df7-41b3-b8a0-e1cc0d5c2ef9"
        },
        "item": {
          "id": "0b0c802c-2626-4f0c-8182-93d28724362f",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "db88e0ab-5a58-4b74-85ac-80f46483cb93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "f097a3d2-e49a-4d3b-a37b-c62f8621e508",
        "cursor": {
          "ref": "26cc0124-11f7-4f76-8fa2-560685b4b64c",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "79924292-49bf-4d5e-b2d2-a54cf431ae53"
        },
        "item": {
          "id": "f097a3d2-e49a-4d3b-a37b-c62f8621e508",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "90160733-d8ee-46b7-a46c-d01679b55277",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "31e4ce03-a07d-4a4f-a7db-544f247d072c",
        "cursor": {
          "ref": "55390e41-6657-4541-9e02-35b8ef9c9c8b",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "97526288-ef35-41a6-99f7-028574f799c2"
        },
        "item": {
          "id": "31e4ce03-a07d-4a4f-a7db-544f247d072c",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "6775e081-0fd2-479d-845d-c57e1e835d86",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f23a24a-4750-49fa-aec1-aa9e7eca9ecb",
        "cursor": {
          "ref": "f408140e-8b49-4202-866e-6ecbe36d0ffa",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "081c3039-9f0e-439a-b221-67c00e14379a"
        },
        "item": {
          "id": "7f23a24a-4750-49fa-aec1-aa9e7eca9ecb",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "8ea7ef3a-3e02-4e16-a52c-1e23634af13f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "b9221c92-f321-46d8-8fb6-09e00065adf4",
        "cursor": {
          "ref": "9b70fbe0-fe86-4890-890e-880bd524eb14",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "4e0f198b-a30e-4725-8750-d0cff628f9ea"
        },
        "item": {
          "id": "b9221c92-f321-46d8-8fb6-09e00065adf4",
          "name": "credentials_issue"
        },
        "response": {
          "id": "1edc94a3-dff3-4bb9-99f4-97080666102b",
          "status": "Created",
          "code": 201,
          "responseTime": 7616,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:106)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:106)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:106)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 6,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:7:106)"
            }
          }
        ]
      },
      {
        "id": "4f5b0d15-f791-4ba5-aafe-cb93f5165ac0",
        "cursor": {
          "ref": "d6056574-bda6-4696-acad-d9cf29781aec",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "a457e4c1-50c6-41d6-91d6-bce82bc36e24"
        },
        "item": {
          "id": "4f5b0d15-f791-4ba5-aafe-cb93f5165ac0",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "ea3faadf-b82a-4ae0-8e5b-562414b4ef94",
          "status": "Created",
          "code": 201,
          "responseTime": 4154,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:107)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "550c5b90-b1b3-476c-a1b9-962091b02244",
        "cursor": {
          "ref": "5c9233b9-9fc0-4e76-8560-d668b2179a04",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "36c8ea9b-4a09-4b83-8229-7220935fe651"
        },
        "item": {
          "id": "550c5b90-b1b3-476c-a1b9-962091b02244",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "5248f425-6af5-4f12-8518-2aee9a2ec686",
          "status": "Created",
          "code": 201,
          "responseTime": 4248,
          "responseSize": 714
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:108)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:108)"
            }
          }
        ]
      },
      {
        "id": "0505357a-ec1a-4db3-855e-37902bdec028",
        "cursor": {
          "ref": "b6837da1-9ed7-442e-9855-8a2551b402c2",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "f24387f4-d676-47e8-9b0d-00c9a33605fa"
        },
        "item": {
          "id": "0505357a-ec1a-4db3-855e-37902bdec028",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "f940a244-b080-4d2e-8692-c39bb373379c",
          "status": "Created",
          "code": 201,
          "responseTime": 4343,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:109)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:4:109)"
            }
          }
        ]
      },
      {
        "id": "9fe4e16e-a50c-419c-a86f-e88d56aef845",
        "cursor": {
          "ref": "4a2532a9-34c9-4271-b5eb-013dcad54e37",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b41e36b0-ae09-419d-9eaf-4eaed98f809f"
        },
        "item": {
          "id": "9fe4e16e-a50c-419c-a86f-e88d56aef845",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "8fea6041-de0a-4687-a9a8-20277e7403d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 147,
          "responseSize": 369
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:110)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:110)"
            }
          }
        ]
      },
      {
        "id": "b6874642-6fc5-4a8d-97f1-974c5997b8ba",
        "cursor": {
          "ref": "5334ac82-aaed-467c-aba9-a03389c9be09",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "56ed7179-af1b-487f-add7-989a4da0c98a"
        },
        "item": {
          "id": "b6874642-6fc5-4a8d-97f1-974c5997b8ba",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ee799b6d-0b59-42e6-917a-a12a32a0dafc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "b6874642-6fc5-4a8d-97f1-974c5997b8ba",
        "cursor": {
          "ref": "5334ac82-aaed-467c-aba9-a03389c9be09",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "56ed7179-af1b-487f-add7-989a4da0c98a"
        },
        "item": {
          "id": "b6874642-6fc5-4a8d-97f1-974c5997b8ba",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "ee799b6d-0b59-42e6-917a-a12a32a0dafc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "0fb7ec1d-111d-40f8-b05b-52cc7798172b",
        "cursor": {
          "ref": "4f288de4-fdbd-4177-ba58-bd144e5eba71",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a15d4748-6942-4f57-8916-3e59ff33e56e"
        },
        "item": {
          "id": "0fb7ec1d-111d-40f8-b05b-52cc7798172b",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "4e325fc1-380e-4086-a6f3-dbe582370345",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "ffcba28d-beb1-4b92-8ec3-7cb867077bb9",
        "cursor": {
          "ref": "42b63b8a-6aa6-4e62-ae20-9cdf4d11e32d",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "288e475c-7edb-4ddb-8f15-30fcbae54709"
        },
        "item": {
          "id": "ffcba28d-beb1-4b92-8ec3-7cb867077bb9",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "cc84d6cf-a784-4319-a3a9-37af381d64c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "f1759fc2-b7ea-4c0f-87a2-01cd029dd63a",
        "cursor": {
          "ref": "f8adfaf7-0ece-4c96-8f76-6cf3e04ec9a1",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "9f288241-2ed0-44cb-aa84-e3fbe98ed337"
        },
        "item": {
          "id": "f1759fc2-b7ea-4c0f-87a2-01cd029dd63a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "6dcd5f71-789e-4671-8cdc-20c8dea56aa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "563dbbe5-c73a-4404-85c8-73bb92a75392",
        "cursor": {
          "ref": "be838891-d22e-403f-891b-91f9d677e6e6",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "aa7edeb1-0943-49d4-8fc0-3c0732d09397"
        },
        "item": {
          "id": "563dbbe5-c73a-4404-85c8-73bb92a75392",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "fff4a7c3-d20b-4cc1-a85d-d45ff9f3f0b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "860ce9f7-af87-428d-b1d0-2a151027bf8d",
        "cursor": {
          "ref": "c03f8b4e-a115-45ee-81c7-15a67871c193",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "42fa3dff-3bad-471a-8a50-0d5e4f85345f"
        },
        "item": {
          "id": "860ce9f7-af87-428d-b1d0-2a151027bf8d",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "4be1338f-eb44-4734-a0cb-6df0c851be8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "384c784b-c3a5-44b2-bd34-e3228e763a5e",
        "cursor": {
          "ref": "903d9bb3-ca69-4b0e-bb48-4b26f7807a09",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "f7a9c54f-2bee-4178-893d-41b56e170cf9"
        },
        "item": {
          "id": "384c784b-c3a5-44b2-bd34-e3228e763a5e",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "0cbbc93d-c884-4f7c-8be4-d46c0a44df38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "04d00fbe-df13-4721-9a77-20ffbe5588f2",
        "cursor": {
          "ref": "dfcd40c2-5670-4198-bdc3-9d3bf20a9678",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "c574d0f4-e2f0-4dd7-b598-e877476aa6c6"
        },
        "item": {
          "id": "04d00fbe-df13-4721-9a77-20ffbe5588f2",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "cdf980dd-c89d-4f38-b43d-e01031e5714d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "080ceced-d2f6-479c-b957-9885fd124ce6",
        "cursor": {
          "ref": "a035dc42-234b-4414-a153-cccb9f9e0511",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "e2abf934-5d3f-46b9-94b5-49ccada52151"
        },
        "item": {
          "id": "080ceced-d2f6-479c-b957-9885fd124ce6",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ffd02a6b-7e34-49fc-b500-493832ed378d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "7795934c-772f-4375-94a4-df9c71acaca2",
        "cursor": {
          "ref": "ec5ee6c3-9b55-41db-bd21-4dee16195b0b",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "bc9098b3-d82e-4356-8ee5-7fe526ee2ec6"
        },
        "item": {
          "id": "7795934c-772f-4375-94a4-df9c71acaca2",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "6dec1efe-aca6-431a-92cc-b6e059ff6c6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "7d2cde5d-f37b-4be5-b8cf-1f3397723cd0",
        "cursor": {
          "ref": "79e00cae-501e-4040-864b-1bc5db6a0761",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "e2af9b1e-d8a1-473e-ab56-927fd6a38d62"
        },
        "item": {
          "id": "7d2cde5d-f37b-4be5-b8cf-1f3397723cd0",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "79dc7a3d-cf8a-451f-b2cc-4a5b9317fa83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "994ee43c-5d64-4949-a2ce-9a3195df02ca",
        "cursor": {
          "ref": "d5a8461f-b56b-4031-b00f-e4e79b51c91c",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "246e5aa9-d453-427f-b50d-3624e1feaaaf"
        },
        "item": {
          "id": "994ee43c-5d64-4949-a2ce-9a3195df02ca",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "72e7e796-6994-4e07-9ff6-6d65c9cfbd27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "6822d14a-6600-40f6-b35d-d16d2cc7b38c",
        "cursor": {
          "ref": "2934fa71-bf99-4241-960b-1309182a4109",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "400b68ef-98c9-4c5b-939b-70132e910f3f"
        },
        "item": {
          "id": "6822d14a-6600-40f6-b35d-d16d2cc7b38c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "2f7ed782-2a18-4c74-8678-5ddcb32fa513",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "78bdc860-54c3-4999-80e6-b475546740f5",
        "cursor": {
          "ref": "0bc2b39b-81f8-4f8f-940d-f4db5aeac6e0",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "eb9abc64-3d84-4b67-bb41-fdf10b0acf45"
        },
        "item": {
          "id": "78bdc860-54c3-4999-80e6-b475546740f5",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "19278d07-1100-41d5-8c02-2ee3d261aab3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "a0177d19-703e-4dbb-87ba-62e3b58060d5",
        "cursor": {
          "ref": "e0bbce5b-9945-4a93-ad1b-3df72ac8eb2a",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "ffadd9da-2dbf-40ea-95a3-39dbfe6e8054"
        },
        "item": {
          "id": "a0177d19-703e-4dbb-87ba-62e3b58060d5",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "3cbcdd66-f056-4ac8-8774-1022d38be92c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "feed235a-49be-46b4-8bfd-b685f9a8d80d",
        "cursor": {
          "ref": "1b6aeec6-2abe-4fde-ab9a-81d1b31776a9",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "a6bd8247-bf81-4c33-9aed-d4368341f2ef"
        },
        "item": {
          "id": "feed235a-49be-46b4-8bfd-b685f9a8d80d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "36b0704a-9505-469d-93cf-620797099835",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "c387adef-a143-42f5-b111-cdbae6f3d22d",
        "cursor": {
          "ref": "4ad60b0d-b28c-4947-9bb0-b319b30da795",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "18553719-10eb-4701-b90b-b42581d4542a"
        },
        "item": {
          "id": "c387adef-a143-42f5-b111-cdbae6f3d22d",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "42e140e3-ff2b-4c0d-8cea-38ddbab9bda3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "f081b03f-d2d5-4377-910e-30ed5ad43670",
        "cursor": {
          "ref": "8cae0729-ad99-4122-8a2c-aae903085e3a",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "d9d8e8c3-33d8-4f81-a5dd-d7dc2d939ce4"
        },
        "item": {
          "id": "f081b03f-d2d5-4377-910e-30ed5ad43670",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "03b0737e-ab0d-4497-bf3c-ed04f02191f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "0e31c853-e468-4aac-b924-b5fe97cb0b1e",
        "cursor": {
          "ref": "7264e950-cc66-4118-96bb-b8571d001dca",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "5b44e195-347e-45fd-9c39-bf317019ac9d"
        },
        "item": {
          "id": "0e31c853-e468-4aac-b924-b5fe97cb0b1e",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "8ca672e7-80c8-42f8-96d1-38818130187b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "b4d79986-7dbf-4a81-9fc4-80e258db8aa1",
        "cursor": {
          "ref": "d7e9c685-59c9-4df5-a95b-82758e83b87d",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "0c72ffda-dbad-44d2-913e-30a9660020dc"
        },
        "item": {
          "id": "b4d79986-7dbf-4a81-9fc4-80e258db8aa1",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "24e1c863-86bd-4515-b2b9-8e386cd085e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "e48e2826-c867-48ae-9710-3fb1690b7f24",
        "cursor": {
          "ref": "5ee0f65c-3b91-4558-b938-a97f18cea136",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "03d5dfe6-8456-430c-a854-40828d37a8d4"
        },
        "item": {
          "id": "e48e2826-c867-48ae-9710-3fb1690b7f24",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "8cf884a2-7148-4851-9aef-63b224255815",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "63ae25e4-5a60-4068-b296-6b4d806773dd",
        "cursor": {
          "ref": "a82fd5b7-aff0-4cd7-86b6-e07147cbe157",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "aaf174a4-3326-4e0e-b5e0-4814e7c355b7"
        },
        "item": {
          "id": "63ae25e4-5a60-4068-b296-6b4d806773dd",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "974e4040-448e-411d-b002-21b795408cae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "a7509bce-13fa-4e1d-95eb-de987d186abb",
        "cursor": {
          "ref": "fcdf0780-34c9-4e77-a025-b73ad9b882b5",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "38a9424f-de9f-4ccf-b8b3-8a4f259a6ab9"
        },
        "item": {
          "id": "a7509bce-13fa-4e1d-95eb-de987d186abb",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6332234a-8ce6-4bf2-97dc-f170bd7d3520",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "2ac3207c-7e74-4ab3-9efd-d681ea7b3bc4",
        "cursor": {
          "ref": "cd691dc8-07e5-4f76-b347-607cf9b864ca",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "32e686e7-96ff-4f3b-aa23-2a0e69585876"
        },
        "item": {
          "id": "2ac3207c-7e74-4ab3-9efd-d681ea7b3bc4",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b78316aa-dabe-4921-96c7-c8b5d94210bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "1a04fe81-f116-40af-af4c-36eb8109c2e4",
        "cursor": {
          "ref": "dc31bf91-b4c3-45ca-be7e-cdb9dd50579a",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "c1616b8b-d3be-424f-bd18-94be51fdc600"
        },
        "item": {
          "id": "1a04fe81-f116-40af-af4c-36eb8109c2e4",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "1759dfde-bcd9-44f6-8d9f-27b26bdd5ee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "5441da88-f39d-470a-b9b1-88e2da790aec",
        "cursor": {
          "ref": "3916f80b-3e08-4454-b753-40e269f51872",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "8eb8147d-ac4f-4c9d-88e2-c85d6b010d88"
        },
        "item": {
          "id": "5441da88-f39d-470a-b9b1-88e2da790aec",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a78286a5-a509-47a9-9f7e-04902d58ad19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "b3f1f398-7dce-4667-891b-c23afd4bd606",
        "cursor": {
          "ref": "f2d2180f-336d-45ad-a0b8-e0477f1302f8",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "f1b36fdb-8f9a-4b10-9233-b0092da27e69"
        },
        "item": {
          "id": "b3f1f398-7dce-4667-891b-c23afd4bd606",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "05f0ba17-bb96-48f5-96cd-a420fa1e4efe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "bc981e88-6c8f-42d3-be24-418bd00ac83d",
        "cursor": {
          "ref": "d25fdce8-8082-4202-a8d6-9ffc0f42814b",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "f5a7f941-aa4e-44f7-8398-a51aa5513aac"
        },
        "item": {
          "id": "bc981e88-6c8f-42d3-be24-418bd00ac83d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "95554415-8192-4061-bd60-4c4d61d3b3d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "5827e393-cb84-40bb-b28b-061c5fe193bf",
        "cursor": {
          "ref": "efcd9d4b-1095-4838-8372-7299060947be",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "d7ba89b0-513b-4a26-be84-fe984d48179c"
        },
        "item": {
          "id": "5827e393-cb84-40bb-b28b-061c5fe193bf",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "47b1c253-177d-4d96-85af-1675e1d3db4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "7a96c750-3319-4bee-abcd-00c244c38c15",
        "cursor": {
          "ref": "ddcbe300-5b86-492f-a969-3305bcd61577",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "7249d3d2-447a-46fe-8eae-7b081341e6fb"
        },
        "item": {
          "id": "7a96c750-3319-4bee-abcd-00c244c38c15",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "6f85abc3-db1d-41cc-b078-320a4f266a26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "21adbacb-cbef-4b8c-9241-c74786280c09",
        "cursor": {
          "ref": "3ebee3a8-d356-4aad-ac8f-15f2718957b3",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "69361e15-a401-4aa8-b1f6-3725bc22e5ec"
        },
        "item": {
          "id": "21adbacb-cbef-4b8c-9241-c74786280c09",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "2646a0a2-2563-4779-afd7-29a92af06e44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "d7cd8db4-9406-46de-a214-0fa6aa0cfba8",
        "cursor": {
          "ref": "e480abaa-498a-46b9-9e4e-5fbd26bce9f8",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "4379067e-02ab-4b01-b724-b21a886ec220"
        },
        "item": {
          "id": "d7cd8db4-9406-46de-a214-0fa6aa0cfba8",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "42f178b8-29cc-469c-9162-4cf272bb5a04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "e231a3c6-8d8a-4a70-8345-0748861e1b6b",
        "cursor": {
          "ref": "6a53a735-51b0-4fdf-81ab-ae5ee3250a43",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "3936e7ca-4b4a-49e2-9939-1e11906d4b3d"
        },
        "item": {
          "id": "e231a3c6-8d8a-4a70-8345-0748861e1b6b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "631d4b97-a95c-44ac-9bc1-0f68c3e29c5c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c74f1dac-2b6f-4b19-9e90-f451e3cdac8d",
        "cursor": {
          "ref": "eb72d78b-697b-4115-9dff-c5118d9d5050",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "b0d9da0e-b4b5-41c7-aff2-e03af8dc57c2"
        },
        "item": {
          "id": "c74f1dac-2b6f-4b19-9e90-f451e3cdac8d",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "c5e1ebfa-504b-4312-80f3-027891172d85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "4e89f39f-2121-4593-a488-bed232c912e1",
        "cursor": {
          "ref": "5f57b7c6-35f7-4b49-91cb-3fee038c124d",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "6105753f-4169-40ae-904f-f64bf3bf8ac7"
        },
        "item": {
          "id": "4e89f39f-2121-4593-a488-bed232c912e1",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "57bfe5e3-ab90-487d-ab1a-c313bf400c37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "4e89f39f-2121-4593-a488-bed232c912e1",
        "cursor": {
          "ref": "5f57b7c6-35f7-4b49-91cb-3fee038c124d",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "6105753f-4169-40ae-904f-f64bf3bf8ac7"
        },
        "item": {
          "id": "4e89f39f-2121-4593-a488-bed232c912e1",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "57bfe5e3-ab90-487d-ab1a-c313bf400c37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "e8f22d94-65e1-4e3e-82a8-a18026487e01",
        "cursor": {
          "ref": "7da61d21-1dc0-403a-a292-8bab97e4688e",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "06ab53f0-5e40-40bc-9b2c-04988c529dfd"
        },
        "item": {
          "id": "e8f22d94-65e1-4e3e-82a8-a18026487e01",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "2a6eb8ef-c0c3-49d4-85d7-d67d9808870d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "fc03f732-3732-4d27-87df-ce4ab6851a7f",
        "cursor": {
          "ref": "1515c84f-a744-4d29-9d85-efad75270a2c",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "11d29cc1-3971-4164-8088-22459ad931b8"
        },
        "item": {
          "id": "fc03f732-3732-4d27-87df-ce4ab6851a7f",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "bd26f9fd-3e35-4138-8d2e-2aa96b8f570d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "f8109c8f-2a8c-44c9-99e3-f731f0f01ecb",
        "cursor": {
          "ref": "9f744de7-4e9e-4409-937b-02a2bd637d84",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "945ab217-fdcb-4d8e-b0e2-281128de48bb"
        },
        "item": {
          "id": "f8109c8f-2a8c-44c9-99e3-f731f0f01ecb",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "1b940d07-75bc-4d9c-ad92-4b865c832df5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "02add223-5b8b-4903-80fb-2c1006180922",
        "cursor": {
          "ref": "06d1e27d-f3cd-48cf-8ccf-5c0c235b6a26",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "3c9ede75-da7e-45b0-b57e-06695bf8c9cc"
        },
        "item": {
          "id": "02add223-5b8b-4903-80fb-2c1006180922",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "4656ff3c-eab5-4395-aaad-c5f5e41ae55d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "bc7aa2b5-6b68-4ba4-a650-29b4d03540f9",
        "cursor": {
          "ref": "927560b2-f54f-435b-9f43-5dd6e84d1927",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "4184ff36-473d-4066-ba8b-9fb7cbd4c236"
        },
        "item": {
          "id": "bc7aa2b5-6b68-4ba4-a650-29b4d03540f9",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "afc75a32-64ef-4cc6-9d0d-593bda147009",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "0b9e8ff2-88f7-4527-8043-4badb066cad2",
        "cursor": {
          "ref": "ac419207-a601-4749-9794-51d52b98fb81",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "3bbe2011-1b71-41f3-b1e1-a8aefefa88ba"
        },
        "item": {
          "id": "0b9e8ff2-88f7-4527-8043-4badb066cad2",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "9b7a45cb-29fe-49fc-b8ea-66b94af9c87d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "33bffdaf-c75c-469d-bdac-17e0d2ab6cc2",
        "cursor": {
          "ref": "499337d2-3248-4b12-b1df-bed83dac91cd",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "91c8f48d-ef8d-4427-8e2b-7c36e4ae3cf1"
        },
        "item": {
          "id": "33bffdaf-c75c-469d-bdac-17e0d2ab6cc2",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "ea253b11-f439-45ff-8900-f45b2a1523d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "d577c91f-4392-4e88-8b39-a429e62b9a56",
        "cursor": {
          "ref": "4cfacc98-99cf-456f-8e92-996ef99f2ce3",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "877b9c83-a409-480e-85ac-b780d289a9ec"
        },
        "item": {
          "id": "d577c91f-4392-4e88-8b39-a429e62b9a56",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "54214d39-58d3-493c-b081-2c1780d6719c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "3713b7e8-b54b-43f7-9ed0-0d9b832d5a6f",
        "cursor": {
          "ref": "815dcf01-6ba4-4bc9-851a-cfd2a1f8f712",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "71fc49eb-9c3c-4d47-b5a8-7dd09933d01c"
        },
        "item": {
          "id": "3713b7e8-b54b-43f7-9ed0-0d9b832d5a6f",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "f88afb2b-366d-498d-a539-7d30931f3d3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "08cd977d-c733-4d9e-9bbd-435162abb1b7",
        "cursor": {
          "ref": "0a68e364-e0e1-416d-b03f-365d93deeb2b",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "8d343c8e-722e-4ac0-ba5e-f468d0262647"
        },
        "item": {
          "id": "08cd977d-c733-4d9e-9bbd-435162abb1b7",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "6324f13e-9d15-44d3-9cce-868ab883c506",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "6470a37c-6ed6-4f7f-868f-fa8227bc0a9d",
        "cursor": {
          "ref": "f56d7159-2f9f-4e8f-ab74-8f1d79f105c0",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "2728d327-23c6-486d-9978-19b0ccfc7a9b"
        },
        "item": {
          "id": "6470a37c-6ed6-4f7f-868f-fa8227bc0a9d",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "afbf60e3-5e5e-4906-9333-fd87303b38fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "18017d71-6cf0-4d37-8399-04e166806c4b",
        "cursor": {
          "ref": "d8f79d7b-67f7-4221-92be-22edd0b47c36",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "22c52db0-5c21-4edb-b469-fe74904ef6cb"
        },
        "item": {
          "id": "18017d71-6cf0-4d37-8399-04e166806c4b",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "9a10c974-e011-4b00-bac6-03544b36a4ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "e262071f-58d2-49ac-a801-0d1926c08c9a",
        "cursor": {
          "ref": "7bbed996-1c07-442a-aa36-31f20768435d",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "1d597ff3-ed7d-40b2-882e-4d5ebb6f5754"
        },
        "item": {
          "id": "e262071f-58d2-49ac-a801-0d1926c08c9a",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "979e18fe-e2c4-4022-aea0-af9b63ce85f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "5a8db701-b86b-4d05-a8a1-7af233cb48fa",
        "cursor": {
          "ref": "95a8e265-a5e2-4252-a23e-215ee256ba5a",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "da049a9c-d0af-4b58-8a27-9eadd9753219"
        },
        "item": {
          "id": "5a8db701-b86b-4d05-a8a1-7af233cb48fa",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "567ea22d-024d-4847-b135-3a20f9c4ed47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "f03e2483-6297-482d-914b-110755e700b4",
        "cursor": {
          "ref": "11246853-13bc-4755-a42b-968bf5b59e56",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "a7103f79-e23c-447c-ad2c-b7fb1aa05d99"
        },
        "item": {
          "id": "f03e2483-6297-482d-914b-110755e700b4",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "1969b525-e678-4719-b0cf-dc3062ca75c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "d107f818-4967-4145-a02e-da237455b028",
        "cursor": {
          "ref": "a45204e0-a3cd-409e-8547-12e44e39a6a7",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "9cc6afee-9ef5-4be1-864c-3429c5022fb2"
        },
        "item": {
          "id": "d107f818-4967-4145-a02e-da237455b028",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "745ce338-49d2-4b7a-9613-17b935d49a9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "d6636154-44d9-447a-b611-a6c2014e6a79",
        "cursor": {
          "ref": "ba994f90-8161-421a-b56b-02b072fc3826",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "78d7beae-2a86-403f-b776-df7a115c39c5"
        },
        "item": {
          "id": "d6636154-44d9-447a-b611-a6c2014e6a79",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "d6800475-ed11-4a0a-84b4-0f246db15ba5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "02197f22-ca59-4651-a6bc-c45893ddc610",
        "cursor": {
          "ref": "3cf2634c-f679-43f3-b9d3-1344d6ad2624",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "dfc8d476-a15a-4c26-ab9e-d9a7f0fa90e2"
        },
        "item": {
          "id": "02197f22-ca59-4651-a6bc-c45893ddc610",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "57197680-fa9b-491c-bb10-43b4a0a66755",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4241,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "13c378f2-5314-4699-8279-5efb17c3bf46",
        "cursor": {
          "ref": "0c7608c5-2a51-4f22-8167-d42623132448",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "9cc69d80-c8ff-4008-a225-fd8671bc80f8"
        },
        "item": {
          "id": "13c378f2-5314-4699-8279-5efb17c3bf46",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "84b604c4-6c54-4402-bce4-d99ccbebb34a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6343,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "40405be5-a6fc-4559-b10c-72b7fd83662c",
        "cursor": {
          "ref": "dd9e57ec-8bcf-45e0-8f69-142845183196",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "b19c693c-2f61-42ad-b1f7-7aed0eb80f9d"
        },
        "item": {
          "id": "40405be5-a6fc-4559-b10c-72b7fd83662c",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "ead66601-3765-4c33-9380-978acf843c9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4759,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "09f86222-de72-4986-92d9-1621fdd3ab75",
        "cursor": {
          "ref": "842bfb92-41a4-4c4a-800d-3d6437f9b1ac",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "0131b176-2820-4338-ac09-349ac0df7ebf"
        },
        "item": {
          "id": "09f86222-de72-4986-92d9-1621fdd3ab75",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "e8796871-5777-4f36-9ff3-cc529d7ab97e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "93b9f3f4-0993-4459-a541-ec31bd7dc4f3",
        "cursor": {
          "ref": "0c10cd1a-0767-415c-a036-ef1ba8b8d084",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "7e232984-65c7-4bc0-bb3e-e78ab1a6fce7"
        },
        "item": {
          "id": "93b9f3f4-0993-4459-a541-ec31bd7dc4f3",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "9b2abc66-a6e3-4e8b-bc52-6a97da35d242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4806,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "796304fc-9062-4d13-ad52-65f4c2a4a6ef",
        "cursor": {
          "ref": "cce7fba7-2d23-412e-a61f-e2c0dc76c68f",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "e3514163-9309-4338-b5ac-9a96f9999829"
        },
        "item": {
          "id": "796304fc-9062-4d13-ad52-65f4c2a4a6ef",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "65cd5cfa-f1de-423c-a8b4-8bb4d898c164",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 641,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "f67c78d8-940a-449d-a2a0-20b93e7f6e55",
        "cursor": {
          "ref": "f03c677a-c659-40a7-b517-87fae95d7e8d",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "d6a2ea44-5f99-4a6d-84fa-c8018f476d1c"
        },
        "item": {
          "id": "f67c78d8-940a-449d-a2a0-20b93e7f6e55",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "d8ddaaad-eaa6-4f9e-b84d-3bc8352079e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 251,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "288e968e-ce42-45b0-a6db-ac73f16a3660",
        "cursor": {
          "ref": "5585d8d2-1569-4eff-9e0c-78860c3cfd23",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "abd8079e-3891-407c-a219-bc2c9e6d0223"
        },
        "item": {
          "id": "288e968e-ce42-45b0-a6db-ac73f16a3660",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "5e819f7b-f28c-405c-85d1-4eadc3ad3b87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 545,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "e7771cad-def5-465b-b610-3265b2fb02c9",
        "cursor": {
          "ref": "3952ac62-9093-4444-8cf9-14ca99f1462f",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "acef7adc-a870-404a-b0bd-0b1765a0e2a2"
        },
        "item": {
          "id": "e7771cad-def5-465b-b610-3265b2fb02c9",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "f19bc3c9-00e1-4d66-abfc-d5cc6877fd36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 546,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "f2d3fcc3-6a94-4045-b03f-bd591b602700",
        "cursor": {
          "ref": "8f864606-085c-4e91-a00b-2bb0f80456bc",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "d693b722-28a3-4790-9a3d-f4dc36113a38"
        },
        "item": {
          "id": "f2d3fcc3-6a94-4045-b03f-bd591b602700",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "182b05b8-e4db-45f5-ac91-93d37b24a6e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "d59fd3da-2b20-4ec7-a415-1ebdb6e1ca46",
        "cursor": {
          "ref": "4669ae0b-7dbc-4694-a156-08bc19e3b7ef",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "a5e30fc2-d0be-41de-b1f9-ad1f06e4b083"
        },
        "item": {
          "id": "d59fd3da-2b20-4ec7-a415-1ebdb6e1ca46",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "35e24084-227e-4cf2-aa5a-f8a300370e97",
          "status": "OK",
          "code": 200,
          "responseTime": 4434,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "2e023172-7cbf-4bbd-b472-d4ec50b084cd",
        "cursor": {
          "ref": "7976797c-a8c9-4504-bced-6af4049e1784",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "4d04a1e5-5bc3-4b54-85e9-bef9ad55d3d5"
        },
        "item": {
          "id": "2e023172-7cbf-4bbd-b472-d4ec50b084cd",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "d6eae55c-a26f-4ca1-8b60-ac909a682d0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "3c536acb-fdda-46b2-8d00-952990284a8b",
        "cursor": {
          "ref": "4584011e-84cd-42a9-a875-d403651aabde",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "746fd737-c622-459f-9b4a-32204ad3c25a"
        },
        "item": {
          "id": "3c536acb-fdda-46b2-8d00-952990284a8b",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "80968350-0aec-4a1a-8014-3f035458dc07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "08194e49-707b-4abe-9acc-7df1556ba2a4",
        "cursor": {
          "ref": "951db97b-f4b6-41d0-8756-b71cf714ecd0",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "2f7bd711-2492-4b08-b4fe-3927efb78882"
        },
        "item": {
          "id": "08194e49-707b-4abe-9acc-7df1556ba2a4",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "a5f8aab1-a17e-46b7-ac2f-eb6632bbcfd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "6bc681a3-a03a-47cc-8280-a02622f72279",
        "cursor": {
          "ref": "4da28e33-d3a0-4580-9c37-5ac7b4475cf4",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "9c3952da-7254-4781-ac34-b2abf42c495d"
        },
        "item": {
          "id": "6bc681a3-a03a-47cc-8280-a02622f72279",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "58745dfe-9581-4e41-99e4-546ca99a81c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "dbb8a873-9982-47e2-a106-bbe7a3d4cf9c",
        "cursor": {
          "ref": "720ad289-dbc3-4d45-b45d-d2482458b16f",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "42471ce8-6aea-4027-82f5-0df92cedca99"
        },
        "item": {
          "id": "dbb8a873-9982-47e2-a106-bbe7a3d4cf9c",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "02b215b6-c471-4473-9d6c-7f6762bfd6e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "0e445458-274b-4eda-a6e1-1bd735cf39e5",
        "cursor": {
          "ref": "9d76033f-1dd8-4353-96b0-67b00e9cdb28",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "73c00af8-539c-42d8-92cf-1ad285175831"
        },
        "item": {
          "id": "0e445458-274b-4eda-a6e1-1bd735cf39e5",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "a6136f1f-9ee0-44c6-92db-c2e432de5ba5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "1761a99e-6e32-42ab-8581-3e6fde455fe3",
        "cursor": {
          "ref": "0d2fdad7-42eb-4492-8bea-d81701fdeddc",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "f1b7c454-c958-4778-9d27-6a26b1dc1ff8"
        },
        "item": {
          "id": "1761a99e-6e32-42ab-8581-3e6fde455fe3",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "e63b7351-e3be-4c28-a5f1-93ac34645b8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "6aa7fcbf-5595-4fd6-9971-f7cd2c76c330",
        "cursor": {
          "ref": "e9ecb71d-8533-4fe9-a507-7bd15852e442",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "8f0d83e5-aa46-41b2-a6fc-517af0982602"
        },
        "item": {
          "id": "6aa7fcbf-5595-4fd6-9971-f7cd2c76c330",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "edfc0304-b86d-4df5-9499-c68455f5cabb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "b675e55d-8b66-4b99-ba42-6c3cfdc4617a",
        "cursor": {
          "ref": "92849d09-0fe2-4b1f-bf50-52fab00c4a05",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "e4b029d3-e2b2-492b-96e4-320debe33abd"
        },
        "item": {
          "id": "b675e55d-8b66-4b99-ba42-6c3cfdc4617a",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "0df70fd2-a37d-4507-8d1e-90829c5337e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "9d8c06f8-d167-40bb-9720-33912136dd90",
        "cursor": {
          "ref": "f3752d41-8fd0-45f7-81ac-0e06b834f08d",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "51374bc0-d0e2-49a1-a9b7-742996be541b"
        },
        "item": {
          "id": "9d8c06f8-d167-40bb-9720-33912136dd90",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "7da74743-4a7c-4849-a72b-cdd0b380b413",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "3564036d-7b24-4b68-9c85-74d8b9705a55",
        "cursor": {
          "ref": "00b6c550-f67e-4a83-999a-ce4a0a06fef2",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "c73b355e-f78e-42d8-bb90-3b97aaa49f71"
        },
        "item": {
          "id": "3564036d-7b24-4b68-9c85-74d8b9705a55",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "fc1d62ef-59d1-45b5-8014-eb6b54787a2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "c5cbf596-f30f-4a00-a36e-ce283d5098e6",
        "cursor": {
          "ref": "22afb1fc-e363-4407-ab0c-b90a7fdaeccd",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "5a379030-b1dc-4fab-920a-dc43e586e82c"
        },
        "item": {
          "id": "c5cbf596-f30f-4a00-a36e-ce283d5098e6",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "0d12c7b5-c7b0-498c-9210-cee3e5d01b1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "8a9119ab-a51c-4325-a7e3-c6030828fac0",
        "cursor": {
          "ref": "8799d344-0cab-4742-92a3-d850fb659f4b",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "eee05e12-1887-419b-b3cd-b66a14d14bbd"
        },
        "item": {
          "id": "8a9119ab-a51c-4325-a7e3-c6030828fac0",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "301d2d5f-4d68-4717-8d84-2a6ed8216220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "d8ce3ea4-2912-4e17-9f55-838cf95d5cfd",
        "cursor": {
          "ref": "2d7952ea-a04d-439c-90a8-d8335bd1a4fe",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "08b1a09d-0213-4bf6-b64b-d012a377be73"
        },
        "item": {
          "id": "d8ce3ea4-2912-4e17-9f55-838cf95d5cfd",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "d0c54292-6203-4eb1-9479-ccd0f4d36094",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "44f3d2ba-bf0b-41f6-b952-dd99312de91d",
        "cursor": {
          "ref": "2b9401f8-2614-4a24-ad7f-316fecafc365",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "46d471a5-f641-406f-8758-46432cd115a2"
        },
        "item": {
          "id": "44f3d2ba-bf0b-41f6-b952-dd99312de91d",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "cb16ac78-a434-436b-85c2-6c8775addbe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "375135da-4b24-4470-8a0b-9dedb71544c4",
        "cursor": {
          "ref": "74c2406d-907c-41ed-864f-a3967a4ec4ac",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "550f448c-bc73-48b8-9e22-3abafcee8b19"
        },
        "item": {
          "id": "375135da-4b24-4470-8a0b-9dedb71544c4",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "44a9f33b-f507-43f7-9b3d-b5b0d4f4147a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "835b8e50-15f9-4bc2-9589-335403f01a61",
        "cursor": {
          "ref": "a5facac8-8588-4e53-a89b-a0a1618a8fd5",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "bb3c0615-879a-47ca-97c9-5ab09793bddd"
        },
        "item": {
          "id": "835b8e50-15f9-4bc2-9589-335403f01a61",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "3f85fe29-8d6e-4e5c-9b3e-fddb419a585b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "0554f956-5c75-4d88-b728-4567229c10aa",
        "cursor": {
          "ref": "7f27d157-a6ce-46a1-88f8-ca71362a8b0c",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "a260c894-aa04-4124-a353-42563f6c2a2d"
        },
        "item": {
          "id": "0554f956-5c75-4d88-b728-4567229c10aa",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "2c593fb8-7dde-4849-bcb1-002a5b89640c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "96af4f0c-1c58-42c5-acac-902597763337",
        "cursor": {
          "ref": "b3b6db49-ebef-4aee-b10d-19b5b92e260f",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "47438eb7-7eea-4f0e-83b4-43b7dfbc4bfe"
        },
        "item": {
          "id": "96af4f0c-1c58-42c5-acac-902597763337",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "3aa3beb9-ff97-44ce-b24f-687f0afeb002",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "a2f1a00e-381e-4d84-b191-23d62b58e095",
        "cursor": {
          "ref": "b37599e4-03d4-40fa-bfa9-e8776c4313a9",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "4a9a7a3d-6388-4cb0-9149-d3a14234e181"
        },
        "item": {
          "id": "a2f1a00e-381e-4d84-b191-23d62b58e095",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "0ef84b80-eb6d-4ffa-b0ab-8cffeac0ea7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "a9128669-9577-40ea-8605-0827f0a5fd71",
        "cursor": {
          "ref": "fccbf0d0-8b93-47ce-a65a-1097c545c69b",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "c2a5da2e-d62b-4228-8982-7b307a402984"
        },
        "item": {
          "id": "a9128669-9577-40ea-8605-0827f0a5fd71",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "51183607-e175-4b1b-898b-780a0f16087e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "1cfd682c-6edd-4acd-82e8-e2cf2bb19a76",
        "cursor": {
          "ref": "2aa69bd0-9d19-4d81-b160-66f2becd79ea",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "ab9f1be4-7fe3-48f8-82c1-85e98d7e83c3"
        },
        "item": {
          "id": "1cfd682c-6edd-4acd-82e8-e2cf2bb19a76",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "e27f6b18-9e49-4fec-941f-3684585d8e55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "262eb5f5-7cd9-4ea7-8628-077519a2eb7c",
        "cursor": {
          "ref": "8dd13a7d-bbca-4c38-8b94-431fd9210e01",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "72abd3ad-4e61-4131-b456-1a02015296c8"
        },
        "item": {
          "id": "262eb5f5-7cd9-4ea7-8628-077519a2eb7c",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "6d75bc6d-4d42-41b8-81ad-95fc288959e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "edb15e0d-6bce-41a2-8ea1-da3ddcbaee93",
        "cursor": {
          "ref": "e660b48d-3405-473a-ad17-c05705df02a6",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "1865b435-8706-4cd7-8892-a116e7db8ef9"
        },
        "item": {
          "id": "edb15e0d-6bce-41a2-8ea1-da3ddcbaee93",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "b4ea7769-8775-4e19-aa25-df6d2e8a5969",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "4c9af15f-57c8-497b-9a9e-07327837ecc5",
        "cursor": {
          "ref": "723a50b0-d0af-4b98-94d1-3803e9a79c6e",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "316b3aca-a4a0-467c-ae4f-5082e28dc0f8"
        },
        "item": {
          "id": "4c9af15f-57c8-497b-9a9e-07327837ecc5",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "87f4d1ea-b187-4eb3-838b-945d4905b442",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "8a2fde1a-7d92-4e28-8c90-9f7d9bc1f018",
        "cursor": {
          "ref": "4057cea9-5bf0-4015-925b-6e5369f42579",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "11536cdc-5543-4caf-83ad-56eb5e3a7f28"
        },
        "item": {
          "id": "8a2fde1a-7d92-4e28-8c90-9f7d9bc1f018",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "fe7f8fa7-a20e-4d88-a5f6-877daa853cdf",
          "status": "OK",
          "code": 200,
          "responseTime": 4911,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "fcd1ad13-5200-4891-8a65-6e80f4eaee3d",
        "cursor": {
          "ref": "b474bce0-05e0-4c9c-8ae3-3846a8a38543",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "e806abbf-919d-400c-8a80-dd43960da279"
        },
        "item": {
          "id": "fcd1ad13-5200-4891-8a65-6e80f4eaee3d",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "cba2693a-00d4-4d72-93fc-0ed7b32c9c26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 626,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "fb85d887-5f54-4df0-9f8d-d9801589c9bf",
        "cursor": {
          "ref": "4e19a876-669d-41b1-a182-e13914928e0b",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "8b2fdb0c-9d1d-4ce8-8275-df6901364839"
        },
        "item": {
          "id": "fb85d887-5f54-4df0-9f8d-d9801589c9bf",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "53ab8ae3-6eed-43b7-afd5-a80259907c2f",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 4212,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "227fa831-8759-4afb-abf5-aa3ea1c5fa8f",
        "cursor": {
          "ref": "f1d37e24-325d-4102-b528-cb64aa320feb",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "2a889789-c717-446a-bda1-7ed32164354d"
        },
        "item": {
          "id": "227fa831-8759-4afb-abf5-aa3ea1c5fa8f",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "f3229cbf-b3f0-4ac5-b238-18fc96cb5066",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 76,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "c95d6897-6f25-43f1-a1e2-022d02ff24d2",
        "cursor": {
          "ref": "e78b35a9-d1be-4f3c-b949-e544f123c47c",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "bdf58a71-8db2-4bb2-a994-7accbffc6e3a"
        },
        "item": {
          "id": "c95d6897-6f25-43f1-a1e2-022d02ff24d2",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "3fc6b825-1ba6-41be-bd7d-9095b22f0c14",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 76,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "1ca0619c-f776-4828-bfac-3536e6b84ab1",
        "cursor": {
          "ref": "aebd8773-ee18-401f-8bc4-72b8c764314d",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "fd135bf5-78a4-4ad7-bc18-37b7af0791c6"
        },
        "item": {
          "id": "1ca0619c-f776-4828-bfac-3536e6b84ab1",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "83e8a74b-9d4e-4d8b-a81b-d2c474f2219f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "8a447dfa-4a60-4281-b407-2a03a87a84db",
        "cursor": {
          "ref": "1936cd16-d247-46c0-bd68-84f53adb12dc",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "9bf77c34-d953-46d8-9235-b3b45bdcf1ff"
        },
        "item": {
          "id": "8a447dfa-4a60-4281-b407-2a03a87a84db",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "b1b7e2f4-7a27-4645-9eee-ac2afe467947",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 76,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "60676571-05d7-4ca5-bef3-6c11916cca07",
        "cursor": {
          "ref": "088f46e6-68f9-49a0-80da-8381d5cf9f7a",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "3104a4ce-389c-49bd-8b63-0c51ce4a40e1"
        },
        "item": {
          "id": "60676571-05d7-4ca5-bef3-6c11916cca07",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "2da18d98-6fef-402c-b838-84fcdadbdd49",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 76,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "a817b326-8ef7-4028-9dac-70395377f1dc",
        "cursor": {
          "ref": "b1d74375-c342-4f32-b8d1-75a4aff20fdb",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "313020de-92c2-4cc2-83c5-87e7c728562b"
        },
        "item": {
          "id": "a817b326-8ef7-4028-9dac-70395377f1dc",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "139e1133-9058-4d25-a6b6-64cd2ef5ae9a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "5267287f-a070-4b6d-bf14-16d183ffb947",
        "cursor": {
          "ref": "a9ec3db6-2d3a-41a9-afcf-146a9ceed768",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "367f73a7-81dc-4b4a-a48a-e5bb383a5cfb"
        },
        "item": {
          "id": "5267287f-a070-4b6d-bf14-16d183ffb947",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "f6494f28-bff4-490d-a8a7-4e401b951a91",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 76,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "642f83d1-6a60-43aa-bf53-9fa4f3103578",
        "cursor": {
          "ref": "4c268314-b8df-456f-a6b7-f8c1384e64dd",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "d0ec8fc6-c9bf-4e50-854a-d93549312a11"
        },
        "item": {
          "id": "642f83d1-6a60-43aa-bf53-9fa4f3103578",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "f419d9f6-b503-4c9c-a5b3-9a22fbfae12f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 76,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "6b3174c6-7a9d-4a7c-89c5-3332dc3e42f2",
        "cursor": {
          "ref": "5a69c227-3d2c-4a6a-a39a-48b40154c33d",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "bd5e810c-49b0-4930-8e79-f47a33cdb935"
        },
        "item": {
          "id": "6b3174c6-7a9d-4a7c-89c5-3332dc3e42f2",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "43ea13f1-4bce-4027-babf-a75a821995c4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "4cae5d64-d1a1-4605-8b3e-752564ec5e6c",
        "cursor": {
          "ref": "2f693333-ab45-4285-823f-88bb958134fa",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "b5494f95-dff9-4cb7-a8ee-b73242931b0f"
        },
        "item": {
          "id": "4cae5d64-d1a1-4605-8b3e-752564ec5e6c",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "16caf09d-9557-48bc-b388-8f271ac92268",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "a8705d41-1720-450e-9bdc-2ad13c67e0d0",
        "cursor": {
          "ref": "9da2a495-eeaf-413f-ad66-5150e38af0ed",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "54f09a93-cc99-4d67-95f7-4ec73e369f75"
        },
        "item": {
          "id": "a8705d41-1720-450e-9bdc-2ad13c67e0d0",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "0d1fa9d5-3116-40e5-9788-6fa6a05beb76",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 76,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "8c2ed502-9511-4eee-9ff3-635d0f1d3b8a",
        "cursor": {
          "ref": "b299df3a-3f82-45cb-90ce-e98188320f47",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "bd3b0cc1-70fd-4468-b882-d3e4ca69cebc"
        },
        "item": {
          "id": "8c2ed502-9511-4eee-9ff3-635d0f1d3b8a",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "bb511664-d255-4458-86f2-6e0e99ed3a47",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "74f43eb7-b7e9-415f-9693-2d38fbc533fa",
        "cursor": {
          "ref": "9a74c55f-c3ca-41b5-a3d5-ee65e9fc8045",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "c7c75348-b948-4d81-b20d-fea27b90ff95"
        },
        "item": {
          "id": "74f43eb7-b7e9-415f-9693-2d38fbc533fa",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "67915203-942f-436e-9897-1a9ab863ef10",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 76,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "149cbcaa-1cd3-4d43-8714-3a31eb631187",
        "cursor": {
          "ref": "c8fca932-0ba0-4919-89d2-c991bcf7d65c",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "901e20f6-3ca8-44cd-b65b-2d90791f9ce1"
        },
        "item": {
          "id": "149cbcaa-1cd3-4d43-8714-3a31eb631187",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "8663dfad-9018-470e-a8af-7e48757cb06d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "a8dbbcaa-7d4c-4958-9969-69d48b13b76d",
        "cursor": {
          "ref": "8ff78909-b37e-4c38-8eb8-449895168b67",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "4bd89038-3a66-4e33-8098-a67262afea9b"
        },
        "item": {
          "id": "a8dbbcaa-7d4c-4958-9969-69d48b13b76d",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "1a79f565-467b-4c06-a0a3-ac1a86ff6f1b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "98dd45f9-f14b-42f6-aa8e-5fcbd76560d9",
        "cursor": {
          "ref": "d622d93f-3ef6-4cfd-97b0-0455605d81d6",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "0d58c3b4-d032-4fe7-a2e4-80f0569a0d24"
        },
        "item": {
          "id": "98dd45f9-f14b-42f6-aa8e-5fcbd76560d9",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "4285cdf7-40f8-4160-a9c5-cf716fcea986",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "8c8fd30c-34d4-4597-bed4-1e11c5da131a",
        "cursor": {
          "ref": "69f0704b-6f1a-4390-b8e6-0bf25192a943",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "fce992ca-5ba4-47ee-bc71-52d014a5d40c"
        },
        "item": {
          "id": "8c8fd30c-34d4-4597-bed4-1e11c5da131a",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "31b3d917-e593-48be-ba24-4881588f9c60",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "96949cfb-e727-4a74-b3e9-fb72d46ae415",
        "cursor": {
          "ref": "7fa359e8-be5f-4324-91ab-4185b2df5c24",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "6fcc82e9-0661-4dbf-ab97-e62bde5efd48"
        },
        "item": {
          "id": "96949cfb-e727-4a74-b3e9-fb72d46ae415",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "ac618add-1165-408f-8738-82d799876d01",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 78,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "d620d30c-ce11-45f0-b011-f99288629262",
        "cursor": {
          "ref": "1ba8ceea-9d45-45fc-8357-bd3257c25716",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "27105b06-3f6c-4d34-b842-a3a1db4de52f"
        },
        "item": {
          "id": "d620d30c-ce11-45f0-b011-f99288629262",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "93e3f315-99fe-47d2-bed9-db643c730219",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "fc1a64e4-9d45-4832-8843-fc7062398ba7",
        "cursor": {
          "ref": "e0d15c7d-c06a-4929-ade9-744f41046d7e",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "c45b2f13-25b7-47fd-9334-e2d0b49f50b6"
        },
        "item": {
          "id": "fc1a64e4-9d45-4832-8843-fc7062398ba7",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "5ed04ce7-b0c1-480a-99a6-b615e4f7fd28",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "e6903450-a61a-48e5-8e09-5ec27b0c3683",
        "cursor": {
          "ref": "c9f4dbd8-8c7e-430f-b8d5-b437e00bf1ac",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "c915daa2-fc97-4890-a3ea-ec0a9f706a75"
        },
        "item": {
          "id": "e6903450-a61a-48e5-8e09-5ec27b0c3683",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "b8d7ac71-1d12-4e59-a0f5-a0a405401812",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 76,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "7a79a4a0-b5f6-49e2-b323-ac83bb9e07de",
        "cursor": {
          "ref": "97628873-9fd0-4962-92b2-7ff620979eb9",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "84027061-4460-4856-ac24-e10239a24746"
        },
        "item": {
          "id": "7a79a4a0-b5f6-49e2-b323-ac83bb9e07de",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "447eedca-9e70-46a7-8c57-a9a11c30d256",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 76,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "e12778be-6cd1-4a09-bc59-54ee3d1614c0",
        "cursor": {
          "ref": "bd2d61a0-19a9-40ad-89b8-23e7c07a0d48",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "f4d964ee-6c59-46da-be99-a15b72a01aab"
        },
        "item": {
          "id": "e12778be-6cd1-4a09-bc59-54ee3d1614c0",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "edf96d73-1e9d-4283-814c-a00d0a858e1f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 76,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "e7d0e130-b9cd-4c6f-9ca2-92055413952b",
        "cursor": {
          "ref": "79772fd5-02fa-443d-a654-10b148990a12",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "5cb2b6cc-68d6-432b-a207-83476d16d955"
        },
        "item": {
          "id": "e7d0e130-b9cd-4c6f-9ca2-92055413952b",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "df0d0ba9-e62b-4e17-80c3-a0db313d7710",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "d6f1ac0d-2e96-4182-a572-4989c8f00483",
        "cursor": {
          "ref": "04d989e4-d57b-4390-8172-fd72c774e3e3",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "935e2a20-9bd8-4823-9a5c-ca82f5b95bdc"
        },
        "item": {
          "id": "d6f1ac0d-2e96-4182-a572-4989c8f00483",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "cc740083-4097-4e8b-9c24-2294da0c71d9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "8c3ca5c9-74f7-42ea-b6da-d0a434ad3beb",
        "cursor": {
          "ref": "507d756a-40fc-426d-86cd-5e85dacba12d",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "88fb9f84-564a-4946-aac3-f4a1a99ecb59"
        },
        "item": {
          "id": "8c3ca5c9-74f7-42ea-b6da-d0a434ad3beb",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "71a4e1fc-adc5-4362-9ade-b46dd05c5b19",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "f859ed99-5b0d-425c-a823-64776e472510",
        "cursor": {
          "ref": "805c05c0-2d6a-41d0-b4db-d66df7be6c91",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "d6dedf2c-38a6-485d-bf74-5487c67664bd"
        },
        "item": {
          "id": "f859ed99-5b0d-425c-a823-64776e472510",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "66dfe511-5651-42bf-b995-08ad51cd21f9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 76,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "4e748c0a-3060-4c7c-93aa-57f527fce52f",
        "cursor": {
          "ref": "d1da2f99-4f81-46bc-9b64-ca830139275c",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "11fadafd-c79a-44f7-850e-27395b64335f"
        },
        "item": {
          "id": "4e748c0a-3060-4c7c-93aa-57f527fce52f",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "e1fc009d-f990-473b-9201-e7a061fcc504",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 78,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "94bf5642-ca76-4b3a-8390-cfa71c3484d2",
        "cursor": {
          "ref": "94051b10-5ecc-4868-a787-03dc053cb223",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "dede5eb7-ef71-4d80-be23-7b2d41b9c5bf"
        },
        "item": {
          "id": "94bf5642-ca76-4b3a-8390-cfa71c3484d2",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "776f108d-0454-4954-9f26-b49e8b3ad611",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 87,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "f4e263e9-b49d-431e-8c3f-816e77c7125c",
        "cursor": {
          "ref": "92d9c70d-759d-4eb6-b102-64552bbfd527",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "7db492ab-7aca-4441-b976-fdfeb1ed5f9c"
        },
        "item": {
          "id": "f4e263e9-b49d-431e-8c3f-816e77c7125c",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "d62b80b2-4f5c-4709-bc41-47cab659ea70",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "389ccb22-4b4c-4476-b92f-fdb007b7c91f",
        "cursor": {
          "ref": "9a57bad1-ce01-4b9d-8bb0-0a6d7e9e4b45",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "c1fdcb11-5bb1-4130-84ad-3b544e132db6"
        },
        "item": {
          "id": "389ccb22-4b4c-4476-b92f-fdb007b7c91f",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "a244f93f-dc47-4269-a85d-f09faa7e1e91",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "d111b969-ca33-4ddd-9ef3-3bb2a2714676",
        "cursor": {
          "ref": "9367b413-4f3e-48ce-839b-f2cb081ceeb8",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "e507c978-ec4d-4d24-85f6-e3e1087e1ede"
        },
        "item": {
          "id": "d111b969-ca33-4ddd-9ef3-3bb2a2714676",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "d10bbb9a-9a90-4211-8eb2-bade32991baf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "e69d0e4f-35aa-438a-9b5a-3147f7d0fb78",
        "cursor": {
          "ref": "dec189b9-371f-47dd-80b4-83322830316a",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "3232bf12-890d-445b-a5df-d2f557aa7eab"
        },
        "item": {
          "id": "e69d0e4f-35aa-438a-9b5a-3147f7d0fb78",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "ba551567-e62f-491d-bd0d-d551a9c5361b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "804cc4d4-f7d2-4277-967f-bd087bcfeb2f",
        "cursor": {
          "ref": "4495ed29-f70b-40cc-85f3-829aaeb6c406",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "d3d5017f-1f84-4958-96fd-1bb2d62e08cc"
        },
        "item": {
          "id": "804cc4d4-f7d2-4277-967f-bd087bcfeb2f",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "c0fe74d2-b8c4-4c40-8cd2-25d1357dde4f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "90cdba9c-ea0e-4825-9d58-b7d61a0292ef",
        "cursor": {
          "ref": "33a07dd7-9ce2-429a-a8fe-72039624d111",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "c7744952-1d63-4930-953f-a688d0c8a566"
        },
        "item": {
          "id": "90cdba9c-ea0e-4825-9d58-b7d61a0292ef",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "00c65a47-6bd0-4a93-893e-b2e8d9a53835",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "7b19a76c-aab9-4060-9263-c9740230e63d",
        "cursor": {
          "ref": "d3f9ddc0-d32c-4b24-8c82-cd6aa4536fbd",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "8a2a0e94-e7d8-4408-93be-eba192d759fb"
        },
        "item": {
          "id": "7b19a76c-aab9-4060-9263-c9740230e63d",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "222c73d7-2355-4e40-ac1b-c1093d5dcdbf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 79,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "5dd1cfeb-33c3-49ea-9837-31b471e5e918",
        "cursor": {
          "ref": "1ee3ba6a-16a0-400b-8aea-ce519c42a5a0",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "2bb2ff8f-3390-4a82-9c99-49f04d91b0b9"
        },
        "item": {
          "id": "5dd1cfeb-33c3-49ea-9837-31b471e5e918",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "359a35b0-0d35-42a5-8253-05a67f975520",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "b6a8a67a-7cf5-4621-981e-52f48793dd9e",
        "cursor": {
          "ref": "c04a5a42-4864-4c34-ae64-60d4fa29462c",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "1826ac0a-e70a-47d5-ad2f-c4779004c8e8"
        },
        "item": {
          "id": "b6a8a67a-7cf5-4621-981e-52f48793dd9e",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "71ffa1c8-6b46-4cbd-980b-d37ab0f58e35",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 76,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "d5442125-d847-439f-b1f5-c7ec6f5fd2bb",
        "cursor": {
          "ref": "cb0be709-8e3f-4101-87e6-00b498843462",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "f0b68638-7c1c-4bf9-a9ee-61d89cde44d2"
        },
        "item": {
          "id": "d5442125-d847-439f-b1f5-c7ec6f5fd2bb",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "a94a248a-e229-4aed-a77e-6ddf6dea2eff",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "ed2091f9-fe97-4bb9-a0b2-61a322689158",
        "cursor": {
          "ref": "bd0b6e52-fb18-4374-812d-800385ecf058",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "65869304-aa37-400a-b11a-aff55cb1aff4"
        },
        "item": {
          "id": "ed2091f9-fe97-4bb9-a0b2-61a322689158",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "1ccb4f08-f655-4edf-b6fb-eca0cdd02e35",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 76,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "d767bfa0-c604-4f40-8051-b5e9e4c88fe0",
        "cursor": {
          "ref": "f273cadf-b0ae-49b3-bc3f-c1ae226688eb",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "afdec3ac-384d-4540-a237-fead783b05e7"
        },
        "item": {
          "id": "d767bfa0-c604-4f40-8051-b5e9e4c88fe0",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "799e3e6e-a8e2-4afd-bd1e-af96f3b96411",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "afa43ec9-1253-4b3d-b056-9eb3e243786f",
        "cursor": {
          "ref": "7f785018-00d2-469d-876e-7ce69a465919",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "a3f9f75f-5ecd-4dff-9f38-afa6d9587b39"
        },
        "item": {
          "id": "afa43ec9-1253-4b3d-b056-9eb3e243786f",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "6710b2e2-f0b2-442f-a020-6417b8306017",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 76,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "826a9ea6-16ba-4fd2-924f-429aa65baf10",
        "cursor": {
          "ref": "00fbfacc-1c06-4862-ba74-3958a0ec5ea8",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "ff9cc119-9499-4ef6-bdf6-b376c239cd88"
        },
        "item": {
          "id": "826a9ea6-16ba-4fd2-924f-429aa65baf10",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "de58b9b1-9221-4ae3-973c-fc22c04f0ab1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 76,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "7a91a691-bc4a-432b-abb3-a3be9540c427",
        "cursor": {
          "ref": "b6302fc5-3c8e-49a8-b22b-bbd4aaaec6ea",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "5f128eaa-180e-4c1b-a5c0-bd8e0e3532b1"
        },
        "item": {
          "id": "7a91a691-bc4a-432b-abb3-a3be9540c427",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "0570b2c2-a2b3-4d0a-8b30-8b912a2357cd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 76,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "05485ee5-20f4-4d24-a40e-44841f11f7b1",
        "cursor": {
          "ref": "1b65cab3-63bc-48de-9de9-1a6bd641f2f3",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "01064250-7a6a-4c02-8b23-ed943523db0c"
        },
        "item": {
          "id": "05485ee5-20f4-4d24-a40e-44841f11f7b1",
          "name": "credentials_verify"
        },
        "response": {
          "id": "b292bad2-230e-4537-abf7-f62e7d420a21",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "fa93bcbf-4691-46ad-ba7b-2bf948e89fca",
        "cursor": {
          "ref": "1fdad3d7-5ec6-47b7-a2cb-3e5c6dac71bb",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "e94ec760-a73a-417f-9610-f11d6cb57036"
        },
        "item": {
          "id": "fa93bcbf-4691-46ad-ba7b-2bf948e89fca",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "88afad54-bc23-4f8a-b91e-dea34387d47b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 76,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "84425b7d-27dd-445b-b4c9-6a907f3c6a57",
        "cursor": {
          "ref": "c224c002-123f-422f-8b4b-e1a6a15a1df8",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "5dfe5b64-b16a-4eea-801d-57f8b1e272da"
        },
        "item": {
          "id": "84425b7d-27dd-445b-b4c9-6a907f3c6a57",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "84425b7d-27dd-445b-b4c9-6a907f3c6a57",
        "cursor": {
          "ref": "c224c002-123f-422f-8b4b-e1a6a15a1df8",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "5dfe5b64-b16a-4eea-801d-57f8b1e272da"
        },
        "item": {
          "id": "84425b7d-27dd-445b-b4c9-6a907f3c6a57",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "84425b7d-27dd-445b-b4c9-6a907f3c6a57",
        "cursor": {
          "ref": "c224c002-123f-422f-8b4b-e1a6a15a1df8",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "5dfe5b64-b16a-4eea-801d-57f8b1e272da"
        },
        "item": {
          "id": "84425b7d-27dd-445b-b4c9-6a907f3c6a57",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "dc9a0164-5406-4fb5-9f05-33b478cdcaad",
        "cursor": {
          "ref": "8214a396-e678-4a19-97cf-f28b87970697",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "7a51f1a5-60d1-491b-8d0a-91739de4e490"
        },
        "item": {
          "id": "dc9a0164-5406-4fb5-9f05-33b478cdcaad",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "dc9a0164-5406-4fb5-9f05-33b478cdcaad",
        "cursor": {
          "ref": "8214a396-e678-4a19-97cf-f28b87970697",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "7a51f1a5-60d1-491b-8d0a-91739de4e490"
        },
        "item": {
          "id": "dc9a0164-5406-4fb5-9f05-33b478cdcaad",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "dc9a0164-5406-4fb5-9f05-33b478cdcaad",
        "cursor": {
          "ref": "8214a396-e678-4a19-97cf-f28b87970697",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "7a51f1a5-60d1-491b-8d0a-91739de4e490"
        },
        "item": {
          "id": "dc9a0164-5406-4fb5-9f05-33b478cdcaad",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "6b25fd97-b3cf-4347-be11-a78dbb2785de",
        "cursor": {
          "ref": "595dfb60-43e5-45c6-8617-955aa7013a1a",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "58c000d8-d908-4de5-932d-c94db2447681"
        },
        "item": {
          "id": "6b25fd97-b3cf-4347-be11-a78dbb2785de",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "6b25fd97-b3cf-4347-be11-a78dbb2785de",
        "cursor": {
          "ref": "595dfb60-43e5-45c6-8617-955aa7013a1a",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "58c000d8-d908-4de5-932d-c94db2447681"
        },
        "item": {
          "id": "6b25fd97-b3cf-4347-be11-a78dbb2785de",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "6b25fd97-b3cf-4347-be11-a78dbb2785de",
        "cursor": {
          "ref": "595dfb60-43e5-45c6-8617-955aa7013a1a",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "58c000d8-d908-4de5-932d-c94db2447681"
        },
        "item": {
          "id": "6b25fd97-b3cf-4347-be11-a78dbb2785de",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "41b80695-eb07-4dc4-b29f-a7479d7e6803",
        "cursor": {
          "ref": "bdb366cc-2937-4b08-8479-d680cb54300d",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "65317410-bc9a-4f13-b266-8aaec285c45c"
        },
        "item": {
          "id": "41b80695-eb07-4dc4-b29f-a7479d7e6803",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "41b80695-eb07-4dc4-b29f-a7479d7e6803",
        "cursor": {
          "ref": "bdb366cc-2937-4b08-8479-d680cb54300d",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "65317410-bc9a-4f13-b266-8aaec285c45c"
        },
        "item": {
          "id": "41b80695-eb07-4dc4-b29f-a7479d7e6803",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "41b80695-eb07-4dc4-b29f-a7479d7e6803",
        "cursor": {
          "ref": "bdb366cc-2937-4b08-8479-d680cb54300d",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "65317410-bc9a-4f13-b266-8aaec285c45c"
        },
        "item": {
          "id": "41b80695-eb07-4dc4-b29f-a7479d7e6803",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "11798b4b-b401-4714-b5ac-d24c4254ecfd",
        "cursor": {
          "ref": "62fad18d-8a15-40c4-9afe-3b680a653dd0",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "ff582189-1f02-4d59-a192-a8a6a4d41db0"
        },
        "item": {
          "id": "11798b4b-b401-4714-b5ac-d24c4254ecfd",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "11798b4b-b401-4714-b5ac-d24c4254ecfd",
        "cursor": {
          "ref": "62fad18d-8a15-40c4-9afe-3b680a653dd0",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "ff582189-1f02-4d59-a192-a8a6a4d41db0"
        },
        "item": {
          "id": "11798b4b-b401-4714-b5ac-d24c4254ecfd",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "11798b4b-b401-4714-b5ac-d24c4254ecfd",
        "cursor": {
          "ref": "62fad18d-8a15-40c4-9afe-3b680a653dd0",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "ff582189-1f02-4d59-a192-a8a6a4d41db0"
        },
        "item": {
          "id": "11798b4b-b401-4714-b5ac-d24c4254ecfd",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "fee72ad2-5f80-4760-a116-51131381f585",
        "cursor": {
          "ref": "1acf2c66-2265-4772-a1c0-12c5641311b1",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "6831f748-4421-442e-9c38-16ae9fba54f3"
        },
        "item": {
          "id": "fee72ad2-5f80-4760-a116-51131381f585",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "fee72ad2-5f80-4760-a116-51131381f585",
        "cursor": {
          "ref": "1acf2c66-2265-4772-a1c0-12c5641311b1",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "6831f748-4421-442e-9c38-16ae9fba54f3"
        },
        "item": {
          "id": "fee72ad2-5f80-4760-a116-51131381f585",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "fee72ad2-5f80-4760-a116-51131381f585",
        "cursor": {
          "ref": "1acf2c66-2265-4772-a1c0-12c5641311b1",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "6831f748-4421-442e-9c38-16ae9fba54f3"
        },
        "item": {
          "id": "fee72ad2-5f80-4760-a116-51131381f585",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}