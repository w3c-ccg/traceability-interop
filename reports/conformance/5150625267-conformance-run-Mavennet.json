{
  "collection": {
    "info": {
      "_postman_id": "e9c7f21a-ef69-4217-8f40-0424834c0fdc",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "abcf9593-92b8-4c75-a89c-9fce51d8310d",
        "name": "Clear Cache",
        "item": [
          {
            "id": "af99bd31-ec75-404e-afe7-6e273c236cee",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "72b88702-a428-4d2a-9bc8-10164cdd809e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "72e68ec0-5b96-44bf-ae32-87165de724a5"
                }
              }
            ]
          },
          {
            "id": "b8205b94-e113-4aec-902f-1989a1326d13",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fec86eb0-c627-42ec-a675-7a735cc1a04b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "70aeb753-c826-40d8-aaec-abb0dd81166b"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c9e6d4e5-44d4-4ca9-8354-37cb29cb47d1",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "c3ec211e-c90f-4bed-a0ee-923ca8fdcbbd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d18c456a-af56-4951-afb5-95ec38a82a64",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c062f2f7-d165-4ada-9e46-ba5bc9360285",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5315265b-e27e-4334-bb87-5c5b1973c0ad"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "39330886-d111-4085-bdb1-fd15389b7219",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1f45892b-1960-449c-bf8c-edff2484789d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6b598d50-8c9e-48d6-b80b-a4d6d31d61bd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1fc701dc-c625-45de-8f52-267abc5a5dc0"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4eb60614-0f2b-4d26-bcca-691489f91512",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "38323cf3-c44a-478c-8417-fe1acb86b2f0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b0219871-aac9-4158-a472-3ee0eb676ea8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "977def77-286f-48ec-926c-7774aae4d130"
            }
          }
        ]
      },
      {
        "id": "c007bc1d-e843-498e-b5c3-239c14b9af79",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "9801e5ce-16dc-41f3-b2c2-e46812c2b8dd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6d2caccc-de7e-4f7a-9bd4-a2f462e6d424",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "97048b84-a7e0-469d-9fd7-77ab6ea9be0d",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0fa83c6-afba-4f27-8dbc-e150c267e0ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "556d83bc-a6ee-40d4-bae2-1c2a3c10ab1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa53baf4-8ef8-4612-ad3f-20166c694177",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a4ce928-ed87-4d3e-bcc4-283e1eca7a7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fb265437-4acd-4bd3-a26c-acebf2c05738"
                        }
                      }
                    ]
                  },
                  {
                    "id": "def2c41b-ef27-4ca4-a116-9bc3ddd32d44",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee98ae86-bac8-4cf4-8223-b8c05824188b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "89557278-4cf4-48a9-bc9c-428c56a94864"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e54b08a1-b680-4d25-9288-689368b35a34",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "560fadd6-caca-40ea-9f4e-b00020269642",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3687db6e-01e8-4983-92ab-16fffd9490d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "42132fca-3d3a-4258-b6e9-de0bce9e9a24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de975faa-3a27-4c19-8b56-6698b40956d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e65b8303-925b-4349-ba22-960cf1d11042"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4df8916f-51c8-42bc-a73b-8082d5848809",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ef29eb6f-f454-4607-971c-a888fd86ccd3",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d1faea20-9bb7-4b49-b3ff-caea6ed67e0e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "5f4f98ff-dcce-44e8-99c1-a1404580f129"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5c08f7f1-8a78-40d3-8ce7-e0ec014cd559",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "39475c54-3400-4ad2-924f-439c2aaa9fad"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8e2e0133-13db-4743-ae38-1fafb449ddb1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "da7f37bd-4982-4a46-a85b-23a6072aff79"
            }
          }
        ]
      },
      {
        "id": "50e93e7e-fe89-4bbd-8d8d-0415c5d7ba41",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "61d2e40d-4e1e-4f3c-ba76-a10c5d65a35e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "281965c0-2749-436e-bced-08f783945573",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "cd7d9f14-7df6-46bd-ad7a-1e4295e25414",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0531a3b5-bf92-49b8-b59e-c44a8aa6c594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83b03f06-2206-4347-9a40-e6b9085af2f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d430c53-10ca-4236-b365-097328dda62f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "368a53c3-1b26-412e-9819-19266956cb52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c916efbf-9e3f-4fa1-9803-7836839caa7a",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd2772c4-9e6b-48ef-811d-e9a4a35b7bc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4a123f7-9af7-4f68-8cee-c57a2acff818"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4301dae-8d7f-424b-ae98-7047f987c921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b2d671d6-87dd-4a73-a208-a3eaae09c4e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fab336b-cce9-42e8-b68c-1f6828616d58",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1341de9-1db9-4bde-9c2e-7a951b6338af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a40ad767-4043-447f-aadd-7a7ef552f512"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32fdeec3-8c09-4045-9c62-d906ba08c403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "35d5762a-2fed-4c76-841b-0f78757bf0eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7a4e450-d37a-47d3-8a69-165571401287",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1332bdcd-bc07-4805-a265-13e986fa9124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c76e78e6-ad1c-4851-a7b5-58647dc0d6b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e119727-cfb1-4bcd-aae3-adca7336e40f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2953492b-18a4-4121-b15a-2b45678cfc24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78f0fbcf-f43f-4976-8693-c84dc7f3fce5",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07c9fd8b-e1bb-4362-80e4-c00139f4d39a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eab0a58f-2327-4a1e-afa8-c26b430ece80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "340e74bb-e732-4b8d-bca8-601861d1b884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "32dddac1-f12b-48b0-b05b-5b3f36285022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f581c1d-ad84-41f9-ba4e-75db5d4c71f0",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14c02835-bca0-4bd3-a4c7-a66553343d93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f7c7065-dbd4-4f07-9d56-3f7be59986e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1190d882-1ad1-43e8-987d-33e6c02c211c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a851ea2f-a795-46e4-ae7b-6399de268acf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a733253-9f06-44aa-8db0-a45cf92922b6",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f589cf8-1284-43c0-bbb6-dc21fd3a517c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5ed9267-de29-4cea-bf87-bfb7c667af16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64490ff5-9933-4e2a-b3fb-26bc11b5b062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "47d6019e-5a99-4d00-b4d2-c0b62a99ba75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1681630a-3a85-44fb-b3f8-2b435ec5a110",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1359f891-5873-4879-a4b8-c0cd48a5af17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85677f58-cf8f-4064-8786-0e9491be8355"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19f2640b-10c6-484b-87b4-d2a0ae0d01e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3f58d438-9b37-4c0e-935c-5b130f5a4d0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e61b1fd7-552e-4426-af9e-90196f74cff2",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "558574d0-eba9-47d8-a08a-f5fa5c01d8ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "083f40d6-4e66-40c8-812c-7a52b45bed4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a87c7f4-2bd1-47b7-9698-63fb5e7dafbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "74d86c14-123e-4085-8139-09ebbb29e82b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0a98682-2a17-4b79-8c06-5fee73da25d9",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07f19ac6-9b1e-4640-96e1-7f9239a4ade7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbdc38d0-f586-4d94-bba7-0c8ddd98d2f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9de0e8f4-3a15-45b6-9375-6f3351602916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2ea0e75a-480b-4d70-bcd2-2ed9db4e9849"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e3c0a45-a58a-42bb-aab7-99dd91139538",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e88ae351-d2b9-4ff8-991f-db0f5c0d0cff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bc3a739-9762-45d7-9a2b-6d0a17718790"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa3d4110-a8ee-40e3-b471-aea95b341931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c7fbcfb-a738-4d12-a941-e435a093f381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5889b8a9-34af-42a5-a3de-00f4b76d51fd",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1700d19a-0b57-4d47-974a-6dbeb3dab555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a40ea50d-4d1e-4360-9a32-fb017856e70c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ff3df5e-b81e-4744-ba42-267b6d0dd26b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "113361a6-3124-4634-ba92-ae24629a1978"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15da3365-68d3-4c05-9f5f-2c3cc381833f",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6693edea-f165-44a6-9517-ad19aab307f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acb8abe6-0ee7-46ac-9bf6-333ec3f03c8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55addf00-9d8a-47de-95f1-46a55ca23177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f642d996-29f0-4967-9ed2-4aca50517907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "854acc5e-2fac-4c65-affa-207e158c519d",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3db40312-3261-4f71-b6ae-d80ca4d3eb3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20e3b68a-bdbf-40dd-95fa-4f180984b72a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23ad5337-3053-4d28-863e-0efa71d6814a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0e6b441a-689a-40c7-9b56-b2b31994faa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be110147-f74b-424f-95ec-acda8c64399b",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36c151ba-7750-491b-b89d-b093ff081575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea33a587-1043-4926-bf4c-7ab82e2e5426"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "671f24eb-5b01-47f5-b5c1-2e7d22119c4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ffcfe82f-bc64-49a1-8ef2-b20917b75b00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b325be8-b2af-455c-8fbc-782f86e95a37",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58d3f794-5acf-403a-abae-b90543a5ab51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8e55a2d-5d9e-4653-b503-749425ea939e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60eefdf1-66b7-4d5b-9d9e-eca8c1bafc09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a7bce610-f528-4959-9bcc-3d0251bb6c35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1679896-71b3-42fd-ac8a-d5ad3a5b2f5e",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34925aae-1b7d-46e8-a89d-b202f7ccc431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d422539-eea5-4e22-89d0-8b2038a96789"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24193c88-7a96-4537-a4ac-c3cd630f6f89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f40b4488-dc3f-4592-9dd7-ddb317b82a7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bb10c38-7634-4681-b2ed-610c17655dd8",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "430e2c74-9a3f-474f-b651-330cbaa97e21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8fdf44e-7240-4d98-9aa3-a70aba589022"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76f8eb99-c4ca-4f11-a273-522d4d9c2378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e559c5de-bd05-483c-8af8-d0c383bbcb85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efa68b1d-43b0-4354-9c96-7fce1c56cbd2",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36057c8e-537b-4171-87eb-aec52e73f2be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a82aab2-453c-4396-8942-d0a7f41fd037"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "193a73b9-2a08-4d05-a8c7-78045e245b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0022d3d-ee8c-4d2f-94df-3819b0bce3e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93608693-ceab-4c5c-bcc9-0c2f32a16a25",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b2368ad-ffb6-4554-b2ca-5e0e47360076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "093652f3-ee8d-448d-af95-c1433b7b1005"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dfb7e5e-80ae-4f70-958b-3b0aeaf2dc28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb1d7ac6-545b-4dee-8deb-dcb2dfb4ed5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49658495-23c5-4cb5-9cd8-4652713a434c",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78c722cf-2f8e-4df6-8748-b6949e7d0d38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a10c7aa2-f7bf-4d56-95df-b1cd493b00ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "066d7c15-1625-4586-9152-067881a4b27b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ffe425dd-a1ad-44ca-948b-c4beafa6a840"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de7c62b5-33fb-4c57-8d2b-0a765c5d3db0",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7d438a8-81bb-432c-96a4-e116053e13c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1f96233-e811-4071-a2a1-2043cf978466"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41df9391-94c8-4b38-a8db-0dcb70c02fbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b406391-023b-4050-8093-1cf0ea9c79e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5f61886-0665-4ec5-bbb2-196579ac75e0",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ec34b2b-2d62-47de-aeb9-7f86c8b83e85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41703062-72cc-46d1-ad11-f281dd84eb7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec7f342f-6a49-4642-8151-c814be121fa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "428655ea-0dd9-49b2-bfac-4db502c8473c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "580449b4-0c25-4c10-a2b7-9db8eebaf74a",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecc53071-9370-435c-9ca8-741731a376c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8ea05b0-2122-408f-af19-6d580592f1c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "504907f6-80a7-46b8-85e1-f83c58d3d619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "021a674f-3c8d-4eae-a1e4-7a684b5292bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e886a97f-034b-4d52-8a51-74e4c1dc18d9",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b6b6db2-a9a9-42be-922b-3b3fa93dcfab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3dcd8e9-b462-42a8-a5a3-364ac2c97318"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "648a0ce3-92b6-45d6-bcb1-a252df0d994f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff3c96e2-548d-4743-aa8d-0ff5866ba400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b124ba11-4cb1-48bc-b191-cd2fdb842ac6",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12f6f8de-5633-4c3c-bb5b-8218c3b185f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aba05320-1fab-4bba-a0cd-0440f277d5b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11093bf9-51ad-4105-8608-de80003d58db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "576eb84e-1d95-44b1-a3ab-e0569f830abb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73505938-ede0-48d1-a33c-7a4d1f071004",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9268bb45-5201-4a26-b077-facb1c7b1260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dfebe16-a869-4c6b-a5bd-56b44a951b83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "711e4e16-0447-4345-8e80-b6500175239c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "672e819e-fca4-47c9-af1f-69c495eee842"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3af783d6-bb25-4242-9382-920725cbba54",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cad0ffe-5e4e-45ca-a7bc-cd8ec0e4955b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "310f65f5-941c-4966-8816-4b6ee0465741"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "249d7e00-69fa-4263-aa91-07cab9c52bc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5da4f135-77ad-4fb2-b315-201f3d71ad15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2dde9f0-8828-4488-b7ef-59b621c912c5",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce19cedf-ab64-4bb5-a0f6-35cdba5e602d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ad4ef5e-9650-4301-9b9d-20ee85e5fabf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3125e9d3-d7f4-4ac5-b116-353b5176b17f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "40025c33-1114-4c69-8ba2-570a234042fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c80ca324-90f5-4fe0-b7d8-e0bb80ddf4d1",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa8f7f1-bc9a-4320-81f3-e3b26a3edf9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "978a6a1a-e134-4f50-9eda-49564a528137"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a01fa0d2-56bd-4d22-84b4-d8ab18358f59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "820935f6-6202-4a42-8936-9cad11ca3849"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64124ff1-dda8-4a33-9239-b1f8a5b367b9",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9067526-7f8d-4269-be3b-07d09be31218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95a85448-77a3-4710-ba35-81bd621424c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71c658de-f2fc-4183-a296-9c77722d302a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a30a7e3-e959-41a7-ac87-00a657448e02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99085cef-2e4e-4f1c-af03-43e18edc9cad",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93a630e4-5e1a-4874-aef3-1fedaa891219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae4279fd-848a-48d1-8b7c-eb52678ffd48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "238974a3-a1d6-4490-9ed4-54fe3a15cf7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a4c5456-08dc-4435-b83a-be564c7568c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "093145a1-113f-4a6d-a3a2-2bef902bdf49",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "623e43d6-587b-4bec-9301-a2414c9253b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a902c60-2433-4d8b-8f1a-c042e18b9ae0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92bce187-0c57-445c-b3eb-3efc17e2d00c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8df24a6e-7cb6-4a01-abd7-759a0e31bdf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a66832f3-7696-4828-a73a-f8ea59093d58",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8448205-500a-4ce0-8aa0-d9c3f614e6cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a20ad35-3669-47ef-bee8-12eda8dc8170"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f40e948-f4cf-473b-8ea0-358c4d7d5bc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9feea0db-7360-4f3a-9a53-6aa0ff61887d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0f3912e-966e-4d77-916d-5b257df2c418",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66c9e934-89d6-407f-964d-5d29fa7f95bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f7e3470-9559-445e-a7f8-afb6f38feead"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c89fa7e-49f8-4b92-8931-fd31045ab043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "7146d83a-358e-434d-a5ca-96a054d2ede3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65959e45-abb0-4477-abde-708075855585",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e792ad39-e702-430b-98dc-7e3f265ff1a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ce9fcac3-2d1b-4802-9a0d-6af51cdc82a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac0fda73-1911-4324-9137-3b86d89b60d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5686ed81-dad5-492f-80e6-3c2ca46ddc30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e5d3094-6d00-4d65-a942-d3700225fb39",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70f2dc2b-453e-4032-b6b3-0f93f039f052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea8bc6ba-b454-45f5-97f9-452905d41084"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2c7a8e9-8c4d-4e31-83a4-3ab8665a3cf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bdf33bf1-6cd3-4a36-9402-584ba92c472e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f584ba8c-d9a3-4017-a990-d97917a1dbd8",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b64ad79-4c28-4f5e-94b3-05d6656660d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b52d026-85d9-43a8-ba59-822455e36296"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ad42aef-3525-492f-aadc-fc4fd18ac625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c7cb06dc-2f03-4bde-9951-88218c47b03f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cde4317-e7b0-41dc-b576-1143a43b5b08",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8ddcfb6-5a6f-4637-af56-5b08810e5b5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adc180b1-057d-4a63-82d5-dff0d4bb3088"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21716d1b-c0d9-4410-8265-ecb4c0fa67ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3f936c7c-9e68-4fb9-ba1b-bb82da092f9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a953cd0b-2b9b-4d57-af70-de994fc716db",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3965f069-b6aa-4678-9799-6d1d78169b5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "073d526f-7140-4920-bd31-ae9c4295d429"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d53c2b4f-5004-4490-9a0f-53eb2e1daf9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "72a336ee-72f0-4c34-bdc5-ad0960923eb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "867d28f7-b134-4bf7-b8a8-d130f0207e28",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5c7ed55-0d2b-40fd-905d-b76884f4e2cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04a92f98-8221-4570-a33b-bfea0f011788"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c00f41de-fdbe-4774-a207-c17ac3230c6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a3423ab4-bae1-47a9-b147-1917eef5e242"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89d3ef8d-ad82-407f-9b23-673bbec3ff6e",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb0a3689-2d80-463b-9f3f-a1e29211ae57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1d994ec-53f0-4a84-b78f-b8a18a34e934"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1df19b1b-afbf-468c-8b24-79cf7bd0afe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "041d4371-7d29-437c-a7ab-bc18c7f10155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f5ee7af-803b-40d3-b735-88b427513f05",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fe27e21-c33e-4099-93f1-149cfb9cefae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba1b8f5d-4d24-448f-a46a-49d828e65864"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ed342ee-907b-4c84-8cb6-7997e339f0f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a6302d13-c600-4182-bdb7-80a5e26db9df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "253d41ea-8495-435e-8bd7-128fcf058b81",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f08e310-8921-4342-89d5-38cc85030d62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c995242f-46aa-4556-a896-63de430bd4b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa13b88a-3b72-4765-b03d-3253fe67b528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8afec7e-7823-41cd-b038-eea47f607325"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6724add-1ff4-4381-9a86-c5d8a0af9004",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18468722-a924-4b86-b50a-427cb2c9d5f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c469d97d-7360-419f-9210-c4d3ea098f73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ded4504-a06d-4111-bd4b-b5a50e8d8978",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6eab335-e6cf-47e9-88e5-e150152eac46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21f7bc30-5379-4b61-839a-20a3f5d517af",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "854e3061-20bc-452b-b05f-b8e38fa035b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0785f2b9-1a0b-4f1b-93f3-5de3241f0536"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f866614-2686-4159-81c7-30775c824e06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a36c4b6-182d-4e1d-8679-6163b29287c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e53a4e8f-1aa7-4ff9-80cd-12a2186361cc",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01222e07-2a2a-44c8-a9bf-6589576fc2ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "694cdb8f-c3d0-4127-8fd4-8d678618f4f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "654c5775-6f0f-432c-91a8-c931bd5fd80b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "adab1e82-7b15-4c78-9844-6dd44ff32785"
                        }
                      }
                    ]
                  },
                  {
                    "id": "060e8e97-ebb3-4d6d-ba4a-0c866196a3b2",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5809d9cc-1ff7-403a-b60f-e916a2e03a6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f1f82d7-0044-48f2-898d-3ba23988b98b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "217a1bb1-da1e-4b8a-8ee9-2b0ff457d7a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "15ad83a4-f56a-4879-873f-b8e20b4cbcbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43dd1d11-27a8-4a36-9a01-889f74fe513d",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9e12e5c-4a57-41a6-96e7-4ca7f1db7ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e08117f-0b01-4b0b-bb25-eb16465448c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c2a23cc-b613-459b-9782-5d5d5882cab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab060e95-0704-44cd-98ba-0de9ab699ac7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a8a45bd-f0ce-4057-993b-b425b346a478",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0abf5f08-ee94-4816-8fb7-4d9a8ca5dd0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78ed68e7-74ae-4483-88da-deb4dfc9ec0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb1c557a-331e-46d1-863a-11a3212fa6bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5911de6a-d5ad-4acb-b789-605b2d3b28a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa3e4bdd-f5ba-4569-aeb3-40f4e68d61c5",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7738fbb-6c06-46fc-bb96-426041da2afb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "940df4ca-43a1-4492-a43e-f6bb391c43a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fd2ea2c-4f45-4276-b825-1718e1c4509d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "96b350c1-a0a4-4d79-8fd8-c0d2758d6eba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f45d1ce7-4b7c-4368-9c27-426a5f0650ef",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "687fad6e-a1e2-44a1-945f-91f5389e890b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9007f791-b7d3-435e-aa1d-bc486f1f36a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d016adac-cb76-493b-809d-fd784544ac3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c0e8dbb-03c1-4d00-a6ee-bd0f501e6eb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53ad621d-8c70-478c-bdff-1074c57dd7f2",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37e5e498-5546-44e4-a350-53d3b65721ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2bb7139-d798-4b19-9ae6-b1225c98753f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d42a9b79-4e82-4898-b3ad-3c34e9630764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef12b07c-66ac-48a3-823a-7de310305e26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06e0d632-bd30-4e60-b053-f0dbde69d5c5",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05f109a5-a6af-49b8-b923-e3068f192762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4860bb64-82de-4b92-af81-7957906cad89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfbfd241-3ce0-4971-ac1a-ea30a6aded1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb036b6f-91f4-4ac1-8e0c-a60acd9dc662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9cf0bc0-cf72-4bd7-b3cc-0f6177c13b59",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc07db94-6760-4b95-b688-5f97d98e972e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8d8bb22-7aa1-4877-95d8-637db0c99e43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f401ec1a-1e72-407f-ac4d-b07443bd6247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0fdcf66f-eb61-461e-83f4-a1d254834b2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b06b5d50-998e-4c1c-a382-a2c91b6dfd57",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7add1b05-c55b-402e-849b-bc0b480071d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e1121e6-841a-44b9-a612-695381daa54e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dda8eb1-0e1c-4ae2-a15d-77c6f3a2aa16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "08b83d29-6eca-4d86-8b2f-195f67dc7f99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24757f8b-8639-4428-8dd5-e6204227e842",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f4fb00d-643b-408d-bf36-055d9b9670bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "080e15aa-c691-4397-a33a-bc61c5579a57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9599a05d-87a0-4d2c-8372-94e267f84cf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c5fd2b2f-c151-4401-9caf-5371f4e096a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a85af83-4f3f-4d38-aee2-5db05709fcca",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04318e8b-35de-49e7-a511-4d2021ae1422",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17617518-67c5-4918-ab63-e81a37151dfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75776be7-9bc3-455b-bfa5-c59c41df57d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "71a0bdb6-77a5-47ab-9f24-e58c441ce6c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0fa5a60-b3d6-4c64-b839-c850d9a368fa",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1159c50-c09e-481a-b2a6-ea149ff17a7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65bc2d5c-8279-4932-b3c0-d0110c803ed0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9f2948f-cb22-443e-85e0-e33c68310304",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2b401eb5-5594-4f2c-92e2-1b21bf33391b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a86cc60-d147-4b79-9276-72ea2206bd8d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed8a76c8-5832-45bd-b927-32e665f9c1d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9353f2b1-d989-4e4c-9d25-d57784b4ef12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af75163d-60a8-40df-a27e-e2747179670e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ec80652-1297-4e34-afe3-fc1020a8c067"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4ffa896-b632-4a31-8644-49b883463923",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2d87616-255b-411c-bda6-c249969bddd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5567db9-11ac-4886-8e24-be0d6f6b2ba7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aff837d6-1872-428f-8b51-68b7414d9534",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "253c5135-277d-4948-9242-ab1d90fd3f21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f82f348-4a9c-4075-857a-7c176af1aacb",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98fa0ec1-98c6-400f-a0a4-4748150e192d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d29adde2-e241-44e8-b84a-f8c249d089bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54082cca-53ac-4c25-b2a2-58204ce5ded1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "21ec8604-74b9-4696-87fc-1dfd722f6191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "183e5133-c1d1-4ad5-8a72-26d549331787",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb58dc4a-da5e-40f2-9c59-c6cb4f305ddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a405bd5f-b12c-44b3-80f0-8418d42004ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "357286eb-d896-44f1-b7b6-265479a99758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb9259cd-4c57-45f6-88e4-4be0069ee7da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "799e594f-150c-4b47-93bc-2f80d97a92cd",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21cce43b-9a6c-4cd2-a1c2-d4f647bad290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d285d5c9-7670-4981-a4e0-181ff01385d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e8f2284-c5c1-44dc-a60c-a6e251030968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b42369e4-d0bd-40d2-b1e2-ed4f2cbb7723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c4f171f-980e-418f-8b16-ec4beccaefb8",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14b82fd3-298e-4c63-815b-b50e1c35a33f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c04d1e2-8fa7-4198-b0b5-46aadc5a60c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0c48daa-7614-4a3d-9fa6-d9a5377786ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5cc8ea6f-9407-4094-b5d0-35669e1c2785"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2d90c91-72fd-4c98-a18f-471573196063",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a621b06b-3d1b-4b86-9256-de6fbcd6b9c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c954c11a-a6b9-44ce-9519-ef248597fb86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5a56d2f-83f1-40ea-a684-4ae21a7ae3ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "debd67ea-651d-4280-a612-1896acc0ab9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "558542a2-539e-4938-88e3-87992745bda9",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec2b1d51-0af0-410e-9d7f-0a4c055158a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e87a49e-499e-4c09-b27c-7c8a86a9e976"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a27b7be7-afcd-4186-a6a7-05ff19ebe41a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b19c08b3-1352-4ce0-b2c3-9fa360bf9c52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84dfddc9-d6c0-414c-81e3-3877675fffdf",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af3153a2-f2ab-4457-b8ca-181a8d495907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b610ff5f-2609-4688-b1d1-2c66e80a7b3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38132976-ba45-40c5-93d0-8cf15dd01f7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8c379dc-2d66-4f7f-b18a-783669db5b33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a49ee8b6-4993-4b13-a8c6-48d35f466f0c",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30fc87c4-11f3-4d71-9f65-0711e328b90c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93cb5232-5304-4305-9a2e-6626c8e63401"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64ece013-cd3f-4e01-aab5-48d63d71a8e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab9cf3ee-1bdd-4673-a46c-c732864d8220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7ffe95d-3e30-47b2-be4f-c2db8c509257",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edb75be6-a466-46f1-9bb8-8fcdabdee141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "844c122c-986e-413a-b4fd-03b25d07edc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbd34d66-67c1-427a-9e50-2ff8755b44c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3a408de-fd9c-4ed0-95dd-c0af4975837b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6bd90c0-ec2e-4fee-895b-7887f6267158",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24da31fe-23ca-4ce4-b817-1b479f890d61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82faaae2-b0d2-448e-b175-e9c6dcdf96e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8c1a5fd-2725-4fce-92b7-d8386df415e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4680b3e-a538-4277-8f5f-e22e045c5f9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8d79e59-059f-41aa-b4f0-0b048b44a05a",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d1c6359-453a-4c5a-8017-90760502b65e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7fb3a22-5147-4d69-874d-2ed79db93f6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb4f93c3-a84b-4433-9836-10c172353dc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "12cd2e2a-05b5-4e0b-a0fd-8176f370d3fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e04279a-8802-44bf-941e-79fe88af4529",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab92d3fb-cd35-4a21-921b-cb7e8c203113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a946e3a-235f-4a9c-9c70-1e21b3dd2980"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85ff8966-02e2-4fdf-a3b0-494cf1581ba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f5ff8a6f-3a53-42ff-ad9e-64b9233de54c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5461ba21-694e-4cfa-bb11-7826fd4d5082",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81ad155e-7611-4b11-a393-be998b9d4828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2ff636e-500e-41f0-8938-4fc521614011"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "721e98b5-679d-4338-960d-129d976252dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1ae47e91-c62c-47d4-94a1-963bf66d3526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91f21bd1-0405-4d9b-b709-6f1f1ccb18b5",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a8a06bb-0ac7-461f-85fd-f2bcb5180852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2496ae69-f9a9-48c2-9be5-20300103cc31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60d037b6-c14c-437f-8cd7-677e70cf9168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b953d4b-d10a-4cc9-a47d-83c323e4f28e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcf45f38-15ea-4d84-87de-2577b239417a",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e25c4823-43eb-40ea-a992-16cd7a0c3a4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "832acf0f-e48f-46d7-a1e9-578ffd4e12e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "475472f7-5753-434e-85fb-0fda73b00a48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f566235b-9ce8-4495-a317-6686e414d6bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87257f6d-9f06-4bd3-9968-33f37c3c14ee",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4a5a4f1-efce-4513-a1fe-037a0e117f58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5febdd1-1cd1-402e-9b2c-f9ad6d888486"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e88a7b48-e999-4d8e-a7de-347822521d91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e04f3bf4-7e94-4a97-a2a1-c06e76acce18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "227043f8-3139-4f8e-ad09-cc5b67cca5cd",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f31b6e7-3b4d-40a2-b840-54c029e21804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47dc7bf6-c1ac-499d-99b4-e44fb82a230b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ad59ab2-648e-48e9-9260-cd732cd84a8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3d1f7cc-3da6-4e72-aa74-3e9a3a4515a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1c83030-8367-40a2-a331-cfdd37a97231",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3af2ff1b-22c2-47cc-b264-df8dd0360eb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ad6b877-8297-455e-99ed-2e5b97710cf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc3e54c2-1439-4ae9-93b8-86f713b0b7cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6970ad73-b40c-4278-90d8-33bba5b94d52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56c88399-3a23-4213-95c6-c0edd3c46122",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89499baf-d27d-4926-b22f-3b594aefc4a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1ced98f-2ef2-49e9-a6a8-9f251762644f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "704c3f79-70e9-4fdb-8aba-95e1c8b40d6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "21fb2a1d-d6c6-4a1b-b9fa-8f87ca77174d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a55e67ff-6dca-47b3-8905-350fba955a4a",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ebfeda3-dfb3-42bf-894b-2286e8caf0fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21c86d39-9412-4b0c-9815-b0509b944f35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "923e8bb1-8787-42ba-9aea-99bfb171acda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "29efa71a-69ae-429e-a915-63e884c9ab70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "359b5e40-2a9d-4c5f-803f-0e6db05622c9",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20f209a4-7390-4417-bd34-6b191aa4155c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6c25a7a-6f81-4680-b420-92e3d4c9533d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7c31b69-0297-4c6d-86cc-121c153f6f6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e4a6d88-5a63-47a0-94b8-4450cd7b85f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6ae6ae7-4ce8-4776-a84b-ce5bcaac677e",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b82a6215-1292-4126-99ee-f48d489f0888",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32237d01-3a11-48ee-a574-cc5777348731"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b1a2118-2b40-466b-a417-b1752eea14ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1caa1c10-4665-4962-b90a-c6f8ad0391e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dae77902-0ecf-42af-9339-65c964778edf",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "467ed06a-0953-4c6b-a9e4-3cc8cc57fe67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36bd0dc0-8b2f-423d-8dab-8514f797fd71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efc4490f-1ce8-4323-a71f-7ef62fd2b41d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ca1c314-9ad7-4507-91c6-379a0027bc56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c37e18f-5313-4211-8293-e508d8d178e6",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be510675-4bab-4759-ae1d-3ec35ce40274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd96df9e-01cd-4679-b874-16b5884673e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26583744-2053-4e08-a454-5a028c5fda5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "12310d04-2cac-4c76-b6cc-c14c51746ba3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6c67cac-1666-421f-a2be-0acf3de833a1",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dfc580f-9578-41fd-8baf-9d8018bfdef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18a941b5-c157-4c61-8518-9e95dcfce160"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "217f5779-3106-4b07-b885-56d13755c6bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3fea7d96-4adc-465b-8cb6-f50f3a8938fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c5ab423-6d82-477c-be52-0c8d69209309",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cde72c8c-048f-42fa-aa94-003a8505295b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb1793a9-f0cb-4f65-917e-445af0093dfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd7b542b-aa23-472a-a1de-f6f6de9f2e97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "641849e2-1595-4aac-a699-bb4151c667a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be501b6e-ef57-48de-b4fa-3faf7ea7a58a",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6e3b498-5937-4b30-b124-3e4922db1881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c985e29c-012f-4051-92f5-761f8c55763e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c890a3cb-d7c4-4de7-805f-b4d9d9844642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "efb5da04-1e83-4917-adec-6156f4f27875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d07dfb4a-f5a7-4f4d-89fe-4f4ead591654",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50ef997e-20cf-4beb-9032-9ba4d683cb56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04f2d2e1-d0d9-4e00-beb3-f4e119aa13c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33034cae-12ca-4f00-a8d6-bd5d08578a40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "396b8eef-06c6-4ba0-b4c4-2ab831b6da7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66a5386f-431c-4771-8af8-9da386a2e3d5",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "763f8bbc-f227-48cc-a102-09861e175d9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae87a196-83b7-4930-a0b9-56bab81931f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "516598fa-b1ff-43c3-bacb-63ac87921a03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d78ad679-e5d1-4e59-90f7-7fab1e430e48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccda5b77-4ae4-460d-a21c-81e5703f955d",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14389306-8263-4324-8c82-f348aca3a458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "682448a2-1326-42e7-b4c3-248af45de2a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "244793d9-fac2-4151-8381-a8538e8fbb50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a8bfa3d0-ca63-4249-ac78-46227ea28c1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b4a0a27-a644-4968-bf10-1ff862f3d037",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78f856ea-ab94-4ad3-97bd-f5a44f5dc0cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "751a9dcd-bc61-48bb-ac74-05793fc0bf16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3643beab-efb4-4b99-91d0-551e333cd6fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "91f07994-a79d-49e3-aac3-c16b64f580ed"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b23b0b13-fe28-4ab6-88f4-d7d9cbc5e368",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dfe4e25f-7998-4a30-a66e-ac3ad215e42e",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78b8e950-2a35-46bd-85d2-c4943fecd651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "158a967d-8da2-470a-8c5e-c906387f1fe3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "622757da-6268-437a-a591-2e166dd19a0e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "96a49b41-d3da-4ca8-bc53-f9e30e8c5d49"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "417cfdaa-e253-48b5-9576-d6732e5becd9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "085709f8-abf6-4967-9fa2-b600794d38df"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ad6d9547-0fe8-4d42-89ac-5ea0a0cea75e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "596eb4c4-a1fe-457d-96cd-6a8e06bb9bc3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8d08ee1b-21af-4be5-bfd3-d32c6f28b750",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9dc1e5cf-ede2-4ef7-a6d6-ca551f6a651a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6bb42282-04f2-4d68-a95b-ceb1e49d1b37",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ee9f3172-108b-4be3-bae2-0e8988dde0e0"
                }
              }
            ]
          },
          {
            "id": "38137f95-e7ae-4d76-8b6a-d20769638494",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5acc3dc3-3132-4123-a96e-9e086eb53095",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ad441c52-911e-4aff-865b-d8018868a922",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "be8a299a-7b4e-443b-a403-ed0827d71e78"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "44b0d9fe-e94f-4dcd-a62a-89d4341e39a5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2e91f21f-8a9c-477f-81bb-08e7fd34cc8a"
                    }
                  }
                ]
              },
              {
                "id": "54fc636e-e9bf-4adf-9ff4-77524e68d806",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "59c0a751-2b2a-453a-b9bc-4cb4672757ae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "986b1172-1732-4da3-aac6-20dc732d4cc9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ee7d9544-df6b-494e-a278-62a89fdf85e5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e2ca3a51-3a86-45b0-966d-98b1ea2ee451"
                    }
                  }
                ]
              },
              {
                "id": "479e2910-d2c8-4eb4-b2fb-4b5e5aac8411",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aa6f93aa-f99f-4295-8b71-7e4e85fcb44e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e5221d3d-9c06-4b76-86b5-8cf1a8108b10"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c8766de7-ce9a-48d2-bd29-09626aa733d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0a19ecb6-6622-4622-b05c-106132b3d22e"
                    }
                  }
                ]
              },
              {
                "id": "2d201529-76df-4ca8-bbd0-dcf0322cc411",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fcb7f532-8320-44a8-8cf6-c59bdb177a6d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "61ea6260-babc-482b-b663-2ac07e87d572"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "00703291-6884-4fe6-9c22-0e5aa5fba39b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "a685900c-5204-4718-b761-f35a0b91622c"
                    }
                  }
                ]
              },
              {
                "id": "bf2bb75d-d77b-4411-aace-7bbdabfe3c08",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b271761-47c7-490b-a694-d3ee908c10ea",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c1dc122e-2c81-402c-a783-1f5353af371c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c1d45a44-b85b-4daa-a6c9-7cccaa22aaac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "27b56847-be79-48a2-b49c-292e0223a73e"
                    }
                  }
                ]
              },
              {
                "id": "a3750858-2f0c-428a-b234-37a47879e3bb",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a52747e2-1803-49fb-a99c-ac3ebccc0f42",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "65f2913e-97cb-4492-8a5e-565fc82e6e16"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "85bb744e-7ba0-4c7b-a93c-47fbc8d632e3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c75fa73c-c603-4a00-b3c9-ee619555c8b3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "415c7c75-3cda-4135-8f0f-66b415a054b2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d08d20ba-34f5-49e9-b8b5-ee2ebfc1d408"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c7679fa1-f426-4c91-a933-2d5cb02f26ca",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d83daa17-d312-4208-a6d3-350875aa0ba5"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d800dfd6-76c2-4056-92e8-3d7811118cd3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "c82649e0-aedd-45d1-b2bb-2e1ef7f62d6a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "05776584-edd4-49f9-be74-1e974ad16459",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "82d99f08-f6c0-4e27-9ee9-35b5a5bd8c7d"
            }
          }
        ]
      },
      {
        "id": "a58f8657-7d21-4786-b836-f7ce8dd60422",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "6d6d4277-1dc7-4320-91fa-d22a9064dbd8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "67671516-fa07-4ce3-88b8-2daf0c365262",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e5aed304-0153-4010-8ba5-92c979cbac10",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2ffede4-ff16-44cc-8fa1-fd8511c2d598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f889429-07a1-4663-98fe-362dbf71446b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4efe9be9-7e7f-498d-a79c-9c46fc2f439a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "8cb17028-fbbe-4ac6-8344-d7f643c8ea91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0a2d9fb-6b1e-4f6a-bb0d-2094bfd134c1",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8992606-5c32-4248-a9bf-748a14dad3e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "461b031f-4527-4adc-830a-b63748179fd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca514f39-fd4c-47b5-85f5-bd0d8bb1b8ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ce3ed90-6cd4-47d5-be4c-6aedb07e3174"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92bd48b0-388f-44bf-80b9-1b05bb0f2631",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68b2f7ce-a4ba-4e04-acd4-00a2f762c80a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14df288e-f945-40e5-8751-e1c6b1f82641"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "031d9328-2b5e-4a63-92bf-da6cbacee833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5893a975-992c-4172-8aa2-2de582804d1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f943e4a1-c862-4f0e-91c3-324bdaf66c03",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e72aebd-18f8-4bfc-a4d7-a201922afdc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3c8e7c1-0a0a-43d0-8efa-8690e632774d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4258351-4e85-462a-b3f9-b389a9178f1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "63e0bef6-68fd-4bd2-b449-97a436998c56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8998590-992f-4463-9871-3890354e195e",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b24ded45-1fea-49cc-b846-da50ffc55ede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e3baf91-f955-4142-854d-4374b72994b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4ca7485-0a1e-4bdc-b893-ad1cb2ea425d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "31ea7d78-41bb-477e-bfae-d5c3e1cf8d32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "632c963f-8b10-46d4-8915-b87ee50a864a",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01c9d3a0-9073-4869-886b-1ef2f3e68dd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f04c888-fe3f-4c19-a182-6510513447c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cdbd0f2-8f95-4ca3-8930-f5349c87469e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "aca1fc55-bcb4-4640-bf7e-baab1d077d09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf895e15-afe0-483a-ba8e-d8415c8020c0",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb51128d-1c4e-439e-b2fc-cf333d90476a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e544d2c-9414-4766-b460-0098d8e68492"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "970591f2-ea26-45ff-aac8-c57cecb32c6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8072132-061e-4d76-86bc-11e85daa6fa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74e977ad-48e7-4107-a210-b365ccfd1b42",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96e586a4-821b-445e-8b56-e3060e57e07c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35025982-1295-43b8-81a4-a2ece5d41c10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97f77c6a-2ded-4b9a-a7be-bc2a5ab7a188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2f6027e-ab16-4972-b1fd-8ab1aac4bef2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eedc56d8-6012-47d4-ae8b-59d310ead958",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91d15ad6-9a84-4e31-9e78-93ee010ac85a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0535d7d5-0090-47fd-9100-d22c2c4193f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f8f5622-f758-46b5-bb03-79823f891530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5afec36e-d0f6-4585-97c7-eea4109dc3a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85c89459-bf2a-4f56-8a50-883b68843eb1",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d548e89a-181f-43c9-a2fc-cdcee6224a1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4571de1d-3f2f-42cf-8d11-e75df401a44c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18414a0a-695e-4a7d-b3aa-c8a1a6efd3d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "45740e88-1d81-4ef6-97f7-4c53001d6897"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1da1310f-aa42-455c-8256-da1dd5b3c180",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa2eb709-4ff1-4be9-bc93-a2695e29e8dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17cb9448-7eda-4b70-970e-b1d7aff80401"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ab9b13b-ebde-419b-83f5-324cd36a14fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "dc886740-851f-4ac7-bf15-520595d6c07d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9c89b86-3ce9-40bc-905a-470300863f77",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf7a8b4c-46c4-4b56-b368-26568a2e8195",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61397ef4-3e94-4fa8-b131-b0e51bfc630a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88056a09-eff7-42b9-b8e2-c4444e3abfb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1532de3a-3beb-4602-bc2d-fa04140a635f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5c6a978-ab5f-4313-a177-f624f78f1f0c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55e51727-aa38-4426-b1dd-55db0318a9b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03b16338-0805-42e0-a291-29d9aa02bd1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc5f1d75-f122-4fc2-aeaf-ca7abf0239eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "215b2c95-a7b2-4ff1-8c16-044d26957eef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "022635f2-2852-4e0c-9d09-de723d3e0fe4",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9d2a0b9-4f17-479f-ba50-5acbaef973ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d03fb86-5695-4968-a027-8037c1a22b35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7773c4e-6431-4f4f-a559-825b3e1ef37c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "83aa8158-5649-4c13-ae6d-971d3bf52953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c13abf8e-3482-4f68-87eb-72de6ad594e2",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c8525b6-a1a1-4752-96df-33250778bb50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40ad8556-2485-4ddb-8e1d-29204f1454eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a3995ec-5ec2-40c4-b4d2-cc9db6230a23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d06edd8d-c4ae-4226-b49b-b7cdc0162249"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f885a20-4122-4488-b0bf-dc371a488a84",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29c69630-2193-45e2-adf0-73bb89ce2bff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "034f9ede-cf3d-4c9f-b2f9-0d92e67af3f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc0e518b-f7c9-4d68-ba30-9881438104e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "c463e129-479a-4f1e-87f6-55f4f558e4c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc4dfcde-8081-40b5-9619-915a69767a1b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbfa689c-7632-411e-acd0-9055a07f5325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39a776a6-333d-4c84-a3b7-e230c93270a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c35b838-262c-41b6-aed4-3ca47c7fdf99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "649e2954-648d-4041-aa42-2dd9cfc7c829"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5c1860f-21a1-4943-a7e1-bb49713c5515",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbb1cb5b-97f9-4ae3-9d4d-1efcbb096488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25287dce-9519-433f-81a3-977053517c0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6f8d2c4-b111-431d-aea6-ee20db4b62df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "484f848e-4e1a-4957-9b53-3fad33a9238a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1334d759-26b8-4050-9b17-72835977a100",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cbfcdc3-5409-49b9-a374-61e9ade48f65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1070ad7d-d77d-43de-927b-42a2ebd375e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f64f2c28-a291-4273-b4a0-2a6f7d588b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dcce741d-e27f-4d45-8c06-67b2817acc8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8948872-3d2e-45ce-a216-648d74bf0c02",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97aca684-e084-421e-abf4-905fb9099cad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f69a05dd-ab52-489a-a1cb-af7f9180db1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c19aa31-8eed-4c33-bc09-6ef8bcd0cb74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b322afc-38ad-4d8d-8f22-5ce60d61f9ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "253516a3-a41e-4f84-92bc-94854ce47d37",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05e9c881-4113-4b4b-a114-0b228b828a35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a80d0d1-b460-4ca8-9c88-4f0c0f94a7e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35e32271-5d3d-41ae-ac1a-25be5730929c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "60786920-1d30-4dda-9fe9-b1051d3c0d9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7484cf8-029e-48c6-98f5-ad0e12c54140",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bd50946-780f-488a-9f96-e0da9a507344",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6729265b-4446-486d-843f-7219037afba7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfdcbeef-9f61-4e47-afa0-0b0a9b342dcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d3aaca1-33dd-4eaa-b5ea-0d5ee0cf4220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c28ebbae-c838-4583-8e59-9ed9740e0c67",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c316d2de-d049-495c-92c7-7f3220c78d8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87272ee1-6e33-459a-9696-4022ff94ff07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c363cb3-c7c4-4393-84e2-3748bfe91a1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "372517f2-e9bb-4abf-ab5f-3a3136c2102c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d9749c4-60fe-43de-826a-2931d9e9455e",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8ed30e9-e2b1-4e51-b996-11c9bf553f1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92064ea0-9e8e-4f1f-9d99-5cc62c359e9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c64ec489-c97c-41d1-aa3e-c51c77012694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d90b4aa-e570-4b5f-85aa-d1da677ff741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "217caf18-682b-4e8b-9769-66bb9e65dd25",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50c321a9-8d89-472f-a8fb-56f17367eb95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08c02f92-7deb-477c-b334-c33711b43202"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "119dd54a-5a92-4aa1-8d7b-556b8a54e560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e240994-458f-4997-99cd-bc2ddcccfa36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8b1d937-bc46-4c2f-be6e-da89cbe68f39",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d782f26-f2e0-465f-9c1b-3a0494981136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4134944c-056b-4e31-a544-d6b9b66c19c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2a784c8-a180-4793-9209-3bc48a3b57a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5139333-7a99-409b-bedc-60e5988dfd4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e58fab9a-5a6f-4e1e-90e9-2c65b15e1c56",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e102144b-6b63-47f3-b13b-d2d4816608a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b36516ca-5985-4a63-ade6-999dba58dd73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea34c346-5657-47c8-8de2-fdcf8f9e8d73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da90756d-8491-4f25-87e6-3623ab3f486a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb65f558-59ad-4b0a-8129-8db7bee1d3a6",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ae744e5-7f0d-4166-bff1-3e95909e65b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c26008fe-5ec2-4b3b-9eb7-396b18743c10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d679b43c-d679-4a99-ba01-e9e034ace674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffd0056c-394a-43c3-87c7-d8a5043c2b2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19c5334e-85b6-43ca-95d6-04f1d6c2f76e",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a526a94-5a01-45fa-ad48-7fea35fc1c75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c0432d4-2371-4cf5-886b-63fd6c76120a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af03bbb9-c5bd-406f-97e6-a77a0bfe091f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "438862ab-dd5c-4a91-9207-50da77054821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88eab2e0-a232-493d-a276-b333affa0f54",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bea416ba-d370-4dfc-896a-0cf243abb43d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a898d024-c8d3-412a-8f17-67099e7ab53d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a628bd3-1d17-4682-8e5b-656245905303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8d76564-2daa-4552-8a24-3d9872b0b1db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13cf0a10-80a5-4b9f-8b5e-6d4fd7b12db9",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b701114-b169-473e-ab62-ac13d9e3f786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79c03239-9340-4b2e-849f-519a1dacec17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4d868df-bee5-4000-be60-5d0e2badb154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f6d278b-158e-49a7-8e90-5bc9687ce0df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66359fb2-8c85-41aa-94fd-9d58262a3039",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca4393a9-0800-4e6e-a485-270ef529343b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa06f40f-5548-4886-ab9a-d70a9f712e28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "164a1b84-9eb3-4bb9-80b1-a2b7fa6fa3b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f864463-3110-4f3d-b1c0-19b8bf72570e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b55c30ff-aadc-4afa-8461-7857be53dee0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "74313fc0-9c9d-4583-937e-06ccfe83253c",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6487912d-b9fa-4558-8cd4-653691d8dfbc",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "ce60ce74-7750-41e7-b97b-ba5b81569dc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c13d42f-1fbf-4fbe-b040-f89618bfe7cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0e6db141-8e9b-41b4-ad78-194eb5ff2322"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f64a13d8-cd6d-4b8a-98e7-980c317d7205",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dd377af4-7cdc-4998-8020-d5d0b6305157"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c32d646c-fd81-44a3-ab80-eb91c06f9069",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "53a188c7-49bd-432f-9cce-f382a6181899"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cc15a4d0-dab6-467f-8f4b-b3a3689df1a9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5aeb28da-e5bb-4917-ae4b-0590daed22f3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0a88ea31-5816-4edb-a4a4-960cf8f62cee",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f34795fc-5f41-41cf-a176-6fafd58c0644"
            }
          }
        ]
      },
      {
        "id": "96a6ec46-da15-4386-a9bf-e24656c35646",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "19ed38ae-99f2-45d8-b1b3-400f18fc2f80",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f7a6631c-e505-43c6-b3c1-6f043c070430",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "553b82bf-0b6b-4d5e-90e0-7566bbf4e4ed",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ea8db4c-88e2-4651-9e82-0ebb3528aa45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "541ac8fd-afa7-4389-8eb8-7ba6f74804a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf47566c-3312-4d96-ba81-d273c3caaadd",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b332e11-f345-4042-bb41-ed4c4a6ee02b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec269856-c7f3-44ca-b5ae-ba81d143e4fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f59d795c-a4f1-40a0-9e04-4d38d7121f1e",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b781371-81ac-41ef-84f2-1118eb189f9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22a034da-643b-42b4-b5d5-6f8b8cd075c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7df0c907-3544-4c0c-9699-5b02d5a86824",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "664a0fab-fc18-45a3-81d8-984f08846787",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "021c522a-9429-45e7-ace7-836d8d6757b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d041bde2-db9a-41bb-a5df-db73fe0cbccd",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b5a01d7-cebf-4538-95cb-0ef7408def00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f524346f-b600-499b-85eb-7407e5266fbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0bcdc8c-e2e2-4ad8-908d-845ad2bbd1aa",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2b7ed61-87ac-4289-9882-665574c800c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27e456a4-e376-45a0-822a-70745385e69d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3034f044-9d99-4d8e-89ca-d74deb34213d",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53d21a70-e2e3-4d1f-ab4a-e6588f517025",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20fd8e86-96ff-4c4f-82c7-adf425f0496b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fee0181-8f6b-4c35-a4cf-0a1cbd7f3195",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16c0ab65-7a13-4103-91f0-42fede84a084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab522954-d44a-4568-846d-6faf0dd0c79d",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42c19d5c-75d3-48c1-bc20-fd5aeda44b9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4264728f-f8e1-47d9-bc0d-c0a35435a5eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc115fa9-da73-410a-ae6c-7264670b6aff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86f04521-111b-483f-a38b-192656d52502"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03de43ac-8c76-4f36-a4e7-ff1afed73324",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c08752bf-1d15-4324-805a-915ad2ed0f51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "369e95ce-26f5-491e-b8f5-8f6903d1ff27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dc56b65-0d38-4163-84de-b786b94edd99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65d94986-fd4b-4ca0-a2ea-181243ba28a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9e65763-b37c-48e6-8184-dceab6421ce8",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b0ad3e1-49f4-40d6-9366-66c673d5d836",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53999059-b187-480d-b991-c880925c1715"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68213752-1bfb-4297-af08-d3bf8eacec94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7b68027-5cd8-4017-a68c-2600f5629c74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d45a1e49-2b3e-4671-a4ae-eff244af0edf",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d15fb081-f1a3-412e-9f97-40c49e871a81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14e245d5-10c8-458c-abaf-22a3b06360c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c91c7460-57f5-4446-bac0-8671987d4299",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35e87c5d-0ddd-4dfe-99ec-5a3d249adca9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a3c7fd9-7e3d-4d93-b4ce-02311acd1194",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c947e80-9c4b-4801-8494-2a7ff0135bef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d47e6443-f765-4ef4-bd20-b262b0571e92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb024cdf-916b-4eb3-9ea0-3103c12a0704",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "172049fa-5ae0-4a85-99c6-f04df0ea7e44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7936041-5eeb-4a07-b54d-e8a7b3a2fe68",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8d4717c-6a9c-41f2-b62d-dadaf585cb8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1714c137-c965-4091-94ed-2fe6435fb76b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb9b8489-2808-44e4-9e1c-11ab30fb0dac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d19abc0-8d24-4158-a999-acd4c17b8ac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "951243c9-6d02-4016-a03b-a848a2d34cd8",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "038001c1-10e6-4add-b54b-691036b5b2e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12bc77f3-4963-4801-a90e-372d2d1ad381"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "daee1e93-b65c-4187-bbc7-fe0cf2c8c70b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96257b48-75a2-4124-ac79-88f8cec42e49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bb95259-d29b-4b33-80fd-0e41d07a6bdf",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f3cfa89-9f8b-42bd-885d-f9f82d3ad2af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ead908ff-78c9-4141-b582-0a6350ab16dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "651e7c78-1e98-44d2-a346-d7dfbb6d7dec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27b8b7e7-7367-46b2-ae3f-45882d841f3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6efd6511-88d1-40c0-8ba0-29d562e6c702",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6efecb4f-8afd-4792-943d-9b5abe7f4839",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3111e1a7-5981-4a37-8638-6d7a860078d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9f4e862-c375-45d0-bf04-2ba8a9fe8160",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07e3ca39-db11-4e72-92a1-53a27f5c138f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0e939cc-109f-4499-ba28-47a049b06498",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60277206-9b3c-419f-bca9-9c2d1fc08937",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58b30a01-09c3-4f3a-980c-579d90814d4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "352d79af-24a9-436c-895f-088a5850ae48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c4d9078-9d13-4df8-83e8-b7fa3128b1ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "700d0b5b-4a54-496c-a699-da95ad12b6d6",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16395719-5e41-4242-9797-6bb3b8836fad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffc09b75-8899-460f-b569-3f19a04ab48b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "720fa10f-e1a6-4ac5-b1d5-df8a32151847",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82bc395d-8f59-4295-adc0-3470e5268a70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf735b1c-f49b-40d7-882a-837b312fb42c",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4160b443-4ab8-4591-84bd-e20d5647ef37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72947f2f-cd5b-48ce-86c2-1c42662bf217"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07c8db6f-4db2-4f49-941e-5b32fb79258a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e305860e-ca82-4380-b51f-3ac62be57454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7aa599f-a297-4fd4-867d-120c27e22f10",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51c9f222-ed4b-4b20-9829-3aaac2bc1d8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99cbb95d-d09d-43c2-9b66-890d5e295d1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f9f67cb-a5a5-49ce-b318-c2bd9c6764e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e4db748-0482-4e13-89a1-70da87537704"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efd5ba15-5c9a-4a9d-9476-42bb15e9b1eb",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b51b5bd9-4269-4a1e-a82c-5c0ce67907c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0195428-0ffb-4359-817e-94e4add6db38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cff3f4b9-5572-4274-b589-f7b7e36b46f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48eaf534-07cf-4a1b-b959-53585df9c422"
                        }
                      }
                    ]
                  },
                  {
                    "id": "801d74c2-0bbc-468f-945b-ab9a009a6290",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81b90044-8744-4641-bf00-36d5c5bb8143",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e3238b5-5c97-485f-aac9-cf51639dba64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef48955e-7531-4670-a525-164bb26360c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3bd725b-5e5d-4a27-8041-0ee7d263c49c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffd64109-d2ac-433e-a068-d05050bd3aff",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f70a8ebc-c792-4b3d-b5f1-e9f8c580ca0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9c03a64-50c8-41b5-8676-28d923807488"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa0548f0-edf7-4ef3-bb81-7c53e4437350",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce3e23a9-23d2-4d1e-a483-ecfb4dfaa3c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b34833c3-418e-4e9c-bca1-90dd91344f57",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7253d3bf-ba9b-43bf-b50b-40180272073f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14313cc7-48d9-482d-b985-fa20a0276c54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da0753f1-3f7d-4ef7-a34c-2ec9758a1679",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f95b2e8a-8435-4726-8040-b740d9a773cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69a35891-da3c-49e0-a680-78db298eeee5",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf9bdb95-9ec4-45e7-aaf5-c3cf1da39f45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ddc3b912-d80b-4e0f-afcf-6fe4d76e634a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "903ff281-63b8-4088-9ae6-08dd2a5e732e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78e8a365-4e88-4744-8a81-d3cf345987ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5785773c-1244-4c91-b67a-938964fffd2c",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "295029d0-55fd-415e-bede-1e70ecdf2ad3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3fdaa68-efb0-4514-898f-93d10e1bd6d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8113d447-1d4c-4225-aefa-bbe83f7b00ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "972dce7b-bd04-4ff1-88b0-45c99aa8771a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "988b11f7-6b87-407d-beb4-cfb55082360b",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d7ed343-e217-4004-8e78-3f1a7507f849",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e170ee8-f96d-43dc-ab11-c290ffe17e7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa5734b0-c387-4e04-99ef-2de565290280",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0fa8add-85ea-4b0d-9ee1-4ac8654c4a35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3998e9af-17bd-4245-8e9a-80423e5141c4",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b25bad5-eedf-481c-b811-d8e30a7d022f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6794d1fd-9c23-4814-acb0-25c41b9c19d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62c94c97-dab3-40a7-8a56-86e1e564137b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24c1e07a-8345-4bbf-a2fe-40f94ea4da45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "616a7ac8-39d4-4d04-87b2-57d498644d11",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f0a5181-6922-454e-ac01-89a494f938e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f061e14-aac3-4060-b65d-351441d1f4a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "209ce59c-bc01-4027-942b-4014e78b9316",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1041804c-6131-4d32-9c2d-2e018014dcfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0511b1ee-45cd-4338-9ce7-d25fab423d63",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aa8c5ba-7b5d-48c7-bb78-0932101ecc56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b8091db-1290-48af-ad48-cbe7e486c89a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cee3bd1c-e9a7-443c-809b-039ac30d6dd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0eedc6b9-1fab-4cde-ba1b-4a1d9d94abc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b7a22bb-3bc2-4a37-ab39-0c842de3abd8",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24e1f6fc-37d8-44c5-917b-bb0e4221c70d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8049dee-6b69-4708-9bda-f154c8df2c18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5db624e1-acb5-4ae8-a263-f7526d7d8f32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5005c1f9-ed13-4026-957d-5c3979a1df6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4a057fa-d462-4ac7-a744-cddd168a151c",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c7c7f6c-d954-4b08-b280-b86f828cf66a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "98bfeb42-8acf-45e1-9bb4-f3d349575dbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53924a22-be8b-4492-9770-05e1ca4b1af8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "427fd39e-a96f-4976-9b90-2952f7bf1002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25dc4e05-bf53-4628-bd54-d6dc8c7f1757",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c37b52a7-3884-4ae2-87f1-d3b95e974868",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92b818c6-4f60-4ac5-9b0e-02a0326725bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6015034-de27-47a5-b274-e1af4ba7f344",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "213f01b0-6480-4e67-89ab-9b435e6f1431"
                        }
                      }
                    ]
                  },
                  {
                    "id": "814ed541-69c0-4e7c-b70f-3d93ee643aa5",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3805a2b-e574-4ef6-9617-b4568ebc7c0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7aca75c2-2dd7-4ded-ad3b-b0ba065309ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cb4bb03-70dc-4c71-9009-1c4d7f2771b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c55d345d-fc68-4ebc-a58d-08d8c2ad804b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbc0f73d-bdeb-4d77-8754-bc46e3bd5c46",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c244fb1-6d43-434a-b7bf-ed500d8016a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "318386e4-71c2-4397-b3d0-94ff4318aba8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a56d8ed-6c16-46cf-b8f9-8d724d017090",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21c8f72a-df3d-496e-893a-4a7e936297e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a62571e0-b737-49ab-9336-45f2c878498b",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14d013e4-5557-4ce3-81a9-52dc1c0806f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b1e796d-f053-4661-adeb-b7f20418a114"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "575d6c66-80e0-4697-903e-e2238bae6f57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0655336f-83f2-437c-b59d-d6698e7058d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5889015-bb77-43f3-84ee-c65c0b17a0bb",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "147b74a4-aac2-4492-916a-0c279c565a03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "409d4234-c44a-4bf8-887e-a74e3e881e1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29b64639-531b-4054-aa4a-03b64ec48d62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f661583-bfe7-457d-b2bb-7acb9dcc3541"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b33c323-5826-4e3e-9f0c-0d1c8c091efa",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbda814f-f9ac-47a8-8026-880dc4dd2332",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08df7b68-b916-4a2a-851c-0455e9329ef8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48246aa9-7dc9-44fd-b4bf-7881cc81e3b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "172d3e32-fd87-4351-8cb6-3c480a1f46cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca707b26-3688-4dfe-a9f9-b9f28c71c159",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2192bec0-70b1-41fe-ac8b-70a2241060c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0956c65f-d1cd-477f-b8e1-ad438c8e2fe4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91ee3647-c890-41dd-94fa-9f043cfa1d2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c95cd80-0d5a-4c05-aa3c-294f7bb52afd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a4b2f2b-f241-4ad6-a945-b57854d6cee8",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6082a6bb-f78e-47c9-af59-a79f37cca63b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12eaedf8-ff2a-4e47-b6a0-335ef549923c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "044f5c37-b9dc-4689-b42e-18d40b37b623",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd600304-4a6c-47a0-8b07-b54a2f537ba6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "304485f5-c373-4624-a76e-874b8ed6b533",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "266178fd-007b-4bd1-8a42-a8e079dd2047",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de54ff09-2926-4b37-bb3c-4c777d5f407b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19f7039a-afc8-429f-867a-5a2c56f94ddc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "894b3601-fdca-4676-98c5-fa704dfb5493"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6ffe5ac-54d7-4c83-bc43-a0a69099a7b3",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01914cff-2b2f-458f-adec-2df58de23175",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56d6f5d0-3c49-4512-9aaa-50210f3f73e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9854f7ba-347e-4663-8b29-eb9d0f5501f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f684a06-2c8e-43e0-80a7-521c91bb1e3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3c94481-21b8-4d54-a46b-cc5b1389706a",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0db5b67-b53f-49cb-bd24-32e089929093",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41712d34-a91e-4f13-af21-8071a472f240"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91179bed-725c-4722-94ea-771acb0a4215",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffe6cdee-637b-45e5-bd79-4a540ffe98cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "592f22b3-4da7-4a25-9137-93f17de554b3",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65aee6b1-d29e-4734-98cb-854f4a20a007",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c7dd292-fe3d-4855-9b2e-625f64043a95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ce0edd1-1376-4331-9df2-bbb768dd9524",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e64a0a4d-031f-453b-8f65-f014ecb3863a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31bee0ab-4a04-454c-9018-09d914d80ffd",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dca8e50f-b867-440f-a54b-9fc5b6147772",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55991a5a-6e3f-4013-a665-76ea331c0fe9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af729e7a-0b4c-4354-bdf6-adc5e5f846f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79f08218-a934-4b6d-ba17-457bf57abcb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "836ed6b5-0444-42d4-9f75-dbaf45c888b7",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddf78e1d-a6c5-45d9-a3aa-034dbe065f96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b22f0c15-4cc7-4704-a87d-3f1ecc753889"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92a3e78d-8229-4526-abad-a4af91a84965",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d55f0047-27aa-49d4-a3cc-3a71877ec2b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd331ea8-6547-4e04-b867-265eb95216e2",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e1397ff-1c54-44c2-9ebd-1b06cca2993a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da5b26f9-3431-4c29-9483-61d6aeef779b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01fd8801-a7f6-4b13-930a-538a5d0ea206",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12638184-a75e-4708-b1ce-3c74b2c9b9b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa813ca-8007-45c0-9070-24bbc0ec5fce",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53b492e9-73e1-4fe1-9a82-590c83244514",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02cb68b2-96b1-4a26-a043-def9684bbd47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9c0c4e2-9fbb-4641-820f-7b65bd71af66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c92ae4f-6732-441e-8e22-73ff1f750f60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b462031a-5098-4826-bad7-ff283d3a141b",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed8e29a0-982e-414f-88f9-d36253ab5dff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bf3a903-2071-43b0-8483-6e8e1ec2d3ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce128924-3487-469f-9369-52d6e221f99e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f81ce29-7b8b-4956-90e2-d1018aa5ad5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec28ce57-1c9b-480b-abe2-e2e1597e1d2f",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47ecec63-5962-4449-aed1-6037425fde9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cea12b0-814c-4569-b8a7-6acd74b117ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01c45cb6-c83f-4241-b092-bdda882c9b91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab058976-044e-4cbf-b43b-3edd2cd5b11c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f682fc9-4960-401c-8fa4-712c12dc3cef",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "584dae53-0bea-413e-adc6-fe60d714f680",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09b54e60-db72-45bb-a9c3-3406e3b353d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ba36374-7aae-4e27-9fc3-b069db1434ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a036df2a-807b-4565-910e-b0c2a45dd14a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52672861-1236-482e-90ca-ab302d827d7e",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0230a4b8-4104-4d87-b645-b9d7a8012ebe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b21a8ef-99d6-47af-a7a0-95052eda41ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4112dc31-e4ca-4b71-80f6-da3a90ac0cdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1d513ac-970d-4b81-8b21-702e34dba407"
                        }
                      }
                    ]
                  },
                  {
                    "id": "618388fb-c740-4b48-8fc9-37301b8787e0",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f37fbd84-d0ad-42ab-be9a-284625ff4a96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1df9a21e-58c3-4e8d-9be3-3dbdd0698500"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0985d6b1-5c10-4174-9b0a-61cdaeeb39b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1889f51-84c0-4790-b91f-6780d69f2bfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a910b5d3-70af-47ea-8a93-1030799ca0f5",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69fa76f5-084f-4fe8-855a-5e6dff527a4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d0e83e4-b7d9-4635-8259-48f6708a5581"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "545592c3-6d0b-429a-a99e-700f3f3f6574",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2ee4a9b-1174-4a33-963c-dae6f3ebac4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b958c22-e6d9-4d78-9009-01c1f47c5cdf",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2254cff4-039b-478a-ad59-8ddb476d9ead",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74a12c64-4e03-4eba-82cb-65fe561b3e9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "371238b6-1f26-4a92-bee3-6bdd2a9f948e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4178f2de-be40-4bd2-9b86-1d29e87ba5c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8957ee5-0b27-4866-a26f-b4f50718b13d",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec43b005-f8de-46ef-b782-a20d3004ed26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b3605c2-5428-4b3a-b83e-3b5d4e0523b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df60a809-bd83-4e99-9ebd-58e566c73c81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "827a6241-f669-45ff-9d0b-bd7c75af6266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cd83241-9e9f-40c7-877b-91b9d9e65e04",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27231eee-b0d9-4c7f-85c7-cf79ec77bcd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b77416f-5d90-47d7-afb9-5fcc3bb08e0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10e50cc4-e1c3-4da1-9a87-2a5ebcb7fc49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f7ccda3-9460-4c71-bec8-cc934111bc4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79a302af-24eb-4975-b998-cbdb08247da9",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1f9ae25-8b29-406e-bfe1-1f9752afc476",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c082e0d-d51a-4f3c-be94-efa6417766ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd059b76-52cf-43db-a98e-f7b9a4d541d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a76d736-587e-4a97-a6c9-5f030cae66ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c34111b0-690c-44df-ad2c-c7512d2f6024",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e38124bb-f095-45cd-a2f1-35aebf6ffd73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f24ecc9-73b4-4429-956d-ce13925d3a8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ee5fdbd-a570-4c53-9831-c265aee77e5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb3aeb3d-7802-4109-a2f0-0367b95cdbfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10a50fe9-c85c-4046-8eb1-8dc928482103",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4922c328-4c57-4e53-85f3-de0d17f8d7d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebb3e1e4-1605-4ed5-af33-81f56f2db859"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e656f150-1300-45dc-a933-71ea7d101363",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e343bcb3-1262-4f0a-8602-900aac95be93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2560373-3358-40ae-9913-78293320a448",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc8468ee-d7f7-47da-9ba2-c5246a9b2844",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79652361-eb5c-41dc-922e-640bfc2fd898"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d576a8f-33b7-451c-b5f2-cd766d2fba74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dec08574-4773-4752-b039-4ba97c44fb9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b05b8b0-fc58-4fb8-9270-e1ffab6c27a0",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b31f8e9-77b5-47c0-ab28-b9804c59b546",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35b2caaf-e954-4850-91ec-5f0c2fe81701"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4265333-803c-4150-aed1-86af040580de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75f205d7-8cc0-446a-93d9-00a48a7af20b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ba8648a-746c-489a-8ce0-9cdc2dff38e3",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a0aeb75-81a2-4171-a1bd-a43df55b779a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf0481a3-2d58-42cf-856b-472812682b33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1c54511-1c09-4229-956d-0d73ab52d882",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1031419-9279-420d-94da-6669fb063ba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96f6eee7-5c4a-4268-8549-67639329c314",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16ee3e80-0430-4cdc-89a7-29b89adbfa5f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bcbaaa2-22b4-402a-b727-327dc5857ba6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e51cbf7b-3e33-4f43-bf8a-620cff070629",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "991ece6a-cf1a-4dc5-b6ec-7cfc88434cc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05dd96d8-9771-44a2-beff-f599b02ffe35",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6605d029-f0b6-4869-adcd-7d2d2111b434",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b04ae6be-35f0-42d6-b6db-8e92a2ad6e1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdbe952f-9fb0-4ba4-9b84-e68efa397a1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83e0690f-1fca-4ebe-aeef-6b8de7ad2159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c38f7f60-2316-4cf9-bd6a-3abd349fb95f",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e8ed6db-7137-4057-bd29-6b3c77a44445",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7dd8cee-650d-453b-94e4-c3af4db2ee31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19fe8b9f-5bf1-4a33-a3d9-db24240f720b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d89ee360-4541-4b48-97ba-7a2a44358b82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ae674e4-7d2e-4b75-818f-4a209f5fe58d",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d60825d-cd3f-4cf8-9b8f-2c6ddb44ba57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07ea9da1-0ff6-498b-b3c8-b65708f8463c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "570831ba-2643-4291-99b3-38899a865cbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "018890c2-3944-4d6e-a1a1-2ba0dfcd8f6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ece19c66-aa55-4e40-82d7-36751eb915c1",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ad54b83-e333-4beb-9316-961f7e9434a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9761a5ae-9f69-4553-813f-073bafb61ca3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c76439c6-dc7c-4723-9abf-440852a02b70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6f3b56c-ffe5-43c0-a14e-4b8be4fd9f2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "576b27f6-bbfc-48bd-9413-a60d8140cdc4",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18d3e66b-6b5e-4989-8e86-6f3363ba9b58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da37f81a-d802-4eb9-8c69-319eec051396"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bb02b39-01de-4f67-ac2f-92c6626bd37c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4e962f4-6dfb-43c3-971b-739ce5f16d5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c36ae38-1ff3-496d-8918-b08b17f740f6",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc21f44b-8f0a-4067-8a9f-e5b8575d5c3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75a5fea8-7628-4456-9811-3325691405c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cfbbe64-b37c-4bdc-b076-e3303bbcf2e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9029624b-525e-4165-89ea-9f4cfdd5ceac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ac71f42-5615-4dcc-bb4f-7848420e27b1",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5950bf2a-4d6b-4af1-b82f-f2f5c358aeb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29b5c50a-16b6-4de3-9c62-9c3f491b7e3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42aa3a5b-7b7a-48b6-841b-e4d0f4d0b3ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c407386-3fad-4368-ba81-8b20c9cd374b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e43d270a-edae-455e-9b9a-d34cb15a0f49",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d000264-fd0b-408a-9747-06b596e0023f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21aca7dd-59e6-4d1c-9b63-670c72ed2389"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aac09956-5864-4b3d-93bb-d65dfca0f554",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a06148f-e436-420c-b9d8-c99fb9b83faa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23f34ea6-1a22-42cd-bcc3-6d1cb2b8fbdc",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02ee1599-823b-47d8-95b9-bf32adc35b1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab8bea8f-bd51-45dc-a7cb-fb97c77687a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "750e396e-2bf8-4e11-a787-f0a5fbc9df36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e843b18-ca25-443b-976f-a2cf79e075d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e65a909-8a74-4f9d-9b39-9b2f89e8be38",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "947f5749-7bd6-496c-9980-84ca4a6dec67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b99eaf4-11c3-46cf-8923-5878a67a5eaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32e915b3-1f43-46db-88c1-08adc709e332",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9237daf-ebe9-48b8-ab0e-6356019e9856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ac2465a-5b39-42df-b5b6-c0781438474d",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f95524e8-87c9-4a97-98da-fae15b758b89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27c8fcd0-aeed-40c6-9baf-31574966309f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d9c1c93-ba0b-4ebb-a86e-86dc4d625765",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "739c5679-6937-4977-939d-c59045b52e36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "421bbf2a-51b0-4157-b746-a0380f43e00a",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2e1d1c0-2a04-4284-bfd9-8300aaea628c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "327125fe-2cda-48ff-ad05-32f34f6338b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e29193b1-527f-42ba-9fcc-be60e59b6dd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed188632-687d-4a4c-8ba9-b536c13ae1e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "190d5cb5-ac93-41db-a55d-de1ef7ad080c",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57899880-eeda-4007-b4be-da21131d8e5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "220966e8-3f1a-4f68-8872-bf63a9434c09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c3c9b15-fddd-4b9b-856c-9b8e614b9451",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b4796a3-bcab-4ab5-b0ae-32f2be0fd40c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0714cee-378a-456f-b545-198be9f10d4b",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93de271a-dbf7-413b-a896-43766e74cbe8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7273d5e0-87d5-4324-b805-9545fe7669b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c1589ba-0dbb-4ed8-9f92-64c866b1d54b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fbf5a25-0891-444b-8fa3-6c043eb60d46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf22d594-6dac-4bab-86e9-9273d3c808c5",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf3f0077-a33b-4970-afe0-559a29bf33a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b93e399-9235-4869-b627-5b3bab64fb84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2ad7dd5-8b1a-45ac-a993-fd46e6ae5c6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd99de8b-a99a-4d61-9a32-8f850d9d7a65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1940e27a-57b6-4f30-8ffa-ce9c0fd66f82",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ce3fb9c-b1ef-470f-845f-d41d6fca406c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31dfa62b-af80-45be-a169-c9be9105a23a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d64d5cf-88c0-4143-ab44-433d77b5d2e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2824e964-47ca-4573-85b1-c06582c305a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12e56008-61f2-46d7-8059-6b1d2d4a33d6",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72f5c086-da76-4dcf-98e9-c3e46c04d6b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4307f23a-d72b-4243-bcd1-3c79a42fef5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cff18f9a-1534-4359-b095-297d5cbdb5b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ab15a41-0b3f-47cc-bc15-d1083a527ef0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54a88c7d-b164-403b-ba4f-d28fa85e3ca3",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4114a210-2200-4c73-a448-ab21aadf1f6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b70a244-90d8-4bd2-93b5-40ec26df50e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2091a72b-db02-432d-9e2a-f22a1e7e8ea2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af04b89b-a913-4ed4-baa8-8e595a662c4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70ab5591-702d-4a7e-998a-59e16365dbb8",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a99220d7-008e-4a47-bc84-0a4245d17484",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03a173d6-adae-46e6-bb83-b61fa2097943"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cfc6d0f-4e97-4e1e-8795-9bc829a77d2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2e2ba32-bd3f-4d91-a8c1-975426b2c7de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8f7edb4-43d5-4a34-86a3-368948957d1b",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2048925e-9f9d-4519-8ef7-06e5d4b46efa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e5b83b4-05f6-4e80-8a1b-6619c2842031"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ec3fbd2-6725-40c4-abbb-ee5638843d55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "975c99ea-7214-4785-b9a7-ad0832638a54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4308531c-6295-4813-bef9-d175cb9bb7f3",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd9abee1-8fd3-4d92-a46d-79a472ea0777",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b40ab37-caf3-4614-a95d-2443819ba9cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10584a12-d650-4d88-a655-4c977fddd8ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7e69056-293e-412a-a6a3-010388f99d87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "169fce9e-812e-41a8-a6b7-a7887ab05516",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0b8a76e-16af-40e4-a0fa-8bcb40e2ba5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd94727a-a7c4-4a62-bccf-c6b01cd5b484"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09782c2a-7ca9-424a-87f9-8330306f4e2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0599b2a-7450-49f9-b6e8-988aa1add219"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10571a19-90db-41cf-b79b-cab0c9e4d63e",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bd3de31-a092-46d2-94f6-c8202cbc52c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ef3cba7-06ff-49d7-8b57-dc63923e1c89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "877bb45c-2a72-4701-af8d-23ec727e6133",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f08df04-f3cb-410b-8ae9-c497f741d52a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b1c36ac-1dc9-4566-8bef-a38611da30c8",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a92527f-2493-4125-8759-a70c950f12e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d62a86ba-e0f1-4e8a-a62a-0737ee6a77f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc70ca51-8c12-4fc6-b3e2-ed586c0cb65f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4992e45-d8d4-4974-bc1e-8673057a4ef4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df3a4d03-03d7-474b-a34e-60e777018be9",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "046cb98e-cd09-4f56-ac45-4b23eae2ec9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7fca751-e951-4df9-bcd1-2cc063d54662"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94e06da3-763a-4d62-bed5-c3ab77b214b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08c21c47-a305-4f51-8de7-7bd35919fc0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4853e67-1483-4634-b7ac-b63b5baaf6df",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fef99666-4804-43db-ab49-748b7dc53f39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3b36d7a-0f33-43b2-a378-31dc051ae8aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23565d12-1df8-4a96-bbf1-33324c8259f6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd8504a4-77f5-4a1f-ad21-dffed990fe86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "685f234d-3582-4d50-8aae-df4135ce94c8",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9b69c5a-4f0c-451b-a4d6-eab96d481a4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8fb6334-4613-43ed-b08c-87d34199676f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa1b5387-565c-45dc-8d78-cfdcc1a95f97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07918a0a-e668-440f-a5e0-fb019e2fb4ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2079450-b5f1-4cec-8dac-ec727ce42989",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99234fe5-7e27-4c9c-bc8d-76c74f79f9af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ce3b05f-5162-4bd7-a744-8cb49b68ce79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a9fccda-c7ab-4457-a005-37cafb98a3fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8fe5218-0247-4de2-9253-e7d3abb574de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f39d7dbd-860f-4e8d-b785-df80b0791f48",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ab106f3-c57f-46a2-893a-890c21472c20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "605844f5-3e45-49d7-b4f0-afaa8d5e3fdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53b1dd8a-cd67-4dcb-a4d0-94ec40f57999",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4cc46b3-141d-4262-8997-89054fff37a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9a3dd15-27d8-4c44-a315-a7c549c716c4",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baece896-9d6f-4fcb-bb9a-b9ae0d6d6b04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f832bb71-798a-47e5-a9f7-d2a96bf3f3ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "148fcf5f-c8e0-4035-920e-0b3a1e17e164",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f294bae-a4d9-43be-873b-73a20c2ab36c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7db74c9f-58a1-4dc2-ada8-34d768afdfc8",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28f0f569-0eac-4911-b384-72a867ba3ff1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d57b809-edc1-40a1-b61a-3073f357bbce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17c4342c-4a65-4748-ba24-08d4234ec71f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af824db3-348f-4767-8713-f47481f5304a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d475647d-0b6d-4ea8-8124-13ea537e5831",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbb7a9b7-a7a1-4163-9acf-9168df3bc6a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a55a1a0-7469-41ee-9395-1b1099522c7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a185017f-419e-4b45-aa97-800626a1f8ec",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb1cff60-928a-413c-8712-fa785cf3b571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eef0c62-ba57-4e40-9a35-14524f2b9aa0",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "408f4a79-a7c3-4dfb-b5ed-a7d912a80795",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f2266e1-a2c0-469f-8685-5d0b22e0903d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b423cb0-bcbc-41b3-aa7b-296d410223d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbdf6aa5-a069-42be-9435-10d86038423c"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3fe62cc6-336d-4a71-8608-a6f86cb6de20",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "54ef52d9-d75c-4c60-8e46-7c950da5c76d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6ca88a75-fe47-4e4f-a0ed-dceee349598a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d46489ab-e984-441c-ab40-3a2779004522"
                    }
                  }
                ]
              },
              {
                "id": "fad377fa-aaa6-4327-ba96-6ca96b197f5d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a3a43752-8cda-498c-afa6-707fbae92ebb",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f4ca0e6-0a85-4479-aa16-2540f84cde7e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c249d728-4a46-4335-9b9c-1bb0c8fc9fa2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94f264f3-7968-42c6-9343-e85e236f0695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2f0e8313-cfd0-445f-bfec-8d9d98f57b47"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "69abd7d3-2abe-48fc-baa5-9070cf820e42",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bb142252-1a6c-4ac3-8b54-c4d3684df621"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "799f6e51-6a44-4ff1-8c4f-5b75564a471d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "831687de-191a-4b3a-8579-f40aca7bdc02"
                    }
                  }
                ]
              },
              {
                "id": "d71b4a94-07e1-4fca-89e8-e6c557b92d47",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "87672136-35ea-4607-a9a4-313ea19075a2",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81bbcfc4-6353-4b4b-87ad-94e446ef8b51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "8a07092f-b92f-472e-b642-5391c4e0b09d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1af1518e-073e-4ae3-b454-ec0af9067f79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97c64024-53d3-4d9a-970f-669b2c88daac"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0d929048-11aa-4eff-ae49-3ac389c8d8eb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "12169272-278b-4d44-8dd3-4f50636c0ea7",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cd3512f7-db26-4792-a03c-2597b2495bf7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "6b05a7a9-771f-4958-884a-fd46af4261ee"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5ecae6fb-f719-406e-b6e8-fc481675a39f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c700647d-2c51-4efb-9c31-d87df1ef5e7a"
                    }
                  }
                ]
              },
              {
                "id": "c4ce9e8f-e228-4eda-ad90-fe114a5c4a6f",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cfca3ec6-7af3-40d4-9f1f-f921c4a26085",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "aa5dd0a2-fc8f-4638-a2c3-3632cc026fe3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4ebea2f1-a3eb-47e4-944c-37b5a54e3387",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "24abfc79-be37-4460-8d75-d1752dbae3fe"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "48c69081-301b-4658-a9c2-e83cbc11c38d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "bfe3a145-f705-4a7b-a5a6-60d6c62ff63e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4a31867e-6612-43dd-bd6d-ef8e8758b9e7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1badd57e-8a57-491b-9c4e-5ef3227102ab"
            }
          }
        ]
      },
      {
        "id": "d9b2837e-b3c5-4569-9604-b723f1dd4fa8",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "7b9cab30-59dd-4a4a-8f5e-b11d16556a7c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5d31de1e-49a9-431d-a6bb-93605f91450f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1770547e-ee25-4bd0-9b97-ae80555ef9b6",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67059309-7e26-4f72-b96b-6beca369e5a2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f5beb5a7-d6ec-42cc-9870-a41c85d7459d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcca7834-7aa5-474d-92c1-f56385d316e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3284de53-48cc-4036-9a63-4cc431ac9f53"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "38f3c44a-521f-4f1a-b3d4-67334ade95e2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ed020ad5-01b2-4f21-ae4c-bed8effa1bf9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "919e3777-a10c-40b7-afee-4c5df90db5ed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8d75a629-dc0c-43c8-a5a3-bf15a15342af"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a1007b85-6ba4-4750-a8aa-d4b9e8df209f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "3d934e7e-dc36-40a9-93a5-1ec45f309726"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ca076e41-209d-46c8-ac2e-961e960eeb62",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b453e995-cb8f-4f31-91bc-6036e4bdea79"
            }
          }
        ]
      },
      {
        "id": "0c39607c-e084-4231-a030-08b59fad81ea",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "4ea5eb82-3195-4252-9371-b0da4ee5581e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "aed268e9-bef1-47db-86f1-411f7f85b1d1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "abaa7eca-6567-44a7-8dff-44c4e41986df",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca6f35e3-052d-432c-b87e-5bc34de54aa2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3b366893-65fb-4d2d-bd29-08cc26559aa6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e472fdf-7092-4d2b-a578-e63bbccfde16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "465b5ecb-8892-4695-b3eb-d58defb4134f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fed41d63-ea32-499b-9e77-e7c9191d92cc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b4b49691-dda2-4fb4-8bad-43a5655c103f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "983c457c-3e04-4be5-a416-a970f5818c7f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f9c3c7b6-c387-4f80-b222-d0cc665a8932"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "345b31b4-5ead-4cc1-a85f-34058d3de446",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4debd532-8902-4669-b3c4-c97b97683d20"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d5a1d4ae-4a4d-4858-954a-bd74024d9213",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6ed7780f-5d12-4cee-b986-51b6730b415d"
            }
          }
        ]
      },
      {
        "id": "a490c4f1-78a2-4d3c-8cf8-426e7f357391",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "c538eb93-f788-437d-9dd6-0c0be974b664",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dee0a456-bd45-478e-b997-19be86494fbb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8d93a44e-26e1-4313-b661-c70f03b8dc48",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b2abb4a-a98a-41d5-a10b-f42663ee0dec",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0ae3daa6-3d21-487a-83b9-9c4f59b0c517"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d652a6a2-3ae2-4634-ba19-4b06afb40fdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f1fb07b6-6ca0-4ce6-a9ca-e1559b0a8f88"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "50336c91-020c-464e-a18c-7272aea859a1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "43fbfbd5-3cdc-40f5-b1ea-9d0d839ec1c6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a2c6e5fc-b026-4792-ac21-f3c7c7c5454e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8e8b59c7-8a80-43de-8c9b-cf88c7cbeb93"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "614ec3b5-a92a-44ae-9b31-75f4c7e8fdb3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "79256803-daf9-470d-9498-0fd376708668"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "92638979-0f16-49c5-af91-463c7ac62eba",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "301e0b09-40a4-423a-88e1-73a5bbb67bad"
            }
          }
        ]
      },
      {
        "id": "fa155f99-5c23-48b9-b524-3721919e2d57",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0497fb81-38c8-4690-8754-a01584c827a2",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eebdbdc0-c7bf-43ff-81db-02b1c0af596d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "a9a43bfb-0abb-42e8-82ae-9a76f5087939",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b27a8a16-70c1-4a43-a609-2f3b6b2ae5e9",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c346a3f1-887a-4b8b-892e-b58323fed58e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1853,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 246,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 495,
        "pending": 0,
        "failed": 286
      },
      "testScripts": {
        "total": 931,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 922,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 62.630081300813,
      "responseMin": 14,
      "responseMax": 1573,
      "responseSd": 100.14926537562799,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1685666551801,
      "completed": 1685666580288
    },
    "executions": [
      {
        "id": "af99bd31-ec75-404e-afe7-6e273c236cee",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 244,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "0d6af1a0-5b8a-4bff-ac98-2a28d17b62ac",
          "httpRequestId": "b34b5161-5719-445b-bca2-64c17a749540"
        },
        "item": {
          "id": "af99bd31-ec75-404e-afe7-6e273c236cee",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "c225f4c0-d1cb-4764-b489-dcc71d90ad60",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 0
        }
      },
      {
        "id": "b8205b94-e113-4aec-902f-1989a1326d13",
        "cursor": {
          "ref": "b4ae00a2-507a-4993-ae3c-2fae8bf36d0f",
          "length": 244,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "22ffb02f-cd31-4e20-9a5a-8405f0453459"
        },
        "item": {
          "id": "b8205b94-e113-4aec-902f-1989a1326d13",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "d455a06a-0f58-49b1-a089-0466c400cb3c",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 0
        }
      },
      {
        "id": "d18c456a-af56-4951-afb5-95ec38a82a64",
        "cursor": {
          "ref": "527afdcf-00ab-4d27-babb-9cf03ec27f91",
          "length": 244,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "b4b075f9-c6ac-495a-88bc-ae9ee52b103d"
        },
        "item": {
          "id": "d18c456a-af56-4951-afb5-95ec38a82a64",
          "name": "did_json"
        },
        "response": {
          "id": "fda89a7c-2b84-499d-ac08-805c2075b489",
          "status": "OK",
          "code": 200,
          "responseTime": 349,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97048b84-a7e0-469d-9fd7-77ab6ea9be0d",
        "cursor": {
          "ref": "6f7e8cb7-2bda-4a39-8f3b-c13ed7598990",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2d9e228a-1a2a-43db-936d-93c2f26d3130"
        },
        "item": {
          "id": "97048b84-a7e0-469d-9fd7-77ab6ea9be0d",
          "name": "did:invalid"
        },
        "response": {
          "id": "f88c5ac3-bf08-43ed-9612-4eff8eee4826",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97048b84-a7e0-469d-9fd7-77ab6ea9be0d",
        "cursor": {
          "ref": "6f7e8cb7-2bda-4a39-8f3b-c13ed7598990",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2d9e228a-1a2a-43db-936d-93c2f26d3130"
        },
        "item": {
          "id": "97048b84-a7e0-469d-9fd7-77ab6ea9be0d",
          "name": "did:invalid"
        },
        "response": {
          "id": "f88c5ac3-bf08-43ed-9612-4eff8eee4826",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa53baf4-8ef8-4612-ad3f-20166c694177",
        "cursor": {
          "ref": "ac9a5bcf-7b19-46a4-9562-cd3dbdd4a329",
          "length": 244,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "c8da8d21-f5cc-479f-af50-269e1e0e163d"
        },
        "item": {
          "id": "aa53baf4-8ef8-4612-ad3f-20166c694177",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "bf778757-b3cc-4d47-baa1-524ec085598c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 121,
          "responseSize": 2
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:5)"
            }
          }
        ]
      },
      {
        "id": "def2c41b-ef27-4ca4-a116-9bc3ddd32d44",
        "cursor": {
          "ref": "501baf15-9bec-4b69-a581-e32313677bdf",
          "length": 244,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "9502646c-0466-4190-93f7-ee734a8e4503"
        },
        "item": {
          "id": "def2c41b-ef27-4ca4-a116-9bc3ddd32d44",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "e7d1f8e0-1e52-40e4-bae6-a6ee5ee2ee3a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 61,
          "responseSize": 2
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "id": "560fadd6-caca-40ea-9f4e-b00020269642",
        "cursor": {
          "ref": "e888fba9-f8f0-4425-bc70-00385d8ab3a3",
          "length": 244,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "2d698c79-9d43-4b46-8e0e-1da062aafa00"
        },
        "item": {
          "id": "560fadd6-caca-40ea-9f4e-b00020269642",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "77b44e2e-279f-4355-9785-5b451e501b2e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 49,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "ef29eb6f-f454-4607-971c-a888fd86ccd3",
        "cursor": {
          "ref": "bbf8e603-7a07-4259-9c28-1a744cf91517",
          "length": 244,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "4d8cb5ff-055a-45a6-89fe-829b7db1cc16"
        },
        "item": {
          "id": "ef29eb6f-f454-4607-971c-a888fd86ccd3",
          "name": "identifiers"
        },
        "response": {
          "id": "6330cc3a-5fc3-432b-8d43-17bf02ca8534",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 1137
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.didDocument should have required property 'service'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.didDocument should have required property 'service'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "cd7d9f14-7df6-46bd-ad7a-1e4295e25414",
        "cursor": {
          "ref": "1f7c1208-b5d9-4b5b-8964-375d8ce88e8d",
          "length": 244,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "db453bae-ea4a-44d0-b72f-75147e4c8e58"
        },
        "item": {
          "id": "cd7d9f14-7df6-46bd-ad7a-1e4295e25414",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "bea8f824-c49a-439b-9a62-22e3d429ce12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "c916efbf-9e3f-4fa1-9803-7836839caa7a",
        "cursor": {
          "ref": "fbb38163-94b7-4153-b882-0f863c13b70c",
          "length": 244,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d2a244d9-09ce-44f4-a4cc-128f9f9cbfad"
        },
        "item": {
          "id": "c916efbf-9e3f-4fa1-9803-7836839caa7a",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "9a42d6fe-75cc-4e73-9dbb-bd9d4906ac68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "9fab336b-cce9-42e8-b68c-1f6828616d58",
        "cursor": {
          "ref": "61e216bb-b436-4b8b-bc77-2a139c155bdf",
          "length": 244,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "c96ae4a0-4e25-4598-840f-0dbf5a8a0443"
        },
        "item": {
          "id": "9fab336b-cce9-42e8-b68c-1f6828616d58",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "3eb79d18-7ae9-44d7-9b57-2fd59563b350",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "d7a4e450-d37a-47d3-8a69-165571401287",
        "cursor": {
          "ref": "1fdfcb53-9410-4f68-b309-3cf10aeb969c",
          "length": 244,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "f9c9d0f9-facb-4da0-a449-be4a953b7cc9"
        },
        "item": {
          "id": "d7a4e450-d37a-47d3-8a69-165571401287",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "76e1bf85-bded-42ab-80b2-590c2b069635",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "78f0fbcf-f43f-4976-8693-c84dc7f3fce5",
        "cursor": {
          "ref": "1b79d7cf-050a-4bb4-bbde-21fc49fad725",
          "length": 244,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "70706843-e5be-4e57-9519-5b3043d6edd9"
        },
        "item": {
          "id": "78f0fbcf-f43f-4976-8693-c84dc7f3fce5",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "dbb21404-5381-4160-90a3-f82142156753",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "2f581c1d-ad84-41f9-ba4e-75db5d4c71f0",
        "cursor": {
          "ref": "a89046f9-d4e9-45ce-821d-a3cfd28cbabe",
          "length": 244,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "c45fc3b8-5f6d-4f03-9bef-767dc2cad209"
        },
        "item": {
          "id": "2f581c1d-ad84-41f9-ba4e-75db5d4c71f0",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "fcec3c10-7864-47ac-8392-1def477b3a0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 273
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "8a733253-9f06-44aa-8db0-a45cf92922b6",
        "cursor": {
          "ref": "471a378c-1d0b-4c17-bb54-844eeb4bf67a",
          "length": 244,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "9d443e59-f700-419b-920b-1d9662e52a9f"
        },
        "item": {
          "id": "8a733253-9f06-44aa-8db0-a45cf92922b6",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "daa87e4a-43c1-456f-9aa1-4968d15aad97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 215
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "1681630a-3a85-44fb-b3f8-2b435ec5a110",
        "cursor": {
          "ref": "a8eebf31-326a-4be0-9a3b-253adbcffd6b",
          "length": 244,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "cc9771e8-c1f8-4651-83d9-f594a72c45a1"
        },
        "item": {
          "id": "1681630a-3a85-44fb-b3f8-2b435ec5a110",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "7c7815b3-b15c-4354-a67f-cee0f792d220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "e61b1fd7-552e-4426-af9e-90196f74cff2",
        "cursor": {
          "ref": "a5b39346-f20e-4d55-917e-c37f19bdfa65",
          "length": 244,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "70c693f7-97ca-4dfb-b0e0-47939efeaa3e"
        },
        "item": {
          "id": "e61b1fd7-552e-4426-af9e-90196f74cff2",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "f967f743-0f93-4dfe-8221-da8be27acd48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "f0a98682-2a17-4b79-8c06-5fee73da25d9",
        "cursor": {
          "ref": "503d8f3f-1dd3-40ac-91c0-e805fb83a485",
          "length": 244,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f3f450b4-54c0-4a6b-aa00-e9eaa6682be2"
        },
        "item": {
          "id": "f0a98682-2a17-4b79-8c06-5fee73da25d9",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "d3ef5daa-d97c-44fc-8c00-a6b774cfc311",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "8e3c0a45-a58a-42bb-aab7-99dd91139538",
        "cursor": {
          "ref": "961ff6a0-2377-493b-b3c8-fe55e581f18e",
          "length": 244,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "f533707a-ae14-4c08-90e5-e3630a8ff8d5"
        },
        "item": {
          "id": "8e3c0a45-a58a-42bb-aab7-99dd91139538",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "5e56c7e0-10c4-4d5c-b2ed-1210d3069905",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "5889b8a9-34af-42a5-a3de-00f4b76d51fd",
        "cursor": {
          "ref": "07e46c4b-98c7-4674-a140-76edb71ef272",
          "length": 244,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "3a231d03-c328-466e-ace9-471bdbcea030"
        },
        "item": {
          "id": "5889b8a9-34af-42a5-a3de-00f4b76d51fd",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "7c04a17c-d307-488f-b49f-f4c58ee220eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "15da3365-68d3-4c05-9f5f-2c3cc381833f",
        "cursor": {
          "ref": "9125d809-828c-4251-bc25-30cf1e02add7",
          "length": 244,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d90bf7f1-bbbc-4fac-8beb-b13b0cf2e8ad"
        },
        "item": {
          "id": "15da3365-68d3-4c05-9f5f-2c3cc381833f",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "3762948e-87a1-4608-af23-bf38f796b0d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "854acc5e-2fac-4c65-affa-207e158c519d",
        "cursor": {
          "ref": "bc7f2f59-d90b-4e82-9356-44feff15a03a",
          "length": 244,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f9aad9d1-4b7b-4a9f-8c9a-1a6d0ceb719e"
        },
        "item": {
          "id": "854acc5e-2fac-4c65-affa-207e158c519d",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "484c2327-0780-4ed3-8876-bab0742b5366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "be110147-f74b-424f-95ec-acda8c64399b",
        "cursor": {
          "ref": "2cbfdcaf-846e-4b45-bb90-03b63b731e39",
          "length": 244,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "26e5e677-49d0-4068-bf19-5e60b0ab6e9e"
        },
        "item": {
          "id": "be110147-f74b-424f-95ec-acda8c64399b",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "11ee144e-88a3-4a51-90fd-621af8bd4186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "0b325be8-b2af-455c-8fbc-782f86e95a37",
        "cursor": {
          "ref": "9aff2e97-f898-47cc-8eae-f662e81a641d",
          "length": 244,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "8dbac821-07cb-453b-bd69-9d582a6c71ed"
        },
        "item": {
          "id": "0b325be8-b2af-455c-8fbc-782f86e95a37",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "837789ff-e834-4b3f-937f-34e5685e246c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "b1679896-71b3-42fd-ac8a-d5ad3a5b2f5e",
        "cursor": {
          "ref": "5e06de37-a9e0-46ef-a425-cc868bd653f2",
          "length": 244,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "9436445b-5bc7-4887-a9fb-143848a31a98"
        },
        "item": {
          "id": "b1679896-71b3-42fd-ac8a-d5ad3a5b2f5e",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "0711aa96-e6d5-4d3c-885b-8c6b540507fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "6bb10c38-7634-4681-b2ed-610c17655dd8",
        "cursor": {
          "ref": "f3c69cde-a31d-42c6-b6b0-80a6857994fd",
          "length": 244,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "c93351d4-fe2b-4559-95ab-2b02d610603d"
        },
        "item": {
          "id": "6bb10c38-7634-4681-b2ed-610c17655dd8",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "cc69eada-db95-49ee-b428-75c5a849faae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "efa68b1d-43b0-4354-9c96-7fce1c56cbd2",
        "cursor": {
          "ref": "62f3294b-fd5f-443a-81ee-636cf4148f30",
          "length": 244,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "45cdf0ef-a76b-4a72-b99d-aebf225221e8"
        },
        "item": {
          "id": "efa68b1d-43b0-4354-9c96-7fce1c56cbd2",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "69e53eaa-881a-4efa-bc0e-4685e60ed25d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "93608693-ceab-4c5c-bcc9-0c2f32a16a25",
        "cursor": {
          "ref": "b3d77307-80b7-4c46-9c3a-a2cc489b5c28",
          "length": 244,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "0b801711-a2fe-4734-9eca-9f7f2772dc5e"
        },
        "item": {
          "id": "93608693-ceab-4c5c-bcc9-0c2f32a16a25",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "2e79fd8f-92ea-479b-bd50-7a22d06db28a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "49658495-23c5-4cb5-9cd8-4652713a434c",
        "cursor": {
          "ref": "d24b4a6f-9ee6-4c22-9331-610cd3ff04cd",
          "length": 244,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "16e244a0-bab4-40c9-844c-13573601244a"
        },
        "item": {
          "id": "49658495-23c5-4cb5-9cd8-4652713a434c",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "f8146529-5b46-4f9f-9508-9de10d720fdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "de7c62b5-33fb-4c57-8d2b-0a765c5d3db0",
        "cursor": {
          "ref": "8c706bcf-3763-4f34-be5c-910603a6c9e0",
          "length": 244,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "9807c292-6f8b-4d9f-a075-64c5dd6c7a2c"
        },
        "item": {
          "id": "de7c62b5-33fb-4c57-8d2b-0a765c5d3db0",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "44632bef-fd90-462b-8721-0da76b4f29ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "d5f61886-0665-4ec5-bbb2-196579ac75e0",
        "cursor": {
          "ref": "d848591d-f82d-44c0-aa79-6cfa6285d6f4",
          "length": 244,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "27876925-1423-4d3b-b815-a7da84964728"
        },
        "item": {
          "id": "d5f61886-0665-4ec5-bbb2-196579ac75e0",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "67755d6d-f859-402c-bb52-9fd3de6e8d96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "580449b4-0c25-4c10-a2b7-9db8eebaf74a",
        "cursor": {
          "ref": "c4bd6ac8-9d05-45bd-a6ae-89652e34ec4f",
          "length": 244,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "00e48211-84ab-477f-b770-58196c3dd1a0"
        },
        "item": {
          "id": "580449b4-0c25-4c10-a2b7-9db8eebaf74a",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "282d0a90-2ca3-4bf6-a37b-2195dcff6ec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "e886a97f-034b-4d52-8a51-74e4c1dc18d9",
        "cursor": {
          "ref": "9cc041ae-8441-487d-8ec9-d31fcb89eaf3",
          "length": 244,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "c2368ef7-800f-4bd4-bb58-60b4302660fc"
        },
        "item": {
          "id": "e886a97f-034b-4d52-8a51-74e4c1dc18d9",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "085029ec-34c7-4f68-81c6-4bb703d83084",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "b124ba11-4cb1-48bc-b191-cd2fdb842ac6",
        "cursor": {
          "ref": "d170dae0-ccb5-4d57-b925-be6fb6fac018",
          "length": 244,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "34f22f01-3b15-405e-9819-00552fa17dac"
        },
        "item": {
          "id": "b124ba11-4cb1-48bc-b191-cd2fdb842ac6",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "8323b303-ade6-40f5-ac6c-3ff9839b8ee4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "73505938-ede0-48d1-a33c-7a4d1f071004",
        "cursor": {
          "ref": "1b813162-ca8d-4c15-93ca-f3ae487cbf45",
          "length": 244,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "722f4b45-cce1-4c66-b5c3-cde76d60c80c"
        },
        "item": {
          "id": "73505938-ede0-48d1-a33c-7a4d1f071004",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "007c7b3c-2d83-4ffc-852d-a6b752b01bce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "3af783d6-bb25-4242-9382-920725cbba54",
        "cursor": {
          "ref": "fbebe8f2-9a2a-4a65-a5b9-6b7b3d5ff707",
          "length": 244,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "c1ef9584-ae91-4fc3-b548-c72cabaa3309"
        },
        "item": {
          "id": "3af783d6-bb25-4242-9382-920725cbba54",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "05b6d058-c31e-47f4-87d6-be5888c3469a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "a2dde9f0-8828-4488-b7ef-59b621c912c5",
        "cursor": {
          "ref": "1e69edfa-b896-4f48-bc52-663210f4bfad",
          "length": 244,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "580c57f2-9fea-404b-a5a8-2f59fe47844f"
        },
        "item": {
          "id": "a2dde9f0-8828-4488-b7ef-59b621c912c5",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "64274365-daef-4969-a5ff-a21a9c99ca2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "c80ca324-90f5-4fe0-b7d8-e0bb80ddf4d1",
        "cursor": {
          "ref": "60822bdd-dc90-4d49-b904-0adef88a1633",
          "length": 244,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "f91dd86f-8c69-4205-a8f5-e6e2a90095ac"
        },
        "item": {
          "id": "c80ca324-90f5-4fe0-b7d8-e0bb80ddf4d1",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "9a165888-8407-4487-a4ca-ddd4819deb1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "64124ff1-dda8-4a33-9239-b1f8a5b367b9",
        "cursor": {
          "ref": "35e0d577-53ab-4471-b8bb-a381972fd319",
          "length": 244,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "5afe125f-2107-41ff-9d41-a0466b2df932"
        },
        "item": {
          "id": "64124ff1-dda8-4a33-9239-b1f8a5b367b9",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "f71740d8-0d16-4efc-8ae2-04587409484b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "99085cef-2e4e-4f1c-af03-43e18edc9cad",
        "cursor": {
          "ref": "23ada88d-efa3-48d7-837e-dab6b0ef32d6",
          "length": 244,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "507c6ee5-93ba-4ac1-a313-73ea0665e3cb"
        },
        "item": {
          "id": "99085cef-2e4e-4f1c-af03-43e18edc9cad",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "f9a8f68c-622e-4278-af2e-8abd6225f957",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "093145a1-113f-4a6d-a3a2-2bef902bdf49",
        "cursor": {
          "ref": "abfe65c0-12b8-4fc2-b0a8-7a5199e7adbc",
          "length": 244,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "2d01cb10-882f-4699-b296-3ddee31ec79f"
        },
        "item": {
          "id": "093145a1-113f-4a6d-a3a2-2bef902bdf49",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "117e4c8f-96eb-4576-a5d7-80ceebc48c6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "a66832f3-7696-4828-a73a-f8ea59093d58",
        "cursor": {
          "ref": "0b221dc9-53e0-4abc-b7b8-0c5263ab6e38",
          "length": 244,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "bc88ec07-01a3-41ed-b6f2-d0426ee596e6"
        },
        "item": {
          "id": "a66832f3-7696-4828-a73a-f8ea59093d58",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "592d7c15-373a-4b89-972f-d16626ae9d3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "f0f3912e-966e-4d77-916d-5b257df2c418",
        "cursor": {
          "ref": "f76d937d-f1b1-4830-a7c5-006f10f4c2d5",
          "length": 244,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "ca660009-267c-4a29-9ce1-a319663ed446"
        },
        "item": {
          "id": "f0f3912e-966e-4d77-916d-5b257df2c418",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "55e08104-3ac7-4859-b668-d580942bf991",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "65959e45-abb0-4477-abde-708075855585",
        "cursor": {
          "ref": "d07bfeb1-1003-47c3-a757-ea5c4ed45247",
          "length": 244,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "2ecb5a23-bdc4-4c0d-832d-c4cc0137e63a"
        },
        "item": {
          "id": "65959e45-abb0-4477-abde-708075855585",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "93ea67b8-584c-4971-adfd-e9e89007233f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "8e5d3094-6d00-4d65-a942-d3700225fb39",
        "cursor": {
          "ref": "a5ff6223-a576-44bc-8f5e-533f82deee6c",
          "length": 244,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "2be1c9c2-2598-453e-86f8-14d993a43907"
        },
        "item": {
          "id": "8e5d3094-6d00-4d65-a942-d3700225fb39",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "78851beb-4500-4d80-9dca-a6c5349ddfe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "f584ba8c-d9a3-4017-a990-d97917a1dbd8",
        "cursor": {
          "ref": "19c273b1-1a4b-4693-b9a0-a1102d1da310",
          "length": 244,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "4e938978-6798-45af-b522-e86cf602650b"
        },
        "item": {
          "id": "f584ba8c-d9a3-4017-a990-d97917a1dbd8",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "770029e8-8d52-4e87-acf2-915d774a6acc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "6cde4317-e7b0-41dc-b576-1143a43b5b08",
        "cursor": {
          "ref": "e9805eb7-9e9e-4e08-8aff-df73e621de95",
          "length": 244,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "d94388b1-b3cf-47e0-b56f-90100fed18d6"
        },
        "item": {
          "id": "6cde4317-e7b0-41dc-b576-1143a43b5b08",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "819cb825-3f73-4d75-9a44-312c84fc4e82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "a953cd0b-2b9b-4d57-af70-de994fc716db",
        "cursor": {
          "ref": "97c5a455-25f7-4a1e-b6b5-d0a574e2acd1",
          "length": 244,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c75231fe-e6eb-4f05-8241-ee4d6839e9e4"
        },
        "item": {
          "id": "a953cd0b-2b9b-4d57-af70-de994fc716db",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "9da83a62-f155-4568-af54-0b5549b92037",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "867d28f7-b134-4bf7-b8a8-d130f0207e28",
        "cursor": {
          "ref": "70136430-48db-42aa-af27-6a25ed9ab9a9",
          "length": 244,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "ea95c594-e89e-4dd9-9099-33b6d493f6c4"
        },
        "item": {
          "id": "867d28f7-b134-4bf7-b8a8-d130f0207e28",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "aee3ee1e-69bd-4f65-a8a5-6908a580872d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "89d3ef8d-ad82-407f-9b23-673bbec3ff6e",
        "cursor": {
          "ref": "2d8923e9-0b3b-44f6-aeb2-326e2bc055a1",
          "length": 244,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "7f2383d5-8551-4dcf-80d1-5c0235fb71d1"
        },
        "item": {
          "id": "89d3ef8d-ad82-407f-9b23-673bbec3ff6e",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "980763a9-c993-40e3-b75a-7329d3799548",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "6f5ee7af-803b-40d3-b735-88b427513f05",
        "cursor": {
          "ref": "31c7f28f-09a6-4797-8305-511d51cdb776",
          "length": 244,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "e162fa6b-8816-48c2-a739-459e0ecc5d79"
        },
        "item": {
          "id": "6f5ee7af-803b-40d3-b735-88b427513f05",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "57255b2d-c162-4538-9f43-0b5e48215164",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "253d41ea-8495-435e-8bd7-128fcf058b81",
        "cursor": {
          "ref": "1edb1da9-4aed-4814-bb31-0825e6dde6c9",
          "length": 244,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "45f45a17-c68d-434d-8fab-46a59aaaa620"
        },
        "item": {
          "id": "253d41ea-8495-435e-8bd7-128fcf058b81",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "28d9bd36-fd9d-4d5d-a248-676fc00ba0ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "c6724add-1ff4-4381-9a86-c5d8a0af9004",
        "cursor": {
          "ref": "06a3770a-e0f2-4893-987c-f33f62fc6e6d",
          "length": 244,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "3058c161-3a7e-41f6-9e2a-dceff5e07c2e"
        },
        "item": {
          "id": "c6724add-1ff4-4381-9a86-c5d8a0af9004",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "6ba21add-1b74-4932-a740-96d156c5c21b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "21f7bc30-5379-4b61-839a-20a3f5d517af",
        "cursor": {
          "ref": "45bcd093-a277-4dc8-a745-364def36827f",
          "length": 244,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "b186b750-89b8-4ff4-9f16-73ad9d20043c"
        },
        "item": {
          "id": "21f7bc30-5379-4b61-839a-20a3f5d517af",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "00d165a3-7445-4860-9572-36597a323f19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "e53a4e8f-1aa7-4ff9-80cd-12a2186361cc",
        "cursor": {
          "ref": "816c90a1-d710-42ed-888a-f9603e4c79c2",
          "length": 244,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "ebe10a54-f5cf-47af-9ee0-50d402c6db60"
        },
        "item": {
          "id": "e53a4e8f-1aa7-4ff9-80cd-12a2186361cc",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "8cb8187a-f0b9-4b33-9e05-1a37c1a66947",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "060e8e97-ebb3-4d6d-ba4a-0c866196a3b2",
        "cursor": {
          "ref": "22b3870f-d16d-4c5d-bcac-e84ff75fe642",
          "length": 244,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "59f9eaa8-870d-4f43-ba12-634683fa8fde"
        },
        "item": {
          "id": "060e8e97-ebb3-4d6d-ba4a-0c866196a3b2",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "5c4d8bf4-24f4-48bb-aec5-5d02486f1697",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "43dd1d11-27a8-4a36-9a01-889f74fe513d",
        "cursor": {
          "ref": "ac190c2f-d696-4fe5-a2bb-bd96c5688d39",
          "length": 244,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "a481a21f-2382-4f2b-ae04-1488432b7392"
        },
        "item": {
          "id": "43dd1d11-27a8-4a36-9a01-889f74fe513d",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "964cb9b2-1ebb-4a2a-8f07-81eda1ccf74c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "9a8a45bd-f0ce-4057-993b-b425b346a478",
        "cursor": {
          "ref": "476e3796-970a-4937-a9f8-9058c025a092",
          "length": 244,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "16ac3270-b280-45dd-a271-17bd72744fca"
        },
        "item": {
          "id": "9a8a45bd-f0ce-4057-993b-b425b346a478",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "01eb479f-9ac7-4895-88b1-02eeaea24335",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "fa3e4bdd-f5ba-4569-aeb3-40f4e68d61c5",
        "cursor": {
          "ref": "dacde078-fdcf-42cd-98a0-ceabaf50f912",
          "length": 244,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "03dd11f9-6e5e-4090-8ecf-4a0fd44a31ed"
        },
        "item": {
          "id": "fa3e4bdd-f5ba-4569-aeb3-40f4e68d61c5",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "927aa669-48e8-434b-a2d2-b5f8cd536556",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "f45d1ce7-4b7c-4368-9c27-426a5f0650ef",
        "cursor": {
          "ref": "5c8a3a0f-dd7f-455f-83fa-3da8312ca50d",
          "length": 244,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "0fbc1e0e-7c03-4b48-8936-5219801593c0"
        },
        "item": {
          "id": "f45d1ce7-4b7c-4368-9c27-426a5f0650ef",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "cfd08bc1-4aa7-4a38-a905-2e881f064d6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "53ad621d-8c70-478c-bdff-1074c57dd7f2",
        "cursor": {
          "ref": "43093dca-2863-4799-ace8-0714dac75653",
          "length": 244,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "a44660d6-cfde-4d2c-9df6-dde5ac71199d"
        },
        "item": {
          "id": "53ad621d-8c70-478c-bdff-1074c57dd7f2",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "07b2d6a1-3031-4c96-8182-fdeb73ded635",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "06e0d632-bd30-4e60-b053-f0dbde69d5c5",
        "cursor": {
          "ref": "dd129ad0-bf20-49b0-910c-73de5de1f6b8",
          "length": 244,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "88f6653d-a0bd-4230-a661-20c3e2539a48"
        },
        "item": {
          "id": "06e0d632-bd30-4e60-b053-f0dbde69d5c5",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "3e9da1df-e707-4b44-a1f9-9825eeb7cbe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "e9cf0bc0-cf72-4bd7-b3cc-0f6177c13b59",
        "cursor": {
          "ref": "ab0eef5b-6d33-4e0c-9392-70388594dac9",
          "length": 244,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "e37caaf6-e2f7-44fb-aa23-ae464348d24d"
        },
        "item": {
          "id": "e9cf0bc0-cf72-4bd7-b3cc-0f6177c13b59",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "65e4c537-71c8-4b3c-b788-bc8062e65de3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "b06b5d50-998e-4c1c-a382-a2c91b6dfd57",
        "cursor": {
          "ref": "9b3c3717-04b0-425a-a0ea-d13787c576da",
          "length": 244,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "7a4bde68-f6b3-49f4-8705-45095dd093d4"
        },
        "item": {
          "id": "b06b5d50-998e-4c1c-a382-a2c91b6dfd57",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "5a19465e-292f-4213-9bc1-978d95b50876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "24757f8b-8639-4428-8dd5-e6204227e842",
        "cursor": {
          "ref": "2822ff39-ded9-4028-9e74-00122166266a",
          "length": 244,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "af23f1ba-acc3-4d52-911b-357daf1fc6af"
        },
        "item": {
          "id": "24757f8b-8639-4428-8dd5-e6204227e842",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "994f2f24-447c-43ff-8129-a39b223223c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "3a85af83-4f3f-4d38-aee2-5db05709fcca",
        "cursor": {
          "ref": "0c9f77b8-e3ef-46db-8486-4fee5942d557",
          "length": 244,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "f462d39a-c585-460c-a66c-72f33912fa22"
        },
        "item": {
          "id": "3a85af83-4f3f-4d38-aee2-5db05709fcca",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "c12f84b2-9d68-43f0-a9a5-7d9e3193eb51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "c0fa5a60-b3d6-4c64-b839-c850d9a368fa",
        "cursor": {
          "ref": "3de42e43-00db-4361-aaf3-19cab9ca34df",
          "length": 244,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "c8e1ffc1-ec91-4b8b-ae6f-2764c04f103e"
        },
        "item": {
          "id": "c0fa5a60-b3d6-4c64-b839-c850d9a368fa",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "8e6f58ca-891c-4269-af13-80244a6920bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "7a86cc60-d147-4b79-9276-72ea2206bd8d",
        "cursor": {
          "ref": "8a154317-7381-472d-9e7d-f70afa38573a",
          "length": 244,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "548b36c9-b782-403c-898b-e244ef3b8dd2"
        },
        "item": {
          "id": "7a86cc60-d147-4b79-9276-72ea2206bd8d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "73bb5433-2900-48dd-8711-716445eae80b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "f4ffa896-b632-4a31-8644-49b883463923",
        "cursor": {
          "ref": "b9c0a5a5-aced-48b0-8be8-2f2573ea5b6b",
          "length": 244,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "3311aa53-f1fa-4799-a965-e26328511ae5"
        },
        "item": {
          "id": "f4ffa896-b632-4a31-8644-49b883463923",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "1f5fdbae-5adc-44dd-afab-13da49cfcdd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "9f82f348-4a9c-4075-857a-7c176af1aacb",
        "cursor": {
          "ref": "a9052ef8-e71b-4810-939a-35e0428a97f7",
          "length": 244,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "f27b4a04-3ceb-4cdf-9ed8-3b0aa407422f"
        },
        "item": {
          "id": "9f82f348-4a9c-4075-857a-7c176af1aacb",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "f872dbbd-6633-4c3a-b4e1-8f2e90ecc72e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "183e5133-c1d1-4ad5-8a72-26d549331787",
        "cursor": {
          "ref": "dd4fc17f-2db5-4acf-a7d7-6e3efa75bd51",
          "length": 244,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "01247227-76e9-4e4c-a309-618dadc237e6"
        },
        "item": {
          "id": "183e5133-c1d1-4ad5-8a72-26d549331787",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "42fcbfa1-b22f-4acc-bda0-cb435d895ebb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "799e594f-150c-4b47-93bc-2f80d97a92cd",
        "cursor": {
          "ref": "b0c01b1b-91b4-45fd-8b8f-0529bb81cb30",
          "length": 244,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "e7e363a7-794b-44fa-8da4-4c115f25d37f"
        },
        "item": {
          "id": "799e594f-150c-4b47-93bc-2f80d97a92cd",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "07945ccc-bebc-4fa3-819f-ccce150b490f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "6c4f171f-980e-418f-8b16-ec4beccaefb8",
        "cursor": {
          "ref": "f82bcc15-6e1d-4e41-8294-2fd47b991ca3",
          "length": 244,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "bf08f250-b3e7-4aa8-bf5a-9dda5bffc25d"
        },
        "item": {
          "id": "6c4f171f-980e-418f-8b16-ec4beccaefb8",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "fdad9a64-4947-42b7-9783-2f121881286a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "d2d90c91-72fd-4c98-a18f-471573196063",
        "cursor": {
          "ref": "1607d4cd-c4b5-4356-aa47-dc98988f9f66",
          "length": 244,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "546a52df-7c80-489f-8b9c-b9db62cd54b4"
        },
        "item": {
          "id": "d2d90c91-72fd-4c98-a18f-471573196063",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "032a3cf8-ec46-48d9-a0ff-3eb9f5acb1ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "558542a2-539e-4938-88e3-87992745bda9",
        "cursor": {
          "ref": "42a00bf3-2037-4488-a0d6-70cf6945169a",
          "length": 244,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "8ef97dbf-826c-42b7-8156-1308f44d1ce9"
        },
        "item": {
          "id": "558542a2-539e-4938-88e3-87992745bda9",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "4ef956e1-2b66-40e0-a916-18770586d937",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "84dfddc9-d6c0-414c-81e3-3877675fffdf",
        "cursor": {
          "ref": "da9d2752-cd0a-4afd-a2d3-c6b593e591fa",
          "length": 244,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "9e6f2ad8-bc46-4639-b588-270df555f242"
        },
        "item": {
          "id": "84dfddc9-d6c0-414c-81e3-3877675fffdf",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "91fe5577-a5e8-4bf9-9635-e28c02f73199",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "a49ee8b6-4993-4b13-a8c6-48d35f466f0c",
        "cursor": {
          "ref": "2a636eb1-dc1c-4374-9e22-a207250e8ff3",
          "length": 244,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "5a4ce7d2-c701-4afd-9ed5-cfd223fcb863"
        },
        "item": {
          "id": "a49ee8b6-4993-4b13-a8c6-48d35f466f0c",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "9c706829-d603-460c-8832-250d34306656",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "d7ffe95d-3e30-47b2-be4f-c2db8c509257",
        "cursor": {
          "ref": "ef2c0c6a-a013-48f3-bb7c-08e7d65c437b",
          "length": 244,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "5edf1d55-fca2-4fae-a706-de0a1b213536"
        },
        "item": {
          "id": "d7ffe95d-3e30-47b2-be4f-c2db8c509257",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "43e5a257-03a8-4101-80dc-fa692be458b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "d6bd90c0-ec2e-4fee-895b-7887f6267158",
        "cursor": {
          "ref": "0de72f31-e3c7-4d35-9b87-4fe8ecf7319a",
          "length": 244,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "24bb60e1-a5c8-4285-b1fe-9ec8ecea2048"
        },
        "item": {
          "id": "d6bd90c0-ec2e-4fee-895b-7887f6267158",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "b77fb7f4-ca65-452a-b14d-7b22347fc2a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "f8d79e59-059f-41aa-b4f0-0b048b44a05a",
        "cursor": {
          "ref": "e375595d-36e1-4303-a5af-b12a4fa01b15",
          "length": 244,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "794bef6c-d192-44fd-98b5-8a25e9545546"
        },
        "item": {
          "id": "f8d79e59-059f-41aa-b4f0-0b048b44a05a",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "184569be-0c73-4417-b996-a2c4dafe1a54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "1e04279a-8802-44bf-941e-79fe88af4529",
        "cursor": {
          "ref": "f2193bd9-135c-418d-88f3-9665ad5b7613",
          "length": 244,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "b172ced6-3b10-4a81-81ab-83df6616b301"
        },
        "item": {
          "id": "1e04279a-8802-44bf-941e-79fe88af4529",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "e2343782-e678-47ac-a299-3b0bbfac31ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "5461ba21-694e-4cfa-bb11-7826fd4d5082",
        "cursor": {
          "ref": "baf8674a-9efe-45b3-a21a-e95e159541dc",
          "length": 244,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "27268141-c0a3-4068-bedf-85aa1cf15c4c"
        },
        "item": {
          "id": "5461ba21-694e-4cfa-bb11-7826fd4d5082",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "f821e8c5-e326-4536-b545-85eca6456ae2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "91f21bd1-0405-4d9b-b709-6f1f1ccb18b5",
        "cursor": {
          "ref": "dd0a761c-6ad6-4b1a-928d-daf2b10a1a2d",
          "length": 244,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "be3cc5c8-89f9-4622-a0b4-3c4c7efe8a4b"
        },
        "item": {
          "id": "91f21bd1-0405-4d9b-b709-6f1f1ccb18b5",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "a2d94613-bf9b-4c41-bd36-063e00babe9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "fcf45f38-15ea-4d84-87de-2577b239417a",
        "cursor": {
          "ref": "68aaa487-bedf-483b-9a03-7fc08acd862c",
          "length": 244,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "f2772abf-dd87-431e-89fc-d398b261a2d6"
        },
        "item": {
          "id": "fcf45f38-15ea-4d84-87de-2577b239417a",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "fcfa78c8-4d2b-4d1e-b628-b9dd43f0f299",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "87257f6d-9f06-4bd3-9968-33f37c3c14ee",
        "cursor": {
          "ref": "7fbc62da-2b59-4c59-a9df-e7b4a6f70101",
          "length": 244,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "1495b87f-a876-4bc7-a08d-36dfabb57dfe"
        },
        "item": {
          "id": "87257f6d-9f06-4bd3-9968-33f37c3c14ee",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "e55b0110-befa-49d5-b8f0-5a813fd55b55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "227043f8-3139-4f8e-ad09-cc5b67cca5cd",
        "cursor": {
          "ref": "f2c204cf-48f1-4148-a14b-7a3197484451",
          "length": 244,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "2874c695-931e-4f7e-9d23-4ada7082f6d5"
        },
        "item": {
          "id": "227043f8-3139-4f8e-ad09-cc5b67cca5cd",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "3234d38c-9359-4c39-ac71-45d8bfe8cdd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "e1c83030-8367-40a2-a331-cfdd37a97231",
        "cursor": {
          "ref": "5549315c-9097-40b3-9c6d-4d87246f1b58",
          "length": 244,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "d64e7ca4-6956-465e-be5e-25c0b1de531f"
        },
        "item": {
          "id": "e1c83030-8367-40a2-a331-cfdd37a97231",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "5649ebc5-642d-4a36-abad-eb1723704d15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "56c88399-3a23-4213-95c6-c0edd3c46122",
        "cursor": {
          "ref": "9becfb85-dae9-4681-82f4-1d67e3c4d9d1",
          "length": 244,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "d2d2812b-426f-4197-a271-47bc41af2b49"
        },
        "item": {
          "id": "56c88399-3a23-4213-95c6-c0edd3c46122",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "d23908a2-8ee9-41e5-9edd-e71269ff4692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "a55e67ff-6dca-47b3-8905-350fba955a4a",
        "cursor": {
          "ref": "c85db2c9-3ea6-4097-b4b0-8588e4ce4e0f",
          "length": 244,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "9a474de9-5a02-46f8-aaa4-79d7f5043101"
        },
        "item": {
          "id": "a55e67ff-6dca-47b3-8905-350fba955a4a",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "38543efe-689b-41b7-be77-ec5859220b85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "359b5e40-2a9d-4c5f-803f-0e6db05622c9",
        "cursor": {
          "ref": "f760015b-bf21-4ee8-b5cd-48e3de3384a5",
          "length": 244,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "53dcfbd3-ba3d-4124-8462-6ede2f687ffd"
        },
        "item": {
          "id": "359b5e40-2a9d-4c5f-803f-0e6db05622c9",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "79cb8849-6cfc-4a9d-8aca-52bbc9e5889d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 195
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "d6ae6ae7-4ce8-4776-a84b-ce5bcaac677e",
        "cursor": {
          "ref": "b632d68f-2d69-4d1c-95b3-71131271561f",
          "length": 244,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "2a42bdfd-6e2b-47ea-9cbc-2d7645f8a693"
        },
        "item": {
          "id": "d6ae6ae7-4ce8-4776-a84b-ce5bcaac677e",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "885a05ba-0e2b-4581-8ca8-cdf19124d07b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 195
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "dae77902-0ecf-42af-9339-65c964778edf",
        "cursor": {
          "ref": "43981b95-903c-403f-8ef7-f5e8d1ac6b1f",
          "length": 244,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "1653aacc-cf1d-46f7-b448-734c576fc7d4"
        },
        "item": {
          "id": "dae77902-0ecf-42af-9339-65c964778edf",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "1160210a-b389-427f-b59c-2e02506d5937",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "9c37e18f-5313-4211-8293-e508d8d178e6",
        "cursor": {
          "ref": "f467c318-374a-494b-9122-d239d6a5bf65",
          "length": 244,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "c4b9efc1-bca1-4d9b-bfbb-a8cae6107b50"
        },
        "item": {
          "id": "9c37e18f-5313-4211-8293-e508d8d178e6",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "dba01c23-5418-4446-99ab-89a0da4e4777",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 195
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "b6c67cac-1666-421f-a2be-0acf3de833a1",
        "cursor": {
          "ref": "61f1b598-8dd2-4e3d-be59-7f89a983fa40",
          "length": 244,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "389f4650-8d6f-4ee8-8e23-ebb96d2280b2"
        },
        "item": {
          "id": "b6c67cac-1666-421f-a2be-0acf3de833a1",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "7e65eeed-d63e-447f-a8e8-3329fad9955c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "2c5ab423-6d82-477c-be52-0c8d69209309",
        "cursor": {
          "ref": "9eb18bee-d323-41b0-8816-a6df66c83ee2",
          "length": 244,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "3d052129-fd33-480a-ae4c-b7783da9a6ff"
        },
        "item": {
          "id": "2c5ab423-6d82-477c-be52-0c8d69209309",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "ba534b05-cef6-4efb-aa19-5486989bcbed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "be501b6e-ef57-48de-b4fa-3faf7ea7a58a",
        "cursor": {
          "ref": "42e11c0f-0520-49b2-add8-7f034a0258b8",
          "length": 244,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "6f568e2d-f41d-48fd-92d5-24c52ce9650a"
        },
        "item": {
          "id": "be501b6e-ef57-48de-b4fa-3faf7ea7a58a",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "27985fa3-fd8a-41d4-a2e3-220d550883b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "d07dfb4a-f5a7-4f4d-89fe-4f4ead591654",
        "cursor": {
          "ref": "7c76ee1e-b212-48d2-a8ae-5d5ae416bdd9",
          "length": 244,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "81a5b3bd-0cba-4b69-ac1d-ed5d2ba1d32a"
        },
        "item": {
          "id": "d07dfb4a-f5a7-4f4d-89fe-4f4ead591654",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "1e1fe87c-665e-4411-abc8-3ebd9a1e9199",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "66a5386f-431c-4771-8af8-9da386a2e3d5",
        "cursor": {
          "ref": "09ba7d90-8727-4763-a499-7ff30be1ce35",
          "length": 244,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "aed3c828-2619-427c-a7da-42aabce41db3"
        },
        "item": {
          "id": "66a5386f-431c-4771-8af8-9da386a2e3d5",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "a606b0f1-ec19-4526-8b16-a2c2aa87f147",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "ccda5b77-4ae4-460d-a21c-81e5703f955d",
        "cursor": {
          "ref": "e02c455c-5ce5-466b-8311-948ae4606743",
          "length": 244,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "13b72d5e-31c0-4f8f-a875-f3716a88265c"
        },
        "item": {
          "id": "ccda5b77-4ae4-460d-a21c-81e5703f955d",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "db12503e-078a-4197-b7b0-752d73f6cdda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "6b4a0a27-a644-4968-bf10-1ff862f3d037",
        "cursor": {
          "ref": "0b5892bc-2e97-4bda-ad58-6cd1cedd613b",
          "length": 244,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "c190ee49-7937-4cd8-ade3-e86d9c197ee9"
        },
        "item": {
          "id": "6b4a0a27-a644-4968-bf10-1ff862f3d037",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "1e744453-fc40-4b3f-89bd-032582383582",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 565
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "dfe4e25f-7998-4a30-a66e-ac3ad215e42e",
        "cursor": {
          "ref": "6b636adc-aa3f-4a3d-bc80-c1cf2b51e7c4",
          "length": 244,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "98322331-0718-44fc-8de3-aa9699473906"
        },
        "item": {
          "id": "dfe4e25f-7998-4a30-a66e-ac3ad215e42e",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "e6971229-4408-49cb-8506-2600cdba0d93",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "5acc3dc3-3132-4123-a96e-9e086eb53095",
        "cursor": {
          "ref": "7530d770-7066-4d31-be33-91094138b997",
          "length": 244,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "1c4f66d6-9a71-4fc8-87c4-1a056f846ec9"
        },
        "item": {
          "id": "5acc3dc3-3132-4123-a96e-9e086eb53095",
          "name": "credentials_issue"
        },
        "response": {
          "id": "fa481db7-f17c-4a6b-8e32-d4faa207f479",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:102)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:102)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:102)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:102)"
            }
          }
        ]
      },
      {
        "id": "54fc636e-e9bf-4adf-9ff4-77524e68d806",
        "cursor": {
          "ref": "fc510b4c-7ccc-40bd-be0f-69b4ab714145",
          "length": 244,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "79627801-0ccc-4b02-bee6-7b0165dbbf94"
        },
        "item": {
          "id": "54fc636e-e9bf-4adf-9ff4-77524e68d806",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "8c3575db-4d19-4a99-b96c-c73002544309",
          "status": "Created",
          "code": 201,
          "responseTime": 1573,
          "responseSize": 749
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should be object",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should be object\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:103)"
            }
          }
        ]
      },
      {
        "id": "479e2910-d2c8-4eb4-b2fb-4b5e5aac8411",
        "cursor": {
          "ref": "a7999b98-66d7-473f-82bc-3729cf62926b",
          "length": 244,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "4fde9a60-cba0-4fae-8d14-cb8f530e69c9"
        },
        "item": {
          "id": "479e2910-d2c8-4eb4-b2fb-4b5e5aac8411",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "849b8137-600e-4f73-b3e1-890953835ffb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "2d201529-76df-4ca8-bbd0-dcf0322cc411",
        "cursor": {
          "ref": "0d0d295a-817c-4914-8ce6-cb14d46134bb",
          "length": 244,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "f2553787-f5e8-4c3c-91f5-dd1a74c86799"
        },
        "item": {
          "id": "2d201529-76df-4ca8-bbd0-dcf0322cc411",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e904dce8-8151-461c-a9f3-6d375dfec65a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "bf2bb75d-d77b-4411-aace-7bbdabfe3c08",
        "cursor": {
          "ref": "dec8ba75-4455-4db4-86cd-74b6d1388b34",
          "length": 244,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "2c3c949d-1b8c-4a02-8a53-023d67cd987f"
        },
        "item": {
          "id": "bf2bb75d-d77b-4411-aace-7bbdabfe3c08",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "40ae4d8f-8356-43f5-b92f-ec5bc39a7ff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "a3750858-2f0c-428a-b234-37a47879e3bb",
        "cursor": {
          "ref": "fbcdff4a-010f-4261-b4d4-dd70085f9b1e",
          "length": 244,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "63e25782-4ca8-4b9e-8e81-daa906ebe0de"
        },
        "item": {
          "id": "a3750858-2f0c-428a-b234-37a47879e3bb",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "bbca4655-d70d-462c-9504-02786f7be578",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "e5aed304-0153-4010-8ba5-92c979cbac10",
        "cursor": {
          "ref": "529b6d95-9cb6-4c88-b575-10f0f7137946",
          "length": 244,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "0c382a13-a0b5-48a7-a76f-571a9419e5fa"
        },
        "item": {
          "id": "e5aed304-0153-4010-8ba5-92c979cbac10",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "df98b2fa-0ca7-4015-b60f-a57dbc99e432",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "d0a2d9fb-6b1e-4f6a-bb0d-2094bfd134c1",
        "cursor": {
          "ref": "8b90a047-13ee-4277-b035-26c8063bb1b7",
          "length": 244,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "8ab39ee0-ae7d-4104-877b-fd215800a946"
        },
        "item": {
          "id": "d0a2d9fb-6b1e-4f6a-bb0d-2094bfd134c1",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "1b5ba463-68f7-4fa2-b103-f18cbf245db4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "92bd48b0-388f-44bf-80b9-1b05bb0f2631",
        "cursor": {
          "ref": "d73af230-c294-4147-974a-1248f6798837",
          "length": 244,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "df71083b-3f13-4083-b7ee-eb99e7bc0491"
        },
        "item": {
          "id": "92bd48b0-388f-44bf-80b9-1b05bb0f2631",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "387ed94a-b19c-465b-9028-dc6055635e9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "f943e4a1-c862-4f0e-91c3-324bdaf66c03",
        "cursor": {
          "ref": "d164559e-4665-41fe-99cf-95b336c26635",
          "length": 244,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "21f18e09-29db-498e-82cc-5aa4aa115ef3"
        },
        "item": {
          "id": "f943e4a1-c862-4f0e-91c3-324bdaf66c03",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "a60b29c2-857f-4fac-add7-eab2715a3540",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "e8998590-992f-4463-9871-3890354e195e",
        "cursor": {
          "ref": "a2b813e8-d579-474e-a9e9-73fce1a55267",
          "length": 244,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "618ca14f-4f9d-494c-89a9-c27bfa1c8fbd"
        },
        "item": {
          "id": "e8998590-992f-4463-9871-3890354e195e",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "cdc815ef-4a5f-463f-9d77-7fc8624043bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "632c963f-8b10-46d4-8915-b87ee50a864a",
        "cursor": {
          "ref": "d8b5b935-be45-46bf-80bd-305b87a1b5b3",
          "length": 244,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "3f6f4673-58fa-4f2f-bf18-f0b994732496"
        },
        "item": {
          "id": "632c963f-8b10-46d4-8915-b87ee50a864a",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "080b028f-0328-4da1-ab32-977991496033",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "cf895e15-afe0-483a-ba8e-d8415c8020c0",
        "cursor": {
          "ref": "84864865-417b-4086-b0af-beae0c41a437",
          "length": 244,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "e03f856c-1eea-4304-84f0-9301d0758bb9"
        },
        "item": {
          "id": "cf895e15-afe0-483a-ba8e-d8415c8020c0",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f7dcf649-0bba-495a-a766-8b8c3d9bf50e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 140
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "74e977ad-48e7-4107-a210-b365ccfd1b42",
        "cursor": {
          "ref": "9a220d95-07ac-45ec-b3d7-938d15f21e70",
          "length": 244,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "b5e08480-eaf9-475f-9078-15a969e796b6"
        },
        "item": {
          "id": "74e977ad-48e7-4107-a210-b365ccfd1b42",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "24fba1e2-a29c-434a-b8e4-282c00f72fc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "eedc56d8-6012-47d4-ae8b-59d310ead958",
        "cursor": {
          "ref": "5333e36e-b5cf-4752-8c2e-c26b9a3ef8ac",
          "length": 244,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "b91d2982-661f-4183-88e0-a7bf2638fee7"
        },
        "item": {
          "id": "eedc56d8-6012-47d4-ae8b-59d310ead958",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "2e7c1f91-b357-4534-91e4-ecd5120c9bec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "85c89459-bf2a-4f56-8a50-883b68843eb1",
        "cursor": {
          "ref": "fbe5597f-48d3-46b9-9c34-20a0d45acf33",
          "length": 244,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "bd5e0536-73e8-4f10-92b3-a2cb77ecc1f1"
        },
        "item": {
          "id": "85c89459-bf2a-4f56-8a50-883b68843eb1",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "58368e21-b4db-4fe4-88d7-9eb133712894",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "1da1310f-aa42-455c-8256-da1dd5b3c180",
        "cursor": {
          "ref": "0f629b60-43dd-4363-8294-f4deea86aeb4",
          "length": 244,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "b766040a-6c20-4615-a9d3-25a06b309415"
        },
        "item": {
          "id": "1da1310f-aa42-455c-8256-da1dd5b3c180",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "2f393028-35e3-4768-b7fd-098aec5cc671",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "e9c89b86-3ce9-40bc-905a-470300863f77",
        "cursor": {
          "ref": "0b51d3e2-e31d-42fb-9a11-82efef854ba9",
          "length": 244,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "2e908367-953f-476a-a28c-5efa85e79485"
        },
        "item": {
          "id": "e9c89b86-3ce9-40bc-905a-470300863f77",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "39a38153-3cff-4564-8757-5284631da65e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "c5c6a978-ab5f-4313-a177-f624f78f1f0c",
        "cursor": {
          "ref": "4b5e3f75-9190-42b8-bb02-474677d2acc5",
          "length": 244,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "a9d1fff4-d3cd-4948-92d6-e934239761dd"
        },
        "item": {
          "id": "c5c6a978-ab5f-4313-a177-f624f78f1f0c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "d6cfaf18-763f-409c-96b3-d9782cf4f8cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 129,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "022635f2-2852-4e0c-9d09-de723d3e0fe4",
        "cursor": {
          "ref": "772b355c-4516-44c9-9a97-5682dab1cd8c",
          "length": 244,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "5a5f2112-7623-4a68-8560-11b7160355db"
        },
        "item": {
          "id": "022635f2-2852-4e0c-9d09-de723d3e0fe4",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "c6d79896-e01c-4a65-a28a-c71ea185cf8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "c13abf8e-3482-4f68-87eb-72de6ad594e2",
        "cursor": {
          "ref": "4a50f6f7-0b60-4fca-9271-9699d03a22c9",
          "length": 244,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "6789cfc7-76ce-420c-bc6a-7aec3457d506"
        },
        "item": {
          "id": "c13abf8e-3482-4f68-87eb-72de6ad594e2",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "7892e2a4-1317-4f26-9b13-7ee3bd9b174a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "3f885a20-4122-4488-b0bf-dc371a488a84",
        "cursor": {
          "ref": "1668f666-5c1e-49ea-bba1-1c7ec6cd1f9d",
          "length": 244,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "609f34b1-3109-4bcc-a68d-191ad2007b63"
        },
        "item": {
          "id": "3f885a20-4122-4488-b0bf-dc371a488a84",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "37dac328-c990-40ee-97e5-7c65128b8138",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "fc4dfcde-8081-40b5-9619-915a69767a1b",
        "cursor": {
          "ref": "49047024-3838-4fdd-88f7-663362f1e155",
          "length": 244,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "d48ba43d-6ef1-41ce-93a7-c314f9115158"
        },
        "item": {
          "id": "fc4dfcde-8081-40b5-9619-915a69767a1b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "2305fef8-1b65-4f9b-a2e3-d61d117258a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "c5c1860f-21a1-4943-a7e1-bb49713c5515",
        "cursor": {
          "ref": "aa9f98e7-8a96-4c05-94b4-4b2bed9bdb15",
          "length": 244,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "05f9ab7e-8557-4651-a5a6-80cfefdeef0c"
        },
        "item": {
          "id": "c5c1860f-21a1-4943-a7e1-bb49713c5515",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "2e981a88-2e57-4af9-831a-3cb6a18a17af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "1334d759-26b8-4050-9b17-72835977a100",
        "cursor": {
          "ref": "ed91969a-9415-4833-834f-7332eb9fa08e",
          "length": 244,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "228b4cbe-c243-48b6-a1e7-4bd63d1c4b67"
        },
        "item": {
          "id": "1334d759-26b8-4050-9b17-72835977a100",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "31fe9cb5-aa00-4c31-996e-c50c3946545e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "a8948872-3d2e-45ce-a216-648d74bf0c02",
        "cursor": {
          "ref": "302f9bd5-8879-42c5-9e97-7f6ce51d3571",
          "length": 244,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "685918e0-c671-4586-8b81-a953586acef0"
        },
        "item": {
          "id": "a8948872-3d2e-45ce-a216-648d74bf0c02",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "6f1f675b-b5db-4ad8-82eb-13baef0bdebd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "253516a3-a41e-4f84-92bc-94854ce47d37",
        "cursor": {
          "ref": "0506f879-19d2-4e91-9b13-b7fee04a74c5",
          "length": 244,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "5fe41e0c-23dc-469e-89fb-fc8e6f359b85"
        },
        "item": {
          "id": "253516a3-a41e-4f84-92bc-94854ce47d37",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "9fb2ff44-ba50-4edf-8a7b-179dbc4f9781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "a7484cf8-029e-48c6-98f5-ad0e12c54140",
        "cursor": {
          "ref": "a303f865-5376-4bfa-ac6a-f1790472f846",
          "length": 244,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "f7a21c41-98d2-4f9f-a767-b5f18927fbd4"
        },
        "item": {
          "id": "a7484cf8-029e-48c6-98f5-ad0e12c54140",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "dd03033c-41b2-4bf8-ad20-55267c39dd04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "c28ebbae-c838-4583-8e59-9ed9740e0c67",
        "cursor": {
          "ref": "9dc4ed84-c74e-4af5-8f80-8001607c98c7",
          "length": 244,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "09a01409-90b9-4828-8fb5-69103843faef"
        },
        "item": {
          "id": "c28ebbae-c838-4583-8e59-9ed9740e0c67",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "252873a0-c854-4aa6-9267-0b987c97f6f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "5d9749c4-60fe-43de-826a-2931d9e9455e",
        "cursor": {
          "ref": "b1e60d95-4b4c-4788-adf6-fd91f4e5dce9",
          "length": 244,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "d9c22585-2c89-47a4-8df5-d158c525ecfa"
        },
        "item": {
          "id": "5d9749c4-60fe-43de-826a-2931d9e9455e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "6f10e274-42fe-4386-a26e-eda42840d6bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "217caf18-682b-4e8b-9769-66bb9e65dd25",
        "cursor": {
          "ref": "3e3defae-b8bb-4b56-99b9-3cca80892045",
          "length": 244,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "78473f6f-160f-40f6-b933-e9197d9a373a"
        },
        "item": {
          "id": "217caf18-682b-4e8b-9769-66bb9e65dd25",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d8edb53b-87c5-46f8-a6b8-e813ab3ca088",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "f8b1d937-bc46-4c2f-be6e-da89cbe68f39",
        "cursor": {
          "ref": "12a570db-6a15-47a0-b312-5b6a9184ecf5",
          "length": 244,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "628aed62-ce47-4e03-a852-0c780cb1d193"
        },
        "item": {
          "id": "f8b1d937-bc46-4c2f-be6e-da89cbe68f39",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "680069cf-849a-4a51-a5b9-ddbdc6024081",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "e58fab9a-5a6f-4e1e-90e9-2c65b15e1c56",
        "cursor": {
          "ref": "b41c9cfb-c3f5-4d72-bc0f-6d93a7592283",
          "length": 244,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "bf9cd71a-47e2-4a3e-abea-3da6b9b372d3"
        },
        "item": {
          "id": "e58fab9a-5a6f-4e1e-90e9-2c65b15e1c56",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "e3c424a4-aa13-4e41-acb9-9876a8b52eee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "fb65f558-59ad-4b0a-8129-8db7bee1d3a6",
        "cursor": {
          "ref": "aa6dd579-fa7e-438e-95df-379d6701e124",
          "length": 244,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "39c134f9-7864-4831-8be3-42be0c5ef28c"
        },
        "item": {
          "id": "fb65f558-59ad-4b0a-8129-8db7bee1d3a6",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "cf8d1de5-2d67-4c52-a8c8-2ae890d943b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "19c5334e-85b6-43ca-95d6-04f1d6c2f76e",
        "cursor": {
          "ref": "d3bfdfee-3e93-4332-9477-54ea8188b667",
          "length": 244,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "ad047d8f-bbaa-4221-a3b8-b2bdbbb01a40"
        },
        "item": {
          "id": "19c5334e-85b6-43ca-95d6-04f1d6c2f76e",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "763186da-8f01-4d2d-851d-02b815946c59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "88eab2e0-a232-493d-a276-b333affa0f54",
        "cursor": {
          "ref": "e6fe7597-8672-4324-aee6-8713059029cb",
          "length": 244,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "af3a14a1-df0e-4fec-94fa-369dde7afef2"
        },
        "item": {
          "id": "88eab2e0-a232-493d-a276-b333affa0f54",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "5c843c56-ccc4-48c3-8a21-68f61bd7c8f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "13cf0a10-80a5-4b9f-8b5e-6d4fd7b12db9",
        "cursor": {
          "ref": "e8ad8f2c-7087-405d-9c09-9d969a9269db",
          "length": 244,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "52695c9f-0168-4aaa-a25a-90852a42fa65"
        },
        "item": {
          "id": "13cf0a10-80a5-4b9f-8b5e-6d4fd7b12db9",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "bc3384bb-5488-4c1a-9d4a-9db0e13a482d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "66359fb2-8c85-41aa-94fd-9d58262a3039",
        "cursor": {
          "ref": "4efb5729-dd4c-4155-aee0-e29358554190",
          "length": 244,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "0e2ab4ee-af09-4cf5-9b89-641b56ae2da3"
        },
        "item": {
          "id": "66359fb2-8c85-41aa-94fd-9d58262a3039",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "72308848-1dfb-4229-8be8-8f11a4dbf8b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 104
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "74313fc0-9c9d-4583-937e-06ccfe83253c",
        "cursor": {
          "ref": "ab305b44-8ea1-41c7-9ac0-ed4206c3ed16",
          "length": 244,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "77f7ef8d-ded7-467e-bdab-16e2e384aa2f"
        },
        "item": {
          "id": "74313fc0-9c9d-4583-937e-06ccfe83253c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "7ce4ab36-9959-4d34-82e9-04109b7b27c2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "553b82bf-0b6b-4d5e-90e0-7566bbf4e4ed",
        "cursor": {
          "ref": "55d8ee2d-a3e3-4225-8798-ee0611a91091",
          "length": 244,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "cb745150-363d-46fd-b6c1-e0ebcfaae5bb"
        },
        "item": {
          "id": "553b82bf-0b6b-4d5e-90e0-7566bbf4e4ed",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "19345af2-9fb7-4c78-a86c-7667d4c6c376",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "cf47566c-3312-4d96-ba81-d273c3caaadd",
        "cursor": {
          "ref": "e8796643-7e87-4581-b5d6-bd33f54f697f",
          "length": 244,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "74f32937-9e3f-4c39-ae69-fa2cb31b617a"
        },
        "item": {
          "id": "cf47566c-3312-4d96-ba81-d273c3caaadd",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "8789c283-1744-4ae4-99cd-ebde41e8ae8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "f59d795c-a4f1-40a0-9e04-4d38d7121f1e",
        "cursor": {
          "ref": "ea46975f-4fdf-4ba0-8f34-d4bf5ffbf37d",
          "length": 244,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "6768ebe4-6d21-4ab0-96d5-fb54d8bcb890"
        },
        "item": {
          "id": "f59d795c-a4f1-40a0-9e04-4d38d7121f1e",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "98a68dc9-8de4-4be2-98c3-92bc0eaa965e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "7df0c907-3544-4c0c-9699-5b02d5a86824",
        "cursor": {
          "ref": "ec8a800f-7d3a-4f82-b87b-7423885f6ed1",
          "length": 244,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "8d39f02c-9e09-4d3e-993a-52733be0fe66"
        },
        "item": {
          "id": "7df0c907-3544-4c0c-9699-5b02d5a86824",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "d4e02d62-2c66-4fb4-956f-8deef4ec633b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "d041bde2-db9a-41bb-a5df-db73fe0cbccd",
        "cursor": {
          "ref": "1f305a11-2613-4972-a93b-ed961842b210",
          "length": 244,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "6f64ab8c-a320-4a70-b61e-301082de7e1c"
        },
        "item": {
          "id": "d041bde2-db9a-41bb-a5df-db73fe0cbccd",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "673fe368-1dd4-4e1b-a1da-ed432e177dd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "e0bcdc8c-e2e2-4ad8-908d-845ad2bbd1aa",
        "cursor": {
          "ref": "faa421d5-3426-4c71-bd02-0e804f3c332c",
          "length": 244,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "b661301c-f575-4369-a0cd-7a83ddb592e0"
        },
        "item": {
          "id": "e0bcdc8c-e2e2-4ad8-908d-845ad2bbd1aa",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "587db0f1-6808-4545-8320-430576c949e5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "3034f044-9d99-4d8e-89ca-d74deb34213d",
        "cursor": {
          "ref": "10c381b5-8a8d-47da-8c7f-661cc7c7a479",
          "length": 244,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "f229d869-fdc5-4657-9c73-85a9f96404cf"
        },
        "item": {
          "id": "3034f044-9d99-4d8e-89ca-d74deb34213d",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "046ed997-25d5-4985-acd6-91420019cab1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "ab522954-d44a-4568-846d-6faf0dd0c79d",
        "cursor": {
          "ref": "0c73d334-0c00-41d2-8966-bdc406f367df",
          "length": 244,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "3f74ec64-964a-4495-be5a-b780f63c2fb7"
        },
        "item": {
          "id": "ab522954-d44a-4568-846d-6faf0dd0c79d",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "93c32db5-edd2-4018-b227-7f4cc7616add",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "03de43ac-8c76-4f36-a4e7-ff1afed73324",
        "cursor": {
          "ref": "c3fefe9a-d397-42da-9c06-1e81d3eb64d0",
          "length": 244,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "88724209-9839-4b59-91d1-8fd5e527e502"
        },
        "item": {
          "id": "03de43ac-8c76-4f36-a4e7-ff1afed73324",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "28fbcfd7-927e-4ed4-926d-ce9631beb996",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "f9e65763-b37c-48e6-8184-dceab6421ce8",
        "cursor": {
          "ref": "0e3cfa66-b370-4abe-b7fb-97ace1720f13",
          "length": 244,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "daac2d2f-13e2-403c-9dcd-13fcc7d9a218"
        },
        "item": {
          "id": "f9e65763-b37c-48e6-8184-dceab6421ce8",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "0e7104eb-9d04-4357-a7e9-303e5e8b6d84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "d45a1e49-2b3e-4671-a4ae-eff244af0edf",
        "cursor": {
          "ref": "503114f0-7611-40aa-96a4-12d69468e724",
          "length": 244,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "2769e1ab-906e-4b95-b441-3ed61145f0d0"
        },
        "item": {
          "id": "d45a1e49-2b3e-4671-a4ae-eff244af0edf",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "53c9a54f-fa22-4b75-a947-7cd3be0d4593",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "1a3c7fd9-7e3d-4d93-b4ce-02311acd1194",
        "cursor": {
          "ref": "e9a56ec1-dc9d-4cdf-a8c2-ed807ce42c12",
          "length": 244,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "6a3cfebe-7fd3-45e1-aacd-380d238c7cab"
        },
        "item": {
          "id": "1a3c7fd9-7e3d-4d93-b4ce-02311acd1194",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "08a768e9-5410-4b3a-9034-1e909a6b0cb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "c7936041-5eeb-4a07-b54d-e8a7b3a2fe68",
        "cursor": {
          "ref": "8491bbd6-1c54-49f0-ae8f-31e82ffcadd0",
          "length": 244,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "62ffec7f-80be-465b-9107-705fe57085d0"
        },
        "item": {
          "id": "c7936041-5eeb-4a07-b54d-e8a7b3a2fe68",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "26ca6298-19ee-4872-83f2-d87bf74101cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "951243c9-6d02-4016-a03b-a848a2d34cd8",
        "cursor": {
          "ref": "3085680d-da53-41c2-a7b7-69ed438b7b4b",
          "length": 244,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "0bf2b5e8-f8af-4724-aa3f-a8027de5d0d4"
        },
        "item": {
          "id": "951243c9-6d02-4016-a03b-a848a2d34cd8",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "16a09502-c4ab-4835-82df-2fb7a8f35bcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "3bb95259-d29b-4b33-80fd-0e41d07a6bdf",
        "cursor": {
          "ref": "36014a69-35b7-45f4-91e7-910793ecd299",
          "length": 244,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "fa1337d1-8722-4930-aba1-e8d30f6c1404"
        },
        "item": {
          "id": "3bb95259-d29b-4b33-80fd-0e41d07a6bdf",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "ccb20e65-a90e-4451-86b2-863a344ad76d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "6efd6511-88d1-40c0-8ba0-29d562e6c702",
        "cursor": {
          "ref": "f20a6a72-7347-4473-ba09-518724644b70",
          "length": 244,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "079951b7-a14c-4bf8-a741-09711ecd1d22"
        },
        "item": {
          "id": "6efd6511-88d1-40c0-8ba0-29d562e6c702",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "fa038259-7c71-42ef-93e1-f76e7baa6f20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "e0e939cc-109f-4499-ba28-47a049b06498",
        "cursor": {
          "ref": "b6767621-ad5d-4627-9d93-5f70c9c513dc",
          "length": 244,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "6b9ef09c-2f31-4989-abf8-3bcf5a582f40"
        },
        "item": {
          "id": "e0e939cc-109f-4499-ba28-47a049b06498",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "7cb9785e-66b5-4cb0-98f0-9e37abb267f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "700d0b5b-4a54-496c-a699-da95ad12b6d6",
        "cursor": {
          "ref": "4fb6053b-1ab3-478c-b29f-4c0bfc3bf9ed",
          "length": 244,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "6051e1b6-762a-4838-ad19-918151d7e94c"
        },
        "item": {
          "id": "700d0b5b-4a54-496c-a699-da95ad12b6d6",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "3b18ffc2-dd72-43ac-8248-18ba4dcf6790",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "cf735b1c-f49b-40d7-882a-837b312fb42c",
        "cursor": {
          "ref": "e7315507-eced-49d6-a16f-cb13855e6c83",
          "length": 244,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "fd6e5002-d980-4849-9b44-2dcd9a02b236"
        },
        "item": {
          "id": "cf735b1c-f49b-40d7-882a-837b312fb42c",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "9ca31f99-d5b4-42d0-a8ec-f1db39b5e446",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "a7aa599f-a297-4fd4-867d-120c27e22f10",
        "cursor": {
          "ref": "56336064-d33c-420a-93e2-c10728c5c12f",
          "length": 244,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "fd36bc3e-4b27-4247-8851-e8c81e36dbbf"
        },
        "item": {
          "id": "a7aa599f-a297-4fd4-867d-120c27e22f10",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "7bec0ffd-0466-47ae-ab6f-91305e31a262",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "efd5ba15-5c9a-4a9d-9476-42bb15e9b1eb",
        "cursor": {
          "ref": "6c979bbe-1304-467d-9752-30f3fb59d28e",
          "length": 244,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "a2b2ca0e-9abb-4700-9635-cbd7c302e31e"
        },
        "item": {
          "id": "efd5ba15-5c9a-4a9d-9476-42bb15e9b1eb",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "df9e46bf-d094-429f-bce1-12269aee8f24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 98
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "801d74c2-0bbc-468f-945b-ab9a009a6290",
        "cursor": {
          "ref": "89dd5be2-fdb3-47b2-8634-e59b49d60dd5",
          "length": 244,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "8ffdfa99-1689-4e35-912d-d1eb2374ec41"
        },
        "item": {
          "id": "801d74c2-0bbc-468f-945b-ab9a009a6290",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "819406bc-d438-4686-afc8-ab1fdde8842d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "ffd64109-d2ac-433e-a068-d05050bd3aff",
        "cursor": {
          "ref": "598109fe-5433-435e-a6ee-45329b8cf924",
          "length": 244,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "c0b5b085-dcbc-45f2-9ad8-6b1c8c67d4d0"
        },
        "item": {
          "id": "ffd64109-d2ac-433e-a068-d05050bd3aff",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "705acae2-c1d7-42d7-a9f7-a6e0d162095e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "b34833c3-418e-4e9c-bca1-90dd91344f57",
        "cursor": {
          "ref": "d6ccee92-87b9-46d6-bf72-486752fa8530",
          "length": 244,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "f9acbbc0-1182-4e7b-a0e0-a00f261f8244"
        },
        "item": {
          "id": "b34833c3-418e-4e9c-bca1-90dd91344f57",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "565ee12a-dcdf-43e5-910d-b1ec63ca7db9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "69a35891-da3c-49e0-a680-78db298eeee5",
        "cursor": {
          "ref": "24b53e6c-6982-4de9-b838-f69ee88e6cb1",
          "length": 244,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "5e693291-b493-43ff-a627-eee901e5a49a"
        },
        "item": {
          "id": "69a35891-da3c-49e0-a680-78db298eeee5",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "c92f9668-a9aa-483a-b5c9-34d07f59e896",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "5785773c-1244-4c91-b67a-938964fffd2c",
        "cursor": {
          "ref": "2850bc32-908e-4e15-9356-cdc4be80401c",
          "length": 244,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "75410780-4f7e-4643-96b0-2aedfcc5ba8c"
        },
        "item": {
          "id": "5785773c-1244-4c91-b67a-938964fffd2c",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "6e21a209-2ffb-4bbd-9b04-9a6fd1f57816",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "988b11f7-6b87-407d-beb4-cfb55082360b",
        "cursor": {
          "ref": "31348cfc-3f96-480d-a855-563a79a6f3a3",
          "length": 244,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "eec9efc4-0e10-4683-8ebb-be3916791864"
        },
        "item": {
          "id": "988b11f7-6b87-407d-beb4-cfb55082360b",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "4da29d88-a607-4187-a66a-bbd7f799af21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "3998e9af-17bd-4245-8e9a-80423e5141c4",
        "cursor": {
          "ref": "699a5608-0894-452a-9532-1e3c997e9831",
          "length": 244,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "5cfb9032-b213-4fa1-889b-310aced31842"
        },
        "item": {
          "id": "3998e9af-17bd-4245-8e9a-80423e5141c4",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "9bf9b662-bc68-4ffd-9bd9-037e0210d50c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "616a7ac8-39d4-4d04-87b2-57d498644d11",
        "cursor": {
          "ref": "1d4f9595-6846-40f7-a269-4e188cd7583e",
          "length": 244,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "d7f7e72a-b422-4629-b81b-8e25514bdacf"
        },
        "item": {
          "id": "616a7ac8-39d4-4d04-87b2-57d498644d11",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "2ba9d3b1-2e5c-4e99-8674-3f067cd3f757",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "0511b1ee-45cd-4338-9ce7-d25fab423d63",
        "cursor": {
          "ref": "b1ffdbe1-a037-4483-b84d-7368efa6767d",
          "length": 244,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "da1d29ab-403b-41ea-9043-faa90f0ec158"
        },
        "item": {
          "id": "0511b1ee-45cd-4338-9ce7-d25fab423d63",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "6a54ffee-0e6e-4c45-97f5-2b2fb889ed3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "4b7a22bb-3bc2-4a37-ab39-0c842de3abd8",
        "cursor": {
          "ref": "625ef88f-8b89-4e9b-a278-3a9d240cb969",
          "length": 244,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e928a3cb-7c1b-46d4-99c1-305e49adf78b"
        },
        "item": {
          "id": "4b7a22bb-3bc2-4a37-ab39-0c842de3abd8",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "31e53c54-b7e0-4392-997a-4f6da154ebee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "d4a057fa-d462-4ac7-a744-cddd168a151c",
        "cursor": {
          "ref": "fd567330-f6ac-4f4a-a801-d1bbd886074b",
          "length": 244,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "5596250a-1970-4037-aa61-8fea5050e690"
        },
        "item": {
          "id": "d4a057fa-d462-4ac7-a744-cddd168a151c",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "574b179f-4ea7-4040-b61c-078a122906a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 257,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "25dc4e05-bf53-4628-bd54-d6dc8c7f1757",
        "cursor": {
          "ref": "4fd73082-c65b-477d-aaf5-9fe7a173cf72",
          "length": 244,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c10a65f5-c0f1-4e70-9746-13fe0ce70857"
        },
        "item": {
          "id": "25dc4e05-bf53-4628-bd54-d6dc8c7f1757",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "d8f77db6-6797-4bee-9dc7-d4f6eff0f8bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "814ed541-69c0-4e7c-b70f-3d93ee643aa5",
        "cursor": {
          "ref": "0fad59e0-9b00-498c-beeb-a81a5064b068",
          "length": 244,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "d0e42dfe-5a1f-47c9-88da-f3a02fc9d9c8"
        },
        "item": {
          "id": "814ed541-69c0-4e7c-b70f-3d93ee643aa5",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "c8332f51-6af8-4c96-8e16-105c78199deb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "cbc0f73d-bdeb-4d77-8754-bc46e3bd5c46",
        "cursor": {
          "ref": "e68adba9-d4c1-4d1c-beca-14933077e1a6",
          "length": 244,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "29f22fbc-cf04-458b-bfc6-b1e0108f87dd"
        },
        "item": {
          "id": "cbc0f73d-bdeb-4d77-8754-bc46e3bd5c46",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "87a7cbef-dbd9-4ed6-86b0-370b82c8d9fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "a62571e0-b737-49ab-9336-45f2c878498b",
        "cursor": {
          "ref": "2e96db59-24ab-4733-90c7-781a09c88c76",
          "length": 244,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "859c6766-a1cc-4354-aa1a-4e4a6211064b"
        },
        "item": {
          "id": "a62571e0-b737-49ab-9336-45f2c878498b",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "da490fa0-8194-4b73-bac6-be54591c956b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "c5889015-bb77-43f3-84ee-c65c0b17a0bb",
        "cursor": {
          "ref": "bdf4774e-8a36-4a66-b66a-b58f7b62a608",
          "length": 244,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "86d8285e-8457-47dc-b4e0-dd9fdab0cdd2"
        },
        "item": {
          "id": "c5889015-bb77-43f3-84ee-c65c0b17a0bb",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "de510162-f4b0-45bb-9313-7eae5b1b37d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "6b33c323-5826-4e3e-9f0c-0d1c8c091efa",
        "cursor": {
          "ref": "734b038b-e5b9-417b-9eb2-c74228672f19",
          "length": 244,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "d6cef94f-b32a-4fff-9fc9-40d3a69ae2bb"
        },
        "item": {
          "id": "6b33c323-5826-4e3e-9f0c-0d1c8c091efa",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "3b169e7c-34fe-47e3-b7d9-16c08f67c549",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "ca707b26-3688-4dfe-a9f9-b9f28c71c159",
        "cursor": {
          "ref": "0c0a1131-ff7f-429a-be73-3bee371269a1",
          "length": 244,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "600a3de2-ee0b-41be-9794-c22d39857a16"
        },
        "item": {
          "id": "ca707b26-3688-4dfe-a9f9-b9f28c71c159",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d6b1a8e2-861f-4a9f-86c1-e8498e42df4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "3a4b2f2b-f241-4ad6-a945-b57854d6cee8",
        "cursor": {
          "ref": "589ac24e-f87d-462f-8f5e-3fdab612c4fa",
          "length": 244,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "d5569bf2-e7fe-4737-8594-e1f87ddc92c8"
        },
        "item": {
          "id": "3a4b2f2b-f241-4ad6-a945-b57854d6cee8",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "58b842fd-cac6-45fd-bf8e-2071a95473ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "304485f5-c373-4624-a76e-874b8ed6b533",
        "cursor": {
          "ref": "2b5a3a35-354d-4807-9c29-afaa6d1067f2",
          "length": 244,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "31627314-b151-4aa4-96dc-13b9d28086dc"
        },
        "item": {
          "id": "304485f5-c373-4624-a76e-874b8ed6b533",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "baf00f9b-ec25-4db6-b28c-c625fc0d02bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "a6ffe5ac-54d7-4c83-bc43-a0a69099a7b3",
        "cursor": {
          "ref": "6f7a5bca-e5af-4de4-ba37-a86b8da811ca",
          "length": 244,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "8fd33b8e-f112-4e59-8262-8b3afbd7df6c"
        },
        "item": {
          "id": "a6ffe5ac-54d7-4c83-bc43-a0a69099a7b3",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "2edfb752-8597-4a57-802d-36e51e1c1780",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "e3c94481-21b8-4d54-a46b-cc5b1389706a",
        "cursor": {
          "ref": "fec2e180-e54c-4d87-9690-9c4bffa142c6",
          "length": 244,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "e6bc4cd5-cc8d-40bf-ab2b-262f06268b57"
        },
        "item": {
          "id": "e3c94481-21b8-4d54-a46b-cc5b1389706a",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "df137757-1ae0-43da-8d36-fb63170f4095",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "592f22b3-4da7-4a25-9137-93f17de554b3",
        "cursor": {
          "ref": "31d566cd-772b-48c5-89b6-e8a605c91824",
          "length": 244,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "d1a90b5a-4c68-494b-bcf6-b0b2161ad39c"
        },
        "item": {
          "id": "592f22b3-4da7-4a25-9137-93f17de554b3",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "e8ec733b-ce0a-4351-b7b5-84986fd6469f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "31bee0ab-4a04-454c-9018-09d914d80ffd",
        "cursor": {
          "ref": "8689af67-9b0e-4773-bf1b-22d1b4414f3c",
          "length": 244,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "d1bc5274-e571-4364-9cb6-7272c672cf21"
        },
        "item": {
          "id": "31bee0ab-4a04-454c-9018-09d914d80ffd",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "be0aa4c9-9f78-4252-b0e3-b7e77f332132",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "836ed6b5-0444-42d4-9f75-dbaf45c888b7",
        "cursor": {
          "ref": "b7c13068-9869-42a8-9205-e01eda178458",
          "length": 244,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "e30c8707-b1e0-4073-aa7c-90a63c954264"
        },
        "item": {
          "id": "836ed6b5-0444-42d4-9f75-dbaf45c888b7",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "0f43abc6-f6d5-4b8b-8be4-e588cea783a3",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "cd331ea8-6547-4e04-b867-265eb95216e2",
        "cursor": {
          "ref": "ce2852e1-7903-4e2f-b25e-47d8993042f1",
          "length": 244,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "0b8f1e53-e26a-4509-b5f4-bf281c725c37"
        },
        "item": {
          "id": "cd331ea8-6547-4e04-b867-265eb95216e2",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "975c6197-511f-414c-a181-2ef4ab22f720",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "6fa813ca-8007-45c0-9070-24bbc0ec5fce",
        "cursor": {
          "ref": "946bd852-0a83-46f8-bd42-985d99a6af16",
          "length": 244,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "7527797e-0f96-4ca9-898c-a7de558419d9"
        },
        "item": {
          "id": "6fa813ca-8007-45c0-9070-24bbc0ec5fce",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "0fdd095b-8eb0-48f1-9ad0-822bd506de85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "b462031a-5098-4826-bad7-ff283d3a141b",
        "cursor": {
          "ref": "176fc1bf-14d2-461d-9143-70245abc235b",
          "length": 244,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "30ee2454-291e-4950-bd3c-3a534e09b496"
        },
        "item": {
          "id": "b462031a-5098-4826-bad7-ff283d3a141b",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "7d7503e7-8996-4670-8b59-98c0cd1c5f44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "ec28ce57-1c9b-480b-abe2-e2e1597e1d2f",
        "cursor": {
          "ref": "6609513c-9332-41cf-824c-1b0e46e88ccf",
          "length": 244,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "16b7a1a8-71cf-4763-bd49-f2d79d81cdce"
        },
        "item": {
          "id": "ec28ce57-1c9b-480b-abe2-e2e1597e1d2f",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "53fb9743-f10e-41be-b30f-a02f316ac11d",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "4f682fc9-4960-401c-8fa4-712c12dc3cef",
        "cursor": {
          "ref": "5eea4fb5-6868-445c-9a9a-75dfc7dc44b3",
          "length": 244,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "4ca49b98-4d13-48ab-8c82-6bc3cdfc2095"
        },
        "item": {
          "id": "4f682fc9-4960-401c-8fa4-712c12dc3cef",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "a65808f7-423c-4fcf-8ae3-15120198b02d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "52672861-1236-482e-90ca-ab302d827d7e",
        "cursor": {
          "ref": "4554a6c6-d135-4d5b-9bb4-9547795b6e11",
          "length": 244,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "3d5d59ec-7573-425b-ae15-ea25ff382707"
        },
        "item": {
          "id": "52672861-1236-482e-90ca-ab302d827d7e",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "2b020d10-3a0c-4144-bd82-189aa347e448",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "618388fb-c740-4b48-8fc9-37301b8787e0",
        "cursor": {
          "ref": "45d463fb-5c87-4c28-b892-6c370f74f506",
          "length": 244,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "27b9f92d-c568-4368-93bc-914e3e0cd2fa"
        },
        "item": {
          "id": "618388fb-c740-4b48-8fc9-37301b8787e0",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "e41ed0b7-755d-4e70-81a4-3334f432d136",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "a910b5d3-70af-47ea-8a93-1030799ca0f5",
        "cursor": {
          "ref": "a0d46dfc-c89d-4824-bb9c-173356af11a8",
          "length": 244,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "f3ca9205-bb92-48ef-a21a-c20c4fbc7f93"
        },
        "item": {
          "id": "a910b5d3-70af-47ea-8a93-1030799ca0f5",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "5a6c5359-6592-425e-805e-20c2b8def06f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "0b958c22-e6d9-4d78-9009-01c1f47c5cdf",
        "cursor": {
          "ref": "dc961c55-1259-40f4-937c-8211cc1632df",
          "length": 244,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "136db6be-e4ee-49b0-8c32-c4896827adef"
        },
        "item": {
          "id": "0b958c22-e6d9-4d78-9009-01c1f47c5cdf",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "84e38a18-fb6a-4b63-b933-8514f414838c",
          "status": "OK",
          "code": 200,
          "responseTime": 51,
          "responseSize": 94
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "a8957ee5-0b27-4866-a26f-b4f50718b13d",
        "cursor": {
          "ref": "1c7a0083-e121-47e5-9bb7-08e860808628",
          "length": 244,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "494df731-e33f-478d-9dca-5565cd68967c"
        },
        "item": {
          "id": "a8957ee5-0b27-4866-a26f-b4f50718b13d",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "6d4927e5-7e53-4ccb-926f-94c95853a9c9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "4cd83241-9e9f-40c7-877b-91b9d9e65e04",
        "cursor": {
          "ref": "a9625d94-485d-4215-8e37-b6b8150d5017",
          "length": 244,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "5a89ec32-d213-4bed-857e-7da2f678645a"
        },
        "item": {
          "id": "4cd83241-9e9f-40c7-877b-91b9d9e65e04",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "11a11cf9-1f8e-4dc9-9c13-d6c970cce54d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "79a302af-24eb-4975-b998-cbdb08247da9",
        "cursor": {
          "ref": "e07ccc9f-3f72-416a-8fe4-3e30cb7ed10b",
          "length": 244,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "599d27d5-91c5-4597-a1de-641d9a993aff"
        },
        "item": {
          "id": "79a302af-24eb-4975-b998-cbdb08247da9",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "8c553547-6b01-4f43-9214-0059a6a9caf7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "c34111b0-690c-44df-ad2c-c7512d2f6024",
        "cursor": {
          "ref": "8bcd30ff-30b9-41b2-b582-0e0d6fb67e13",
          "length": 244,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "e5df6c22-1d57-4bab-8ec1-b4a6cfa810d4"
        },
        "item": {
          "id": "c34111b0-690c-44df-ad2c-c7512d2f6024",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "6c1bcbb6-5ad7-4fc9-9343-08271546b1af",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "10a50fe9-c85c-4046-8eb1-8dc928482103",
        "cursor": {
          "ref": "deaaa3a3-f241-4634-b5e6-a3ee7174175e",
          "length": 244,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "5988b95f-5417-4523-89cb-02effadd6c6a"
        },
        "item": {
          "id": "10a50fe9-c85c-4046-8eb1-8dc928482103",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "42232fb1-16b5-4041-aa0a-15501f5fb03c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "b2560373-3358-40ae-9913-78293320a448",
        "cursor": {
          "ref": "eff94448-9876-42e0-905a-86193951f601",
          "length": 244,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "7cfa16d9-4832-4b00-a27e-be7149268114"
        },
        "item": {
          "id": "b2560373-3358-40ae-9913-78293320a448",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "c7f12eb0-f7d7-4bce-b00e-467a85d72b6d",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "2b05b8b0-fc58-4fb8-9270-e1ffab6c27a0",
        "cursor": {
          "ref": "edc3aa71-f63a-4088-a159-cecc0daafc12",
          "length": 244,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "310ba48b-b176-4d35-8700-d0cc7143d8b1"
        },
        "item": {
          "id": "2b05b8b0-fc58-4fb8-9270-e1ffab6c27a0",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "bf5702d5-3eb9-417a-a114-c5a094dcc7dc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "7ba8648a-746c-489a-8ce0-9cdc2dff38e3",
        "cursor": {
          "ref": "4fb39ee7-9db5-4d32-9209-a36aff830b81",
          "length": 244,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "5ee2486e-fee4-4cf4-86c4-53fbddd889f5"
        },
        "item": {
          "id": "7ba8648a-746c-489a-8ce0-9cdc2dff38e3",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "01b25be8-0454-4c41-8ef3-28155b0ff49f",
          "status": "OK",
          "code": 200,
          "responseTime": 50,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "96f6eee7-5c4a-4268-8549-67639329c314",
        "cursor": {
          "ref": "ca4ebf99-05d5-4044-909a-3b2839ab626c",
          "length": 244,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "093cec9b-83db-4c1e-857f-cc3dc37e90ff"
        },
        "item": {
          "id": "96f6eee7-5c4a-4268-8549-67639329c314",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "765b6260-cace-4d8a-b271-ee35397bba1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "05dd96d8-9771-44a2-beff-f599b02ffe35",
        "cursor": {
          "ref": "997e70b6-4ca9-4c83-8fef-450dc67679e9",
          "length": 244,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "ef72637c-4657-4976-8d77-7c3ac2061fdd"
        },
        "item": {
          "id": "05dd96d8-9771-44a2-beff-f599b02ffe35",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "4b772e40-acfa-4c0e-be9b-cb6d8c4d17bd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "c38f7f60-2316-4cf9-bd6a-3abd349fb95f",
        "cursor": {
          "ref": "ab4d48dc-a6be-4473-8b15-077ece56a95a",
          "length": 244,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "9c8032c4-0e0a-46ec-bb88-8c6b07b6f6b5"
        },
        "item": {
          "id": "c38f7f60-2316-4cf9-bd6a-3abd349fb95f",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "2102d64a-fdce-477e-b705-41f7f64b9b1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 128
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "8ae674e4-7d2e-4b75-818f-4a209f5fe58d",
        "cursor": {
          "ref": "0c7e3892-89bd-4a89-b031-064572ba17f3",
          "length": 244,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "e75fb7ba-8027-4ee1-bb47-9c6b124cee7a"
        },
        "item": {
          "id": "8ae674e4-7d2e-4b75-818f-4a209f5fe58d",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "79f0d1de-4f8b-48d8-9a25-f1c6f8fcc5fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 128
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "ece19c66-aa55-4e40-82d7-36751eb915c1",
        "cursor": {
          "ref": "813b4316-bc85-4f5b-a4ad-84648ac9bbeb",
          "length": 244,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "1fa9abac-4ab7-40e5-a1f2-453e23704ab9"
        },
        "item": {
          "id": "ece19c66-aa55-4e40-82d7-36751eb915c1",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "089c3ff5-f62c-4261-b6ee-f953e72c8594",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "576b27f6-bbfc-48bd-9413-a60d8140cdc4",
        "cursor": {
          "ref": "27020a13-df26-4dd5-bcbc-4d825ddcc419",
          "length": 244,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "3d3cfab0-5729-4a75-84d7-eb398d06f176"
        },
        "item": {
          "id": "576b27f6-bbfc-48bd-9413-a60d8140cdc4",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "230f6670-94b6-4b13-a75e-23f2ceab0394",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 128
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "4c36ae38-1ff3-496d-8918-b08b17f740f6",
        "cursor": {
          "ref": "a2503c8b-71f3-4198-a194-b1598154c504",
          "length": 244,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "8bdc9ae2-b5f3-4fbd-ae30-2a68c5017e54"
        },
        "item": {
          "id": "4c36ae38-1ff3-496d-8918-b08b17f740f6",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "acdfe02f-8ce7-4df8-9ab0-85be6a4ae9b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 552
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "2ac71f42-5615-4dcc-bb4f-7848420e27b1",
        "cursor": {
          "ref": "04341338-e7ae-4d9d-a81b-b6ad25cd7595",
          "length": 244,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "9436d388-7f78-46c7-aae2-37419c59691e"
        },
        "item": {
          "id": "2ac71f42-5615-4dcc-bb4f-7848420e27b1",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "86bd55b1-3d7f-4b23-89a0-f4ae72de773e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 498
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "e43d270a-edae-455e-9b9a-d34cb15a0f49",
        "cursor": {
          "ref": "2e41dd60-f1c4-413a-8eed-effb1ed54e52",
          "length": 244,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "4e7dd5ae-6941-4642-ac39-8a1610cde116"
        },
        "item": {
          "id": "e43d270a-edae-455e-9b9a-d34cb15a0f49",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "28bb7799-0f91-450d-a2f9-756e0a4ff2cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 498
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "23f34ea6-1a22-42cd-bcc3-6d1cb2b8fbdc",
        "cursor": {
          "ref": "fcea3250-2523-4ac1-9c96-d1118536ae4a",
          "length": 244,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "ffc851fc-5c47-40ce-9ad6-e1ca8060b081"
        },
        "item": {
          "id": "23f34ea6-1a22-42cd-bcc3-6d1cb2b8fbdc",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "d51025cd-48d3-4b92-a37a-d7caa9332118",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 498
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "8e65a909-8a74-4f9d-9b39-9b2f89e8be38",
        "cursor": {
          "ref": "cca4933b-451c-4f28-bbac-761669bbaa4a",
          "length": 244,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "66611c6c-29f9-4a8c-9c4d-5bc760e1a632"
        },
        "item": {
          "id": "8e65a909-8a74-4f9d-9b39-9b2f89e8be38",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "64a6ce85-1f37-450c-91e8-64f5f96b8ae3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 552
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "1ac2465a-5b39-42df-b5b6-c0781438474d",
        "cursor": {
          "ref": "07ee8333-1e58-44a5-a8ec-1bc25531def3",
          "length": 244,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "0e26af87-968b-43bc-ac3a-2746d696bd1c"
        },
        "item": {
          "id": "1ac2465a-5b39-42df-b5b6-c0781438474d",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "6d833e1e-5f75-44ff-b348-9858159e9aa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 498
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "421bbf2a-51b0-4157-b746-a0380f43e00a",
        "cursor": {
          "ref": "8ea8dda1-10c5-48e8-824d-1365fea0abbf",
          "length": 244,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "186bb482-9e1b-4492-8dfd-2c9e998fc0a0"
        },
        "item": {
          "id": "421bbf2a-51b0-4157-b746-a0380f43e00a",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "6c67b705-a4d3-4656-bbcd-66d036e02ad3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 498
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "190d5cb5-ac93-41db-a55d-de1ef7ad080c",
        "cursor": {
          "ref": "c02ea104-865e-4dc4-9137-b146fea6c4f5",
          "length": 244,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "db0c627e-9844-4460-85fb-904625f3e5b0"
        },
        "item": {
          "id": "190d5cb5-ac93-41db-a55d-de1ef7ad080c",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "755eb418-50f6-42da-95c5-b9b24ab209ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "b0714cee-378a-456f-b545-198be9f10d4b",
        "cursor": {
          "ref": "5e1b5780-6f5e-48be-b651-8b9c2cfe1ec8",
          "length": 244,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "74ffa1a6-911d-4950-a1fd-a2d937d8cdd9"
        },
        "item": {
          "id": "b0714cee-378a-456f-b545-198be9f10d4b",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "1a4101e0-8681-4bf7-925f-22b870204321",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "cf22d594-6dac-4bab-86e9-9273d3c808c5",
        "cursor": {
          "ref": "cd0fa5cc-7478-4065-a12d-0dff4ae5bcc0",
          "length": 244,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "fff6f0b2-a0c0-44ee-8318-e917140b601c"
        },
        "item": {
          "id": "cf22d594-6dac-4bab-86e9-9273d3c808c5",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "3f8e8cc3-77d6-412f-ae5c-0f0f12322cc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "1940e27a-57b6-4f30-8ffa-ce9c0fd66f82",
        "cursor": {
          "ref": "ddb5e5ec-bc68-4215-b54f-7a1f4a2f7aa6",
          "length": 244,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "d040e31a-4324-4938-8480-bbf6360e4145"
        },
        "item": {
          "id": "1940e27a-57b6-4f30-8ffa-ce9c0fd66f82",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "bf20e41a-fced-4d04-a345-412e43af496e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "12e56008-61f2-46d7-8059-6b1d2d4a33d6",
        "cursor": {
          "ref": "848ab248-8b90-43d5-b768-ff0829961d68",
          "length": 244,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "4d7d36d4-03ab-42a4-8391-3c0f84e1a4c2"
        },
        "item": {
          "id": "12e56008-61f2-46d7-8059-6b1d2d4a33d6",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "2c6e0b78-dca5-437b-82d2-dbc1a388f255",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "54a88c7d-b164-403b-ba4f-d28fa85e3ca3",
        "cursor": {
          "ref": "f32b7c4c-8249-4493-8585-755ffff489f9",
          "length": 244,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "f8fa633c-0438-4d70-90fd-01205e9613c8"
        },
        "item": {
          "id": "54a88c7d-b164-403b-ba4f-d28fa85e3ca3",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "0c618014-8c29-445c-b647-7f76aef97af7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "70ab5591-702d-4a7e-998a-59e16365dbb8",
        "cursor": {
          "ref": "1cdc9819-11ec-47a1-82f8-721ca2eb4ab6",
          "length": 244,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "a9f3ab0d-7529-454f-8d23-a4599da0dc63"
        },
        "item": {
          "id": "70ab5591-702d-4a7e-998a-59e16365dbb8",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "e3a750e4-86b4-418b-a7cc-de4e9942edfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "c8f7edb4-43d5-4a34-86a3-368948957d1b",
        "cursor": {
          "ref": "b7eef714-fa1c-4a4c-bf5e-e5aadd834daf",
          "length": 244,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "11f0d8c3-d3d0-44c8-87a5-89ba115741ee"
        },
        "item": {
          "id": "c8f7edb4-43d5-4a34-86a3-368948957d1b",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "6026ed89-9f06-4520-9045-914d3aada587",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "4308531c-6295-4813-bef9-d175cb9bb7f3",
        "cursor": {
          "ref": "52927cbb-ee84-44f9-9f3e-f6e0db535c44",
          "length": 244,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "a041fb10-20d4-47ac-aa72-cab6fa7d5066"
        },
        "item": {
          "id": "4308531c-6295-4813-bef9-d175cb9bb7f3",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "eede8b1b-5b8f-4d7e-9ff8-e73903e19232",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "169fce9e-812e-41a8-a6b7-a7887ab05516",
        "cursor": {
          "ref": "b9138e38-e92b-484a-adb8-ea626213529f",
          "length": 244,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "8bb7719c-a51e-490a-b71a-2ac50d87e395"
        },
        "item": {
          "id": "169fce9e-812e-41a8-a6b7-a7887ab05516",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "0353c162-d746-4d1c-acd3-a46bc7ffc48b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "10571a19-90db-41cf-b79b-cab0c9e4d63e",
        "cursor": {
          "ref": "4d1e4218-b0ed-4c91-a586-dac717ffc5f0",
          "length": 244,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "d3071452-2a5e-4d6e-a7e2-d6ff68cd4532"
        },
        "item": {
          "id": "10571a19-90db-41cf-b79b-cab0c9e4d63e",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "29cf8605-1fd3-460e-b243-d93c88d44fa9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "6b1c36ac-1dc9-4566-8bef-a38611da30c8",
        "cursor": {
          "ref": "deb9d89d-34d1-4d6f-8fbb-386aad71620f",
          "length": 244,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "7f347399-94ed-4e5f-bd3e-f0f77a7d23e1"
        },
        "item": {
          "id": "6b1c36ac-1dc9-4566-8bef-a38611da30c8",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "9d391b25-7788-40ce-af1e-86166656b0d8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 50,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "df3a4d03-03d7-474b-a34e-60e777018be9",
        "cursor": {
          "ref": "e3725721-b733-403d-ab5a-8891db1341f7",
          "length": 244,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "9633922a-8f2c-4d96-8f77-709b1be9f180"
        },
        "item": {
          "id": "df3a4d03-03d7-474b-a34e-60e777018be9",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "353d77e5-0dfe-4be2-a10b-21b0b3cba8c7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 49,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "a4853e67-1483-4634-b7ac-b63b5baaf6df",
        "cursor": {
          "ref": "b95846aa-06d2-4303-a03b-0ecfe3eb997a",
          "length": 244,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "9edb91c2-07e2-4872-9d61-66d3699b7b50"
        },
        "item": {
          "id": "a4853e67-1483-4634-b7ac-b63b5baaf6df",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "cfd2b5b8-3c0a-4a21-9183-16a545c52d81",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "685f234d-3582-4d50-8aae-df4135ce94c8",
        "cursor": {
          "ref": "cb3bdb89-522d-44f5-8d66-0f39bcf31b2e",
          "length": 244,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "dd23a2c7-455f-4763-9c1b-09e37bb4564b"
        },
        "item": {
          "id": "685f234d-3582-4d50-8aae-df4135ce94c8",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "23e0568b-f326-4647-96ea-92dfe3885e03",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "e2079450-b5f1-4cec-8dac-ec727ce42989",
        "cursor": {
          "ref": "f6694273-051e-458b-b912-73ea3f5c4c40",
          "length": 244,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "e1466631-9d03-4bf6-af77-0617523af256"
        },
        "item": {
          "id": "e2079450-b5f1-4cec-8dac-ec727ce42989",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "d5957ad3-9c0a-4b3e-af6b-4396a955353f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "f39d7dbd-860f-4e8d-b785-df80b0791f48",
        "cursor": {
          "ref": "d46c6671-1ee9-42e3-9141-3b32f449a783",
          "length": 244,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "467d5b7c-4f08-44d2-8907-ca2da023984c"
        },
        "item": {
          "id": "f39d7dbd-860f-4e8d-b785-df80b0791f48",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "858841f1-722f-4f13-9659-deff09261445",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "a9a3dd15-27d8-4c44-a315-a7c549c716c4",
        "cursor": {
          "ref": "8a6d6737-ebbb-4898-b71d-63c9f24338c7",
          "length": 244,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "faad051b-9375-4c3c-bd70-782b6df48441"
        },
        "item": {
          "id": "a9a3dd15-27d8-4c44-a315-a7c549c716c4",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "29738378-5683-4f36-98d0-a11fd168049a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "7db74c9f-58a1-4dc2-ada8-34d768afdfc8",
        "cursor": {
          "ref": "bdc163a2-d125-4278-966a-0150cfdd2514",
          "length": 244,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "90c08889-4a3f-4ca1-99c8-2058163d1917"
        },
        "item": {
          "id": "7db74c9f-58a1-4dc2-ada8-34d768afdfc8",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "005cb6f1-c8c6-409c-a877-d16b979cb339",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "d475647d-0b6d-4ea8-8124-13ea537e5831",
        "cursor": {
          "ref": "fbe47d71-b300-4e1b-ae85-7384702fcbcb",
          "length": 244,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "efbf0323-0956-451a-bfce-f3ccf480697c"
        },
        "item": {
          "id": "d475647d-0b6d-4ea8-8124-13ea537e5831",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "4eb106c3-126e-4e58-94ea-e1000bc8f491",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "6eef0c62-ba57-4e40-9a35-14524f2b9aa0",
        "cursor": {
          "ref": "1cf7a19b-ada3-494e-b447-0ad1aae4b80b",
          "length": 244,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "f6811783-ad3e-438d-9ca3-448db4473814"
        },
        "item": {
          "id": "6eef0c62-ba57-4e40-9a35-14524f2b9aa0",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "7b5d4fe9-fbac-4cb4-8933-ce986132ea71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string, data.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "a3a43752-8cda-498c-afa6-707fbae92ebb",
        "cursor": {
          "ref": "9bae7d79-c9f5-4f0e-9cf1-bd8c19100a91",
          "length": 244,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "fb3296a6-e857-40d4-ba40-bbf193ba5462"
        },
        "item": {
          "id": "a3a43752-8cda-498c-afa6-707fbae92ebb",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "19ab83fd-7dad-4842-8141-1c9749d3477b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "87672136-35ea-4607-a9a4-313ea19075a2",
        "cursor": {
          "ref": "4c56b59f-0fb6-4a6f-9907-4e12a8fdbd46",
          "length": 244,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "597d0d44-e600-4dd6-91fa-1965d43b11e3"
        },
        "item": {
          "id": "87672136-35ea-4607-a9a4-313ea19075a2",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "fa63ffe7-8577-4cbd-9e68-1e7550bab4da",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 64,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:239)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:239)"
            }
          }
        ]
      },
      {
        "id": "12169272-278b-4d44-8dd3-4f50636c0ea7",
        "cursor": {
          "ref": "c1229f5e-c09b-4785-ae1a-e298759e7404",
          "length": 244,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "2865ca23-3ca8-4bf6-9c75-c36bf1e33121"
        },
        "item": {
          "id": "12169272-278b-4d44-8dd3-4f50636c0ea7",
          "name": "credentials_verify"
        },
        "response": {
          "id": "6bd8256c-76ec-4726-821a-da27b774d385",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:240)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:240)"
            }
          }
        ]
      },
      {
        "id": "c4ce9e8f-e228-4eda-ad90-fe114a5c4a6f",
        "cursor": {
          "ref": "9e875314-1c6d-4bfd-8618-ca30bc92d722",
          "length": 244,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "474491c7-da2a-4c7e-a02f-5d5156a7eba1"
        },
        "item": {
          "id": "c4ce9e8f-e228-4eda-ad90-fe114a5c4a6f",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "3439978e-5559-4439-a75f-a40fa67afe61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:241)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:241)"
            }
          }
        ]
      },
      {
        "id": "1770547e-ee25-4bd0-9b97-ae80555ef9b6",
        "cursor": {
          "ref": "bcffc089-a506-4398-9cc3-36c5ebf3eec3",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "c4659cea-52f9-4574-987d-9e842e34d17b"
        },
        "item": {
          "id": "1770547e-ee25-4bd0-9b97-ae80555ef9b6",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3e6980e9-8200-48dc-b058-4751e56bad9b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "1770547e-ee25-4bd0-9b97-ae80555ef9b6",
        "cursor": {
          "ref": "bcffc089-a506-4398-9cc3-36c5ebf3eec3",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "c4659cea-52f9-4574-987d-9e842e34d17b"
        },
        "item": {
          "id": "1770547e-ee25-4bd0-9b97-ae80555ef9b6",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "3e6980e9-8200-48dc-b058-4751e56bad9b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "abaa7eca-6567-44a7-8dff-44c4e41986df",
        "cursor": {
          "ref": "ea2e613f-49e4-49ee-859e-59d04a23c10a",
          "length": 244,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "51aef041-d952-42b9-925e-27f7e37b6f48"
        },
        "item": {
          "id": "abaa7eca-6567-44a7-8dff-44c4e41986df",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "fd79e501-8225-4349-b493-8df39394afb9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "8d93a44e-26e1-4313-b661-c70f03b8dc48",
        "cursor": {
          "ref": "02e76219-6519-41bd-a6dc-bb3bdca8f9df",
          "length": 244,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "0f88d830-8cc9-43b6-98c2-bfdd44f6e692"
        },
        "item": {
          "id": "8d93a44e-26e1-4313-b661-c70f03b8dc48",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "4e732f30-ac55-41cc-ba9d-e6d55390e072",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 44,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      }
    ]
  }
}