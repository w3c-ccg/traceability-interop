{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "f2654eda-ce12-45d1-979c-66dc547825fe",
        "name": "Clear Cache",
        "item": [
          {
            "id": "bc94d534-95aa-4739-8c2c-76213173fd1c",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "51cec23e-46ef-48b5-8c70-6eef374913ec",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4a8e8c7d-0775-46a9-8167-da078c067da8"
                }
              }
            ]
          },
          {
            "id": "bf89098c-21cb-4f42-a0f4-d35f325a6fec",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "466607bd-3506-4d0d-929f-72b976e50660",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3ca7b573-9dea-4141-a06c-02afd4d5aba3"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "fa9711c0-a3b6-418b-ab79-252c47dc4a3e",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "9a05c7d0-2607-4eba-8387-79d7cc000f43",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a661e51d-61d0-433e-b445-73a6194fdd7c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5462eacd-0096-40d9-a555-98303300ac8c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "82ebd158-c5de-4398-8253-b382ff917e4c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bae41bcc-162e-4e87-a0fb-a7468fe83baf",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9d04595a-160f-43df-9e19-775d7ec062c1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "465cf8c2-3a59-4cb4-a47c-7bee0abb2e6e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "552003fa-f437-48f3-9131-c0da95f499b9"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "110cb530-d78f-4005-99e5-65b8216dd1ff",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "f1a17e25-d838-442e-836e-c5f111356dbf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "06c9eb6a-6a3d-4ded-8665-2124cc659091",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1be97cdd-7256-4aa3-b55c-6662603a6b08"
            }
          }
        ]
      },
      {
        "id": "f44ab6b2-e823-4815-8133-4b51d712eb83",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "d1ec687b-23d9-4a8d-9a46-fb86129b5bba",
            "name": "Negative Testing",
            "item": [
              {
                "id": "df1d198e-7414-4edb-8ff2-c557a72ff167",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8330321d-d52d-4579-ae6c-40d02433c48b",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a925d30-bff9-4761-8beb-48f024435db6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4b1e9b47-8932-43f7-840b-cea209df6852"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79aaeaa6-b3bf-42aa-b653-76e537c32157",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd77be0e-2867-4e83-88d2-8eea6afadc14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e94366a1-a75e-4179-923a-20466f626d39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da74c6d1-6000-453b-b5b4-9d3f8b12263e",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "459ae884-5ffb-4761-9c97-8f14929f3a37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "881c9bbc-625c-4cc7-852b-2774ce13668f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "430acf9d-12aa-415f-842f-f87af6c1a6fe",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "30123ae8-a61c-44fc-844d-530e6c0f24a3",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c6afe20-fdbc-44fa-bf59-4e03630648bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a897a6f4-7c12-4312-ab11-fb09a430e82d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7954e014-13b5-44a4-830b-53dde2648583",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02ccb442-77e6-492e-81c3-0a5e5c532a80"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1949519e-ca46-436d-b8be-9210a694a87a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0e20d57b-b7c9-4bc8-adfa-87190e4d83af",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3ece2622-878b-4683-9f80-a3eb14ad7623",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f101194b-c6fa-46bd-a01d-353275762e9a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f18e2ca6-ea3d-4606-82f0-b2df7100e911",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "fe5cbc84-782a-46cf-b827-4287e494edbf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ce7a866a-d133-47ac-8bed-97e7a2a1c0ae",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "85711f7c-9dd3-4316-a02c-eaa6ea06fd22"
            }
          }
        ]
      },
      {
        "id": "3163d7e3-0847-4307-a671-de8a28a4e8a0",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "5cede6d3-8f22-4f91-b1c9-53f2fad1223a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ef4f7c6d-8ecb-4768-bb67-6d45aedff32f",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "55468206-4a07-42c1-acca-72ab075fa52b",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac699682-5255-499d-94f1-b227a649076c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bed6adbc-d941-4456-9e99-9e36d85ede6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9142f333-5a69-4ec1-a5ed-fb4946b29527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "351be632-05a3-43bf-b712-4d5a5a423816"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af94a46d-b1cf-437f-8478-be5b79272dd2",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce2ddc66-2c70-4495-87a9-b600e795eaf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d8a80cd-e820-4afc-894c-453cae7ff38c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "445878c8-afb8-4e63-9e19-e768ffadad5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7d96f281-b8be-4844-8380-913a65933504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46c4cec6-df99-44f2-bca9-f6903b0c612b",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c93ae46-a71b-43cb-b70d-bd2c13b9cafb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fdce70c-36db-428c-a295-f842271e4196"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87b413d3-8736-457a-bafb-69e6cf6e7331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "72cf7157-29a3-469a-b73c-7a652c67da02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fcd055e-e196-446c-9338-8412aed26adc",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82bb4eba-8cd4-45ed-8532-fd31672ab9b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f6c4476-7edf-4b48-affc-190f8c99895f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e36e3be-47c1-443d-a70c-1e7ad03aaa5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d39b7a9-61be-4ae4-bcd8-e5963d5df6fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7383f7ff-e4c2-4873-8fc2-fbc3472437bf",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b591546-17cc-4ef3-be65-5ad284235346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20b4c20b-02f4-4000-945b-2afb19455346"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "795c989d-7c67-4dcc-b830-71a6a870c5f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "135fe2d0-bf07-4b22-b539-623442cb8710"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9df0ed71-7e17-4186-bd96-8e63dbdc65cb",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a46baa6-6904-4da7-8de5-1c36da86c21c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1d1d368-dbe4-4252-99e4-3bb11db7be61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c42bae9-dfa8-4496-a8ea-84b2912a4d34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eb92f541-4468-45ad-a19d-71cdc46ff9c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01383901-ce7b-4a5b-af6e-d53ef944a6d5",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ae50ae9-c52b-402e-903c-eb397dcecd93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5b7f13f-1f45-436b-829c-b9f30e6ae10c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e9a5e69-bc97-43f0-8c3b-47fd5dc47bf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b925cf4a-7964-4cea-a65f-e361455b0e34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d08fb9e-f2c9-419d-ad01-a45083511993",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bf83b9d-c190-41b3-81f4-0a1ef97a4eaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b682ea9-9d6f-4478-bfb0-f87967af5ce8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b23cad7-6632-4b5f-aaea-e08cf2c1d9f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0bbfe8bc-4477-476a-a7af-c6c2988be389"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32870e92-5622-4e82-bec1-d9468b5fb4dd",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b118c6d0-bfa8-4f8d-9df3-0a2d61539715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a202212b-6323-43c0-874b-1c7308aab305"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9cdbf7b-b5c3-446e-b2d5-e2411accf720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "680a7f74-e5d7-4c05-9a10-c19e0e46cc5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "679b8b94-0e36-4b62-a4b0-8de7b30347b9",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01d0dbb2-d8c4-492e-857f-e11094099919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6396605-4048-4b45-898f-68c77bd58ee8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e2d5b4a-2cf6-4625-a09a-9e2032ee9d8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "419e17a2-2b4d-4362-afac-6500b9f18f64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9541c962-d474-4c21-98ac-07e31eca37d2",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05eab8cd-7091-4b86-aec0-d14201a9b53f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9d711cc-3ec0-4122-a9fe-0c3169836905"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23033456-b123-483e-a7f0-723255976648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a6a011ae-532d-43b7-97aa-b6eb5618fe9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26e5b7f1-08b8-4157-afca-f7e9d362bc75",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa154fe2-37f5-425a-9f4b-2b1656fc02de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44f1a37d-0228-48f2-ad9a-b5b2868a0298"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ca5fcd8-b388-4c4b-bf37-3a9118633eba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "51ffec88-b637-446a-a651-42d1c6cc0ff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edd963a4-ef65-40e5-851f-f0e71bc21b02",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e916e5b-7e41-448b-8af3-651d59d17b0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ebe954f-5c8d-431f-b6c8-3854bafa3877"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4232134-e2e6-4b41-8612-186abbcdf7a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "482294c5-6b0f-4aa5-ad70-bb2b29f00ca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "019cd06f-a1c2-4dfe-b3bd-cef993a98309",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f4ffbca-d4e8-4ba2-804b-d677c4e6d653",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4299782-ef88-4694-a65a-4c926a5d6a2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e6775fb-1d8a-49af-8442-b11bfc5a9da3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7d3c1556-22ee-4772-a208-5c6b3d1b64b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ac01d1e-4b14-4c7c-b8bd-fb23c719877c",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8de59c7d-d880-424f-9664-204d471d9245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "290ebfa6-4c67-4107-b65e-aecfaacb94d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21e350d8-a3d1-4177-8848-6f7d033a80ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6a618ebe-8edc-4e59-ba41-06dda29986d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbca44e5-8bb5-4218-9e86-c6bfca0d6e44",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0a31856-23bc-4477-9c98-08392a4c679c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fa20b55-a072-4a80-99a6-13b26644f38b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9692a39-f0b0-40e8-a1fd-a344ae725d9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4a0eaea3-967c-45d7-bec9-e2e29ae4d4ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "682d5db4-6865-4708-96cd-b2f069b0a6a8",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e7c9263-6d19-4b32-87ba-d3d03036bcd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82bc80f6-a8c1-4f43-9e01-507a7ecd9eae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b4e7cfa-9ece-465b-a2b2-a9d7d7bd9bdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f4a7c029-196c-4fb2-98c5-eaa38eddb7fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d713032-dc72-49ee-b7ef-e8863ba9fe90",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb24d0a3-e20b-441d-b9b5-3d68e3761444",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4831bc95-4dfc-42a6-b4c3-7b54df88aaac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ede76e7-0629-4f9d-8ba3-ab5690596c89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f1af2ef-fb9b-419e-a560-b23622023bfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed3bdea7-ba70-4521-b35e-5de0f5b25406",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b2f7617-3cf0-4869-820c-cae766ca584e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb63d196-5180-4e2f-933d-89bf6a50c03e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc68f53f-e62f-4654-a59b-67928f919a60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0614cc41-5be4-43c2-8d5f-041c98a8262d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dddb6eb-246f-4ad6-8595-7f9d8aa25a4c",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c85abc3c-8519-4b77-a022-c949a026d28c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0019dae7-868b-4aaa-a4cd-199d48ace571"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd183be8-3324-428f-86c6-26fcdc5664da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2b569de-7654-4f4e-9519-939ae9b5f36f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "620198a9-7449-4df2-ab5f-77c9d5d42cc7",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61ddefa5-121c-4708-bb1c-722a2e6e08cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15a8acfe-b181-48e4-9d9f-3b58821b0d31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2804bf67-3963-45c5-8035-f7e43f1d6000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8390e5c-e798-4226-a684-12d0761d239c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d2f8dcc-49cd-4967-baa7-8b57a7680d4f",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43ce656d-c109-486d-a0d0-698c22df5a10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a642531-27b5-4209-9d4a-e37023c6ac92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ad90404-7bb1-4bf2-a246-cdfc24d37330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1a619278-0271-47d5-a1a9-5b8c6ff9b540"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d954cae8-f36d-493a-9653-20d07b1e9074",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b44c6195-83ff-4b82-a225-0c48ee60f64d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c0178a4-de4c-400f-b2d1-b4da13a30a36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51c9de70-0bca-4eac-937a-8fd6440431a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "835c1dc3-69a8-4e47-a2d7-15f2280c0ca5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a3c9fc2-0fa9-4bd1-919f-fb0b214f4ffb",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42e18fbf-2f05-4fc5-b9f2-0a49fe4814e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "487834fd-ddd0-4671-991c-c3384b1f9e05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74d13b99-9271-4a5d-86ac-585b8260cabe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d93c054-181a-4263-af41-3cb4da01e2b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4c1dc3c-5052-4d64-acd4-ad25268d508c",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1d54d33-810e-4a39-a79e-09cc95724164",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b1416bb-f576-4368-b5e9-8ea019f8497b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5763d157-d2b7-4603-b1ea-465f4b41b99b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f5425b1-152f-409c-838c-9059c05afff4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df721ea0-406c-431b-9e2e-1f78f46f709f",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e737abb0-ecb8-490b-a052-418732702c40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecf90452-f436-4e89-b874-a31c910968ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37773ddc-46fd-4606-9b20-e01b0c0cbb56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "23963ac0-4451-43d1-80a7-139cbc889d98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67527a9a-923d-4438-9661-ff04707c4ce9",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36091c70-6196-4266-9e50-5a7b2e2e85bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbb8272a-f804-4101-8c0c-d6635d0dc5fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8623705-a7ff-4bc7-bd16-e0b20b566456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "85944079-2b8f-4c6d-ad25-187228883165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc241ae6-b987-4abe-b1e5-c5b7d428020a",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0986089-60f2-4526-83bc-8af79066e4f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58e1dca4-41e7-47ea-8dc2-25fb7fd10e23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76af8305-5f3d-4c4a-a533-c7567589f3e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "51828d42-dd52-42cf-8e39-2fd192e2b9a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a56b0f10-8705-4adf-aca8-722edf4308b6",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf1ae156-6a00-42fe-a6a6-8f944d123461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5636f1bb-a2fe-4a67-97a7-db37948fa64f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d20e77a2-ffb0-490a-bb2d-3a4a3652827f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1cebb69-9138-4e59-b3c4-f9e55fb81ee9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d340f8cb-0ddf-4d36-8801-6db8b5075d1f",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a616ed6d-9286-4668-ad4f-900a71cc8cef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f8b4d7a-a4cf-4591-aea8-d2e2a3e1e8ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c4303a3-2df6-4530-8788-82e61233349c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "faa5f7b8-53bd-4093-acbf-9829d80c8a2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d03bdd00-b7bf-4779-92b4-0354ad073a1a",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c613aa75-aa92-4a19-ada1-c25890525a61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81d8e488-8215-4b0b-ac49-bab7c552413f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30c49e83-3c34-46a7-a491-c43d58a8e3d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc58ad32-487e-47a3-b904-884f02a1ef76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b4a26fe-8bd9-4032-8c38-27906065ebdf",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9a5b18a-fe86-48df-9682-c3e8bb88bf4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31b64519-e4c2-4212-b383-481e6b47afd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1525f634-a8dc-485c-aeb6-8da9750402ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "326e1ccc-cc04-4543-a559-1c59b6c39fbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a8ce4b2-7cc6-4e8d-9b13-422e8bbb1787",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d99def22-7c9c-45b6-94e0-e0373a60dec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1114cc6-4cfc-44dd-95ac-6da7696168a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f0efe38-b949-45f6-a21e-a64ea356834f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "86282133-eef5-4a68-aea0-97d0c191632a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0a80d95-9474-4467-aab7-fb19c2375eed",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c14760c5-4d5c-432f-8343-23788869f4ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd1858ee-b92e-4ca4-a6dd-ef2f44708e45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ab3049d-316f-4d73-943b-a128c70f0455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2896ed9-273b-471a-a9ef-bfa1c9fc1ddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeb86169-2360-4742-ac52-9e99922aa961",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "406be77a-8e80-4e86-8cec-aec3c8c62d5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e506d95-5125-4e20-9a5a-5bf8c220d6ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e8771a9-4468-45c4-a097-aa597887b255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "ecaf68f9-2ee6-46ca-b405-b921b57bdb78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72da12c8-fbc4-4eb5-97df-21c3d813d282",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e32bb6f9-8b63-4d31-842a-d37400124671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2895448d-da9a-4484-ba41-475be5b0cb06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "053d721f-d34f-4ad6-87e0-700c2276eb2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9677230a-c439-439e-89ec-17602d774bc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eac8579f-181d-4e0f-bdcb-be0736ab1837",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f803ef87-4bb9-4ffb-a9a9-2f2783922c9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad8b8c4b-6e99-4af2-9c2c-cacb904d59fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "459b385a-0ba8-458e-be4a-19c93b328d9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c482da15-38a1-43b7-8743-7bd125720ce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6f5e303-3f7c-4577-8c6e-8739c878f20b",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9d5b9fd-d461-43bc-9ef0-136661efd40a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b5c5003-a9b2-4943-8ab2-11e37acda525"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6613e60-e61d-4271-8c7a-9e9a4533a933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb4fab1b-b8e6-487c-b638-9569d143da9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79710a0f-9143-4bfe-8fb2-93cd3e91e29a",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97c6ad4f-93a4-4ad1-b0ea-89c4892bf8c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14d9cd00-4f28-4741-b5ff-85d3014204d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a581783d-d63b-4c92-951e-6d02aa8c39d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f46e86cc-9f6e-4098-a0fe-7b6489e3d454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc13a986-0e97-4739-b179-345961d1112a",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed8b46be-b128-485c-88c9-59bf592a16d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3f4b775-4725-49c5-9a3f-32bc8026688a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16709b1d-1711-49bd-b6cb-61313946bc01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3db2a57e-3d0c-44b7-a204-cc818074b7cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92424b7c-1717-4b93-b81e-5341a1df832a",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ae4c705-3e2d-434a-be66-39dab3f2316d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8343ea96-b582-4d84-8263-d2ff441fca18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f1d27f9-cbf8-4f67-b12f-cd266f514605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6987749d-4180-407c-80bf-48b3d8f64e4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ce8b7b8-00bf-47dc-838c-a6612340dd30",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b52cbfa-c3f7-455a-bde2-ea0f32109426",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7885b750-a2bd-49d8-9e1a-871e0428a6d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "069addbf-2067-4a4b-b901-dbbb1cedcaf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "0bfa6913-81a0-4b42-bcb4-56efe50db5c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "394775fd-5ee3-4b4b-87db-f9cc4fa0de78",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c491ed8-0fee-48d4-9e4d-11bd9d7d4338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecf017cc-4377-4500-8f01-d7a0379ce0fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb0c621a-04fb-4201-86a0-7694ecafbc69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f2ae5e4c-6a40-4938-a62e-5000b9176b89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c0ff1c2-020d-43b4-8f0e-664675391586",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54390022-bae4-4faa-818b-060651cb4b44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1145619d-dc6f-492e-bb8a-0043de9d65dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d9f966a-9db5-4e79-8714-b64e01d7c1d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "1cf749aa-4a24-462d-a599-1271624f5cdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f430f9c-3422-4e8a-a3e1-a565912f9a1a",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efce95b7-64ba-44fc-95fa-5d0c8e37e469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f0bac28-d04b-43b1-a4db-764d127a54d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eee18e9d-7265-425b-a1e3-fa9b900a5886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "aae5f0fd-10b3-4db3-87da-1b6aefc218a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70402f7b-a032-40b7-a50b-982a63e682f5",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d236a653-262d-49ff-8336-ac914e4eb275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59276b28-2d14-4732-862f-229acda4cab9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fca73a7d-d993-4552-a2c8-9eb31a059709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f419e4a-e6d3-433d-9f7b-77a92b7c1e37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09c41602-ea93-40a9-9afe-87b36785da0f",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5449c6e-c852-4a9f-a991-d99bbc0b54c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a181d5ca-1c0f-4078-b6ea-3f21f829a37c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80937068-e349-49b7-8323-55d559351251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2915c78c-7b83-4c18-8c5b-1244dd09a5a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d830f05-d60c-4dfc-9579-09632222a3f2",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d64445c-249c-4388-b9ac-0a91d3d1c1f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab25b7c7-0574-4c2d-8485-9f7e1cef860f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a51d1dce-fe70-4f5a-8903-f6b79544d77c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6de5067a-8fdc-483d-aff6-9ed22f1ea3b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7f851c5-90ee-4a3c-8d59-25eca23f0e29",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f689ad0-40dc-4d85-b28f-9ef62a71ce69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dbcb70c-4d57-4fb6-99b3-184c4a3bdf09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcdeba36-6b66-4c07-bf85-a1210ad2f38f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "74526686-fb27-42df-82f7-7a8066e48e82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14aeb113-05aa-4beb-a6f4-d02634811260",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de3a6bed-7796-422a-8c7c-a6e66a0a1f77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f081c0f-b60a-4aab-8c92-d5fb839bb2b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d030cd08-f35a-46d5-b8f4-f3b3922cc30e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4673c82e-4942-4746-97d6-45abc90f025d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c3905c8-a8c6-4df3-8946-785ce5876451",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dd26748-b013-4f25-b114-057b67243625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5371cd53-69ea-4e39-8e24-a787dd5fba72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2779f72d-43c0-49b8-8917-5f8bff3e1cea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff9f2bdd-5d95-462e-a553-1adbcd34901b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84245be8-2bc0-49e7-bc1f-e552b9cdc714",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7049fab9-9b73-4f00-b402-deaafbf3f5a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47a9f5be-4cb8-435c-bef0-969a80e7d3ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a22c3732-f0f5-4cee-b897-1bbef16bcd98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d3d0eab-34e5-4a16-bf31-3d7189f8446b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "101c955d-5333-4103-9584-e7c6a33ba3a4",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9580f08-8893-4110-9801-a1247c0b0dfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0146bde0-c3f7-4c4e-b7b9-57e0de0b0f3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b387b3b1-4e75-4888-819d-685a82e4cd54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "55ffa38d-2238-4f07-bb5e-76d4bb8c46aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c72cb574-21e6-484f-afa3-851a83462bcc",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12917a0c-fef8-44e0-9f91-69b61ebc1b4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2454a5f-c36a-46ae-8d13-ce2514b1b210"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e33a03f-b494-4450-9b37-d248fe1f6939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "30133622-0717-4861-b0ac-655144dcdc79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97f8f8de-af06-412b-a43e-cb834f166a29",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b1cc0b5-f154-4c5d-baad-968646c60a5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b83cf97-8f16-4dfb-9085-80a57567dea3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "028a6efa-1450-4b49-9e0e-75375ce5cc6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ed65f01-e1ce-4dec-81be-449f7b24495c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77a2672a-401d-4c24-b046-c56d187d2184",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da0d6535-a7fd-4d92-9f6b-3373597108ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bdfcd47-2fdf-4aa1-8e0f-ee3e2aa64fc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49633e23-fa38-412a-943d-3612560b6e1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5d59d3e3-6d7d-409b-823a-626f0166531f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67ca7d7e-c0e9-4ea1-a010-29f5249ffa1c",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "098d9612-824b-4daf-8885-81c577e99939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4c901ae-8c1c-4ec8-a505-e4a906c7b058"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b41e2507-1d56-4064-84cc-cdbc6d727ed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ddd8074-0c0d-400f-9eb8-562bf2cb86bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bec76fa-81e4-4612-ba79-6759594429bf",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72473457-9283-478f-9099-899580cc0813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab7e32b2-1829-431a-a0bf-457eaaf1e5fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16e049fa-5b6f-4b42-9e47-6d88f39a6c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b052be8c-36af-4b42-a739-87eb091438a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "243383e2-1c24-4a98-9197-bba6ec79a10b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b20dabc-5bb8-489f-b6d9-16f0382e0200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bd3c1fe-7f6b-41c0-9323-cd7fc472e694"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9da2331d-f7ab-4c41-8a74-713c30295565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "dcfc08c5-ddd9-4ae5-9c07-93b8a0d2ea9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d953742f-4cfb-4534-8594-de32dca36ca4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71732ac4-647b-4dfe-a213-cf68533bec49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43ae9ab6-1a6f-4ea1-848e-f52f49162640"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f379d0b5-e576-4f0f-a9c3-72092f321d0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b60efb20-65a4-402f-95a7-80f6cb914177"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0427f354-750e-4d6d-8228-1f6f90fd56e4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97fe7413-0678-495d-8190-18d1c892354f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "943aa3f5-aad8-45b1-b160-851445e89ac8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c586d24-8930-4eaa-963a-e720beea264a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9dd9d9b3-31af-4b51-8235-4174e013636a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ef5431c-1eb0-45cb-8e1f-d03515810416",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "224345d6-378a-4bf0-870d-420cfa668e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38b99105-dfa8-449c-af0a-4abf8c2fac89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7252fe4e-289b-475f-ba58-f71dee57373a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "e04a0a08-9f9a-4d06-abb9-b3f265c4dcd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d66e0e50-7a37-4fdc-acf5-fb7e25a30152",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fc02eda-7382-4a6e-8fd9-6d73aeede8c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d359a35-1bbc-4a58-8a66-5651e22ec518"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56b4873a-a06d-4b31-9c2c-2ea163310780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d3495f3-c78d-4ba2-8878-469fa798c5c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bcff761-a903-410d-8000-d769432e8e93",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24efecb5-dd47-40be-a643-7893c40da318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d047e68-4945-4cbe-9cda-e084f27c4ca4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b4c1a2a-cae8-459a-baa2-0ea6f56ea210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e86ab74e-39af-46c5-b73e-fe2b880b8c69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cef43445-3fb6-4fbb-9d78-ce5edb2485d4",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "984afaf2-3979-49b1-b6ee-a56680577c45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26734851-5646-4005-bfaa-5424e2db9c9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a695ac12-de46-42b2-916c-886b3b16f543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f7be273-e8e2-4116-98ec-85e871823186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a439f4a2-2ef2-4606-94ad-e0c4c8fdd6cb",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "448b766f-b745-4c43-8d6c-a52c57d62d0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "241f3986-6e09-4a51-bd9c-1d74dfb7004b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3c62dc8-accb-4815-b397-e124b161890f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fb3d905-8326-4d25-af91-ce3ba247c523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aadd3140-dcd8-44d2-a52c-897afe772429",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2549875e-d076-4ce5-849a-703fa614bd06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbd98509-b375-445c-89ef-00ac00e45631"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2efd173-2eb6-4e1f-abc5-dd2794a96f36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "852f751e-7526-4180-9f06-0b3a1a760292"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a761b36-9254-4c91-895a-2cc62d898c67",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f1222ed-e68f-407d-89bc-cee92939c992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba783367-f371-4b6e-844d-b37d7c85cdd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "043834ef-d973-4923-888c-7c3e256ebe17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7bd1a8a6-3d33-409b-9724-5c56e8e2a22c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99d86cc8-441d-4fda-a019-d035e978bd32",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9637060e-ecd2-46fe-b3c1-e7f851f0f6ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d9fb16e-eb07-4082-9142-2dc0c4ad0328"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e19d60c-a30d-4c57-b325-cc5c18acafe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2072a92c-cfa2-4619-8b9d-628469d532a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39dddabb-cfae-4476-8ec9-53637f9274d2",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1def75c-44ac-453d-83ef-d684d8b177d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f94aae8-ce76-4668-865c-cbb165fd88d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00b66c2b-0082-4562-99ff-f82d6c60b357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8db17760-1faa-44a9-a20e-93d68c8d9d12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f12f844-d7c3-4bb8-bfab-f25227d5c97b",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "540e36d5-5317-421c-bb7a-97fbc449b8fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bf8d608-e4b4-4f43-8899-2bc1be9a8a6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f9aa949-b053-4706-9655-8506fe4c8102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cef142dc-1242-467b-aa38-988d3c020f95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6507f803-6032-4028-b4bb-21107154cc88",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b874f2c2-b02a-46e3-8b94-906c02844b1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9db94f9d-0bb6-43af-ba9b-83eeea74f193"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "839c6a15-70bf-4033-bc70-fcc6ac657500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e9bf27d-3a70-406c-8896-371295bd1dd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1217b27-622e-4e6f-ba24-0a8dc353d6fe",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66973d86-1e36-48d6-b088-2511dd4e05c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "611a0f84-e1e0-4945-bb42-16f816966cfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96f14edd-c733-4cf2-acfc-e546ac9f0d29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f499e40e-7dd5-42f5-b20e-72672877bb7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4e9135b-54e0-4c04-8b35-e2c6df2dd145",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c050ce2b-2a5b-4d18-91f2-89dfbbb8b8f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a18a87a-1928-4c89-9562-2285e7a7e3ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c4d38a8-f7c7-4b24-aac2-6d7c37881ea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "37f58a74-da41-4a3f-8473-d78206a25dc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9062adf7-461b-411b-810c-ab94d38ae12d",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "664f823b-d29b-4ae0-b5a1-de265326e50c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f33c226-593c-4c0d-82b8-9de553e6d4e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aeada42-b33a-4e26-9244-1c86de49e79b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6bb2fbf-c5d3-4eac-9b69-5dba793d0980"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fa189df-c8f0-423b-9caa-b73542276bc5",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdada849-9eab-40c8-9c7f-5b677a5913f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90dc74b7-715c-4c79-ae3d-4412b262e477"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f8911ea-6aab-4031-bf03-824ca6f832b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cebe531f-3b8e-4eb2-9465-17dd6ca3128b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef1da43b-0b1e-4a7b-9c08-d403cbe7183f",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9b67873-0c6f-4f84-8437-d48017954e3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9f3ac44-13e9-4574-afe0-2abc2cc8381e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fb922f2-86d5-4ec7-b47e-8d0a0afb1418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6022462c-4062-466a-8bc0-292260f2c8e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e564daf6-0535-4d6b-a382-78adac1ee365",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "674a14db-157c-4937-8f68-660833c65554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edc74077-f03a-4334-a196-ce80e6025219"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adecc7c3-d582-47b0-b67e-f353f3f42c90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bffee38a-9d14-4079-a7e7-5021a0078a1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f65f5a5e-6b63-4b19-9c67-371b2ed3e901",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9e1f9a2-f7f3-4e01-a4dd-03f2da67888a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9616ef03-e7fd-4c05-9e77-f90d742610b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "134ca0c2-664f-4f56-a823-766809b81fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "71c9799f-8260-427d-8b96-a09b3f0e6fa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c5f079-b1e5-4da1-b212-8f2103ee9a0d",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb496849-937a-4f9a-9f72-71ad79fadd61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e48a879-1b54-4b38-8e51-eff36ad2fe87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59614d07-dbfd-4d54-8eff-c4844deb3cb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4e5faebf-f47d-42ee-9c14-b0d7f0612155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea3d2f11-2bd3-4509-b375-96e8190283d7",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8d4f3f7-3fc8-4d9a-a58f-715ebbe42b7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83702bf3-4692-4a2c-ad7a-8e2fd58e41b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a84d9ac-fcf1-4cb4-bb65-a7a9834965a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc87b0f9-c2b7-4b0b-bb69-ffc1b1125986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "962ad4a9-20d1-4199-b3a0-9886802eac25",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3efc65d-b3de-48d4-a152-47608aea6555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca896eaf-b4c0-474e-b7a2-efdf1b0a936c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "933ab4df-87bb-4a86-b4da-0bf1eeeea317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "991980f6-301b-4c0d-8f2f-5d56d3a02e6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c6da510-a36c-46ea-b2e2-e1ba85b7b95b",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4268e1bb-d3fd-4aad-a8d5-46b529c74d19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "304591b1-8de4-4146-a9b8-f507f19c9037"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "184f849d-25b1-454d-86b9-58f3181cecf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "66acfe67-87d7-40b7-b7db-a4cac2c7f89f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4751078b-1fde-498f-b61c-dec44471c294",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ad11063-b717-431d-a453-560ed50b7a71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fae9cd88-9c97-4187-b262-a7813c00ad7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f2b9866-a45b-43e8-9852-fc9b9f72c39b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "54a7d87a-9789-4e8e-b029-832b4c9be279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "569116dd-01d3-4028-84f5-accfce587727",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "868d8182-0a2f-4e2e-9ca7-bafb661f6991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92f1ea92-7977-401c-873b-913f49f8551c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2e50b1a-251e-4652-88af-5e6cf37f1b54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a335f17b-e562-4318-b045-c641da33d1ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f815837-dd4b-4d2c-885d-e4733cfc5dcf",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88e0a189-6701-4204-9c8f-eff40a4a3102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5243ad3a-99c3-4303-ae96-a52f027fe3dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1be87087-376c-4579-813e-9c1a8f5639fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6095956-92f4-4296-adfc-c4174b1fffaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "191524c3-9d78-4dab-9473-091ff9978ec3",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73af38f9-8262-4519-9db4-c90efaf468de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4a4cd79-1fcf-4a6d-a88c-5cf4082d686c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23d8ba91-8f84-4921-90bc-7d779b687945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "48c1d4a2-c4d6-40e1-9228-5a5141c20a82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a9bace2-1afd-4e34-ab68-9cdbdb47d74b",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58c1d8fc-2b9d-441a-bf61-4b32ea908f41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fac2ef3a-4432-4c99-b514-06621cdc4b56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92065ef4-20d7-490c-8733-754c13b265be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "edc57428-017a-40d3-8102-d1f47811d718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3fec34c-f700-43cb-bc8b-9e99abd792ce",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca4d715a-7284-4670-a00a-3ef3eeb35516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "996a2a47-13cd-4f8f-8fb3-0c0febc067f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cfa8171-c3e0-46ad-ae06-a29245e00c2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c98a015-9305-4eca-bf57-9a11752ab03e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b67a1db-7597-4ef8-8248-4facc5bc45d8",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5294c987-5ed0-4058-8f22-fa3e882373a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22dc7b37-bd82-43c4-8a4b-7aba577d4992"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5a8fe27-7c72-469e-a126-31167b23ca9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "aac91264-4921-4ac4-b033-4b5caebf3451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22de42dd-e882-4908-a617-829b9d4eaffd",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c49587e-ee40-4a33-8f66-6d0bcab884e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b008406-679a-4f82-99f9-6331b20adfbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9aab33d-e251-40e3-a698-66994d776b7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ce00fcff-3e1d-40b6-8560-c97c6c5ac969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84e903ae-b24d-4adf-8741-c1e3e6ff4966",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aa9ec3e-db24-4eff-88e6-3ec5ea6520df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "ddf3600f-e0d0-48bb-8823-91acecb553c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c9888c7-c090-46ed-b04a-97fecf79857f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "fd97c88c-f607-44c1-a5ce-20e66cedb621"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c4f912f8-eec2-4aaf-9ef7-488b22ea6709",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fc0da66c-1b37-47d8-96ba-b5296319a41c",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aaf81a3-9bd8-414b-8d66-e82742f70239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "65f58b31-89ec-4472-bf5d-d1356b847da1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a55cd695-642d-4289-81ba-01e5032fb1b4",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c9158c5b-65d8-4932-8efa-a67c5c417133"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "51f758f5-7d6d-4dd3-b239-adb41f0bbb3e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "50c300da-b37a-4ca0-bf63-9f226692f03d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d0b031a4-504a-4d54-aa58-ba3b5076bd21",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "30ac6d6f-b7a5-404f-92cc-0df2e13bb86e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c79d3368-5574-441d-8dc7-b74033e4d3fa",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5dc12367-2393-455b-bf60-5680d0913e2f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "292710d6-c75e-4be2-b034-2acd5ef37689",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "863aa333-1378-4211-92a8-fa12705af51b"
                }
              }
            ]
          },
          {
            "id": "94aaf911-b4df-4add-91d4-986bc643e6aa",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b7353391-d649-4a35-841b-1efafa1ed343",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b5f1c4a-5ffa-44ac-bd25-743369254393",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9ab2dc96-83df-406c-9d23-17270108c46c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "356521e1-5ad4-4c76-adaf-6554fc199717",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "32f8af6d-450d-4163-bb51-7aaa431a52fe"
                    }
                  }
                ]
              },
              {
                "id": "04cc6c19-de15-4ef0-84ba-e8dd60e23f84",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ca5b4438-8278-48e6-8b61-a70169555432",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8660fd85-f0e4-4b57-9fae-a7c3f65e4ab5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6e8e24af-49ba-40c8-ac5c-5ccd71647160",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9fb68f34-2a5d-4283-88b6-a877ba3dd674"
                    }
                  }
                ]
              },
              {
                "id": "18da8465-cd49-48c4-b0c8-50e1522530ca",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6ae94e50-3355-433f-b2a6-35331284cae1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8f63a03a-4a82-4dc9-96df-3865b1f1adf2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bb9362f9-707a-41c9-90dd-9bd5fe0aa322",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f42f4fb0-9d24-4c74-8164-c39faf4e97d0"
                    }
                  }
                ]
              },
              {
                "id": "af20ea7b-3240-4f78-9669-a5786d927f95",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9243d78d-eb22-4684-9f63-002d18c92db5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "123341b5-e41a-4b1d-ace7-a9ee4641f3cb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a56a7660-5f8b-4625-88a3-0b6eff8a4664",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "f8d62bcf-9623-4b2b-bbac-fc4fa74bbfda"
                    }
                  }
                ]
              },
              {
                "id": "15000a60-634b-441c-a285-1fd171dd1a7a",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0bcc44d5-d7cf-4880-b3b7-a75e0eb9f6fd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c84dc399-59a2-4eb9-9a5d-18161a4543c8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ddf585dd-afac-4f2f-807a-e9d130127c50",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "1602a19b-38b2-4baf-a735-b0bbcd8f20e5"
                    }
                  }
                ]
              },
              {
                "id": "d82eedcd-c02c-4592-aac1-d1abb36793e0",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "08b33902-62dc-480e-8d2c-49a1a7855d7f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "89e7c3d4-cc1d-438d-aaea-07cdd50bbb22"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "83bb3416-0381-4654-b7d6-6cb3dd9b296a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a703549e-6ebc-4bfb-ba85-e6ab3a257211"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c665d819-b041-403b-b2e3-9682817b9c3c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fb7eb354-d2d4-4da6-adc5-6d835a9a1723"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f02dd255-8da3-4f38-a96a-d12e60290ff7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5c43630f-b08d-4e78-af8a-e4e63fdfcb7d"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3eb76885-298a-4d22-a417-2d5a36fa6cf5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "0b74f3ec-d365-421c-aaa7-8086b084dd76"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "77153b43-63f3-4ae2-8d73-6f316748f6f2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a3e690e5-e381-4d67-ad6a-19bd5256274d"
            }
          }
        ]
      },
      {
        "id": "e444efb6-6115-4f91-8ca3-57ee23a5f74f",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "5e3a88e6-f7a1-4569-931a-76bece607782",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ffd7e19a-cd5e-4447-bd34-5cc284da3e30",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "26e1667f-872c-4926-88a4-06e39b1457d3",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e951e49-47e6-4885-9c92-1a5b8a240ace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74c30192-7552-411c-9bfb-0041d1cc3f30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc60e2c6-44fe-410d-973b-c46d9a5b5e5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "f13a1c8d-5e08-4f01-81d4-4401fdd496ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1481bfc1-154a-47d7-8ce1-5dbb8c3fb995",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d8944bc-db0f-4660-90d6-95cbbde8eb41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07ff0695-e69f-425c-a35c-89629689b9b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eeffdd5-2e57-47aa-9d5f-adb0704cd54d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dfc64a8e-fdf6-45d6-9efa-195b30159f36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f836fc36-8831-43c5-8844-6c26ab725e87",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b274687-f207-4f60-ad3d-519ca89c8a15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b68e50a-6b14-40ec-9d53-fb0aef4c945e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ad7361c-6d66-4c2b-9e42-52c66b7c3327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "46ea78b8-98de-4eb5-99b2-3e9f9f7f65dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "438aa352-c8d3-4b56-911b-3087be456a4b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74d83b93-55d7-4b6d-b8d5-c6bbf73fff57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f120622-df82-4fff-87b0-e49407547ebc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c602b4e-9aa3-4ff7-a74a-892c1681d054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1dd79ac4-36a0-43b2-80a7-04061f96e617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2d2107b-de6d-4c08-8518-be2bd4d47e84",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47e87608-317e-4202-a705-5d6ef5ce6c68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2a801b8-e088-47db-8686-e647be4e186b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b593580-e5b4-4184-9ad0-b03600c189c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbc118cd-92ef-419f-8ebb-afbf179179e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a113d17-2c0a-4acd-ac1f-d40b7cff79d7",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aabc3fb-21f9-4498-828c-8fd3a10004fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f8a9615-4c96-4ca3-9f8d-9c8e5c26bfef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69caab2d-41f4-486f-8ad8-198669868ab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "38c049f0-1e52-4771-8685-269d9721cc3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e92ddae3-205a-4c0d-944a-5d8101a4f576",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "572839a2-28fd-414b-8ddc-2c587aea4418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "646cd76f-8027-4790-a3d5-1463377b7c19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5ddd2bc-9b02-4ac8-a7ee-6dc41083aac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "de79276f-5d66-47a7-be3a-dc40a1dea5a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10c6e12c-0d7b-4c45-ae9a-b11a196ab995",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26ae1089-03e2-458b-8cdf-3eec7c2874db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42de81c9-a57a-483a-9a38-255423b2841b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffcc21cd-f9e0-461c-8354-ea5307f629aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ab151d7-942c-4651-a6aa-e515d0b21b13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53ef16ea-ed68-48fb-a76e-be5481b0139b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69e8b868-60d1-45bd-bf34-4876dc125282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e37bf6a-1c97-4e95-b125-4bb56c39f3db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2120f791-6c1d-4113-a5dd-f39d518ef727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b51def7-cbef-4570-bc02-1b0d7fab5332"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d229554-ee74-444d-a8e4-acd8558c41cc",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "288c6c2c-9632-4248-aa7e-604f1fa518b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afc978b6-5e85-4bf1-a404-46924ffa8c26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ce3e3f5-a3c1-4251-ad26-a8b9d6113d83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "559b809a-f197-4880-8719-bbdaa0a3e8b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27158dcc-e0f3-441d-a58f-46dbbe33c125",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da992b1b-db51-4ae3-8523-18afbb23bf30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53cbe20b-abf7-4f29-bb8a-4998501d5a16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86336b3a-b96b-46ed-99ce-4356d2b2268d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "b777ab7e-c7b0-4496-87cd-2643cacbf84e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d947bf4-bd79-4478-9916-4ece18b1476a",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa15f06a-2f63-4b4e-8923-b999cec4ebd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "971ef9b8-5b71-4180-a14f-39fac0470e51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb2cbeff-9638-4f16-a45e-e10538e8df94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6537f460-0f18-43da-ba38-eba37d4a318e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f1485c0-c77a-43b6-b2fd-3863a0949286",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c2a97f6-6eb8-4468-a8ed-44b509be9762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12d833ba-f7eb-4faf-822d-7e99ceeb7046"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47490a3c-5564-4ce4-8299-d249f0c83a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c4a9c70-ebc5-41da-9b87-6c5b2df103d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "279191e6-9314-41f4-b460-8bcce8f4585e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff3c80e6-549c-4df0-8fca-8330532e2f55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60224742-36b9-4ada-9bff-e1dd20b8cba9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc4a030b-b6c1-4379-8340-26f4cf6431d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "75343d4b-c198-4861-80f1-32d375baf298"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0af7508-a0be-46d7-86a5-6d57d4782993",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfb779fe-b725-4547-8b26-9d71a3bacb48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeca1485-eee2-4437-a03c-6e0dbb278de5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff87d956-fd60-47db-9316-cb746076c3fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae15db2e-4695-4723-bd36-1e688598aae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db202438-80c7-4119-9810-f423b62b1403",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b058342-67fc-490d-9d1b-ec70108816e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "172b5ef5-e917-403c-b4e2-5fddcf50e4d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77abaa9b-d8a3-40e1-bc3e-5b26d423a994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c3205f9-c12b-43f5-80b2-c1518c454b23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "243b6d7e-911d-4176-8b67-033ca1248e81",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e654722-02a0-499f-be37-fc4f6515ff02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d8c4de0-1edb-47ae-a25b-3c384d043e79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c79ab1e2-36fa-45e7-a31d-5b07d5e18e39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b23e05ba-367d-4045-a66e-624a74844643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef92413a-c1c0-4cdb-ae7f-18fd9f81e03d",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7913926b-2451-4b3c-b9f1-b258aee367ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95469b8e-4190-4049-85bd-1d7d1e4e7b75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4571e10a-45b6-4d46-a646-7451f0adeee8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "350dbc7c-4819-49dc-9016-6d33e2e4378d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e53257d1-2157-4bc6-8690-f0283c5a4baa",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e7b6f52-161b-4f67-88a2-593d51665126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc3c2094-69cf-4bfa-a421-80344feb0755"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24223ce8-8eef-4035-be75-6cb5695bb54b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a4c87e0-7585-4529-8d99-bac6c5758d5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c008264-4a4a-493b-b4b3-8b8e55713835",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf0cb857-274f-4fc7-ad78-23de5653280a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c532c837-7729-4794-a421-f6b4d5b18004"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9114f9d1-b943-4e06-aca6-6c9e555161cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "74fa63ee-9dfc-48a6-a63f-762f32a16118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91b7d82c-289e-473c-90b6-a6c80015712c",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "230191a9-97e5-4086-a793-aa9be11c2df2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1a9f1a4-c62d-4c95-9bb8-e6865d34bf9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdc7d8d0-07ef-423c-8aca-26d9948ee4cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "32fd1c5a-cd24-4cbf-89c0-d3b3d74c4dc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbed71b3-dc65-4448-bd5f-fd736182b560",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4cd4bd4-d7a9-4ddd-bc15-a2a27ff08274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efa2449d-07f5-4358-885e-01e21f6204f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a13f0d9b-e9c0-4442-9b18-3555baa20063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e27e84a9-8978-4f14-887a-bad05a786a8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2951617e-229a-4935-9066-b735482d9d42",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5399831-2f6f-447c-b118-e28514dcd177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9040a18b-090f-4fb0-80ae-80183f5aa01b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ea9c9a7-3995-44eb-9bbc-8a72962c1c13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "34b0e917-2193-4827-af1b-12a077277dd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2429b1c-4307-4ec9-ab2c-66231b1c500d",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e69aac3f-2697-4a4e-ba8a-b324a1ffd22f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b56cdc1-091e-408a-a6f0-dc8ac047a2d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b06fa96b-9d39-43e1-81c1-f0c7e9d183e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "936c60b4-ff41-4901-86c4-492fca440184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9652820-84d8-48a7-8c9a-dbabd85417bd",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9a58da3-0e88-4c3a-b649-bcf62a96d32e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "682d385d-262a-4fac-9753-de9d77d5a214"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9738ba86-ab76-49ab-b6fe-f4838b82ac85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "908b9722-8843-48c7-aec2-83b7558dd0d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b5e7050-216c-4846-929e-53c4dd1ecb3f",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "524768ef-65c2-4ec8-abbb-6d0d64679e66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a5a11f5-67f2-4ec6-baa6-fc9840a691fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37597e89-0859-4f2e-8b94-f6262661e00a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9dc00cad-2b42-4c28-9379-7f83a414582e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb3f3bc0-263d-4519-8dbd-261a97ac0e70",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "749de04d-d498-4506-85d1-454d94c5c6d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3370f832-8851-464c-95c6-e840801b625b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f055094-c5e8-4bbf-a4e4-0804fbd706f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c3594f0-4a4b-46e1-a572-5223247b7735"
                        }
                      }
                    ]
                  },
                  {
                    "id": "727e7e24-82e2-403b-b489-350edd3ee537",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a477e8f-f3ed-478c-bb19-e68e70d14bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b2af627-432b-4864-91b0-712339fc973f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb5b0163-a91d-4b60-bef4-a8009c52c817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53d3144c-181f-403f-8ff8-1abf7714bbd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82d8a713-c17d-4e17-8bc8-e64f78fa7608",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c0fad83-c37c-40f5-9f72-6cb465e44790",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81b0db4c-fe7f-4800-9e18-f1d8dd325e63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ece99531-983b-4e0b-84e4-d5d52a8c856b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "16586e5a-7ea4-4a3b-a8da-0eb1838ba467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58d16b0f-85d3-4d5e-97d5-744a03bf9464",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06a42705-90cb-488b-ab61-65708be01989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b01313c-d68c-4535-9dbf-c260df15c473"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70f5108d-f649-4f81-9766-9b6b0483ad01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "abd91ad0-5e8b-4759-974e-a799d1ec311c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4538b586-63bb-4523-b927-6f8e2d1f8250",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "612c4646-152d-4616-97a5-1d51435af8f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17f090b5-5eda-4146-8154-f550f189ff98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba7f000a-e9d7-4b1e-ba53-fa96da49ae99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "436c907c-c773-4a4b-8690-18023dde0ead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9485e391-3b6f-48bd-bb1b-6f8c85d93a0a",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b67e35c3-667c-4997-9502-8f09572548fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bab48def-897e-4ecb-922f-d0846ab8a459"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e852e12b-e199-4990-8910-44d5d55dd206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d07da4eb-8c27-483e-8156-74f072219609"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3dec9ac7-5283-4118-a82e-5b9f5a459061",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b8d2a101-8f0a-4fa3-ad26-56334fcb1e5a",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "199c9b0c-0219-4858-8653-38363b998e89",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e6bf21a5-c101-41bf-8680-337d77e244d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "183df0a6-4a25-47fd-9a36-c19812c415b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "572b700b-7d4e-4a46-acc2-51ee609c6acb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bae64098-14bc-4265-a949-7ff00238fb8e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d13f3f6e-ec00-41fd-bfe3-8090966d95da"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1e7b2542-8def-4784-9ef8-83ec5ab72e4d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a89d5096-a07b-4b78-8e31-c5dc920768b2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "95d4bdaf-4809-44a6-97fe-de6f9d6b9a2f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "eca36c6e-6688-4cbf-875f-4f80b4b97589"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e7bb7db5-1c7f-4ecd-983a-155a1126989b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "52ce16aa-6053-4d91-9c0b-402ab5dbdf74"
            }
          }
        ]
      },
      {
        "id": "415afb5e-16ae-4126-b56c-fa01ed8a7a26",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "8847acfc-ead2-472b-a648-a8c11bf546d3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fec85a06-b921-4792-92ad-36d00df378a2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8562c478-98fb-4bfc-8986-ea026271b244",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd5801d4-3c61-42e2-8505-e73e65f29e42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fe5a4d4-4303-4679-a106-aab46b10d774"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2803b502-1266-407c-918a-60a54c3ec06c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d45f792b-f90e-4ac4-993e-9931cdad5297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93883d9d-3ac4-4306-9ff1-686fc5745410",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb94dbbd-8c5e-4dba-a4fe-89f15b32afbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6680238d-7cdf-4c6a-948b-694c1da1b908"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1d7695c-6bbf-4c34-874d-4d1ccea54996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5681780e-95b1-4c0e-bf9a-dbb6acf309d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee65c3bb-69c4-4349-af9f-63ecfef1ee60",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce924943-aa88-41db-b560-fc83c9ac8d8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd25da63-9f28-4a0e-8684-c574807631ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c011a77-5ac7-4993-a746-fa865b238fe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "71ebed9e-fd43-4cd7-ab01-99f26312f02e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "581ed64c-7dd7-4cb8-b641-72494a8ca621",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e16f398d-ec9b-4ebe-81cf-bc93da3012b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "897c7ca7-8e7b-40e6-9df4-de9fe009dcdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eac3ff33-eeaf-490d-9216-2876a9e06183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b572b63-738c-4eb8-a91d-49a152d152ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d00e20a-263f-493b-b742-187d68561d4a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b524f8f-be18-4f11-aa34-6d9f07185e21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa0a4995-8e3b-4f1f-a931-39ef64cbb364"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97e6ab7b-9884-48d2-b7cb-259ce5543957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d5819f3-af6d-40f4-afa7-da5564db532a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f4412ff-aaf4-41bb-b6e1-e87ad6b8c359",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b99549a-2c9e-4458-8860-fd10386715bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d357c16a-ad0d-4f01-90a1-9d56fbd7895d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3fde226-6d9c-4290-baad-18cd76346baf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "706e828f-db73-473c-b7be-c8c655407c76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0eea311-48ff-4751-bd97-118312e0a0ce",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7e622ba-0908-413f-b280-3722ff4f6867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93889362-20d3-4243-8c65-a2f89e6c5b71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aec17b19-0c40-4eae-b66d-e98fdd66da28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ef01c69-d53e-4b28-8a1e-ff39e281ee63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41043904-3c01-48af-b906-ff675a3dc9bf",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9cc0327-5e6d-4df6-b6f1-07f4f686959f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2cf46c9-ca65-4831-9b2a-bd3a1a4b12df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ca68d80-b716-4e26-838f-35b60e75ad96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b64cba7-841a-4ce8-bce2-f90ab05005f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "396ef7c8-af23-4eed-8cf8-771a4d23ef7a",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0577bbbe-ee3a-4317-ae28-8bd9d206928f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b0ac9cd-91b8-4635-bc61-07bf4b9a2516"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3a8c031-964e-43eb-8d6e-60e3f7bdda71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ddc7ed08-5e41-4738-b24c-31279997d6eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94648dc4-7c24-46f5-816f-6b4f78c77db9",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb6cfce9-e104-4579-8b97-cf9f29b1fe3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32d09f06-7baf-4d94-9eed-8581cd83f64d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6343c05-3964-4f60-a4a9-5b3d7eba4876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4fde0bf-6a43-4a5d-aa60-45c54e0e2e56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdb7e7fa-cf47-49e0-9e07-02a62423bf69",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28f24f46-84c2-49ed-a7a0-1e41ecee3064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7209d039-87f4-436b-bf89-ebdb07c071a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c20d5065-0112-4b4f-aee2-ebc3f5b29291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "6edcf840-9890-4a1d-8c7a-34b277252911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06476068-df3f-4171-ad57-813621adde3a",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22cac27b-4d55-4de2-bec5-6ea7d68cd115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4217baec-9a8f-4a44-b5fc-28c07f73f8a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2b82134-916b-4a30-bd2f-4763538c6e29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b9b80680-bb66-4ca9-84b2-9002eaa8d78f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "522bba5e-74e2-4f2b-975f-d160d7bb0531",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7707e7b-2a45-4315-a48b-b45be3c31b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea5fd1fc-9060-4bf5-93a4-ac14a28c1da1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95889400-f779-4c45-9b8a-f87e4a311f4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "63c228cb-8a48-4820-98f1-39b9edf33e7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b877f90a-80ee-4499-9ba9-450d54192cb7",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3529e734-df27-40db-bed7-a4206617e7f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da95f517-d569-488b-81c4-9770671626ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53c57fed-d846-4223-b7c9-8402b6831995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "7858df9a-79cb-4bdc-8fe5-3e7aef6e49aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f839513-2a99-4d4e-af29-243020d61d37",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be245a02-e46c-43f6-90a9-22ccbdafb48f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80d466b9-e2a7-4d50-9b00-1a2c92184824"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a6bdfaa-1199-4acf-bcb9-a27bb580c346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "4965245c-63a8-43d1-b4b9-d237d5927eb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1117c82f-ac4f-432d-9ac8-876552646ad8",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b554956e-3df4-4b37-9084-1e9a6ddf1c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed348025-4150-43c7-bd8f-a1053c79b23c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56fcff77-8501-44e6-a4d4-b69fed8bd35b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "37d3b099-2441-47a4-9491-217c90d5bfba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81ecbc74-3e10-47e9-a57b-8c0125c3d181",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b102003c-fd0b-4ea4-b0d8-5920a8d5f416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8507e198-72bf-4c53-9014-21d588788fcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "301753d9-9dfb-4075-ad86-e1d57b5e3ffd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "fc6891c5-a825-417f-938a-9c7a85f2b218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51b725ec-ff7f-4349-b5a0-589fb17b31a7",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73bf25ab-976c-4be3-a443-6e9345488b1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d441ef3a-41f3-4883-abbb-6fd7d6276ad2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ba2b6a4-e0ab-4625-bf68-15f7d1ca21ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "22c1b92e-27b6-487f-b052-f932e8052cce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2d1ad78-dbc3-4320-a7fc-3feb7e006cff",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2917d51d-cd60-47c1-971a-cdb4a7e2dc70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fae92292-be1f-4cc3-a32a-2dc29f0ecf34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26d34b7b-b71c-4f5f-a34d-750c2d018623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2ebb6bb-45b0-4e5a-b970-b1f324b54e48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af0f2a6a-ce41-441e-af8a-0eaa3798e775",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaffcae5-3c5b-4ea4-a86f-295753c2b6bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f9d982b-980a-4bda-a401-b5eac34f4c9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2950385c-9c81-40f2-97a6-e210894c725f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a0e2454-ca83-4f9c-bc3e-af5acd5a3423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9495595-24f4-4ca9-97de-d285e575d6f1",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07ed7d23-20fe-49ce-84ac-f7ccf87b0b25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92d2ca59-f774-4610-8a81-9827a7d28bf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8a2081f-e820-45c7-aee7-9d0079146122",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e498eb4-415c-4b35-b3cc-aa94534d81c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cd5b412-2189-4620-b407-1603c9560f92",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d3dde70-d019-49fe-8a0b-f8c8f0e17871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e73591dd-c87f-4f7b-913a-12a2b71ef9f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6573a057-a9d2-4d50-90f3-8c318a5e9486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eef99de4-1adb-48f2-84ad-4693217cc936"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddf5a7aa-e2fa-498b-8c55-58d8eaf19e53",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba7f5ea0-a30f-44b0-87f0-d4d92b0c4054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03d17dc6-d7f8-4206-91ab-00e144de51ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf872725-64a8-40d5-aa20-1422b60faf64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "677a21d3-c00c-4a94-9b1c-90b8925875ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39d8c15c-4b54-4d1b-8712-87bf13210008",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc1ab2ee-2a23-48fe-aa02-cafe380916e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7121ea70-2385-490c-b164-c28891bfb66b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98aeeec8-a2f7-49b9-9e97-e732263ce79a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd2c6f52-6329-4bd5-8087-a73f4965ed36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b781eaf-7189-44ed-9bb3-d1389aad180d",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdc7a142-9bc5-4480-816c-ff07261809d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4636157-4c78-4172-8ed7-a7423a73d716"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6a846a6-caf0-434b-b8d0-3c290933395e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "116ef0f0-7d8a-4ac0-a832-8c9be8808445"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcaf08c7-1137-429f-b0bc-dc029521a102",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "896b4e1c-f1a0-48ad-95c8-b446f4053a9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bedf6507-28fc-4781-894e-70a9c8e382ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43911ea1-b1b7-4ad0-9f0c-a19ee5e5c2a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0dc9591d-bd7b-463f-aed2-5af08e1f2480"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbde77e4-42a4-4d1c-a3a1-52c961a9a231",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2743c78b-526e-4baf-a641-c9fac6f00896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09b60940-0835-48aa-a5f1-65b9e3bb274c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7153bfbe-02dd-4ebc-aff2-de89f1d9a470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6ec0a09-3799-4c5b-864f-a725768ee14f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf1b1519-87f0-4b1b-ad50-834841a48e1c",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "722cf57c-b256-4278-8544-f6fefa0b6c58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a866b59-8a0a-4407-ab3d-c561488e216e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76bb87c1-0eca-46cf-98f1-7649a7b2e34d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4f7c5a0-60e0-44f0-9a18-e49087075438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c07f4814-f2d0-4d27-939f-3c4878604cf7",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b79a221e-d0b3-4b08-8cf0-9ba7f4769ece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae39da9f-b333-4e0c-9bbb-4da16e9bc22b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bc89e6f-69ad-4a76-8686-bc0414ced84c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5eb076f1-3eb8-4748-ada5-464b3e87767d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2f3cb92-b246-45c9-84a4-e10345fdc368",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd118fc9-44b0-44dc-90b3-f637202dbe6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59bdf1fb-b2e8-4899-9f68-289f13c6097e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19512734-204c-434d-9780-87dd2ca673a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b9076ea-7c88-4d45-b4a5-f7d16f925198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4656e166-ad26-4f7e-94b0-5a781afe31c9",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b3b4a8f-3ba0-4f3c-80a4-e8e5c39da9d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eeabfb9c-b67c-4af1-b443-bd8f50ccd484"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a35bc30f-01af-42e1-929e-5c16345e4525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6396258-36aa-41dd-be80-9e3afb497698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "137e7e9c-d5a8-407b-833c-6d5a92f2ae6b",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3ff13bd-4894-4d17-ac3f-3ffe3acd63af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57ea7b84-8987-4e5b-804c-5bb07a7e5d6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b32172c0-acf1-4cd7-a061-619d99fe3906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "656538ad-e89f-47a3-bde1-3374475eb42e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8499758c-9d22-47be-b999-7123e086d2a8",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bf60a7c-c4a5-4261-8902-43398ca97380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb1f5671-00bf-42f3-89a1-7b2820d6f8db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4f71d9a-c0ec-487c-8b3c-9238867a0997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbf07cbd-b03f-427a-bafc-5debac04ce69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7453c3d-884c-4bcb-b225-3255ac826baa",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b19e88a2-5094-40dc-972c-db591c51953b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19cff13c-00f8-4459-8dd3-754a82ba2ec9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "078112f1-0d2d-41ab-93b9-29a7925d8310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ad53a8d-5904-44e9-a7ae-24048b469072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3517ed9c-30b9-4e1b-b2b7-c393d92ab9dd",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c4083bd-8df3-488e-b88f-095819d45973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "309fbea7-a24e-4a97-abf3-1d4946f5f7b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f6c03ec-2066-4bbf-aa06-aaee69937b22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d141028-1b35-434d-b643-72fb5e52d7fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b5cb60a-3493-4147-90e2-5c062a4525cf",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c486a1e-694c-4e9c-b379-15dcb47065f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "243afab4-da25-4c3f-8280-412c76ab5fc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7200318a-95b3-44b5-9d8e-266daae905ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1c38929-ba76-43e6-8203-58d3f20a359a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21b818aa-1caa-491f-88cb-bfae586d51c7",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b0dd0fe-d9e6-49f7-be28-60cd1e11b39f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e08aff2e-fdd0-4f99-b4a9-1f983d13b1a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddb781df-04f1-4532-baac-fc018876e71d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db876e5a-6aca-4996-a376-3afd8acdde01"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a4c9e8cc-f629-433d-a744-3821d4fe0dc9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f0371a32-a21a-4d83-95a2-170962acb185",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ff5fee4-b31d-4668-abdc-d6a62718871e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "47809abb-3532-488c-81ae-5156a30915d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a708147-3a39-4233-b38f-562dc9061150",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9b2e9d8d-1287-4425-933b-f552adb865a4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bdfb8bec-f93f-4065-969e-0e0860b54eab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3221d443-f163-454f-91ab-1e626a68a603"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bb44ed35-99c1-4a9c-8fb1-cc9c51b33f31",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "37c8c790-ae1b-4ad7-94c0-4f89770c1bc3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d99d7bdf-cfa2-4239-adc5-d0b038361340",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c39b3a49-5ff1-4416-bd3e-0a6d6714c38c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8dc7f7fa-e78a-4c6a-8152-abc8a69bc2fe",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b0cb9bbd-9db8-4a25-b739-a04e2249e354"
            }
          }
        ]
      },
      {
        "id": "e699ea5e-f70c-403d-8c16-4523f337e15b",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "7ed596d3-f9d7-43b7-bcd3-9a244d9ab47e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1004f041-d64b-4f48-927c-3d61c4f62005",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "52325964-26e0-49a0-837c-337db00b7075",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11e6c202-174f-4a08-a7d4-2db35dd04620",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78587363-2592-4b37-addd-e4cdfd1c5a82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3cb3525-4669-4b17-9326-fa7af525dbb1",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "698dad0e-5c64-4c74-ab5e-1f8511f9ee1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d20e7361-c467-4030-928c-eaa010701867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4f242c7-0aba-45c0-bb92-2a2cf0915439",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c79f56d9-4d4f-4f6b-ac41-010c140de44b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b9f1771-c90f-4601-8fb0-00363afce82a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d3517a0-6937-42fc-a641-6473518d00cd",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09ac2436-ddfe-438a-9834-b5b8f4ac6395",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81358cb4-e6c8-426e-b9f9-09f246e213fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08dcf252-d858-4f99-873b-ea5252c1fbd1",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fee82ca-8e8b-4032-b27a-b2ef74936205",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75a0e5ba-8413-4969-b423-cc4d4179862e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2ef381b-7558-4b3d-b953-00641de49794",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcbcbb6d-8078-46dc-a02e-765cb79836e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d970368-c870-4eb0-98d9-1aa97891078b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1fe9f19-be6b-4af7-9ad9-36f6b5210536",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94d2ad3b-63d4-436a-b67e-2d3f4953acd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "700aedfc-efc3-4404-9fa5-9f11d2d42748"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dcc6eb2-7b3f-4a26-8576-c2085b66bcd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80bcd357-19a9-4828-a6b5-cf9e1d8c990d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "829dd9ab-9ca8-4bd7-a1ab-9f3f6a6cb4a7",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddc474ee-6e23-4ff1-a14c-f6fe4f3dfed6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84c40920-cf57-4c6b-8946-44edb21777e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fef3f20-de73-4e82-bca3-225b611c5b14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f0d7882-b16b-402c-9db7-4bb14911f38e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c74475a6-b15f-4fb1-a786-7cf2e1544fb2",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c967aaa-643b-4b0d-a468-8caf2b0d759d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b29de228-14c6-46a6-a0bc-aabc49c2f1a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9e0f3c5-b762-4fd9-9153-755985de050b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35c37bc8-5f5d-4346-b724-8ccba4102094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f19d6e8d-231f-4cf6-94ff-d13d8c56716c",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ff4e0e3-25ff-48f6-8c7d-e823a8a247b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8e5ef81-09e4-4313-ace3-c656dde7c611"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da12be4f-1be7-4c8a-8838-96522ef87e32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39f3db02-3698-4ae4-822a-5c9aceb65052"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4df9fb1-1214-4d19-9ca8-391abe71e36a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89fd199e-e9d7-4ff5-8c83-93625cda6203",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74ac462a-27a4-44b2-9071-cb097f3bdad0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4adf3a0e-463d-465f-b468-d717df5b0127",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ae2df41-aa66-475c-9c18-eb82c83f0e6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09c06e72-3b33-4e44-9966-b83ab04f5718",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c63c30f-e3d9-4da6-b9ed-c545521cdc70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ba52f21-86fd-4290-9ee2-53331d8746e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4332528-06ad-4f6a-a3a1-c0df74ed0808",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d16b6b7-cab2-4d75-8c89-46b490d3e761"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f87146a1-95c6-4a54-b459-39798014a867",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9052f66-1898-4a47-a9ba-69cebcb39a5a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "684ca36c-0c50-4da2-935f-1f1182b63135"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b5c634-d2a0-4462-8976-bfe7de30f97f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03577c9a-7c51-4c7f-9cd4-b7dad1d30f8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2e41099-2055-4956-8b4b-3a1d1a5dfba7",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33e3d02c-b0b2-4794-b34e-a89b2f9bf723",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d94a4299-373c-455a-9106-71aae953830a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5154b4dd-714f-41f5-8d80-0056f3f256e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "617042cb-e078-4a80-8742-b07973285126"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac21b5d4-2fa1-4636-87a1-87cdf5a9b50c",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13636f4a-4635-45e3-9712-29530b25ff77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a12392d1-fc59-4ad5-be9f-d1255c1f368a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "097c0ec4-ffe1-4a52-ba9f-cb7a9c04c19f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "950d3009-6674-4d99-b53d-a155ffa2ef3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "641a994f-f32a-4c13-ba52-3e7a56fb3766",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cd260d0-ace6-41e8-8a61-18e6706f095a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6a3161b-18af-410e-af16-452797190aad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1dab754-9886-46bd-8732-f729c5401222",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d97dbaf-4742-49fa-a859-aa99b297d6ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d24be0e3-ccf2-4233-8c7e-bcc51f4f1157",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f3b472d-19d7-4fc6-90b8-35eac4c57dc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a483f96-9806-4068-8f52-632bdfa1ec04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f82d95ca-ee63-4d7f-add1-2b8718c976cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee9ef7d0-1a97-467c-8ee1-5fe8f3018143"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c94cd86-b215-4e7e-b09f-23c2ded43629",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be843809-113a-4dea-ae6f-dbe1f5c837c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec522f0a-341d-4ef7-bd12-4fa08e702aae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c188d16a-1201-43d3-88c6-7f04c5036477",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d675557a-ed75-4b30-a3a2-5cffbd140721"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d05471f9-1bf2-4711-a6f6-0787cd097a94",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d877e81a-af07-468a-840d-0689dfe38649",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40aaa005-a97e-4fdd-ba07-1abe8bc5ba57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fcb75bf-a50a-480e-ab2d-83378b8a0424",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49918e04-0948-4b8f-a3c8-bd92bab76a37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fc8f353-9f04-4a1f-8411-2cd069b05e4a",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0790456-9653-46b6-8ac4-f6bae4866345",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11b73d20-4775-43a2-b448-536a02ec83f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82d9dea6-b222-4b44-8e75-22e3de6a3c37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d784224-7203-456d-bac5-b21cdf11f385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c674eef-f93f-4e27-aa9b-f02d323bd065",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e633bf19-09e5-41fa-bdb0-cb4d7bc96c03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95ff4435-a534-42ff-addf-df526962002a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fb69d55-b68e-4625-84cb-21d1ca658643",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4e9f474-e267-471f-845b-09b3fd7f3814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3877392-b9ef-4dbf-994a-0064656f0d25",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5df7a13-b87f-42a5-9bcd-a2da090b9bf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d0cf468-4fe7-4728-b72d-b3153eb04dd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44ab9fcc-ef12-4712-aa07-5b2503b1b061",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "015feb11-464f-480f-92ca-5397c4107dc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c9ee9d1-4bc4-4e46-a715-d26ffee0610f",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96c47793-6e56-4659-93de-d9f2dbd21804",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd9b2bbc-c0f8-4414-8f7c-90081476cf93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "181ddfa2-3dca-4371-8875-8f367fea72c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3284d83f-e40c-49a8-bad9-ba1ed0b94c99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcd5db80-1909-4b8e-8188-c530dcf17513",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fd19eec-fa0c-4196-be1d-a83a9c8e623a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed9ad091-7b9a-4d0d-89f7-3a05e3016f60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ad90bc8-811e-41d0-b065-2da6788d0096",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09f84674-fd1f-4b78-9ed8-c8c826f43521"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7b58b33-f7df-49ed-a99e-88341fef183b",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "899d0b62-2a70-4cc2-87da-f0f335285404",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a898d9bb-588a-458e-924f-922a0089cfde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35c7a537-9df5-48bf-b8f9-d43d0b876a9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cfca93e-2b34-490f-9bb9-71580a387c27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f41234e-dba5-4470-ad76-d9b6c382def2",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b19e8eb7-f210-4f0c-8005-6411ed2f8862",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f10a1f5-c5eb-4cd2-9895-135c3fd7374b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "824b9a66-c5f4-495e-9f91-99ce38c11908",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "764b2033-2d39-444c-9ab6-b049e5a6f86f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4125511a-57c3-4976-87b2-3a9182bdb78d",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "106e880f-62f0-4a4b-b8e0-de1cb5333942",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bba67c89-1fd7-4987-8d6e-ba07b0322b41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7b539fb-950d-4f17-9b2a-e7a4d7fdaa63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ecfd5e8-e0c3-4c79-b0b1-22162c5b3f9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2784ece2-f5c6-4abf-bd8c-caea9b2f6168",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8789bb54-e412-425c-b42d-81b3affbfb78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6edba3c9-776d-4ab4-88cb-87a412229517"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "570371c8-ac9f-4d77-b6fb-a064b93ac4cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "504b93fd-4314-42f0-8874-f6a7869fc755"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71465140-d26b-42fb-933a-84a189a1dd02",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64dbe459-8446-4629-b136-6c51212466f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fee59101-f04c-4383-8e34-65240adb1402"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a223aa7e-9574-4f37-8417-7cc335ea4589",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e84995aa-3e96-42ef-ad81-98b0127f85ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0afd209a-862f-41c1-a82b-38e18b23eba2",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "145f81ab-2ba8-4d56-8587-4f140af3e59b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0a96b0c-97ec-4ee2-b2a8-64da02466578"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b6af9b4-c715-4a49-948b-e46199507932",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b999fc9d-9546-4e9d-852c-f54abc3d1621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66d50a37-5da2-457e-b22e-c35cb773e1fb",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72116a11-0e8c-41e1-9705-c60a61f7ab20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3f5d047-c55c-486e-863b-43582cb352ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b77d21b-e57e-4d23-9123-35efbf14950f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cb9ae3b-a024-4933-befb-f2653e0b056e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "104f169c-5eec-4c99-a5de-342d590885e6",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ce5037a-e414-4d21-8278-7f578a16c9d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "199a8aa1-9a75-4df7-aa7a-a6a2f4c68ffa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5098a9b-bf12-441f-9cef-ea3c229fb0c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e4947a2-0915-4a52-8e58-7cb5644ccc21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55ada3a3-0ccb-4994-815e-b01e577065e8",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b9c0171-15a4-4bbf-8479-2abfe812805b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8500d542-1012-475f-9ee8-3cc7add79be3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8169cf4b-da8d-4376-994f-2a3127c87fb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69f17f5a-7f17-4c79-a006-153a6210bc63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9aaec47-32a4-4213-8082-4eb60a6d3d5e",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c614b530-7077-4c66-87e6-2bb27570ff22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08df22a8-098a-4e63-b1ee-d18da000acad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c92be15-f9a8-4475-ab1b-73dd698e988a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c307739c-749b-411b-9473-580ea1049f99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "016531d6-0525-4d9f-bb4a-bcd49027af8a",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebdcadb8-9c77-4351-944f-6e12c2ce6b7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa36e298-2ca9-47dc-9766-ccce02e0353f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f36fcc57-98ce-4d63-8ae5-6605f7dba609",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2d84874-e0d3-4f4a-98a9-79fcdfaa7171"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c2ac6e1-c013-4dfc-b7b1-0c195282d95f",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23c80d71-9151-4b74-8ea9-b6d6f9eafc03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ed2f845-5790-48ec-92af-b24f8064aa4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb24eec0-ef92-4ace-8dc7-74d318b61da6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73a40a7f-7466-49b4-af6e-b9be5b71380b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2696f712-9142-4de4-a9a7-8332fea58c8f",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b972a981-aa21-4b5a-b14f-3490001fee21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9404b29d-da52-4ecb-8998-d9c0a5df63ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bf400e8-7a0d-4e04-b21e-b51bc2d4e4c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "173d5045-190c-4ac5-a0e9-532fec953b0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19d6e5a7-9e92-4697-97d9-c1d4470f277d",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "630a1f81-40db-434c-becb-dc480ac739ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "303bdc09-14c0-44e2-9e30-1d36a1ffb655"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fae6d6f9-0c01-4f4e-a040-3f51f9124e40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cb57a13-41b6-40e7-a8b9-571b2512c897"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcbcc39d-37d7-4fc0-9eb7-def15e45661b",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8205f5a2-7c30-487c-9c52-6d3de31f6d99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ac5945e-87c1-467f-8a54-0f817e4444af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75039ccb-bba9-4ae8-81e2-ea886eae4d2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebcbd1e9-0f32-4047-a530-9486168fa4f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3552ce8-82ec-431d-b4d8-ef13dc7df254",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a43809e2-744a-4035-b555-de7d26700505",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa1889d5-bd50-47a9-8b41-29f7e264b761"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "120010b8-2900-414d-87bd-8293372905f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90f88d9d-36e7-4f08-9176-7381ff95e5d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74af68be-a75a-4416-af79-f8f956b58ca2",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7542ba2d-9f74-488a-ad79-8e8b0d7dc037",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a410d4a5-d118-40a4-adb2-bdbbbaeb824b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "542982eb-0348-4d69-94e0-62240014c98c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a625a56-b110-4425-8808-0a084214552a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4598ce4c-5861-423f-91c4-42f4d1ba38b8",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5968ddd-86b3-4a31-a478-1c4f5e0a076f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7f35cf8-6722-4e74-ada0-f95ef6615389"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "411ac14f-ba11-4924-aa03-3fe5ccb463f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "058110d7-9f95-40e5-ad00-34c9f796a875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "300c710c-18e2-47fc-bfd9-01a6e03558f7",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2b5764d-1029-481c-bb38-b66d92188b7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2e147a3-6cc2-44fe-aa9a-9836e25af9c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e36ed48-1830-4d68-8d98-60d476c0afce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b05bed06-869e-4995-8d82-7caaad31f81d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9cecb11-3512-4d39-a12d-779d0bf4d791",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "583bea43-6c7b-411d-99ef-ec2c5848e7c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6669cae-179b-4a81-80c3-5a41359f15d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dcc584b-5376-4287-84bc-64d5f330dc95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00ba5808-ce20-4eae-a2e0-6e1bcb3e726c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "641c2c24-cc78-45c9-b0a4-cf53fda9ec43",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c0e45b4-39d6-475b-b551-fadbc57987dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8300a42-c7b9-431e-a6f4-4fc1865ca980"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f1d4fad-137f-4ac0-8c42-5cf8f2bccc6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb289b8d-01d1-450e-bb1d-f5a7ad0e7d13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82bd9d8a-80bc-42e1-be62-24b989667744",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a95896e-1148-45e4-a95e-e7cefd53fedd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2f79621-74f9-4d51-9e5d-c5f032aadaa0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbb194c6-548a-4a7b-b5c9-3e92de0a766a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba30b881-e45b-40b7-9de0-4a990e2a1612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59d55f4e-2e21-4001-8f20-677cc5eec168",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d34fd4bb-bcba-446d-bf85-b7522ea2d539",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b2096f7-55fb-4572-8265-40d603773366"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "370a9a4f-9ca5-4b78-a6ad-b9164a2c01a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a060e6bd-f44e-4be7-b1aa-860357cee21d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7f9b9b5-e724-437a-9397-b792a209e6ce",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0de9dcc4-bcc4-478e-9a79-be9efa98584f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27d7aa0d-3d42-4559-a083-a49de1445a54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c4a2cad-641a-458b-a4b3-181c0abaa632",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f109ac7-220c-4fb3-b03e-2058da970f24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acbfaf81-f222-4ca9-814a-c1064576c5e4",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94e7f600-ca52-4056-bc07-e5b08ecf6290",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05aecaca-0e50-4c27-9ed7-c80d163bf59b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c9643fd-5d1d-4550-8cba-39b36e9a865d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "087c0451-4518-48a0-8815-ce9e647a025a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00110a62-9d67-4984-9d49-b93741575276",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60aabe2b-b24a-4148-a4dc-5bbc331e3866",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd729bf5-e3c2-46a3-a470-997fe8035e3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6436309f-e8f4-4c03-9936-fa8ba39a1676",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "588cb196-9d04-47ba-b569-51d3e4660510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59ec7a06-d24a-4d6a-aa8f-595c1c3f0890",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30292366-1701-47c9-9050-c2392cdc8285",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d8df54a-1d25-40c9-b02b-8712f64c5ac1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88111cdd-9bc7-4962-82ab-bfcef44dfa10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f569b334-ede2-46fa-b261-d5f242e9d9af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7da920db-7da9-4e88-9de9-0ae6863486b9",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e61c0787-16b1-4175-8d84-c5f0b473dde4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cce7ccad-38b2-4e6c-b6f1-d8ee81c885e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64a5aac9-6d99-451e-a42a-6002725bc937",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbe78360-9a1b-43c6-b2b8-39818cbe1362"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96ef3769-cf52-401e-ab0d-22c08bc799fe",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9eda8da-a4c5-41dd-832f-b7c43e824beb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1b5ded4-a3ae-43ad-84f3-24a5bed45e5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a46373e1-1a1b-4f28-a80e-a19694d196f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5662d835-26fd-4c85-8ee4-3baed78b2a91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d130a3b-5e8e-4fb6-8005-98b7cfed3d6f",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77b767ad-1571-4497-aad1-c79b0e064cf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b95dcbc-1db6-4557-9c0b-e1a73c6727b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a66e9383-23b7-4897-a69a-c12fb0b9b068",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc75334c-9c5b-4f3a-b42a-7668e78dabd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b0dd494-0776-472c-8b4e-116cef9a4047",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71c7bff7-e805-4464-843d-7893a32a5155",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6603f4ac-f793-49be-a7d7-ef0f1764f002"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9545d95-9801-44ec-a0ed-925fb9ec54fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0b9c9ac-7d56-4891-ba8a-dfe35d469e02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "691ea6af-89e2-43a1-aa0b-f4c4ac086fde",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31c51df6-428a-4e41-b4e9-943e1487cf40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ba84314-2b4c-4874-9b06-7fb1e44c39fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5670259c-4e9e-45e2-8a65-57905cced893",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dc53768-5170-40e8-b902-719ab31994aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a758189e-ddc7-40b5-b13a-8e35be97ba29",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70042664-6ba8-4bd2-9426-8e86d0825516",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40ffd9c6-bb4b-448d-9a11-de64c2d0d519"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "378bd2cb-484e-44a6-806e-a363122c06d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f326c1b-d9dd-46a7-8930-62c265d47415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc5c512a-641f-4e54-b3c0-f762eb90c0e9",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41525041-ddd9-4b72-a630-cc13941a4f46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0f2a58f-7a58-4fe6-933d-d291a76c44e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "362597ef-5d8a-40c1-9248-f30355af745f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adddabd6-8e54-44e5-8c87-1f8d1034bb07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c1b924d-d301-4341-ba56-80fdbe4b616c",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33d960b8-b057-46bb-98d8-7f39fa903994",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af9ffb5f-6d7d-4a60-b19a-e5b4cd36c844"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61706441-6c80-47ea-b8fc-3ac2172c707b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dabc9b2e-7446-4d84-9253-181c5740a210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0b579ec-ea46-4ebf-887a-e51b438aecb4",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42813667-e444-473b-87d7-521f53fb5274",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd149b8f-2019-45da-807d-4c72e87b6e47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af90353a-c52c-4658-a797-25f80a48970a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3327e93-8450-44ab-97fe-31a38309bc21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceb94c84-fea7-4693-987d-12c02448c5ec",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f18e4a29-2362-47ff-a9b4-37adca7b8e92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d610f50-34a4-4d8f-a28f-627c777f16ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82c3554e-8cd9-41ec-9b7b-9111c1a9fafd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1eda6271-b26c-458c-96c7-035325502b41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4d677c6-fde2-412f-82d7-cbb20dda4037",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db9f9c76-6e3c-4224-9ea0-fa1e077c8b01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cba9e87-b06b-4df8-82f3-5a6cfb5bce17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1dbee46-378d-4419-b0be-6a06fac3c7a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fb21866-ba8b-4f27-8e7d-928d7668322c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e455ad15-8c79-44c3-b0ec-4cafd3d757c9",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6879ac00-b74e-40d5-92fc-90e93d64b4bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcfa2fee-68d0-47be-8e99-afc1577ec500"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddb66b63-c41b-44f1-a707-a73915a60254",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76507d9e-8d0d-48ee-8cc0-ec024b6c7134"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96c375de-65c4-4ad3-959c-e4f49fd93c6c",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3aebcdb-cfe5-4a5f-b3a6-6de9d20a0acc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e187984-1454-4a02-9f5d-ef2a51ebf770"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56936a70-d8c5-4fe4-b43a-b647e1952bef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2ce9820-f4b8-4c6d-a02f-2b9837f21cc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5918c368-af90-4dd8-b26e-613829dafb6c",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd3a0033-061a-4573-a0e6-9f043e4ad50c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb8b0da8-f117-4ff2-a11c-9f7698406498"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5038cb9-659c-4079-a92d-29265dd0647a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abfa93c7-20e0-4f18-a1e3-f9c268a9d609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b289c39e-492c-4e97-a91b-380cdc1f7d00",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87767142-00e1-42c6-a0b3-7c708a54f86f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46c8da55-9728-4c6a-ade4-45a703cac4e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12473ce1-3810-41cb-934c-9689af47750a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f34037e-7f1d-4d03-9ccd-bb7e66bd9171"
                        }
                      }
                    ]
                  },
                  {
                    "id": "111f6d11-8aad-4bb9-8472-f87238eb40fe",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0aac30f-ea23-4f79-8be8-975620bf4d92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5edc019-3788-41a7-8d3c-45dacc43070a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc3b78d0-4954-44e9-9226-d57208bdef48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a3d4815-0040-498d-b636-2b2b629bc88f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e12e992a-63c8-4df4-b329-3b5c68af0f03",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fd3a6dc-4036-4f53-914c-9d6d38eb41cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2c656de-f1e0-4ff8-97cb-233c338c8687"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9515f1db-bccc-4671-ae2c-4f08b45d7de9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91f99dc6-a65d-40c5-bb7c-0b681c7efe70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea56117e-c8b8-4c4b-b8ed-ae5f7536d7a7",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9af92023-61b1-49b5-b26c-e2144c9884a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66d546ce-85b1-41be-aebc-0f4a69f69d1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "854efa82-2c48-4c42-9858-5a9e51c1139b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87252ff4-3128-4c9f-8650-87f91bc31699"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aed2d5c-d617-47f2-9eeb-d13610842eac",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15459d0f-b72b-4708-b5b7-c88a7caa8d01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a09502c2-4f86-4ce0-8371-07c280d58a75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "904923da-e567-4b1d-bf5d-87200f280a40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89e53d5c-aede-4f44-8f44-950fff5c7131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c463d0f-087d-42dd-acf2-b576c6cd1ec1",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac9eea6a-e8d5-4b5a-a16e-d3e56088cc08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ef7114c-e9d3-4d71-82b0-03acce7532c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a92fe5dc-7157-4037-9c74-fe232a34918b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e9555af-d201-47f9-b22e-66b7b313955c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57fe1848-95bc-47e1-a78e-ff1c4d12865a",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdb1061b-b1f6-4151-adfa-8e0759cada75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96e9fc40-d6aa-4fb2-9eef-84bddd1e4ddf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a62ccf69-9da4-4e19-8101-6c98a05d495b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d6f3f46-42a0-4ea8-be5c-c0d7ba8af44c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e629ecc0-24d5-4e9a-9708-9a1cd43e2c68",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "789fe2ec-5745-4c5a-8388-b6570208ba41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6750a3ec-e80d-439c-8def-4c79069dfae3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a59e96a6-2bb6-49ad-ae33-46de4ed58262",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dd74764-f7bd-4bab-aa9a-638863e30150"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4002470-848f-4119-9118-5f5a9dbef205",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62bfb490-1204-411f-a1ff-3d78d2440b6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb139aa3-d461-48ba-99a5-58e2d86e7083"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "957b331f-1f87-4d59-b9d0-13b33b1b80d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f0369d0-80f4-4b13-b6f8-0207cc4e477c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "438d7072-b01b-4d74-8c05-e8468bfb654f",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "808fc0d6-fe02-4fe6-a8d3-47db142fd005",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a71d1a2-a500-4655-bf7b-82685688e02e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64bc698c-7ba4-46b4-bf9a-b6f4e09f7b1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "442c49b9-b91e-437e-9d5e-8c4c7e7fb9be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdc926ac-6bfb-4b24-95dd-099999460591",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7261fee3-af2b-4818-8974-a8a6263d010a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b84c61ad-098d-4172-b51e-c656432f9533"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e34c8440-efe3-4ab7-9b85-bdc0e0fa5bcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85dbd464-1224-4987-b0a7-b7114fa2bae1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2bffbb8-6cf3-4257-8d70-51258331afe0",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cce604ce-bef1-400a-b379-b07660aa1c32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d50ffae-dcdb-4ee6-85ef-2adb71e31d51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3d364e1-05a0-4358-bde9-ba47e7f13c6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e5c2579-ab03-4e43-ad93-5f47ebe578e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f86707c-d084-40eb-9e87-cdf9ae38b999",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e98990c-51fa-4b9a-85c3-8f66daeee75a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c778d79-19e5-42ed-a5df-0adbce2fd263"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "166c5279-5d5b-4f2f-9d7c-4529c3ee6699",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e0c7290-47b5-4ad7-91c3-bc8ccdd1fc9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ae48a14-fc17-4937-8591-7cdd8206e26a",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6fbb05b-797f-49ca-84fd-dc6d04bddb47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd174f17-840d-41d3-b4d1-3a61c4191422"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f236f87b-aded-457b-9115-4da746be1f5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c451f3ba-d8a5-4810-8e74-e6524cb755a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "236e7cb8-4e64-4c00-ae38-ad1fa2c1b94c",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8437235-6aef-49a3-ad64-67a6e5a21c79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "194d241a-9a38-4e76-830d-d28658cc0ece"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0efc3d5-24fc-41f2-8a8a-c2395b8090a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b35fb62-ecf2-420f-8b23-98bdedbf0446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c503b41-2f72-4733-bcc7-79b882a3aa8e",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a618ea1b-207e-4cd7-9ba7-3390c585d70e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7845209-d6bc-4869-8734-e5fd7fb155a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53382039-d2c0-478a-be3d-17af64af7635",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9e4cf59-3f56-4fcc-9530-b7c629c4a229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf9526ba-e393-4ad9-aa4e-84383558b68d",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b035badf-3eeb-46c0-b2f8-93b7d28b11a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e9a846a-5d60-4742-98a8-f4e10ecc40cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "574f3d5e-1865-4dea-84e1-e22a4e159e9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "780653bc-38a7-4c5a-94b7-1f32791a933b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cce69b18-3281-462f-8cff-59fb81552f76",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "508f150d-e76d-4f60-84c5-8c6fec002d27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f013aa89-85c9-4b97-9ecd-45c230f5fcdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38a57160-4f12-447e-9c45-bc5ddd58e64b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7414d9c7-80b1-4951-a8f3-7df4e075868a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8161052-d263-4fa0-a40e-2528ba43a6b4",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7ff5562-a2b4-4355-9cd5-20a7e9cc25d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9bd46e4b-ad9f-4dd4-b77a-9cba4619c51d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e9c051a-06da-4ae9-946c-deaf252a85f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef265e30-5041-43b9-b0ef-8d210c0802b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59956bec-b559-416a-bd5e-9fc82cfec561",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31c5eaf7-cc3a-4fcd-82c0-ba564b2f6641",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbae3334-f139-4e84-b9b5-8bb5b15a428b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7505db6e-262a-44c7-a795-778b4aeaa317",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47907b22-6ec8-4d92-8102-07d0c560e553"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98e92f85-19d0-4c79-9e70-047effe1f5dc",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b449685a-9c75-44a7-a085-1c3b577b1158",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e24ee7b-d4bb-42ef-99f1-87d06694599e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df2a2c4e-e22e-43b1-abca-cda8c2c001b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a5bfe85-0d04-4325-b6ac-1d353813f0c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cdb3898-ec37-4ac7-bd55-a7bf6ee0c41c",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39b8175e-0f4a-4697-9663-da55deaef37c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "97fc4459-f5b0-49fe-887e-340db5d39934"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "156b97f5-4918-4e7a-9934-cee59bbfb584",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b11011e2-5fe6-4873-894f-525d45b0dd9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae91f401-2f02-410e-bdbd-7f45a1f89924",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9037ebd0-f65e-4aee-90e9-30be37e60884",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a1d3f6f-b373-4973-b18f-ec1e1ac68b4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e2e17b8-0e9a-40af-a4ed-b29521580c10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cff466ad-5442-4a41-bf0a-76fd77be8729"
                        }
                      }
                    ]
                  },
                  {
                    "id": "705e7570-e301-4ea2-8cbe-94b9cffb88c9",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da09718d-8382-4dae-a625-2ea59a117de7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c6b324f-5248-42b6-8804-37f2575f1b0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7a08c94-8622-41ed-ba50-b24e59171215",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13f70280-cb2d-4269-b525-4ef7c67791a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8e6369c-0d8e-4ae6-994f-c696017d2d15",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2fe4a17-4a7a-4cfe-a60c-2e59a2e780b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d93b6a5b-6929-4981-a546-675f9328efd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edab7e81-1142-4e54-9f33-b197efe65313",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5690a0c2-04f1-4d94-868a-78d7535e2b86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09dd566f-eb18-4ace-9978-e61e4f78c1fb",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac135f7b-0f05-49cf-8ffc-9ddd723b5303",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "377c7b43-c309-45c5-a9cd-8dfa806225c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d31f107-ab50-4244-a102-f3ddb4472d93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5704dbd-cb8e-4fe9-87bb-255ed612bde3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42099ba8-7efc-4a17-b92f-c715a28eb4c2",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f75228e-a1af-4027-b1db-0ff87c8fa42c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c0a2720-3653-4276-be27-cc87a7a1db71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f60cac07-7e52-416b-b529-db3e35a5eac2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b7b6203-da4a-4b50-ad89-aaae05cb7829"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48003467-d35b-4200-bafd-579c3dce81f3",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee67655e-1c1a-4883-ad29-a9f3538e5bb7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4b4b4ae-a284-4126-b51b-ebd9bdd8fe6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2da2b1a8-1e83-45f4-b4dc-4c95c4223382",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e86f2cb-88b4-4c79-9400-a8bd695c1add"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ba1d963-671d-4287-bdfd-1db8877d969f",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d89512de-5c94-445d-b8f9-fbc74f6384a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac14903d-150a-43c2-b9ec-73872d410ecb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4be1f531-6403-4273-bcbe-f3bc04f70b40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d1505ce-a6a1-43e1-aa10-baa74d3403db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "433806d3-efad-42df-8deb-8aaa6bd95fbb",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b74e0b62-855f-432b-a2d7-72630b21810f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "578d1059-e49d-4e03-a673-3ec5790e1163"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4ed1dc5-242c-4ca6-a2b0-8ec6a175f5af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2b4e51d-ce4a-42d8-bd32-6eb3530a586a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ad3824c-89db-441b-9e8f-941366d5ad27",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04f1947f-ee99-4400-80bf-da09e0d0b032",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67e96f99-e74d-4e47-a1bd-21c03bb6bd58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5781f40e-e3d8-4561-9765-74f0a4ceba81",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ea77b7a-721d-4386-92a6-cf64f13cf0ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c71c7c45-e622-48d7-bf21-627492b20eb5",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00b4f014-b552-4b34-bb65-5791ce542ef4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7081900-8ba1-41db-9c93-430c90a88b86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e03bee89-7d22-4080-ad21-f342386a0881",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b73df2e-4514-4dfe-9afb-7d17b7200662"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "33036d79-776a-4a1e-9155-36f3e876e560",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b84045e1-329a-4a5d-bb1c-02484af6f360"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "17b3bd85-0366-422c-8c27-de999b10841d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c55b67b0-76f3-437c-9150-2418b5c5aba9"
                    }
                  }
                ]
              },
              {
                "id": "23540b17-82d9-4181-86c2-42994375b63b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "59c16bcd-816b-4914-b671-19687f6908f3",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2266cf8c-a593-493e-ad90-6cca1e84c2b3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "04e511b3-3bc1-4f56-a710-39a85a8d4171"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22cabc2c-846f-48af-8f67-e0e63344235b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "07467d6b-a3ab-4bb1-953c-2bdc29631107"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7f110055-0ac1-4eee-943c-2432063c6cd1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ee41aeba-dc1e-4ec7-9146-4fa279b79dfc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7d0487d2-f5ca-4829-b4f3-82a6cfb06102",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a84c27ef-28d0-4f68-8bc0-f7e69e7fab3a"
                    }
                  }
                ]
              },
              {
                "id": "35571a46-8101-4eae-8d70-9836c09d964f",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "1d1132b8-32ff-499e-8aaa-2046c22f5bc7",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bc7f188-96c6-4794-a409-d93441a2d0e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "118691b6-36ef-4424-a5b9-ada1ebdafd5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d30e0959-44f8-4a97-b47f-32893daf944a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66817858-6e9b-4258-ab7e-7af5044cca9b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f2099692-d0fb-430e-8ada-07b4fc9be31d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "dcd6dd00-c0fc-4582-837f-7cddaeb3cfc0",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a827669a-dc08-4367-a98e-938d99dbcf5e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "69657b3d-4a7a-4b71-87cc-2f1c34deed00"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1ec33cd7-51b0-4341-ad76-8a578e815702",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3990adbc-cb7d-4d7f-ab30-e63cec765917"
                    }
                  }
                ]
              },
              {
                "id": "30556e47-af9f-40c3-8f19-82995e5fb18a",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d486bdc8-0d50-4423-b2a1-2de5bf6928ce",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "14e7bc42-19fb-4ed2-97c0-6a9a7ed140c1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "887d212f-3fc3-4581-9545-c3dcaf2039e3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3f887242-ec04-436a-97fb-79a2089432bd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "60947b47-2b6f-438c-95dd-52c17e5d9c17",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "7089ddd3-54c9-42a5-adfd-62a2ba3f2ff1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "50b01eb0-ed0d-4296-b62d-c39ff7ec4da0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "385d4491-2798-486e-9b94-cd9af2895c3e"
            }
          }
        ]
      },
      {
        "id": "e0d74541-95e5-416a-99be-950275c8b1f1",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "d94f0e99-2e3e-4c6f-b50f-81a5115194be",
            "name": "Negative Testing",
            "item": [
              {
                "id": "da6eb6bf-f614-4afe-917a-ccdbf5de7dd1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b304f81e-d3a9-4a72-89c8-30bb6472b9d6",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97fa06ce-7467-401c-9302-f4c0a112681f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "70dcb014-8e66-405c-9af6-2ce5334225de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d55e608-10c8-4f04-978c-0cae47eb3abd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "44dae83c-1e9d-42ed-b23e-aef54e289871"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e69f6edb-8ae0-4204-8a10-c2ccf7386e49",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d12e92e7-35ed-45ad-ba76-7b423c245dd6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9d8b6b85-cc6b-40e2-9214-7a4d347a2bbf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5c2701ac-d04a-4549-855d-2152184d1a12"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "28c230a9-f715-41a1-b33c-aed0c03bed49",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "549fa6ad-0373-4f54-8feb-98ff83c728f3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ebecd9d1-c1d7-493c-86c8-99c282068972",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "da334a12-3723-422a-a10c-3cfa6192e286"
            }
          }
        ]
      },
      {
        "id": "6443ae43-4fd4-4bb6-8b15-5451cb97e77a",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "bacb10be-8743-4073-bf80-2193e8e8081f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cf387491-2618-470a-b7b8-e850c8a1a4bd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "dafe853a-c7c1-474d-92d8-07d2a08bced6",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f835543e-372b-4010-ac66-b0504977bf53",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fc15dbaf-85cd-49c7-9cb1-bcf2523f4f66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "536dfc16-c67d-4859-a92f-aecb5a71b088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "168721d5-77e9-47e4-9e74-338bbcc2681f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d4b18752-bb54-4805-b2f5-c73c40afe198",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0a1c7285-82e9-409a-8482-316eeb8496a4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc1c3b75-2ffa-41cd-a6df-a15b74061106",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dabf57c0-c33c-4401-aa45-4df07a14c743"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5bde5d05-065a-41ae-8959-6c14ba6ed250",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c476a613-6bcd-4718-9999-fc8162f46d72"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0aba8753-c8fc-48af-af2d-587cf054a087",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a003e72a-0230-4c62-9ad6-041d775dfcee"
            }
          }
        ]
      },
      {
        "id": "5b038e74-4664-4bd2-a0d5-c7fa658b33cc",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "afd1ba8a-d78a-4764-a15d-f94a9d25b907",
            "name": "Negative Testing",
            "item": [
              {
                "id": "23cec279-19e5-4f04-9a3c-469e577c1057",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9e16ff6d-7ccd-4d32-a61c-8ce4872b84ae",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36cc7169-bec5-4e7a-a1f6-d42df46efd36",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f98436e3-cc74-4fbd-871d-be1db1ef2eb6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83bb7c4f-a775-4385-b5fd-3324703dc6d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5653c220-4dc8-4b80-a4b5-22e0508c6cc1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ef634ace-6ad8-49e8-9251-1fe5c680a392",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "496065ff-f5f2-4f35-9269-008e0591756e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "43297cb8-7ab1-4bc9-b58d-691deb69f9a5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dba4d6e1-a444-4d9f-8c4e-00aaee14b2ae"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9c810f6d-60d0-419d-ac07-fe28a45bd459",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "feee87f6-5adb-410e-ad87-92c770e14e18"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f2dc6331-94fd-4790-b534-5701bb86b353",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6a5c2e3a-4bd7-4a50-bedf-9aac0beba641"
            }
          }
        ]
      },
      {
        "id": "c4b3b032-1c7d-4e37-9e51-eaec84ada273",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c434fdb7-b3ed-4e3e-9049-bf5d869fd82d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c5b20c22-94b5-4877-9e4d-d9a33a069a0b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "c50d94bc-cf09-4360-9bc5-d57398cb1d42",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "83e8faae-ef3f-4173-b2d7-a02cfaf3dd17",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "52f77043-f03d-4b85-b3ec-8fda5634aef9",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 3
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 3
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 79
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 3
      }
    },
    "timings": {
      "responseAverage": 59.77580071174375,
      "responseMin": 10,
      "responseMax": 1293,
      "responseSd": 127.22332866834975,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1696811641370,
      "completed": 1696811670339
    },
    "executions": [
      {
        "id": "bc94d534-95aa-4739-8c2c-76213173fd1c",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e8fa6710-c2cf-4cb6-ab3e-5ed0536d1c63",
          "httpRequestId": "c154eb85-f3e9-4140-8d0b-62b431b8282f"
        },
        "item": {
          "id": "bc94d534-95aa-4739-8c2c-76213173fd1c",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "a4deaef7-1034-4f39-aa86-130948787233",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 0
        }
      },
      {
        "id": "bf89098c-21cb-4f42-a0f4-d35f325a6fec",
        "cursor": {
          "ref": "79a93503-e940-42ec-a287-481ba8c45eb5",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "cb519709-2bbc-4081-8f65-2f52f6b017bb"
        },
        "item": {
          "id": "bf89098c-21cb-4f42-a0f4-d35f325a6fec",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "c30c3058-6960-4bff-926c-5afe53fbe6e7",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "a661e51d-61d0-433e-b445-73a6194fdd7c",
        "cursor": {
          "ref": "f09da361-39ed-4aea-849d-567b21187828",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "84ae23b9-02a5-49a3-8cb2-2cf3030c22bd"
        },
        "item": {
          "id": "a661e51d-61d0-433e-b445-73a6194fdd7c",
          "name": "did_json"
        },
        "response": {
          "id": "b76cae05-6d23-432c-bc4c-4cba49f55155",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 478,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8330321d-d52d-4579-ae6c-40d02433c48b",
        "cursor": {
          "ref": "8665ea59-de5c-425d-834d-870f0db005b5",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8ef9f4ea-b8e5-4855-996d-c27284a2102f"
        },
        "item": {
          "id": "8330321d-d52d-4579-ae6c-40d02433c48b",
          "name": "did:invalid"
        },
        "response": {
          "id": "c6fb3211-bbb8-436b-aac0-fab9a778a5ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8330321d-d52d-4579-ae6c-40d02433c48b",
        "cursor": {
          "ref": "8665ea59-de5c-425d-834d-870f0db005b5",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8ef9f4ea-b8e5-4855-996d-c27284a2102f"
        },
        "item": {
          "id": "8330321d-d52d-4579-ae6c-40d02433c48b",
          "name": "did:invalid"
        },
        "response": {
          "id": "c6fb3211-bbb8-436b-aac0-fab9a778a5ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79aaeaa6-b3bf-42aa-b653-76e537c32157",
        "cursor": {
          "ref": "daf603c9-1078-4656-92f8-ae8db2570779",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "def96694-af9b-4fe4-908f-77d32f0ed03f"
        },
        "item": {
          "id": "79aaeaa6-b3bf-42aa-b653-76e537c32157",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "f8ff05ea-2906-4e00-a222-db8c6edab273",
          "status": "Not Found",
          "code": 404,
          "responseTime": 96,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da74c6d1-6000-453b-b5b4-9d3f8b12263e",
        "cursor": {
          "ref": "b4f35d37-f71d-4e01-a2f7-22a4834491ff",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "af50d628-da33-4435-a873-c44339d4cd37"
        },
        "item": {
          "id": "da74c6d1-6000-453b-b5b4-9d3f8b12263e",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "d8f50d38-7dac-49aa-9212-05f7f7535f8b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 40,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30123ae8-a61c-44fc-844d-530e6c0f24a3",
        "cursor": {
          "ref": "629406a0-058e-47c8-87d2-5bb3d3f86f71",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "6ed59869-83d1-4a27-a70e-d6e4855909df"
        },
        "item": {
          "id": "30123ae8-a61c-44fc-844d-530e6c0f24a3",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "1f1d9b87-2572-446a-9192-78de1fb9c52d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e20d57b-b7c9-4bc8-adfa-87190e4d83af",
        "cursor": {
          "ref": "a2c2abc0-99c8-43f9-be8e-62bf91bbdb94",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "667ba2dd-c2e7-4c2d-bfb8-b08e37670ec3"
        },
        "item": {
          "id": "0e20d57b-b7c9-4bc8-adfa-87190e4d83af",
          "name": "identifiers"
        },
        "response": {
          "id": "9f09116d-34ff-4a71-b6cf-3aaa4bf1bb41",
          "status": "Not Found",
          "code": 404,
          "responseTime": 89,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "55468206-4a07-42c1-acca-72ab075fa52b",
        "cursor": {
          "ref": "22c7169f-8a0a-4d74-bbcd-387ee2834f24",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a83cb7d4-458d-4ea4-b675-2669f157d9b7"
        },
        "item": {
          "id": "55468206-4a07-42c1-acca-72ab075fa52b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "81ce99ee-a08f-45ad-945c-6c840044206e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af94a46d-b1cf-437f-8478-be5b79272dd2",
        "cursor": {
          "ref": "a5f41794-0786-4ee0-87a6-4268c73585d2",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "9459fa81-98c2-4322-baa0-cf88ef845ca7"
        },
        "item": {
          "id": "af94a46d-b1cf-437f-8478-be5b79272dd2",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "70ebb912-aa79-46a0-aab5-bdeeafacfd3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46c4cec6-df99-44f2-bca9-f6903b0c612b",
        "cursor": {
          "ref": "742c087f-1762-4d9f-9119-db695e062268",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "e058cc59-bc37-4cee-8353-1298b89fb396"
        },
        "item": {
          "id": "46c4cec6-df99-44f2-bca9-f6903b0c612b",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "c3f60aff-79d7-4471-bf5d-82049b385f2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fcd055e-e196-446c-9338-8412aed26adc",
        "cursor": {
          "ref": "95b2f6eb-9707-483b-99e4-b565781ca902",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "e0abc5b8-8829-45f3-9d0f-c1545b3b1cf0"
        },
        "item": {
          "id": "9fcd055e-e196-446c-9338-8412aed26adc",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "ca8d6d0e-d911-4e8d-8cc0-8674733b5d74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7383f7ff-e4c2-4873-8fc2-fbc3472437bf",
        "cursor": {
          "ref": "2bd0002b-4901-4afa-8270-84aecdcf12e4",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "140ac1fa-dec5-4747-a5ed-05970a2a4040"
        },
        "item": {
          "id": "7383f7ff-e4c2-4873-8fc2-fbc3472437bf",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "bf8fe6f7-999d-4066-a15d-6616ca13d6f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9df0ed71-7e17-4186-bd96-8e63dbdc65cb",
        "cursor": {
          "ref": "2f47ee13-c42c-482a-b8eb-ad7fdec46fd3",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "f69e5558-68ae-472c-aab8-8144b43943e3"
        },
        "item": {
          "id": "9df0ed71-7e17-4186-bd96-8e63dbdc65cb",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "4dd3ba8e-e378-4411-9ee3-fb933512c2a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01383901-ce7b-4a5b-af6e-d53ef944a6d5",
        "cursor": {
          "ref": "75e27cc1-62be-4b3f-84be-049a24538380",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "6776a0c9-1998-4fe0-865f-d5ea0d941420"
        },
        "item": {
          "id": "01383901-ce7b-4a5b-af6e-d53ef944a6d5",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "0191fd2d-9533-4e5f-b49b-0b44a2ec61d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d08fb9e-f2c9-419d-ad01-a45083511993",
        "cursor": {
          "ref": "07e75325-d91c-47d2-8e39-ce202e8100cb",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "42256a0a-81df-4fd5-92ef-ea8a1fd0946f"
        },
        "item": {
          "id": "0d08fb9e-f2c9-419d-ad01-a45083511993",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "e264aefc-e35c-45d6-a2eb-565e32c4472c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32870e92-5622-4e82-bec1-d9468b5fb4dd",
        "cursor": {
          "ref": "e500a97e-b6b0-44da-9bad-61db102c0e18",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "3d0a769c-39fc-48c9-8b2a-5d315c4d213e"
        },
        "item": {
          "id": "32870e92-5622-4e82-bec1-d9468b5fb4dd",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "7c90cab8-80d1-47b7-ab19-efe6f0cbd770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "679b8b94-0e36-4b62-a4b0-8de7b30347b9",
        "cursor": {
          "ref": "11c5fe0e-9094-459a-8749-5054a96a151d",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "5c69f887-c7b5-4d53-81e6-d695ca09cb64"
        },
        "item": {
          "id": "679b8b94-0e36-4b62-a4b0-8de7b30347b9",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "21ecc2ac-34a6-466a-8037-e77d7e8bbaec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9541c962-d474-4c21-98ac-07e31eca37d2",
        "cursor": {
          "ref": "61fc8a7d-6b77-42e7-97e1-fb9412556eb7",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "04beb7a7-b281-4430-a31f-0815df5e71a0"
        },
        "item": {
          "id": "9541c962-d474-4c21-98ac-07e31eca37d2",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "b022109c-10a0-4769-a335-af102b636c48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26e5b7f1-08b8-4157-afca-f7e9d362bc75",
        "cursor": {
          "ref": "79bab70d-8d81-4aee-82bc-e9540390ebbc",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "58117627-75cf-4739-8e44-0d68cccc737d"
        },
        "item": {
          "id": "26e5b7f1-08b8-4157-afca-f7e9d362bc75",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "dca4d0c0-eff7-48b8-8923-e32b4583f704",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edd963a4-ef65-40e5-851f-f0e71bc21b02",
        "cursor": {
          "ref": "8a13bbf0-6342-4828-a998-61dbb148bd0f",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "fbf39e59-a2cb-480c-b23a-6490cf4e886d"
        },
        "item": {
          "id": "edd963a4-ef65-40e5-851f-f0e71bc21b02",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "214d2789-9272-428e-93c9-de7e66ba113d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "019cd06f-a1c2-4dfe-b3bd-cef993a98309",
        "cursor": {
          "ref": "20af3423-52c5-45dc-b8bc-1d7ebdfad2de",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "52b40138-c72e-491c-9f4f-55deab919a27"
        },
        "item": {
          "id": "019cd06f-a1c2-4dfe-b3bd-cef993a98309",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "4ff13867-764e-4e41-a5a0-df414ce9997e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ac01d1e-4b14-4c7c-b8bd-fb23c719877c",
        "cursor": {
          "ref": "47b57be0-a4ea-4bfa-a403-731f1119643a",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "be069190-b042-4c5c-85cc-84433cda6ce8"
        },
        "item": {
          "id": "8ac01d1e-4b14-4c7c-b8bd-fb23c719877c",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "66e109cb-be97-4a82-be60-d20d9f76d860",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbca44e5-8bb5-4218-9e86-c6bfca0d6e44",
        "cursor": {
          "ref": "dabcfc26-9088-4eba-9269-56afa9f0bf04",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "1d3ff81a-166a-4f82-931a-2a0a88a19dcb"
        },
        "item": {
          "id": "cbca44e5-8bb5-4218-9e86-c6bfca0d6e44",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "3c6037f6-fe53-4199-a7eb-9938ee88ab4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "682d5db4-6865-4708-96cd-b2f069b0a6a8",
        "cursor": {
          "ref": "1d65fe8d-1000-4e9f-9040-2711f210540f",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "fa930489-eb84-41a3-bf9d-660cea471261"
        },
        "item": {
          "id": "682d5db4-6865-4708-96cd-b2f069b0a6a8",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "721e212b-b912-485e-9b60-21d455596c3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d713032-dc72-49ee-b7ef-e8863ba9fe90",
        "cursor": {
          "ref": "be0d73cd-80f6-4d01-9f7e-6fd70762639b",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "cdd3ae81-94c3-44fd-8466-25ae28284d44"
        },
        "item": {
          "id": "0d713032-dc72-49ee-b7ef-e8863ba9fe90",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "c204071e-34c3-4da5-bdef-935a3a9a1d34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed3bdea7-ba70-4521-b35e-5de0f5b25406",
        "cursor": {
          "ref": "bedc1a27-7d24-4059-8728-9cf00e657575",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "5b39ef27-9965-47d7-9917-0fe0a3c74f6a"
        },
        "item": {
          "id": "ed3bdea7-ba70-4521-b35e-5de0f5b25406",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "538cfc3b-9fc1-48ec-9cfe-34e08548fff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dddb6eb-246f-4ad6-8595-7f9d8aa25a4c",
        "cursor": {
          "ref": "449a80da-a13f-48df-b9cd-20fc07b35ff7",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "90a4c3ed-5d26-4171-8e64-5cd80a38b784"
        },
        "item": {
          "id": "4dddb6eb-246f-4ad6-8595-7f9d8aa25a4c",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "8b4511bf-9a82-4105-8cde-1ac314e6853b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "620198a9-7449-4df2-ab5f-77c9d5d42cc7",
        "cursor": {
          "ref": "1ac0b7c8-969c-4f1c-b578-710380a145a0",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "ef23401f-19cc-4a0c-8382-ad125de00f99"
        },
        "item": {
          "id": "620198a9-7449-4df2-ab5f-77c9d5d42cc7",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "fffb0940-3d32-460e-be8b-a9f040cedd71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d2f8dcc-49cd-4967-baa7-8b57a7680d4f",
        "cursor": {
          "ref": "876d9aaa-077a-4bb2-a7de-bbb9226a1fbc",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "7d5a49a6-255d-49cc-90bb-0d753f047ef4"
        },
        "item": {
          "id": "2d2f8dcc-49cd-4967-baa7-8b57a7680d4f",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "f61973ef-7761-4729-8712-1b11f257cb95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d954cae8-f36d-493a-9653-20d07b1e9074",
        "cursor": {
          "ref": "22ff451e-dbf6-4df9-ac75-07708d66f88f",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "67420d3a-2e95-4542-b986-0b46df419232"
        },
        "item": {
          "id": "d954cae8-f36d-493a-9653-20d07b1e9074",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "7a2b8802-3e37-48b9-9bbc-621bf7b736b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a3c9fc2-0fa9-4bd1-919f-fb0b214f4ffb",
        "cursor": {
          "ref": "a3969666-0c82-4bfa-9f94-25dcbf622f71",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "1e2c9ccb-c3e1-4e7f-a191-542aebd359d4"
        },
        "item": {
          "id": "4a3c9fc2-0fa9-4bd1-919f-fb0b214f4ffb",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "40c4a42d-8371-488c-b3fe-15a28ae81a29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4c1dc3c-5052-4d64-acd4-ad25268d508c",
        "cursor": {
          "ref": "825a1e1f-e98f-4f7c-ac64-5c54e905086a",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "e9f9e685-f1d3-4e87-bd29-4f486c5694d4"
        },
        "item": {
          "id": "d4c1dc3c-5052-4d64-acd4-ad25268d508c",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "42ca334f-139a-46f8-9a9b-91bb27e623f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df721ea0-406c-431b-9e2e-1f78f46f709f",
        "cursor": {
          "ref": "6cc69a9a-6f3e-4ec3-b63a-1091d46c7a9a",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "a4c322db-ca1b-4c76-b8d7-aef48684a442"
        },
        "item": {
          "id": "df721ea0-406c-431b-9e2e-1f78f46f709f",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "a4ce5a81-8829-4876-b35a-9dca887b0a49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67527a9a-923d-4438-9661-ff04707c4ce9",
        "cursor": {
          "ref": "8b85c378-8fd7-4dce-82db-86cb70f6fa23",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "eaaa0c9b-76c8-4514-b6a3-303ecd4317f0"
        },
        "item": {
          "id": "67527a9a-923d-4438-9661-ff04707c4ce9",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "fea8ce64-1fd6-4fad-ab22-899d3d4b3a1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc241ae6-b987-4abe-b1e5-c5b7d428020a",
        "cursor": {
          "ref": "a339ce0c-b1f7-49ca-b4f8-a5a3840f66bd",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "63eaa322-e17d-4e63-bf26-a1225d886543"
        },
        "item": {
          "id": "fc241ae6-b987-4abe-b1e5-c5b7d428020a",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "6bf3c78c-1cac-452f-b35c-89a3c47ca779",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a56b0f10-8705-4adf-aca8-722edf4308b6",
        "cursor": {
          "ref": "223bbb8a-0572-4409-a180-f6f2abe3c700",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "91fe2c73-357a-4514-b725-e804e378148e"
        },
        "item": {
          "id": "a56b0f10-8705-4adf-aca8-722edf4308b6",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "1b3ded87-8982-46cd-a035-cec94e0eb23f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d340f8cb-0ddf-4d36-8801-6db8b5075d1f",
        "cursor": {
          "ref": "9370fe86-c96a-451e-a409-c1974d7e3cde",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "a3f550b9-3c6d-430f-bacb-f895728dcb23"
        },
        "item": {
          "id": "d340f8cb-0ddf-4d36-8801-6db8b5075d1f",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "c2826a88-f1de-4c74-8eea-75e4103366de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d03bdd00-b7bf-4779-92b4-0354ad073a1a",
        "cursor": {
          "ref": "6aa8eda0-377c-4594-8a81-270382254e57",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "1a104cc1-260d-40cb-896f-79164b176d23"
        },
        "item": {
          "id": "d03bdd00-b7bf-4779-92b4-0354ad073a1a",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "92dde760-312d-498e-833a-e37944a16ac3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "3b4a26fe-8bd9-4032-8c38-27906065ebdf",
        "cursor": {
          "ref": "8d95a1ed-619f-4f8b-8e23-be6195e46292",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b2cfb8bf-cfb3-4f24-80b1-3446247a2e2d"
        },
        "item": {
          "id": "3b4a26fe-8bd9-4032-8c38-27906065ebdf",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "df3b56dc-cd25-4431-858d-39a1533b10e6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 45,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "7a8ce4b2-7cc6-4e8d-9b13-422e8bbb1787",
        "cursor": {
          "ref": "e0894f87-2d0a-4021-b1b4-cfc75c0d89cd",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "944bce95-fce5-4b61-b1da-0af34480c23f"
        },
        "item": {
          "id": "7a8ce4b2-7cc6-4e8d-9b13-422e8bbb1787",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "65f525eb-b9ff-4a96-bb9d-0940ea40b4fc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "d0a80d95-9474-4467-aab7-fb19c2375eed",
        "cursor": {
          "ref": "8cf19153-675b-4e1b-af57-6f56c68685f5",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "532a786e-0602-4f04-bc15-144d2267a711"
        },
        "item": {
          "id": "d0a80d95-9474-4467-aab7-fb19c2375eed",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "3227ddf9-2626-4fdf-945c-e09d988ee197",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeb86169-2360-4742-ac52-9e99922aa961",
        "cursor": {
          "ref": "8bff4e6e-fc28-45d8-a337-0246d576a01c",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "d8185225-7355-4a7d-b6aa-5916fa4141ce"
        },
        "item": {
          "id": "aeb86169-2360-4742-ac52-9e99922aa961",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "eb4932a3-e02a-454c-9fc6-135e33e86074",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 38,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "72da12c8-fbc4-4eb5-97df-21c3d813d282",
        "cursor": {
          "ref": "69d7d8b5-7276-469f-880e-b63a0a55a5f3",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "d39c4289-c6f4-4cac-a488-166d86ac7171"
        },
        "item": {
          "id": "72da12c8-fbc4-4eb5-97df-21c3d813d282",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "851547e1-9996-4af7-8ff8-a9667821ee2f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 47,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "eac8579f-181d-4e0f-bdcb-be0736ab1837",
        "cursor": {
          "ref": "2f95fdbe-de2f-401a-8e22-53113d775f6d",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "576aaa2b-9382-460d-b28d-2163a6f62f01"
        },
        "item": {
          "id": "eac8579f-181d-4e0f-bdcb-be0736ab1837",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "b985c70d-1c92-4b3e-8923-676454e21bc3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 48,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "b6f5e303-3f7c-4577-8c6e-8739c878f20b",
        "cursor": {
          "ref": "6e7314bb-b0b0-4e69-9a53-209f27976824",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "749ef32b-e92e-4cf7-936d-67940fb19c9f"
        },
        "item": {
          "id": "b6f5e303-3f7c-4577-8c6e-8739c878f20b",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "b818c828-5110-40e4-9746-b5977007ecc4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "79710a0f-9143-4bfe-8fb2-93cd3e91e29a",
        "cursor": {
          "ref": "39e2f227-8e60-4d4a-9322-98349b5c2290",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "295065fb-658c-4dd7-adaf-34c4345c2b53"
        },
        "item": {
          "id": "79710a0f-9143-4bfe-8fb2-93cd3e91e29a",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "6a1851c8-8c87-46f1-ab68-66a2407c2702",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "fc13a986-0e97-4739-b179-345961d1112a",
        "cursor": {
          "ref": "ab6f6b3b-1dca-45e8-b4e4-e7d8ed737ce2",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d79308bb-5948-42a1-8688-449fbf1a7b54"
        },
        "item": {
          "id": "fc13a986-0e97-4739-b179-345961d1112a",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "01129d9e-66ff-4b24-8cf9-496a160b185f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "92424b7c-1717-4b93-b81e-5341a1df832a",
        "cursor": {
          "ref": "881fc17e-0745-464c-af4b-1b277c44ba40",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "96abaaaa-ab00-4fdc-8977-d2a58b80cf2f"
        },
        "item": {
          "id": "92424b7c-1717-4b93-b81e-5341a1df832a",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "db06f85a-a736-4cd6-b49d-5103de709609",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 43,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "3ce8b7b8-00bf-47dc-838c-a6612340dd30",
        "cursor": {
          "ref": "16b41f9b-d83b-42b5-9bb5-5fc0d91d330c",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "0e2ee5c4-6f7f-4883-abc7-28fdc88c678f"
        },
        "item": {
          "id": "3ce8b7b8-00bf-47dc-838c-a6612340dd30",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "d943def0-a17c-49f6-b969-15dc3c8b3831",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "394775fd-5ee3-4b4b-87db-f9cc4fa0de78",
        "cursor": {
          "ref": "cb567ea9-969d-4253-be4d-b1831936b428",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "55a77d38-d488-471e-9380-b4e67dd8083d"
        },
        "item": {
          "id": "394775fd-5ee3-4b4b-87db-f9cc4fa0de78",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "7ff0074c-4dfa-4470-9619-3485cbc5c5ac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 41,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "6c0ff1c2-020d-43b4-8f0e-664675391586",
        "cursor": {
          "ref": "a9739edd-cb6a-4b98-a00a-ce8ee46021ef",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "841bb209-13d8-47a9-ae93-84e8af5ef339"
        },
        "item": {
          "id": "6c0ff1c2-020d-43b4-8f0e-664675391586",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "18b0d52b-54f5-45d3-aaa7-a7a53829cdf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f430f9c-3422-4e8a-a3e1-a565912f9a1a",
        "cursor": {
          "ref": "debd0d54-03b9-43f4-b985-dd906a9ae2dc",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "b57c3798-6afb-4303-bc27-f5fd8712a347"
        },
        "item": {
          "id": "9f430f9c-3422-4e8a-a3e1-a565912f9a1a",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "4cd0d2ca-825f-48fd-bcd5-c54276453de2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70402f7b-a032-40b7-a50b-982a63e682f5",
        "cursor": {
          "ref": "07fe3f4e-95d0-4bf3-824e-fe36c8f765fa",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "285dd52e-eb61-4cae-9851-947a51ba305f"
        },
        "item": {
          "id": "70402f7b-a032-40b7-a50b-982a63e682f5",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "7a52a9fd-f774-4050-a876-17e4178cfd37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09c41602-ea93-40a9-9afe-87b36785da0f",
        "cursor": {
          "ref": "f58d9b3f-1327-4583-842e-1a149437a917",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "8273fbaf-4c42-4e2c-95ca-68f4cb496a86"
        },
        "item": {
          "id": "09c41602-ea93-40a9-9afe-87b36785da0f",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "264a41df-1d55-4a82-99eb-1dcad7b9429d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d830f05-d60c-4dfc-9579-09632222a3f2",
        "cursor": {
          "ref": "55d9af1c-c1d4-4383-b7c4-baa6666bc686",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "2342bfb8-39a1-4f3e-a835-2523facb4d51"
        },
        "item": {
          "id": "9d830f05-d60c-4dfc-9579-09632222a3f2",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "53d8980d-d0fb-4306-8e4b-41657be549ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7f851c5-90ee-4a3c-8d59-25eca23f0e29",
        "cursor": {
          "ref": "f641a2dd-4347-46cd-a630-05ad49882580",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "5b6f4d96-5d75-4929-88f5-42363c43fd06"
        },
        "item": {
          "id": "a7f851c5-90ee-4a3c-8d59-25eca23f0e29",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "b8aca07d-72b1-4076-a54b-5ad84fb771de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14aeb113-05aa-4beb-a6f4-d02634811260",
        "cursor": {
          "ref": "ad864548-0eb7-4dcf-a8d9-22eab5d05ff1",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "7dbe03c6-5ec7-4128-b325-3f94f4debb31"
        },
        "item": {
          "id": "14aeb113-05aa-4beb-a6f4-d02634811260",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "278ce25c-0cd0-44fe-8eed-040eb2400afa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c3905c8-a8c6-4df3-8946-785ce5876451",
        "cursor": {
          "ref": "029c6f98-ff99-4fcc-8a32-6b50cdaea75c",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "8b2b5d4c-e625-4b92-95f1-33e40287e2a2"
        },
        "item": {
          "id": "3c3905c8-a8c6-4df3-8946-785ce5876451",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "ee7d123e-3f16-4b36-8c8f-d99a2283c8f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84245be8-2bc0-49e7-bc1f-e552b9cdc714",
        "cursor": {
          "ref": "4c728f41-2fd4-4a99-8efb-bfb09aade17c",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "33bf5eff-35d4-4e7c-9a79-2b9d8b414f28"
        },
        "item": {
          "id": "84245be8-2bc0-49e7-bc1f-e552b9cdc714",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "76561f87-1dba-40bf-b198-74c9e5d7beb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "101c955d-5333-4103-9584-e7c6a33ba3a4",
        "cursor": {
          "ref": "14418f82-61e8-4f36-b117-530be0abd925",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "cffdd1c6-739c-41a1-8efd-87162e30d3ee"
        },
        "item": {
          "id": "101c955d-5333-4103-9584-e7c6a33ba3a4",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "9a7538f7-78be-434c-b1a8-29c086151c49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c72cb574-21e6-484f-afa3-851a83462bcc",
        "cursor": {
          "ref": "fefb3467-2af1-4f03-b73f-6050d6409fd5",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "8ab9335a-e317-4734-8755-b6a9712bac8d"
        },
        "item": {
          "id": "c72cb574-21e6-484f-afa3-851a83462bcc",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "f2fd5306-22b9-4f17-9c8f-6b2ded0d607b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97f8f8de-af06-412b-a43e-cb834f166a29",
        "cursor": {
          "ref": "a33daba6-17a0-4738-be6d-965a298994e4",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "2f50dab3-ceaf-4b91-b2b1-a16848164c7b"
        },
        "item": {
          "id": "97f8f8de-af06-412b-a43e-cb834f166a29",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "0931c679-e7af-4e1a-9061-5f9fd4276982",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77a2672a-401d-4c24-b046-c56d187d2184",
        "cursor": {
          "ref": "0804f8cc-15dc-45cb-a292-14a48e585684",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "16389e6e-f96a-4238-84ce-b78f56141512"
        },
        "item": {
          "id": "77a2672a-401d-4c24-b046-c56d187d2184",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "03aa89b5-2499-4400-832b-eff898356d22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67ca7d7e-c0e9-4ea1-a010-29f5249ffa1c",
        "cursor": {
          "ref": "c88df831-0d1a-479e-9ebc-5fc2bd08e8ee",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "c816c244-72b6-4e73-8796-e5ff510c6fe5"
        },
        "item": {
          "id": "67ca7d7e-c0e9-4ea1-a010-29f5249ffa1c",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "2774a182-0bcd-4d2c-9eac-b4f2cf3131d5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "1bec76fa-81e4-4612-ba79-6759594429bf",
        "cursor": {
          "ref": "a30e7f9b-c70a-4ead-853a-f8cf0155c8b1",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "74ff2150-7616-4dda-a55d-54d55ada0c0f"
        },
        "item": {
          "id": "1bec76fa-81e4-4612-ba79-6759594429bf",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "282430c4-5e66-4c01-b264-6590498277bd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 41,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "243383e2-1c24-4a98-9197-bba6ec79a10b",
        "cursor": {
          "ref": "d53a378a-4e78-4e1d-bd9b-97225fcbba12",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "3928249d-67da-4f68-b93c-b0e617c379ab"
        },
        "item": {
          "id": "243383e2-1c24-4a98-9197-bba6ec79a10b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "c2afb773-7a0b-4839-a180-4f37976a7ed0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 45,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "d953742f-4cfb-4534-8594-de32dca36ca4",
        "cursor": {
          "ref": "7ea4ee6c-bf6e-4a80-85fc-c87a0f02f291",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "2e253cba-d983-4d73-953a-5e38547e5ef7"
        },
        "item": {
          "id": "d953742f-4cfb-4534-8594-de32dca36ca4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "3850143f-d58f-43e0-8dbc-1e1e6fb5597d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "0427f354-750e-4d6d-8228-1f6f90fd56e4",
        "cursor": {
          "ref": "5a28bb18-8a8b-4029-a5d6-17eb951601c8",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "0b63cf71-5a6d-4139-b2b3-5737b873c6e7"
        },
        "item": {
          "id": "0427f354-750e-4d6d-8228-1f6f90fd56e4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "783b32bd-0640-433e-905b-dd0bbc2b6fb5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 42,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "6ef5431c-1eb0-45cb-8e1f-d03515810416",
        "cursor": {
          "ref": "6f0e3687-7eb1-424c-82ba-e624466fe7d4",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "14fc0b91-1103-41a9-b00f-9392cbe27839"
        },
        "item": {
          "id": "6ef5431c-1eb0-45cb-8e1f-d03515810416",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "891d4385-cd98-4cdd-821a-f8ce3adb1ed2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d66e0e50-7a37-4fdc-acf5-fb7e25a30152",
        "cursor": {
          "ref": "db5d6304-0618-4d64-9854-9ef15b2bb614",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "eb4057e5-cca5-4166-b4ca-2fb4c1a25419"
        },
        "item": {
          "id": "d66e0e50-7a37-4fdc-acf5-fb7e25a30152",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "baa4d75e-1d1e-4270-bf57-ac7697c97858",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bcff761-a903-410d-8000-d769432e8e93",
        "cursor": {
          "ref": "b787a913-3089-4dbb-b8c0-9ff15828dbad",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "58ef1ac2-8dd9-4b39-b585-33229665c324"
        },
        "item": {
          "id": "6bcff761-a903-410d-8000-d769432e8e93",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "d0ccc1e2-2649-4975-a4a5-48ca49d7846d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cef43445-3fb6-4fbb-9d78-ce5edb2485d4",
        "cursor": {
          "ref": "b77ac3f1-ce02-4f81-9477-732fa71872db",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "eb64f675-a554-447b-b358-0f6b3caa2ba4"
        },
        "item": {
          "id": "cef43445-3fb6-4fbb-9d78-ce5edb2485d4",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "319677d5-68b9-4ffd-a70e-43dbe2654e2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a439f4a2-2ef2-4606-94ad-e0c4c8fdd6cb",
        "cursor": {
          "ref": "1d38a16c-3af1-4b88-8bb6-cb7438748aa3",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "15bd9b1f-6044-4269-bcc4-b7cbcca79099"
        },
        "item": {
          "id": "a439f4a2-2ef2-4606-94ad-e0c4c8fdd6cb",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "0f2913bd-0050-4c09-bed9-3fd6f451e4d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aadd3140-dcd8-44d2-a52c-897afe772429",
        "cursor": {
          "ref": "55b4b19b-ac0a-4afd-aa87-dfe97e5ea8e6",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "a8d90ca8-2d68-4449-a949-c6805a350d3a"
        },
        "item": {
          "id": "aadd3140-dcd8-44d2-a52c-897afe772429",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "156c4051-69c5-4ee2-9ebf-d0c441d77293",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a761b36-9254-4c91-895a-2cc62d898c67",
        "cursor": {
          "ref": "82293da0-51b1-4556-9da9-3c713e23ae21",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "3ce17fa8-4e19-4e01-aee4-b8687d8538aa"
        },
        "item": {
          "id": "9a761b36-9254-4c91-895a-2cc62d898c67",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "af2fe5ca-6a86-4a4e-afb2-ecfd095fd043",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99d86cc8-441d-4fda-a019-d035e978bd32",
        "cursor": {
          "ref": "8d4d8294-d070-46f8-bbef-4828f7091b4b",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "5a323e21-e999-4efb-85aa-3fe949de9a5a"
        },
        "item": {
          "id": "99d86cc8-441d-4fda-a019-d035e978bd32",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "0ac0089f-d9a9-4375-afd5-c88cdf7d1dde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39dddabb-cfae-4476-8ec9-53637f9274d2",
        "cursor": {
          "ref": "fbab2b1b-fe60-4857-bd8f-5352a046fc43",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "843c36b2-fd77-4ecf-9e6f-c3567ee6bbbf"
        },
        "item": {
          "id": "39dddabb-cfae-4476-8ec9-53637f9274d2",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "d9069234-058e-44a7-9c5b-dd9e12124b35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f12f844-d7c3-4bb8-bfab-f25227d5c97b",
        "cursor": {
          "ref": "dc125919-1a29-43c6-97df-8ac0680e4bfc",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "98ca1870-ecc4-4b57-804d-f48ecd8fe6d9"
        },
        "item": {
          "id": "3f12f844-d7c3-4bb8-bfab-f25227d5c97b",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "9eb2047f-9328-4f78-9078-b4c1b7a3eb3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6507f803-6032-4028-b4bb-21107154cc88",
        "cursor": {
          "ref": "02c03a58-701b-4d30-a2cf-f8c4342c84ef",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "928c1848-8fb3-4d3b-8ffb-b8411788682d"
        },
        "item": {
          "id": "6507f803-6032-4028-b4bb-21107154cc88",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "a992487b-ac32-43f3-b7b1-4e80cb802959",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1217b27-622e-4e6f-ba24-0a8dc353d6fe",
        "cursor": {
          "ref": "ba747cb2-bae0-461e-a64a-77b3f0b23728",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "5b510242-ebf7-41d5-a028-c3e13b737d71"
        },
        "item": {
          "id": "c1217b27-622e-4e6f-ba24-0a8dc353d6fe",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "b71ce05e-c54a-4963-b4e9-c34f5195c235",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4e9135b-54e0-4c04-8b35-e2c6df2dd145",
        "cursor": {
          "ref": "fa808956-1c15-45a6-90d4-eaaf92c6be03",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "c5ccc33b-45da-44be-9408-cdd1529facb2"
        },
        "item": {
          "id": "c4e9135b-54e0-4c04-8b35-e2c6df2dd145",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "4d721602-358a-4c43-9277-a810715c8781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9062adf7-461b-411b-810c-ab94d38ae12d",
        "cursor": {
          "ref": "0ec0c324-9dd2-40bd-8883-925cd23cbd0c",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "d0ec9e3e-7c90-4c99-9a5b-8dd8069360ab"
        },
        "item": {
          "id": "9062adf7-461b-411b-810c-ab94d38ae12d",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "eae410e7-80d3-46a8-a155-a4b5b76cbc50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fa189df-c8f0-423b-9caa-b73542276bc5",
        "cursor": {
          "ref": "181e7abf-2169-4ba4-8354-bf01cc0a2c06",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "ba5d6c58-a846-4df3-be4e-73f130197d97"
        },
        "item": {
          "id": "1fa189df-c8f0-423b-9caa-b73542276bc5",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "162a9864-dce9-4516-bedf-66a13f916ba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef1da43b-0b1e-4a7b-9c08-d403cbe7183f",
        "cursor": {
          "ref": "942890bc-88ae-4804-a386-0f46361f5589",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "520e06cc-3ff5-432a-bb9f-267bf6e50870"
        },
        "item": {
          "id": "ef1da43b-0b1e-4a7b-9c08-d403cbe7183f",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "c150910b-3105-4ec2-894a-ff5abaaaabb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e564daf6-0535-4d6b-a382-78adac1ee365",
        "cursor": {
          "ref": "bef57348-66b2-4fa1-a0a8-859dd0d3fe46",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "029caa26-71cb-44bf-92d5-bd5f4a570292"
        },
        "item": {
          "id": "e564daf6-0535-4d6b-a382-78adac1ee365",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "7dd45730-243e-4411-bba1-74eccf2bc2df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f65f5a5e-6b63-4b19-9c67-371b2ed3e901",
        "cursor": {
          "ref": "6761ea43-fd11-4db7-b8b1-9c8a10375b7e",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "c238dcf6-92f1-4453-bb05-5336bb7e1652"
        },
        "item": {
          "id": "f65f5a5e-6b63-4b19-9c67-371b2ed3e901",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "bd744cc7-75c3-4a5b-ae2f-eeb07bfc9b0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66c5f079-b1e5-4da1-b212-8f2103ee9a0d",
        "cursor": {
          "ref": "7152643b-1136-4c32-ba9f-7c2125414484",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "d9d83705-eccf-4f13-9197-d2eb5ecf4e59"
        },
        "item": {
          "id": "66c5f079-b1e5-4da1-b212-8f2103ee9a0d",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "0d52fa64-3c70-42b9-96c6-9a9f0827129f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea3d2f11-2bd3-4509-b375-96e8190283d7",
        "cursor": {
          "ref": "0dfd3ff8-381a-4703-b644-48a332b4c6f5",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "1e638d23-6875-4cc1-859e-c8dce64f5277"
        },
        "item": {
          "id": "ea3d2f11-2bd3-4509-b375-96e8190283d7",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "e7811b4d-6332-4133-a510-c3ffcd7e2623",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "962ad4a9-20d1-4199-b3a0-9886802eac25",
        "cursor": {
          "ref": "a2dc940d-f388-4611-9167-d7e4f7b2be24",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "901a8469-a94b-4cbc-9863-2018e88cc01e"
        },
        "item": {
          "id": "962ad4a9-20d1-4199-b3a0-9886802eac25",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "034ab70a-8576-4d74-a7d9-580ea60202b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c6da510-a36c-46ea-b2e2-e1ba85b7b95b",
        "cursor": {
          "ref": "a343e328-1448-4ee0-8fd0-c4f80363561f",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "17cd0cf3-5ffe-4223-b26b-7c14d7b24c5c"
        },
        "item": {
          "id": "6c6da510-a36c-46ea-b2e2-e1ba85b7b95b",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "8f23e866-c904-4b14-be27-bbf8f91bac74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4751078b-1fde-498f-b61c-dec44471c294",
        "cursor": {
          "ref": "e22990ef-efa8-4043-9caa-5cbdd39fa12c",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "72f61b40-2ad9-41bb-80e1-ff78911ef351"
        },
        "item": {
          "id": "4751078b-1fde-498f-b61c-dec44471c294",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "cd9e2554-59d0-41ea-9499-d911000f36f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "569116dd-01d3-4028-84f5-accfce587727",
        "cursor": {
          "ref": "8b55c5ea-08e3-43de-a5c7-134ef0a28ec0",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "a0e45820-303c-4792-892b-e9d9445c6988"
        },
        "item": {
          "id": "569116dd-01d3-4028-84f5-accfce587727",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "5ffc9f08-7be1-403b-b036-efa0812fc6dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f815837-dd4b-4d2c-885d-e4733cfc5dcf",
        "cursor": {
          "ref": "b7a5b30d-e34a-463f-bbd6-3485411403eb",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "6430be97-6c8a-417a-9493-6257fd31a3bb"
        },
        "item": {
          "id": "8f815837-dd4b-4d2c-885d-e4733cfc5dcf",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "5a5fe8d7-4f12-4e16-bc5e-ee5c3e64f64e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "191524c3-9d78-4dab-9473-091ff9978ec3",
        "cursor": {
          "ref": "8745b401-1d86-4e63-9b9e-d52c37d5f618",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "8da09a07-96db-447b-a285-a08bce81f9ad"
        },
        "item": {
          "id": "191524c3-9d78-4dab-9473-091ff9978ec3",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "54039ded-68b9-4458-98bb-052574658856",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a9bace2-1afd-4e34-ab68-9cdbdb47d74b",
        "cursor": {
          "ref": "13213117-8e63-4874-a995-b1c6db1b24b2",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "38ee8ec2-9bc7-48b6-a532-695a0cf3c44e"
        },
        "item": {
          "id": "9a9bace2-1afd-4e34-ab68-9cdbdb47d74b",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "71eb878e-0506-4276-978e-0493d9a06285",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3fec34c-f700-43cb-bc8b-9e99abd792ce",
        "cursor": {
          "ref": "e7c4ed73-6a5b-4271-86ce-ab452723b85a",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "4942a7b0-f923-4c06-aa55-0708ed98b2c3"
        },
        "item": {
          "id": "b3fec34c-f700-43cb-bc8b-9e99abd792ce",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "e77f764c-1f1f-4d62-a64f-5da51e23daeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b67a1db-7597-4ef8-8248-4facc5bc45d8",
        "cursor": {
          "ref": "2c0fbf16-a113-4f7c-99dd-bb5330b461cc",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "dcd16ce9-fe2d-4b1c-a6eb-04218cd2e771"
        },
        "item": {
          "id": "8b67a1db-7597-4ef8-8248-4facc5bc45d8",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "3002b195-d53a-425d-9ca4-3a155fed0d4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22de42dd-e882-4908-a617-829b9d4eaffd",
        "cursor": {
          "ref": "deb42b76-db3e-4b56-a622-188f3090b698",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "398bc897-8035-4914-98cc-4382b04f56fc"
        },
        "item": {
          "id": "22de42dd-e882-4908-a617-829b9d4eaffd",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "e8e402cb-06fa-44bd-be92-7a5f8ab3a714",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84e903ae-b24d-4adf-8741-c1e3e6ff4966",
        "cursor": {
          "ref": "7ca201ae-3e53-481a-8d45-0a0608295819",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "b7148c18-3b3d-4c3e-8860-9c2ccfba51aa"
        },
        "item": {
          "id": "84e903ae-b24d-4adf-8741-c1e3e6ff4966",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "ec852202-fc46-49d3-ba72-eedee1de1bbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc0da66c-1b37-47d8-96ba-b5296319a41c",
        "cursor": {
          "ref": "1b5a6fbf-241e-46e9-92c6-4080c97fd4d3",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "b9562857-c72e-4eb2-ada1-b420584704b6"
        },
        "item": {
          "id": "fc0da66c-1b37-47d8-96ba-b5296319a41c",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "8e010ba5-1c9b-4484-9eb3-15a4e70609f0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7353391-d649-4a35-841b-1efafa1ed343",
        "cursor": {
          "ref": "f5e2c142-909a-474c-982d-f6eb097f37f1",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "3b3fcbe3-dc4a-45df-8846-ca0fcdf72410"
        },
        "item": {
          "id": "b7353391-d649-4a35-841b-1efafa1ed343",
          "name": "credentials_issue"
        },
        "response": {
          "id": "698f7a77-242c-4036-a790-aa78f0665be8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:102)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:102)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:102)"
            }
          }
        ]
      },
      {
        "id": "04cc6c19-de15-4ef0-84ba-e8dd60e23f84",
        "cursor": {
          "ref": "742339ce-bc18-4f1e-b1aa-8c52f3584f5e",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "27833a37-8be4-4a68-8824-bbb8e3cc31c4"
        },
        "item": {
          "id": "04cc6c19-de15-4ef0-84ba-e8dd60e23f84",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "f10f2bfd-0587-4f06-9216-f2244021d020",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 40,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:103)"
            }
          }
        ]
      },
      {
        "id": "18da8465-cd49-48c4-b0c8-50e1522530ca",
        "cursor": {
          "ref": "6f5c5100-0246-4fdf-b067-b5a4259c3422",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "cf728874-1b4d-462a-8faa-f55263176f86"
        },
        "item": {
          "id": "18da8465-cd49-48c4-b0c8-50e1522530ca",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "d311199b-6f36-4430-a2fc-e2141d61d810",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 44,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "af20ea7b-3240-4f78-9669-a5786d927f95",
        "cursor": {
          "ref": "dc9c5b71-983d-4e45-9871-174770fb7385",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "c4f8a301-2e60-4ed3-87b3-5b90e26784de"
        },
        "item": {
          "id": "af20ea7b-3240-4f78-9669-a5786d927f95",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "7660f5ec-5f8a-413c-8891-8433faebe03c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "15000a60-634b-441c-a285-1fd171dd1a7a",
        "cursor": {
          "ref": "67e014fc-5017-4936-acb6-2eb40399c373",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "e3636d28-4def-4a66-b95d-72d804d4f1f0"
        },
        "item": {
          "id": "15000a60-634b-441c-a285-1fd171dd1a7a",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "13beb64d-c65e-43ac-9c4a-482b3a8b2245",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "d82eedcd-c02c-4592-aac1-d1abb36793e0",
        "cursor": {
          "ref": "9a3013eb-30b9-4cb4-b5fa-16cf27ab6ce1",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "46345ae5-4cd5-423e-a84f-c897267c711f"
        },
        "item": {
          "id": "d82eedcd-c02c-4592-aac1-d1abb36793e0",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "034330d2-3b73-409b-9633-a3c3b10c6066",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 37,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "26e1667f-872c-4926-88a4-06e39b1457d3",
        "cursor": {
          "ref": "e771f7fe-67b1-40a5-b321-1a9454360694",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "70d1501a-6251-4d8d-86c3-3f90599c34df"
        },
        "item": {
          "id": "26e1667f-872c-4926-88a4-06e39b1457d3",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "5f977b8c-f9f6-4676-9d17-862a14250354",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1481bfc1-154a-47d7-8ce1-5dbb8c3fb995",
        "cursor": {
          "ref": "00d36341-a03a-4f8d-b508-0bf8528ec3aa",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "85fb6dda-d0ec-4f13-b9a6-94f5972a61c6"
        },
        "item": {
          "id": "1481bfc1-154a-47d7-8ce1-5dbb8c3fb995",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "a34fdb5c-5665-4daa-aab6-3f3a36a5738e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f836fc36-8831-43c5-8844-6c26ab725e87",
        "cursor": {
          "ref": "0f3c132a-b61b-4693-b395-96d0617d86ec",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "bfa9605e-1660-4e75-8a57-53126d975db0"
        },
        "item": {
          "id": "f836fc36-8831-43c5-8844-6c26ab725e87",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "8d2d7b77-8ddd-4fb8-9e0e-4ee4d942c03f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "438aa352-c8d3-4b56-911b-3087be456a4b",
        "cursor": {
          "ref": "9aa50a8f-c5d0-4290-aaf8-807d86e8f239",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "410ec5a5-f750-4f67-a3b3-bbb7598aa2dd"
        },
        "item": {
          "id": "438aa352-c8d3-4b56-911b-3087be456a4b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "5502dc18-e211-4e78-8424-f236e0f2a1f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2d2107b-de6d-4c08-8518-be2bd4d47e84",
        "cursor": {
          "ref": "1a0765f9-a187-4722-8d64-c16b7870168d",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "9ccd2d6f-b900-4398-a817-f292bacc6ff1"
        },
        "item": {
          "id": "b2d2107b-de6d-4c08-8518-be2bd4d47e84",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "27821530-30bd-4a89-b64b-563de9440585",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a113d17-2c0a-4acd-ac1f-d40b7cff79d7",
        "cursor": {
          "ref": "0fe604a6-289c-4c42-94a3-3e0fe4e6b80f",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "a53f7dec-b59a-4326-8cea-0b5b1d261f60"
        },
        "item": {
          "id": "1a113d17-2c0a-4acd-ac1f-d40b7cff79d7",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "abe0e9d5-a02d-4d7c-b921-6255abfa5408",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e92ddae3-205a-4c0d-944a-5d8101a4f576",
        "cursor": {
          "ref": "eb93bb0a-87fa-4224-833a-9b409558fb92",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "0150e860-1682-4508-ad14-4f396a790d83"
        },
        "item": {
          "id": "e92ddae3-205a-4c0d-944a-5d8101a4f576",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "53920fdd-56db-49c9-a914-56a977846ae4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10c6e12c-0d7b-4c45-ae9a-b11a196ab995",
        "cursor": {
          "ref": "55d5e6b3-67a3-472e-8bfa-c18a8b73238f",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "6b9e33f4-e85c-4377-a98c-0d6db55515c7"
        },
        "item": {
          "id": "10c6e12c-0d7b-4c45-ae9a-b11a196ab995",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "3f112d5b-9b12-4b2e-8574-71d711465752",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53ef16ea-ed68-48fb-a76e-be5481b0139b",
        "cursor": {
          "ref": "b09ec6c2-2a4e-41b4-a615-470421d5c7b4",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "4426469d-e16e-4141-a7ad-b4227eaf13fc"
        },
        "item": {
          "id": "53ef16ea-ed68-48fb-a76e-be5481b0139b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "33947947-b1e4-4044-9726-64918029997f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d229554-ee74-444d-a8e4-acd8558c41cc",
        "cursor": {
          "ref": "17f70dbc-5e4e-4947-bd38-ad232caf2634",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "28192666-c4b9-454b-a62a-991f8591429d"
        },
        "item": {
          "id": "3d229554-ee74-444d-a8e4-acd8558c41cc",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "60b71218-b3b8-4bd3-92b9-cd5f58ccc368",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27158dcc-e0f3-441d-a58f-46dbbe33c125",
        "cursor": {
          "ref": "89e37964-0fdb-4b56-9c9d-d0e1986b0a7a",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "8213fed8-d1c9-48c3-8ca9-f07f234bafef"
        },
        "item": {
          "id": "27158dcc-e0f3-441d-a58f-46dbbe33c125",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "48ff2c18-4c72-4edd-8722-00d89b192a74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d947bf4-bd79-4478-9916-4ece18b1476a",
        "cursor": {
          "ref": "85da6189-eda1-4a30-a0e4-b4f6ee79d99b",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "14e988c5-0f3a-43f5-bb94-7aaee9f480dc"
        },
        "item": {
          "id": "3d947bf4-bd79-4478-9916-4ece18b1476a",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "cd8a8369-9501-441e-ac89-8bd430f04e13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f1485c0-c77a-43b6-b2fd-3863a0949286",
        "cursor": {
          "ref": "e45905a2-a8ff-4b5a-9ea8-568821dafa7f",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "3c8b5306-450f-4e0e-995a-ef70bcc6802b"
        },
        "item": {
          "id": "7f1485c0-c77a-43b6-b2fd-3863a0949286",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "7f254529-c715-438b-90d3-cfd54414c109",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "279191e6-9314-41f4-b460-8bcce8f4585e",
        "cursor": {
          "ref": "2654a5de-e1e7-4709-b411-03983de2a4c5",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "5158ca10-a15b-45ca-965a-966f5fb6ef93"
        },
        "item": {
          "id": "279191e6-9314-41f4-b460-8bcce8f4585e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "b7f6f062-1e2e-4960-a658-ca340e3e1442",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0af7508-a0be-46d7-86a5-6d57d4782993",
        "cursor": {
          "ref": "2424dca4-23e0-47d6-8354-74c5283dae67",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "3fb33796-2fce-4708-98e4-e87688a39047"
        },
        "item": {
          "id": "c0af7508-a0be-46d7-86a5-6d57d4782993",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "d5168087-9934-4476-a673-badd937e9df9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db202438-80c7-4119-9810-f423b62b1403",
        "cursor": {
          "ref": "041c6e9a-d5e9-49bc-ab4f-a627ecc6485f",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "06cb03c0-f19b-46b7-871b-e7004dce3f72"
        },
        "item": {
          "id": "db202438-80c7-4119-9810-f423b62b1403",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "f7fd3100-d55a-4210-9a68-c0599de32da7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "243b6d7e-911d-4176-8b67-033ca1248e81",
        "cursor": {
          "ref": "bad5b89d-6f0b-41ff-8fa6-5feda8b13a84",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "8c71290a-f9f6-41d3-93dd-20127006be44"
        },
        "item": {
          "id": "243b6d7e-911d-4176-8b67-033ca1248e81",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "9b814f38-4713-41a9-aaba-eb4f901ed6a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef92413a-c1c0-4cdb-ae7f-18fd9f81e03d",
        "cursor": {
          "ref": "7fb66dde-a2d8-411b-b85e-066f58185366",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "770339b8-3104-4f8a-b7ef-13a2f23d9e38"
        },
        "item": {
          "id": "ef92413a-c1c0-4cdb-ae7f-18fd9f81e03d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "e3431ab7-a5d2-407f-8bc1-251f43834e21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e53257d1-2157-4bc6-8690-f0283c5a4baa",
        "cursor": {
          "ref": "67486126-907b-42fb-a818-155349c4f1aa",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "dd375e02-1504-4ba3-b727-3ebd0474181b"
        },
        "item": {
          "id": "e53257d1-2157-4bc6-8690-f0283c5a4baa",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "8cf1a13b-0a27-4401-ad6b-adeffe615964",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c008264-4a4a-493b-b4b3-8b8e55713835",
        "cursor": {
          "ref": "a50e896c-5343-42f2-b98f-6bf846c994fc",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "232b2f1f-463f-4f37-801f-a8fc637e8ff4"
        },
        "item": {
          "id": "6c008264-4a4a-493b-b4b3-8b8e55713835",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "95e2aebd-0bce-4128-bcc2-3f69cfd5647c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91b7d82c-289e-473c-90b6-a6c80015712c",
        "cursor": {
          "ref": "094a0971-c5aa-4eda-a911-fef9ba4e8eba",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "47c21a35-5741-4c97-a8c1-8ceda131b652"
        },
        "item": {
          "id": "91b7d82c-289e-473c-90b6-a6c80015712c",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "71220a10-d4d4-426d-a671-aa10332158e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbed71b3-dc65-4448-bd5f-fd736182b560",
        "cursor": {
          "ref": "68bc2d62-50e7-4b22-b788-3b29fec30715",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "0d08bdda-c6fb-4873-85c1-ee87080df7cc"
        },
        "item": {
          "id": "cbed71b3-dc65-4448-bd5f-fd736182b560",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "8cf3211f-632a-41c3-a0a7-068b629a8b17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2951617e-229a-4935-9066-b735482d9d42",
        "cursor": {
          "ref": "62495804-18f1-4226-8d2e-bbfbd4f43e6a",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "ce952015-b507-4e09-a936-82a4293717b3"
        },
        "item": {
          "id": "2951617e-229a-4935-9066-b735482d9d42",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "79fa8230-fb79-4a23-ab63-5baed9c5f6d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2429b1c-4307-4ec9-ab2c-66231b1c500d",
        "cursor": {
          "ref": "06b0e27c-b66d-4c2f-9461-13eb6e9ddcf1",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "9d3bad89-472a-4f7b-94ad-66c46de02b68"
        },
        "item": {
          "id": "b2429b1c-4307-4ec9-ab2c-66231b1c500d",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "93615feb-49b3-4ce3-8f00-312b35fb5b94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9652820-84d8-48a7-8c9a-dbabd85417bd",
        "cursor": {
          "ref": "744f3dd5-7cdf-4c78-8d3f-e63e74e3d3ad",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "b4d9d1d4-61aa-46b0-bf82-db01e9bca01f"
        },
        "item": {
          "id": "a9652820-84d8-48a7-8c9a-dbabd85417bd",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c47abf3f-1f67-4474-94bb-4ddb6ac9001c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b5e7050-216c-4846-929e-53c4dd1ecb3f",
        "cursor": {
          "ref": "465535a5-ce54-4110-97c3-d1ce4b28f492",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "e066828c-4569-414a-9b3e-b4dcff4f0cef"
        },
        "item": {
          "id": "1b5e7050-216c-4846-929e-53c4dd1ecb3f",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b018fb31-b49c-4f94-8369-472f7fd4e968",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb3f3bc0-263d-4519-8dbd-261a97ac0e70",
        "cursor": {
          "ref": "7d8fd891-1195-4a4e-b141-b372223333aa",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "64984f79-cc9c-46d6-8e8c-b5083cbb60e7"
        },
        "item": {
          "id": "cb3f3bc0-263d-4519-8dbd-261a97ac0e70",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f494000f-3f4a-4a61-a1e4-d3aab7f55181",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "727e7e24-82e2-403b-b489-350edd3ee537",
        "cursor": {
          "ref": "f536cce8-fd91-4de5-ac71-9b91b45db3a7",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "c1a27269-7a92-4d59-a8f3-a6dfdfe43c5e"
        },
        "item": {
          "id": "727e7e24-82e2-403b-b489-350edd3ee537",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3a16691e-60de-4835-b096-1f12ef53653c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82d8a713-c17d-4e17-8bc8-e64f78fa7608",
        "cursor": {
          "ref": "85b6fbde-b083-4cbd-a343-7cd0e931e9c3",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "e0aad568-1dee-4928-bae1-03778522b2f5"
        },
        "item": {
          "id": "82d8a713-c17d-4e17-8bc8-e64f78fa7608",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "724b3e8b-a8a8-4bde-a0be-0b21a43c3819",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58d16b0f-85d3-4d5e-97d5-744a03bf9464",
        "cursor": {
          "ref": "12c7062b-76ca-44f0-9ec6-973df5548793",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "00f225c5-7fcc-4959-925d-789f50749f41"
        },
        "item": {
          "id": "58d16b0f-85d3-4d5e-97d5-744a03bf9464",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "6fb7172e-b279-44f5-bf62-7f6be8fc7559",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4538b586-63bb-4523-b927-6f8e2d1f8250",
        "cursor": {
          "ref": "82561145-1d52-44b5-a916-1e2219d461d2",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "4ab84fac-5ff8-4ecc-a5f4-00413bccbed8"
        },
        "item": {
          "id": "4538b586-63bb-4523-b927-6f8e2d1f8250",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "eca9de82-16c2-439e-b17a-c105ab315e94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9485e391-3b6f-48bd-bb1b-6f8c85d93a0a",
        "cursor": {
          "ref": "b92261a5-dd53-4376-9eb3-4e107464d023",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "5b9e1cbd-f67d-44ff-b52b-ae97dc00488b"
        },
        "item": {
          "id": "9485e391-3b6f-48bd-bb1b-6f8c85d93a0a",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "21ed8daf-4f7c-470b-977a-9209255e66b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8d2a101-8f0a-4fa3-ad26-56334fcb1e5a",
        "cursor": {
          "ref": "6d7932ee-1e0d-482c-8974-abc5bd3c1002",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "2aa1d6e5-8b8f-45a0-9f1e-b1a140d4a7d6"
        },
        "item": {
          "id": "b8d2a101-8f0a-4fa3-ad26-56334fcb1e5a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "bbdb86b4-368c-4c4f-8fab-7eddd545e342",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8562c478-98fb-4bfc-8986-ea026271b244",
        "cursor": {
          "ref": "cf2ed591-51b0-473d-aa01-863f331f16c4",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "70f8595a-2b52-4890-9ed2-d70670daea12"
        },
        "item": {
          "id": "8562c478-98fb-4bfc-8986-ea026271b244",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "9bc43c4f-3339-4237-9051-98195cf80736",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93883d9d-3ac4-4306-9ff1-686fc5745410",
        "cursor": {
          "ref": "4887d0cd-9c4f-4376-9917-f48850c6279f",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "5c125b6c-2dea-4565-9d58-8a49d4746220"
        },
        "item": {
          "id": "93883d9d-3ac4-4306-9ff1-686fc5745410",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "3ad6f0b0-7764-4a98-9703-e7a524dab208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee65c3bb-69c4-4349-af9f-63ecfef1ee60",
        "cursor": {
          "ref": "b5c92478-36ca-4e9d-9a23-b764fd87539d",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "03547617-b757-4c40-9e97-901de664c9d0"
        },
        "item": {
          "id": "ee65c3bb-69c4-4349-af9f-63ecfef1ee60",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "239ee71f-7e44-4d97-9cf9-2eb3dbb8b8a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "581ed64c-7dd7-4cb8-b641-72494a8ca621",
        "cursor": {
          "ref": "f8a5fdca-5a05-4532-b811-0a10362c39e3",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "a2905cd5-eaa6-4754-a39f-b6b827d8ce25"
        },
        "item": {
          "id": "581ed64c-7dd7-4cb8-b641-72494a8ca621",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "88e1da2e-4b40-493f-a147-c667461771a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d00e20a-263f-493b-b742-187d68561d4a",
        "cursor": {
          "ref": "187ea13e-d2d7-4c7a-82fa-099decfc3b90",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "d73b3432-cb07-4b1d-95ef-b84ba35b9f49"
        },
        "item": {
          "id": "1d00e20a-263f-493b-b742-187d68561d4a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "ecf8298c-5d85-4af3-8522-51306a28447a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f4412ff-aaf4-41bb-b6e1-e87ad6b8c359",
        "cursor": {
          "ref": "fb008175-22ab-4e9b-9c29-19559f7e4e7f",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "7406cfec-cbe5-45f7-a837-4d9e6021ce77"
        },
        "item": {
          "id": "6f4412ff-aaf4-41bb-b6e1-e87ad6b8c359",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f761d196-4418-43e3-a3fe-90c5d5ef84c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0eea311-48ff-4751-bd97-118312e0a0ce",
        "cursor": {
          "ref": "452438d5-3a50-4a08-915e-455c4fdc3236",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "9bd99a7e-89f4-4a1d-b2ff-c3c900667fc6"
        },
        "item": {
          "id": "f0eea311-48ff-4751-bd97-118312e0a0ce",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "06eb3caa-ab01-44f9-81a4-9f589017371c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41043904-3c01-48af-b906-ff675a3dc9bf",
        "cursor": {
          "ref": "f33e7e6d-66e0-4991-831f-95e4496efc55",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "71af5601-4fc0-42e8-80c0-1aae6f338c41"
        },
        "item": {
          "id": "41043904-3c01-48af-b906-ff675a3dc9bf",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "37cc65a6-4756-4c4e-a449-0fe9b43d7a96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "396ef7c8-af23-4eed-8cf8-771a4d23ef7a",
        "cursor": {
          "ref": "337673bd-00c0-43f5-a8f0-2a2a756cacd4",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "dbad80b7-e23c-4df6-8874-f305091454ef"
        },
        "item": {
          "id": "396ef7c8-af23-4eed-8cf8-771a4d23ef7a",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "3df75cbc-66f9-4453-a42d-546a661508e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94648dc4-7c24-46f5-816f-6b4f78c77db9",
        "cursor": {
          "ref": "60bc74a9-d726-4db1-b102-8ddda8a578ce",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "0ff820a1-01e9-4bc3-ab81-070d5c8891f4"
        },
        "item": {
          "id": "94648dc4-7c24-46f5-816f-6b4f78c77db9",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "9026ce99-8e73-4801-a0d1-1de8b5ff46e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdb7e7fa-cf47-49e0-9e07-02a62423bf69",
        "cursor": {
          "ref": "f585e396-c396-472d-8957-1c79dfd7415b",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "ecba28ee-623c-46ab-acaa-1d4f894ac0fb"
        },
        "item": {
          "id": "cdb7e7fa-cf47-49e0-9e07-02a62423bf69",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a8544589-7269-41fd-927a-81cd1d7fd0bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06476068-df3f-4171-ad57-813621adde3a",
        "cursor": {
          "ref": "d20a3e0b-f057-4112-b7c7-c8cea92443a3",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "11ba5893-d69a-4df2-8ace-fdea55c3057c"
        },
        "item": {
          "id": "06476068-df3f-4171-ad57-813621adde3a",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "77e77265-08a1-4b28-b687-8878883d5ec6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "522bba5e-74e2-4f2b-975f-d160d7bb0531",
        "cursor": {
          "ref": "de8f65d1-5367-47b1-8fb4-a03b30322efe",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "8cb565ec-5b2c-4833-bc9e-4a2d395e03ac"
        },
        "item": {
          "id": "522bba5e-74e2-4f2b-975f-d160d7bb0531",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "eb7697ee-68d0-4914-8e12-2003a3adaee7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b877f90a-80ee-4499-9ba9-450d54192cb7",
        "cursor": {
          "ref": "3fae2500-af93-4ec8-96d1-70addeee6b83",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "ba59cdfe-de8f-4a22-bfec-8df5b3a4ce66"
        },
        "item": {
          "id": "b877f90a-80ee-4499-9ba9-450d54192cb7",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "e18c6ac0-06f0-4dc0-9ae7-419912f52281",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f839513-2a99-4d4e-af29-243020d61d37",
        "cursor": {
          "ref": "8f1638ed-2de5-4600-829b-bb26c19d753e",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "cb0858ce-8f82-492f-bf96-3bb992ea841f"
        },
        "item": {
          "id": "7f839513-2a99-4d4e-af29-243020d61d37",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "0dc34037-da00-41b3-9335-a7bcaef001ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1117c82f-ac4f-432d-9ac8-876552646ad8",
        "cursor": {
          "ref": "9943610c-5aaa-4693-884e-57b0cbb1722f",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "fbeb78e1-d858-4cf2-9342-4efc334a9ba7"
        },
        "item": {
          "id": "1117c82f-ac4f-432d-9ac8-876552646ad8",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e6b73391-a452-4198-b7f7-69941c67cfc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 176,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81ecbc74-3e10-47e9-a57b-8c0125c3d181",
        "cursor": {
          "ref": "6c68a716-f718-4c04-bc61-224fb04034cf",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "bbd8b357-5f3d-4916-858b-e29373d8328f"
        },
        "item": {
          "id": "81ecbc74-3e10-47e9-a57b-8c0125c3d181",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "95086e0c-28d8-498c-b8cd-9afd114f6682",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51b725ec-ff7f-4349-b5a0-589fb17b31a7",
        "cursor": {
          "ref": "6a2a3a89-e05e-4503-9967-62db7850b05a",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "d0bc62bb-73c5-4768-b10a-cd449920cf45"
        },
        "item": {
          "id": "51b725ec-ff7f-4349-b5a0-589fb17b31a7",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "1f651d6c-4bce-418d-8e9c-8455ec8e53fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2d1ad78-dbc3-4320-a7fc-3feb7e006cff",
        "cursor": {
          "ref": "f551fb0e-1765-4b49-8de7-f902dd0707fb",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "ece4b94d-7c1a-4589-ac4e-724e889c5d8e"
        },
        "item": {
          "id": "e2d1ad78-dbc3-4320-a7fc-3feb7e006cff",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "3c419231-9ab0-413e-8013-e9a831786888",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af0f2a6a-ce41-441e-af8a-0eaa3798e775",
        "cursor": {
          "ref": "a8ec6e62-68bf-42a2-9bd8-89e116ffaaab",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "4b9107e8-63c1-4dde-bdf9-e35bb532c164"
        },
        "item": {
          "id": "af0f2a6a-ce41-441e-af8a-0eaa3798e775",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "66ceb57a-06ab-4408-a552-662eae7bb549",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9495595-24f4-4ca9-97de-d285e575d6f1",
        "cursor": {
          "ref": "f35e32c0-1ce3-4995-8fdc-d332ccfd4991",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "c8cfe5fe-9817-46c9-8ee9-8f7cec351049"
        },
        "item": {
          "id": "d9495595-24f4-4ca9-97de-d285e575d6f1",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "608db8b8-8ab9-4977-9527-967f99aef7a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cd5b412-2189-4620-b407-1603c9560f92",
        "cursor": {
          "ref": "7c7f5c66-5d1e-40fd-9387-23f3f6bd5d9d",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "03c2caae-a649-44e2-8d1a-6391e379f59d"
        },
        "item": {
          "id": "7cd5b412-2189-4620-b407-1603c9560f92",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "b6062d52-79a4-4fa9-ab49-b21bc0ffb6ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddf5a7aa-e2fa-498b-8c55-58d8eaf19e53",
        "cursor": {
          "ref": "4fb6efba-3ccf-4dd9-8abd-52653997cb70",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "6523b402-7a0a-4255-bd87-82f6b1c8a948"
        },
        "item": {
          "id": "ddf5a7aa-e2fa-498b-8c55-58d8eaf19e53",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "bd05a416-9114-45d2-bdcc-78017d8f7175",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39d8c15c-4b54-4d1b-8712-87bf13210008",
        "cursor": {
          "ref": "c7c0f730-f7d5-4661-878c-cd8d63abdb6b",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "0fb5c413-910b-4536-8624-b688e3f83e29"
        },
        "item": {
          "id": "39d8c15c-4b54-4d1b-8712-87bf13210008",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b4c43370-0987-4656-b2c6-cbbfe7150e76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b781eaf-7189-44ed-9bb3-d1389aad180d",
        "cursor": {
          "ref": "64b27df4-9a38-4631-98f6-227b0eca629f",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "b0299086-6c2c-4100-9270-b362dcb36d3c"
        },
        "item": {
          "id": "1b781eaf-7189-44ed-9bb3-d1389aad180d",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "3485560d-c4e3-4704-89dc-a344f188b6ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcaf08c7-1137-429f-b0bc-dc029521a102",
        "cursor": {
          "ref": "0ab65445-91ea-462b-91e1-d549706b935f",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "682323bf-4b0e-4bf9-9d47-88a3db98c9fc"
        },
        "item": {
          "id": "dcaf08c7-1137-429f-b0bc-dc029521a102",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "aacc9763-b9e1-44b9-9d9e-1fc68df9fd22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbde77e4-42a4-4d1c-a3a1-52c961a9a231",
        "cursor": {
          "ref": "d51c2032-ade6-449e-9a97-4cb6f93c11e5",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "ffd52516-b250-4cd7-9037-a5f32494003f"
        },
        "item": {
          "id": "bbde77e4-42a4-4d1c-a3a1-52c961a9a231",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "56aa0ebe-3fac-44b9-940b-ef37096a33c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf1b1519-87f0-4b1b-ad50-834841a48e1c",
        "cursor": {
          "ref": "e4f56032-8961-4f7e-a351-d66ec7e813db",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "94fae752-e10c-43b3-93bf-e8bcb4c94c76"
        },
        "item": {
          "id": "bf1b1519-87f0-4b1b-ad50-834841a48e1c",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "6e73576c-4f84-4bfc-9d47-2784da4b2497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c07f4814-f2d0-4d27-939f-3c4878604cf7",
        "cursor": {
          "ref": "a1e9db2b-f73b-4313-9860-7c04bba5ac50",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "9a88a6eb-7dbd-41ce-bbf6-a9e2d759093e"
        },
        "item": {
          "id": "c07f4814-f2d0-4d27-939f-3c4878604cf7",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "db967791-8c7d-49d1-a062-8f06f70cbd11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2f3cb92-b246-45c9-84a4-e10345fdc368",
        "cursor": {
          "ref": "28dda021-da6e-47e6-9e40-97867659da6f",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "6193c794-b60f-4444-aefa-83c3cce371ca"
        },
        "item": {
          "id": "b2f3cb92-b246-45c9-84a4-e10345fdc368",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "d5b8af0b-ce23-4508-9e62-969558e55651",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4656e166-ad26-4f7e-94b0-5a781afe31c9",
        "cursor": {
          "ref": "2bb0049c-b47a-4442-b790-4ae6258f9971",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "f2ded74f-6a05-49ee-be37-36052f03b941"
        },
        "item": {
          "id": "4656e166-ad26-4f7e-94b0-5a781afe31c9",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "567f6c7c-6c0d-4174-bf58-290312ba1733",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "137e7e9c-d5a8-407b-833c-6d5a92f2ae6b",
        "cursor": {
          "ref": "65ceb0df-218e-49cf-a945-8d6142f5a11c",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "a444baa6-f6f9-4b21-9efb-045adb78f9c9"
        },
        "item": {
          "id": "137e7e9c-d5a8-407b-833c-6d5a92f2ae6b",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "8750f8cb-60de-404b-8305-b6a0ae6fb6d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8499758c-9d22-47be-b999-7123e086d2a8",
        "cursor": {
          "ref": "31187bf7-9ed4-48d1-86eb-800ca1bccd62",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "06b9e752-c15f-47c5-8506-59c2658ed87c"
        },
        "item": {
          "id": "8499758c-9d22-47be-b999-7123e086d2a8",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "aa7e6e6e-60d6-43ba-aa82-ee9f40446bc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7453c3d-884c-4bcb-b225-3255ac826baa",
        "cursor": {
          "ref": "a709c17f-2c21-4fb4-ab26-290ae4abb7d2",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "1a9182f6-6e21-4104-939c-70a61d371086"
        },
        "item": {
          "id": "c7453c3d-884c-4bcb-b225-3255ac826baa",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "104dac5a-7b7f-4de8-a45c-669958a36e4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3517ed9c-30b9-4e1b-b2b7-c393d92ab9dd",
        "cursor": {
          "ref": "741c67f6-2d35-4340-a37c-bcc91f20087f",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "00a22faa-af01-45d7-ae29-2aeca7b38994"
        },
        "item": {
          "id": "3517ed9c-30b9-4e1b-b2b7-c393d92ab9dd",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "aee58285-4683-4b29-8fa6-934a7adcba9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b5cb60a-3493-4147-90e2-5c062a4525cf",
        "cursor": {
          "ref": "449ad2b7-1bc0-4d13-a33d-722d5cc468f3",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "930327a8-82b8-4c85-9838-c870d4c2fc7a"
        },
        "item": {
          "id": "8b5cb60a-3493-4147-90e2-5c062a4525cf",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "e2a1b5da-9c80-4ff2-a998-764097c3b6d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21b818aa-1caa-491f-88cb-bfae586d51c7",
        "cursor": {
          "ref": "6f9d2bb1-03b2-480b-90b3-0157e8aab1a9",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "9f866ebe-8b10-4cab-801f-88ea7584b482"
        },
        "item": {
          "id": "21b818aa-1caa-491f-88cb-bfae586d51c7",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "a549fcda-3236-4313-a618-84441a5fad8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0371a32-a21a-4d83-95a2-170962acb185",
        "cursor": {
          "ref": "074e661a-db2e-45e3-87ad-67c3428238b9",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "fa09ff86-f9ae-4d3a-b129-97ec3e55a622"
        },
        "item": {
          "id": "f0371a32-a21a-4d83-95a2-170962acb185",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "8f3a4af3-59f4-4407-a9b3-416a48146536",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52325964-26e0-49a0-837c-337db00b7075",
        "cursor": {
          "ref": "6417c82b-026f-45cb-bf1f-0ac35f58c25c",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "c587db54-a615-4d89-b4d7-d2f6dd6f4c27"
        },
        "item": {
          "id": "52325964-26e0-49a0-837c-337db00b7075",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "f6b00537-7757-4eaa-838a-50b780d6acad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3cb3525-4669-4b17-9326-fa7af525dbb1",
        "cursor": {
          "ref": "674b6a6c-64e6-4cb1-b9e7-a623cf2514dc",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "627da757-a24e-48d8-8a0f-f526f9516913"
        },
        "item": {
          "id": "f3cb3525-4669-4b17-9326-fa7af525dbb1",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "f36068d8-4960-40c5-aa2b-392b296436cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4f242c7-0aba-45c0-bb92-2a2cf0915439",
        "cursor": {
          "ref": "ef14acc8-a9bb-4e52-a1a9-5fe719d36e37",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "6958ff43-fbe5-4f9b-a45b-4f5b9d248f9f"
        },
        "item": {
          "id": "b4f242c7-0aba-45c0-bb92-2a2cf0915439",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "364d53f8-52df-4ebc-855d-08cca0286384",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d3517a0-6937-42fc-a641-6473518d00cd",
        "cursor": {
          "ref": "bd5610cc-b63b-41d7-adc6-2eacfd6924fe",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "1a60d907-0599-4c2e-876a-eca9e184c990"
        },
        "item": {
          "id": "4d3517a0-6937-42fc-a641-6473518d00cd",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "b0d93028-81b8-48b6-98ce-f1bc782b64ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08dcf252-d858-4f99-873b-ea5252c1fbd1",
        "cursor": {
          "ref": "0602cc34-a896-46fd-929a-3afc4cf247e0",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "ccd1791a-df11-4d64-8ce5-8a4f57a36076"
        },
        "item": {
          "id": "08dcf252-d858-4f99-873b-ea5252c1fbd1",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "5df19684-3eb9-43b9-8d0c-2221653a02a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2ef381b-7558-4b3d-b953-00641de49794",
        "cursor": {
          "ref": "76e2cd34-e19b-4223-beb8-4ec9915097a7",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "bb26c390-aeaf-4418-b514-277cf9dede13"
        },
        "item": {
          "id": "b2ef381b-7558-4b3d-b953-00641de49794",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "83aec6f4-9d57-49f5-add4-9cda6b3c93ac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 39,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "d1fe9f19-be6b-4af7-9ad9-36f6b5210536",
        "cursor": {
          "ref": "19d4a501-db11-4887-bfd7-a2b61ed76925",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "0844f003-c1d9-4739-b102-97c4a79989a6"
        },
        "item": {
          "id": "d1fe9f19-be6b-4af7-9ad9-36f6b5210536",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "80eee8bc-eb3c-4375-b32d-a7e5dd9a2807",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "829dd9ab-9ca8-4bd7-a1ab-9f3f6a6cb4a7",
        "cursor": {
          "ref": "53edda41-6d3f-4e64-82a6-f20973d2b8b4",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "64a9cc9b-e943-4008-8c28-e9bbf333d104"
        },
        "item": {
          "id": "829dd9ab-9ca8-4bd7-a1ab-9f3f6a6cb4a7",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "8faf7145-8b91-4349-b96c-b00678338801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c74475a6-b15f-4fb1-a786-7cf2e1544fb2",
        "cursor": {
          "ref": "0e0d3104-3d40-4877-aa0d-0040536f23fd",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "bf2bd66b-cb54-4086-a0e5-8d6ed99a54aa"
        },
        "item": {
          "id": "c74475a6-b15f-4fb1-a786-7cf2e1544fb2",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "c1256620-f8d2-44d9-ae1c-d7ba958713ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f19d6e8d-231f-4cf6-94ff-d13d8c56716c",
        "cursor": {
          "ref": "d2b0a85b-27fa-4a03-ab5a-627cf4f9085f",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "e633af42-d451-4da1-943f-9d9dd087b1f7"
        },
        "item": {
          "id": "f19d6e8d-231f-4cf6-94ff-d13d8c56716c",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "eb0280ec-991f-4567-9844-1ea0115403cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4df9fb1-1214-4d19-9ca8-391abe71e36a",
        "cursor": {
          "ref": "20b1128a-96fa-4b38-bfd7-2e2b7bc86459",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "92746546-9287-4b48-b11c-d114feb22d4b"
        },
        "item": {
          "id": "c4df9fb1-1214-4d19-9ca8-391abe71e36a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "156ddcbe-96bf-4d57-8ea4-a58adbe12a9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09c06e72-3b33-4e44-9966-b83ab04f5718",
        "cursor": {
          "ref": "07c254e6-9359-43da-a9a6-77b51d709414",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "3b1d9698-7ad5-4844-8a0e-9a4b89caead1"
        },
        "item": {
          "id": "09c06e72-3b33-4e44-9966-b83ab04f5718",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "74671557-3f3c-4665-867d-be750926a642",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f87146a1-95c6-4a54-b459-39798014a867",
        "cursor": {
          "ref": "42f556a9-bb47-435c-a868-dbcd0cfd545e",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "d4922682-757d-445d-8f55-4ee1b89e747f"
        },
        "item": {
          "id": "f87146a1-95c6-4a54-b459-39798014a867",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "0ee4ffb8-b243-4e87-852a-cd6a18196be6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2e41099-2055-4956-8b4b-3a1d1a5dfba7",
        "cursor": {
          "ref": "b892cd9d-2eeb-4ed8-92a8-b12acde0aeb2",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "642258bf-443d-4760-bf28-3edd0e2cefec"
        },
        "item": {
          "id": "c2e41099-2055-4956-8b4b-3a1d1a5dfba7",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "97a8224f-7881-489d-ba43-1324a8cf4a0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac21b5d4-2fa1-4636-87a1-87cdf5a9b50c",
        "cursor": {
          "ref": "bf173887-ed80-4310-ab24-c9f0fbb63d93",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "04017551-3ab4-463a-a5b5-ac4d5393ca8a"
        },
        "item": {
          "id": "ac21b5d4-2fa1-4636-87a1-87cdf5a9b50c",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "53ba1204-c633-47e4-8c00-a45c95a4d774",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "641a994f-f32a-4c13-ba52-3e7a56fb3766",
        "cursor": {
          "ref": "8476e5bc-b4ef-4f6b-aa5c-03a3df5b6d2b",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "bf280ce4-9b15-4c63-91b8-8057a62f4036"
        },
        "item": {
          "id": "641a994f-f32a-4c13-ba52-3e7a56fb3766",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "931cbd9d-6da4-4e6a-8c8b-b3f73783c3ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d24be0e3-ccf2-4233-8c7e-bcc51f4f1157",
        "cursor": {
          "ref": "33a41a06-e01e-4ca9-99d0-f6927cdf7688",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "d78e618a-43b2-4d69-b47e-47e702c5ff05"
        },
        "item": {
          "id": "d24be0e3-ccf2-4233-8c7e-bcc51f4f1157",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "a90fd909-f8a4-4265-9bb2-761539194f79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c94cd86-b215-4e7e-b09f-23c2ded43629",
        "cursor": {
          "ref": "b1a55467-abbb-4d1c-b94a-2641a769f656",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "8c744ffd-8875-41e2-b1c7-7b1f1b1f1330"
        },
        "item": {
          "id": "2c94cd86-b215-4e7e-b09f-23c2ded43629",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "44734b19-a745-4b15-b2cf-81c513d5d0fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d05471f9-1bf2-4711-a6f6-0787cd097a94",
        "cursor": {
          "ref": "db41845d-4594-4fd9-9b36-22b41b4bc0c2",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "dd4b01a0-877e-4108-92e3-ce81ae45fe1f"
        },
        "item": {
          "id": "d05471f9-1bf2-4711-a6f6-0787cd097a94",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "3e3270c9-d5f2-41b5-a4d1-98536eac1f82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fc8f353-9f04-4a1f-8411-2cd069b05e4a",
        "cursor": {
          "ref": "1db491b0-9c22-4811-b68e-1bfc9bb7b97c",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "ce07c16c-db6a-4a6e-973d-72983fde1ad6"
        },
        "item": {
          "id": "5fc8f353-9f04-4a1f-8411-2cd069b05e4a",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "fbbbcbc2-98bd-4733-8d34-c5b35da0cbe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c674eef-f93f-4e27-aa9b-f02d323bd065",
        "cursor": {
          "ref": "f5e49bc1-3875-4734-bdd8-c89b4e5b8190",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "57e5287b-7bd3-4b36-83ae-b40a6eb4e673"
        },
        "item": {
          "id": "1c674eef-f93f-4e27-aa9b-f02d323bd065",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "8b1d6b8c-b557-449f-8c23-5a5ab0a78b53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3877392-b9ef-4dbf-994a-0064656f0d25",
        "cursor": {
          "ref": "423dd475-9f96-4018-8ea6-6361181dd4ed",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "9f7bf2fa-d560-47d7-b2d4-32c4ac3a0fd5"
        },
        "item": {
          "id": "f3877392-b9ef-4dbf-994a-0064656f0d25",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "13874017-93b5-47eb-9251-4e7643261e34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c9ee9d1-4bc4-4e46-a715-d26ffee0610f",
        "cursor": {
          "ref": "2ef43963-0aad-48b0-b709-968c2c8f13e0",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "925a1dfe-407a-41d2-b956-ccaad946e048"
        },
        "item": {
          "id": "7c9ee9d1-4bc4-4e46-a715-d26ffee0610f",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "c6d0f5f4-7862-4cce-84ea-4c535d3e1d53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcd5db80-1909-4b8e-8188-c530dcf17513",
        "cursor": {
          "ref": "730ec17d-fd38-4108-acb2-92d5f3294f80",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "4a5e748e-73f7-4e44-968f-5fa32ca0f9b9"
        },
        "item": {
          "id": "fcd5db80-1909-4b8e-8188-c530dcf17513",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "82054414-3593-4c1c-b3be-13d25e83a74d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7b58b33-f7df-49ed-a99e-88341fef183b",
        "cursor": {
          "ref": "ce9f2f42-37e5-47c0-bd74-3c830d4ba5f9",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "02edfd1a-6d78-4fdf-b72b-bf6716c28d29"
        },
        "item": {
          "id": "c7b58b33-f7df-49ed-a99e-88341fef183b",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "196e750a-7ac3-40c0-bf20-e08ca5368838",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f41234e-dba5-4470-ad76-d9b6c382def2",
        "cursor": {
          "ref": "046e3bfa-5d50-4e7c-96d0-b65a9d1ff410",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "fb2500ce-0dbd-417f-9f52-a14a5042d711"
        },
        "item": {
          "id": "2f41234e-dba5-4470-ad76-d9b6c382def2",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "edc9ba01-8fc5-4677-9623-c9c103fd5b12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4125511a-57c3-4976-87b2-3a9182bdb78d",
        "cursor": {
          "ref": "8f504bae-19a6-4099-8a12-935780e56efe",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "610546f2-fa5e-42cf-af3e-b5d784dd6a75"
        },
        "item": {
          "id": "4125511a-57c3-4976-87b2-3a9182bdb78d",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "2100b027-8ac0-49a6-88c1-dd0a33e17d22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2784ece2-f5c6-4abf-bd8c-caea9b2f6168",
        "cursor": {
          "ref": "f7b99051-526a-4310-b739-ec2ea1004ddc",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "c675d92e-bcf0-46d4-ad9d-e179f985f616"
        },
        "item": {
          "id": "2784ece2-f5c6-4abf-bd8c-caea9b2f6168",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "6a75a25f-5802-4f89-a941-723e14eaee8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71465140-d26b-42fb-933a-84a189a1dd02",
        "cursor": {
          "ref": "a2cdbcf5-6d6c-4fb6-9621-d08cc8c35f0b",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "87ff09df-2909-4994-9b0c-5a451c9e3f0c"
        },
        "item": {
          "id": "71465140-d26b-42fb-933a-84a189a1dd02",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "3d9d8393-6126-4d50-96a8-cfd0263a5a6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0afd209a-862f-41c1-a82b-38e18b23eba2",
        "cursor": {
          "ref": "8e61f7e0-c320-42d9-b69a-e089e68eeae2",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "0672d2fd-0e5f-44f6-a763-09d125559a3c"
        },
        "item": {
          "id": "0afd209a-862f-41c1-a82b-38e18b23eba2",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "6a760f23-0f99-4857-b9c8-672f82a72b9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66d50a37-5da2-457e-b22e-c35cb773e1fb",
        "cursor": {
          "ref": "9ff02bd0-0f0a-4769-9d58-89986a4410e3",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "4904b34a-198e-4882-9baa-4f3a97fdd88b"
        },
        "item": {
          "id": "66d50a37-5da2-457e-b22e-c35cb773e1fb",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "eec6046c-12d0-4f6d-9d5b-a1e765f53c8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "104f169c-5eec-4c99-a5de-342d590885e6",
        "cursor": {
          "ref": "3f62009e-4960-46fc-b886-333fa2a32b7e",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "fa8cab0b-e44a-4a8d-b590-8b9b9a935adf"
        },
        "item": {
          "id": "104f169c-5eec-4c99-a5de-342d590885e6",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "187b8cc3-5588-46bd-aeb3-4ac6576ef21c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55ada3a3-0ccb-4994-815e-b01e577065e8",
        "cursor": {
          "ref": "e188e6f6-3e2f-4c10-8dab-6fcb011622c5",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "b95cae10-6d14-4a08-9487-ba64c45a4e14"
        },
        "item": {
          "id": "55ada3a3-0ccb-4994-815e-b01e577065e8",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "4d5b339f-58ca-4fea-857b-1addb18914fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9aaec47-32a4-4213-8082-4eb60a6d3d5e",
        "cursor": {
          "ref": "74b2754d-40cc-4a79-87a0-257b15211f8e",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "32d2d1ce-bd31-4e13-8845-357c1c38890e"
        },
        "item": {
          "id": "a9aaec47-32a4-4213-8082-4eb60a6d3d5e",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "a0a69871-b91f-48ea-853e-0983f69b9cba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "016531d6-0525-4d9f-bb4a-bcd49027af8a",
        "cursor": {
          "ref": "b82a63fa-32ba-4083-89d3-236da4e81cde",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "a465747a-4485-4fac-aecb-7e2cf9da2825"
        },
        "item": {
          "id": "016531d6-0525-4d9f-bb4a-bcd49027af8a",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "4a8d8dfb-b918-4f91-abc0-54d645b641d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c2ac6e1-c013-4dfc-b7b1-0c195282d95f",
        "cursor": {
          "ref": "9a112e09-2d9c-4ec2-aec3-4642f3c43832",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "3c5474ee-3848-4a4a-a957-05f418f6eff7"
        },
        "item": {
          "id": "6c2ac6e1-c013-4dfc-b7b1-0c195282d95f",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "e0bfe3f7-2e0e-420e-9d0c-122bc393c052",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "2696f712-9142-4de4-a9a7-8332fea58c8f",
        "cursor": {
          "ref": "93a36291-869a-4d53-acc8-8d603087cb20",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "53c3da0a-d83f-4b6a-a50a-27f38a648f5f"
        },
        "item": {
          "id": "2696f712-9142-4de4-a9a7-8332fea58c8f",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "e65f05a8-332e-4700-8e95-edd94f708b87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "19d6e5a7-9e92-4697-97d9-c1d4470f277d",
        "cursor": {
          "ref": "91245cf3-8bdb-468b-bab8-feb9f680eda3",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "c5077fad-050a-48de-a3fe-f84ccd5ce174"
        },
        "item": {
          "id": "19d6e5a7-9e92-4697-97d9-c1d4470f277d",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "8af9e748-1473-4e22-8cf9-bc1cb8affe14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "dcbcc39d-37d7-4fc0-9eb7-def15e45661b",
        "cursor": {
          "ref": "e96ed9af-7639-444f-bd26-48ebd77a959e",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "a1d10f4d-8629-455c-9192-1006e51be0dd"
        },
        "item": {
          "id": "dcbcc39d-37d7-4fc0-9eb7-def15e45661b",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "6ba23062-fdf3-45e0-8b43-b98a68dfa56c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3552ce8-82ec-431d-b4d8-ef13dc7df254",
        "cursor": {
          "ref": "7dde0669-ee4d-49c6-af0c-4cd03cb3655e",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "70b7a982-5e99-49aa-96e2-c8e0670efdbe"
        },
        "item": {
          "id": "f3552ce8-82ec-431d-b4d8-ef13dc7df254",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "842d30c8-c66f-47f6-9196-91ab747b02ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "74af68be-a75a-4416-af79-f8f956b58ca2",
        "cursor": {
          "ref": "b6e75ad6-1215-410e-870a-b885f22f395d",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "e0f26e52-1da0-4489-848a-57a70eb00fd6"
        },
        "item": {
          "id": "74af68be-a75a-4416-af79-f8f956b58ca2",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "335a53d2-5ad5-49be-9106-518a0686cd07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1293,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "4598ce4c-5861-423f-91c4-42f4d1ba38b8",
        "cursor": {
          "ref": "1be3a394-3581-4920-9083-2e706dbd2d51",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "0f0583fa-d13d-409c-89fa-7c2fca6b3b65"
        },
        "item": {
          "id": "4598ce4c-5861-423f-91c4-42f4d1ba38b8",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "c2ac683b-1c84-408a-9098-55dad182fd24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "300c710c-18e2-47fc-bfd9-01a6e03558f7",
        "cursor": {
          "ref": "bae44dc9-7e5a-4600-b616-13d83fabf66e",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "1df40dec-7548-4745-b93d-e90e6da404bc"
        },
        "item": {
          "id": "300c710c-18e2-47fc-bfd9-01a6e03558f7",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "fe870edc-2d1f-40d4-9397-1130a9633978",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "e9cecb11-3512-4d39-a12d-779d0bf4d791",
        "cursor": {
          "ref": "c4be842d-0e54-40c9-b239-e92c2c3b5080",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "9955aef3-2c7e-420b-addf-096b27c48a34"
        },
        "item": {
          "id": "e9cecb11-3512-4d39-a12d-779d0bf4d791",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "b17d061a-19b9-482d-ab9e-42f460790052",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "641c2c24-cc78-45c9-b0a4-cf53fda9ec43",
        "cursor": {
          "ref": "fc471ed5-2780-4e8d-bc04-7ce8f6863dcd",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "08164cb4-c3d2-4b50-88cc-49df38f8f3d5"
        },
        "item": {
          "id": "641c2c24-cc78-45c9-b0a4-cf53fda9ec43",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "c64a6944-de2e-4ee8-bb35-3e565dfe0ffc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "82bd9d8a-80bc-42e1-be62-24b989667744",
        "cursor": {
          "ref": "9fcaa2a1-fb4f-42d9-9806-ae0d78afe80b",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "08ee3afd-2158-4ca5-83df-0671af3bfc02"
        },
        "item": {
          "id": "82bd9d8a-80bc-42e1-be62-24b989667744",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "117f8e0f-c927-4dd5-9978-c15c5e07f626",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59d55f4e-2e21-4001-8f20-677cc5eec168",
        "cursor": {
          "ref": "a26d3d3a-8d43-428c-9a3c-37ed12b8dbad",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "8e54df9f-f3ad-433b-bb08-08fc313146f8"
        },
        "item": {
          "id": "59d55f4e-2e21-4001-8f20-677cc5eec168",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "3c1376b8-ea05-40dc-9313-72c2c222781d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7f9b9b5-e724-437a-9397-b792a209e6ce",
        "cursor": {
          "ref": "0776e482-663b-4db7-b68c-0d50445127b4",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "3930f7f6-3556-4f52-b196-c98133336d69"
        },
        "item": {
          "id": "a7f9b9b5-e724-437a-9397-b792a209e6ce",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "30c869c6-bb48-470e-b2cb-e0a1f35bfa6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acbfaf81-f222-4ca9-814a-c1064576c5e4",
        "cursor": {
          "ref": "116e820a-3e45-4fc6-b5bb-86c57d04c3a7",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "70833918-f426-4b73-8b21-dfdc3266f8f4"
        },
        "item": {
          "id": "acbfaf81-f222-4ca9-814a-c1064576c5e4",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "ec8a9b50-ba3e-4e79-a65f-0cb1a5504f1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00110a62-9d67-4984-9d49-b93741575276",
        "cursor": {
          "ref": "582130f5-27de-4cbf-8b5a-d3920dde5552",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "f5b7a9fd-5686-47ca-b140-f91d5d106902"
        },
        "item": {
          "id": "00110a62-9d67-4984-9d49-b93741575276",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "d3d84dc2-4df0-4d93-8472-674582a975d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59ec7a06-d24a-4d6a-aa8f-595c1c3f0890",
        "cursor": {
          "ref": "32a7766d-3390-438a-9e01-fd99a89d9ff9",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "872a085d-0404-44ad-9df5-76cadb60be45"
        },
        "item": {
          "id": "59ec7a06-d24a-4d6a-aa8f-595c1c3f0890",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "1dbefb6d-1d7d-4e7c-a319-90daabc4aeab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7da920db-7da9-4e88-9de9-0ae6863486b9",
        "cursor": {
          "ref": "521c00db-febb-4522-ae97-34fdf614166b",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "534817ca-2ec8-420c-a132-de65fae23fb9"
        },
        "item": {
          "id": "7da920db-7da9-4e88-9de9-0ae6863486b9",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "57f51d81-3a65-40c7-8a0f-d65eb91c0ba0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96ef3769-cf52-401e-ab0d-22c08bc799fe",
        "cursor": {
          "ref": "607e9b35-dddb-4a6d-8c08-fc418906c46f",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "3813cf30-bd22-4abc-b7ec-d13003777c88"
        },
        "item": {
          "id": "96ef3769-cf52-401e-ab0d-22c08bc799fe",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "791fd98c-b6ec-434f-87e1-eff7f2ebb654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d130a3b-5e8e-4fb6-8005-98b7cfed3d6f",
        "cursor": {
          "ref": "23dd2ef1-bdb5-4a91-b375-a84ae27d48c4",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "8695bcdc-d052-40ed-9103-632d8427aa76"
        },
        "item": {
          "id": "4d130a3b-5e8e-4fb6-8005-98b7cfed3d6f",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "73a6a4b5-1b03-4088-8ced-3ddf6312e6b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 158,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b0dd494-0776-472c-8b4e-116cef9a4047",
        "cursor": {
          "ref": "9e745628-2c8c-4189-aef0-d90051c054b2",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "31f3d79f-9d87-4ca3-b9d9-1652b8dd4feb"
        },
        "item": {
          "id": "3b0dd494-0776-472c-8b4e-116cef9a4047",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "9a9a5dbb-be3f-4169-9365-b24ca95ab8af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "691ea6af-89e2-43a1-aa0b-f4c4ac086fde",
        "cursor": {
          "ref": "25be54fa-613f-49b8-9bca-652f8b2de058",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "1565f7d9-7020-492c-8715-cbc35f72cc7e"
        },
        "item": {
          "id": "691ea6af-89e2-43a1-aa0b-f4c4ac086fde",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "8cc7a8aa-3b6f-45e5-ad27-33404f500ac3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a758189e-ddc7-40b5-b13a-8e35be97ba29",
        "cursor": {
          "ref": "1e1f23b2-c96d-487b-9cb6-1b6ba7361006",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "50a7f0fb-faf1-48bb-b37f-1eba0bb38747"
        },
        "item": {
          "id": "a758189e-ddc7-40b5-b13a-8e35be97ba29",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "a3e2479d-00cd-4e6e-8fac-1c66140e3650",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc5c512a-641f-4e54-b3c0-f762eb90c0e9",
        "cursor": {
          "ref": "70ab2765-9644-4a40-aecd-204631eca16e",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "3a1ded58-6832-40d9-a940-07f6b75c15f3"
        },
        "item": {
          "id": "bc5c512a-641f-4e54-b3c0-f762eb90c0e9",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "59950d55-90fc-412b-b280-0bd289d2b5f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c1b924d-d301-4341-ba56-80fdbe4b616c",
        "cursor": {
          "ref": "313fcfc9-d88b-494b-a03c-210412bdd501",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "481a8c81-9bd3-4e13-af6d-387b0e845ed5"
        },
        "item": {
          "id": "4c1b924d-d301-4341-ba56-80fdbe4b616c",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "3cf31833-8c67-445d-91a0-99039f662212",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 823,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "d0b579ec-ea46-4ebf-887a-e51b438aecb4",
        "cursor": {
          "ref": "ea8b782e-86e0-4a7c-812d-4a547aada776",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "7e63c500-12ac-4b53-9669-a9fd7a327c84"
        },
        "item": {
          "id": "d0b579ec-ea46-4ebf-887a-e51b438aecb4",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "583997ac-08b1-47f2-86bf-f4894f5bd572",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 829,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "ceb94c84-fea7-4693-987d-12c02448c5ec",
        "cursor": {
          "ref": "c6b6d4dc-a5a4-42f7-997f-0fc0951a3b00",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "2f010ce6-4165-4056-b722-e40b65fffbd7"
        },
        "item": {
          "id": "ceb94c84-fea7-4693-987d-12c02448c5ec",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "4164e894-2389-4735-b5f9-ef194e843870",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "a4d677c6-fde2-412f-82d7-cbb20dda4037",
        "cursor": {
          "ref": "ce66566d-d482-4839-8c09-29a099b25e1d",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "9e1c802c-425b-4074-b0a8-ea7b517c4120"
        },
        "item": {
          "id": "a4d677c6-fde2-412f-82d7-cbb20dda4037",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "26d271ac-d5bd-4cfb-b9b2-446879f18a6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 711,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "e455ad15-8c79-44c3-b0ec-4cafd3d757c9",
        "cursor": {
          "ref": "265d6289-d028-4a67-8044-06f09207443d",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "48ee09f0-fae9-40f4-86bc-6f7e38bb6185"
        },
        "item": {
          "id": "e455ad15-8c79-44c3-b0ec-4cafd3d757c9",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "53669c99-e588-4940-bb71-83dcfd4728cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "96c375de-65c4-4ad3-959c-e4f49fd93c6c",
        "cursor": {
          "ref": "0c1f1434-c45c-478f-8b34-2a4d2d11ca59",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "ca6f69f8-7b8b-4193-83fe-8b31e49edfcc"
        },
        "item": {
          "id": "96c375de-65c4-4ad3-959c-e4f49fd93c6c",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "a153a902-f082-40d2-846d-3a340a4e9f50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5918c368-af90-4dd8-b26e-613829dafb6c",
        "cursor": {
          "ref": "7047d9be-7e85-494c-9199-67e4fb88d1df",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "1d94add9-a8b5-4beb-9bfc-1c08140fb4e0"
        },
        "item": {
          "id": "5918c368-af90-4dd8-b26e-613829dafb6c",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "7848a599-0804-4e86-a7b0-e65997c13bd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b289c39e-492c-4e97-a91b-380cdc1f7d00",
        "cursor": {
          "ref": "8767dc81-6a71-4aa0-bc7b-a9b864e6e03b",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "1e0f7fb5-f335-44f9-b550-2413dfe6b85c"
        },
        "item": {
          "id": "b289c39e-492c-4e97-a91b-380cdc1f7d00",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "06a4922b-66e0-448a-b87d-586cee5b7ab0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "111f6d11-8aad-4bb9-8472-f87238eb40fe",
        "cursor": {
          "ref": "0670c965-0a14-41be-b2d8-f8cf46baf492",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "2517946e-74b9-4b39-94b0-7b11fe21f9ae"
        },
        "item": {
          "id": "111f6d11-8aad-4bb9-8472-f87238eb40fe",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "c16a24d9-3a51-4d50-aa6b-72382297429e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e12e992a-63c8-4df4-b329-3b5c68af0f03",
        "cursor": {
          "ref": "d192917e-688e-4f92-82c4-61b9da24f56c",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "c15def7e-5a15-4b69-828a-457b6ef98bda"
        },
        "item": {
          "id": "e12e992a-63c8-4df4-b329-3b5c68af0f03",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "74215e56-5415-42f0-b478-dabb6eaaaf70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea56117e-c8b8-4c4b-b8ed-ae5f7536d7a7",
        "cursor": {
          "ref": "5245fa8d-c050-46f5-a296-baa7ee6532b2",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "7001df64-e05f-41ef-8994-c3dc613caaac"
        },
        "item": {
          "id": "ea56117e-c8b8-4c4b-b8ed-ae5f7536d7a7",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "646b4472-62cd-4e06-8629-818f3bb78888",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aed2d5c-d617-47f2-9eeb-d13610842eac",
        "cursor": {
          "ref": "407b66c8-d02c-4e70-984f-94bc8e96b934",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "fbf23498-6113-42b3-920e-5c6af2f97ce5"
        },
        "item": {
          "id": "7aed2d5c-d617-47f2-9eeb-d13610842eac",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "9a89fcbf-c13e-4f7f-9b32-6cb56bc00b99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c463d0f-087d-42dd-acf2-b576c6cd1ec1",
        "cursor": {
          "ref": "150b5b1d-b2ff-41bb-9d55-c518bba4e550",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "57314e7a-ceb6-4d2f-8a87-56fd2c64b66f"
        },
        "item": {
          "id": "3c463d0f-087d-42dd-acf2-b576c6cd1ec1",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "5f425968-400e-4631-9813-c7e34df66f69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57fe1848-95bc-47e1-a78e-ff1c4d12865a",
        "cursor": {
          "ref": "aab45b1a-01c6-458f-9d4a-d4de0d56ee63",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "c8b64984-5465-4be6-b5d3-e1bbf2a773e0"
        },
        "item": {
          "id": "57fe1848-95bc-47e1-a78e-ff1c4d12865a",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "40ff0be4-f626-4784-b248-ba2c700615bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e629ecc0-24d5-4e9a-9708-9a1cd43e2c68",
        "cursor": {
          "ref": "240ff063-de95-44fb-8ac1-fdfcc32fc384",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "9d688998-9f48-4c9b-9680-cd5f57642b4d"
        },
        "item": {
          "id": "e629ecc0-24d5-4e9a-9708-9a1cd43e2c68",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "a5da1986-0ac7-4795-8265-e6efe50845d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4002470-848f-4119-9118-5f5a9dbef205",
        "cursor": {
          "ref": "3ba66dea-b924-4968-88e7-b9a75a589fb2",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "51a4683b-e16f-4146-9c15-aac02ad3d4bc"
        },
        "item": {
          "id": "e4002470-848f-4119-9118-5f5a9dbef205",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "c99e0e08-3af7-430c-a33d-a0aa316bd6e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "438d7072-b01b-4d74-8c05-e8468bfb654f",
        "cursor": {
          "ref": "4206afe9-a01c-43d1-afaa-65bf8baa9f85",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "71e3b978-e193-4b8c-89f3-2043770a950a"
        },
        "item": {
          "id": "438d7072-b01b-4d74-8c05-e8468bfb654f",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "4a876c5a-9f8d-4241-b894-80bcdb469fa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdc926ac-6bfb-4b24-95dd-099999460591",
        "cursor": {
          "ref": "0ae40fa0-79ac-4fa1-94c0-971a8ba01359",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "6dbb9f0b-ee1f-452d-8446-944978239ef7"
        },
        "item": {
          "id": "cdc926ac-6bfb-4b24-95dd-099999460591",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "b66891d2-10c4-4ccf-b85f-c41585a76a88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2bffbb8-6cf3-4257-8d70-51258331afe0",
        "cursor": {
          "ref": "14b45e0c-eb7c-49e7-98de-2e0a8d73cc7d",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "83f36642-cbe6-4ef1-b19a-2bd8890da13d"
        },
        "item": {
          "id": "f2bffbb8-6cf3-4257-8d70-51258331afe0",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "80806deb-3fcf-4673-923b-69614294c919",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f86707c-d084-40eb-9e87-cdf9ae38b999",
        "cursor": {
          "ref": "36ddc56c-4d49-4c61-b941-4e5fe39b506e",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "09bd19c5-97ec-4b02-996b-5d4690867191"
        },
        "item": {
          "id": "6f86707c-d084-40eb-9e87-cdf9ae38b999",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "eb44eec6-2381-4b74-a157-a196b8c58716",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ae48a14-fc17-4937-8591-7cdd8206e26a",
        "cursor": {
          "ref": "118dbb9c-d1a7-45b4-9ce6-e09a6daf8ea8",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "f4a5e8ad-8ddd-4f72-8a3a-238cd9bb85fe"
        },
        "item": {
          "id": "5ae48a14-fc17-4937-8591-7cdd8206e26a",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "01c77339-ff21-4850-907e-e60e811eba5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "236e7cb8-4e64-4c00-ae38-ad1fa2c1b94c",
        "cursor": {
          "ref": "8295d3ef-6e46-48eb-b2cb-f0b8297869f1",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "edd488c5-7498-43f0-aa8e-3c1159cb9f98"
        },
        "item": {
          "id": "236e7cb8-4e64-4c00-ae38-ad1fa2c1b94c",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "d3691bdb-f633-42c2-aa69-52626b7e32d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c503b41-2f72-4733-bcc7-79b882a3aa8e",
        "cursor": {
          "ref": "f89a4817-9d11-4789-9b65-072e5a678190",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "da0db279-9583-4015-a91b-873bab06f59e"
        },
        "item": {
          "id": "6c503b41-2f72-4733-bcc7-79b882a3aa8e",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "31f454e6-4945-4de6-9cc4-6481b0515304",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf9526ba-e393-4ad9-aa4e-84383558b68d",
        "cursor": {
          "ref": "fba02773-309c-45ca-af83-369ed8d37af8",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "391926bf-7145-4f02-a6bb-6623ddd241fb"
        },
        "item": {
          "id": "bf9526ba-e393-4ad9-aa4e-84383558b68d",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "234b13c7-2952-4265-93c8-5b2cfedfb853",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cce69b18-3281-462f-8cff-59fb81552f76",
        "cursor": {
          "ref": "22b12e9f-0bc4-4520-968a-f2413df4daf1",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "4e62c912-59c2-4fc7-bb0a-e0da0e8fe4ae"
        },
        "item": {
          "id": "cce69b18-3281-462f-8cff-59fb81552f76",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f57e5517-be24-4649-a3b3-451e56fd9ea7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8161052-d263-4fa0-a40e-2528ba43a6b4",
        "cursor": {
          "ref": "92f8cd1d-baed-4c1c-8152-3a269cdc5295",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "c59e363a-d17c-495a-9545-61e86d7a647a"
        },
        "item": {
          "id": "d8161052-d263-4fa0-a40e-2528ba43a6b4",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "f65e407a-48e0-4d94-b778-b57a6d3661ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59956bec-b559-416a-bd5e-9fc82cfec561",
        "cursor": {
          "ref": "0f388146-fb81-426c-aad7-f742717b63e0",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "1d8b6a64-270b-4bcc-9262-db9134234bf8"
        },
        "item": {
          "id": "59956bec-b559-416a-bd5e-9fc82cfec561",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "10af1d16-191f-42b2-ad75-eedeb89a9f28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98e92f85-19d0-4c79-9e70-047effe1f5dc",
        "cursor": {
          "ref": "80fa7c06-d1ed-4b38-bd7a-973bbeebda5a",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "bbc9a550-f95f-4980-a8c1-889e14b614e8"
        },
        "item": {
          "id": "98e92f85-19d0-4c79-9e70-047effe1f5dc",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "ac76201d-f28a-46c1-9be2-316ac67fcd4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cdb3898-ec37-4ac7-bd55-a7bf6ee0c41c",
        "cursor": {
          "ref": "49f1c1a9-fde9-43ec-a91e-a5f12a9976f7",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "5c7b75d5-5c66-491b-af75-42ad27e7d1f2"
        },
        "item": {
          "id": "5cdb3898-ec37-4ac7-bd55-a7bf6ee0c41c",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "852dd5a2-ba05-443d-936e-a248e7b088b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae91f401-2f02-410e-bdbd-7f45a1f89924",
        "cursor": {
          "ref": "9444a91f-da85-46db-9428-211da67d87f6",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "5501be63-c5b3-4ca9-949a-d47460722cb9"
        },
        "item": {
          "id": "ae91f401-2f02-410e-bdbd-7f45a1f89924",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "daf7f6c6-61e3-42de-a5c2-7c284ad7a43f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "705e7570-e301-4ea2-8cbe-94b9cffb88c9",
        "cursor": {
          "ref": "6225a79c-7e68-428a-8fe4-c4bf4ab58bc0",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "d6692dfb-b329-4562-a226-a1e8f712b59f"
        },
        "item": {
          "id": "705e7570-e301-4ea2-8cbe-94b9cffb88c9",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "236dc9ff-cfaf-4868-a961-5fdab89dafbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8e6369c-0d8e-4ae6-994f-c696017d2d15",
        "cursor": {
          "ref": "aaece73d-0c4c-4930-9c77-543ba461bd47",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "adfc7404-3346-4d8e-8290-7eb1b432c073"
        },
        "item": {
          "id": "a8e6369c-0d8e-4ae6-994f-c696017d2d15",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "1ff8f2c6-f8a1-4b53-be01-a0a378b42639",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09dd566f-eb18-4ace-9978-e61e4f78c1fb",
        "cursor": {
          "ref": "34ed35ff-0286-4209-8fc7-5406cd3a4d08",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "9e6d5fdf-81ef-4ee5-9c92-8ba39a76a063"
        },
        "item": {
          "id": "09dd566f-eb18-4ace-9978-e61e4f78c1fb",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "a2a93073-1f85-4992-8c24-dbc70e29ab2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42099ba8-7efc-4a17-b92f-c715a28eb4c2",
        "cursor": {
          "ref": "73a56d46-1242-45b6-8be6-ff8e724b6ef5",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "93741fbb-a40b-4ddf-b29c-bc9ce5f0728b"
        },
        "item": {
          "id": "42099ba8-7efc-4a17-b92f-c715a28eb4c2",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "7984f3c6-a5c1-4868-a83b-201cc8c69b4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48003467-d35b-4200-bafd-579c3dce81f3",
        "cursor": {
          "ref": "e0159c4b-bf9a-4473-ad86-c0c7e15716e9",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "0dab85c2-5c0b-44c8-ac76-7ef9017d4e39"
        },
        "item": {
          "id": "48003467-d35b-4200-bafd-579c3dce81f3",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "f6cd42e5-2825-4c63-a57b-211cee600bee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ba1d963-671d-4287-bdfd-1db8877d969f",
        "cursor": {
          "ref": "15a95e77-509b-416b-bfa7-c2bc311ae818",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "f46c3318-021f-4ed8-9608-6154c454684c"
        },
        "item": {
          "id": "4ba1d963-671d-4287-bdfd-1db8877d969f",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "6b611144-1355-41b0-9b40-a4f80400cc3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "433806d3-efad-42df-8deb-8aaa6bd95fbb",
        "cursor": {
          "ref": "28f93f0e-4b95-41a7-8a3b-e16aeba5d99b",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "d2ef2416-61e6-43ab-9f86-939e8a788a7f"
        },
        "item": {
          "id": "433806d3-efad-42df-8deb-8aaa6bd95fbb",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "1bda0a6e-a18b-4eab-b459-c4615acb54fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ad3824c-89db-441b-9e8f-941366d5ad27",
        "cursor": {
          "ref": "abae0194-dcb2-46a4-92c7-ced050cbe847",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "05613670-5f43-4df6-b90c-fcde664ed80a"
        },
        "item": {
          "id": "9ad3824c-89db-441b-9e8f-941366d5ad27",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "b1b51b57-a2fa-41f9-b217-7d0a689da735",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c71c7c45-e622-48d7-bf21-627492b20eb5",
        "cursor": {
          "ref": "d4583ce0-7596-4aa5-97ab-112d1db3bcf0",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "2f69bf10-b8c0-4a71-99e1-b87a57eef4c7"
        },
        "item": {
          "id": "c71c7c45-e622-48d7-bf21-627492b20eb5",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "6e042c33-c160-4301-9ac8-251bde3ce46e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59c16bcd-816b-4914-b671-19687f6908f3",
        "cursor": {
          "ref": "c955e3ab-7d69-47ec-adeb-f71933ce5d17",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "92715c11-630c-474e-ac0b-d139f32decd2"
        },
        "item": {
          "id": "59c16bcd-816b-4914-b671-19687f6908f3",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "af3f6225-3abb-464a-a44b-a8fd5046a149",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d1132b8-32ff-499e-8aaa-2046c22f5bc7",
        "cursor": {
          "ref": "ddbd26ee-07ee-46df-be79-70b0dd7595b2",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "af5a800f-b9b8-43d9-8761-9e7b89bf95bf"
        },
        "item": {
          "id": "1d1132b8-32ff-499e-8aaa-2046c22f5bc7",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "7671a898-d874-491d-a12a-a5b85711aade",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcd6dd00-c0fc-4582-837f-7cddaeb3cfc0",
        "cursor": {
          "ref": "c29c3ebc-079d-4804-99ce-98aaaccc5109",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "7f592f47-8725-4796-873b-218b2cbc6143"
        },
        "item": {
          "id": "dcd6dd00-c0fc-4582-837f-7cddaeb3cfc0",
          "name": "credentials_verify"
        },
        "response": {
          "id": "c0db828b-6cc6-4470-9af9-79c97022d916",
          "status": "OK",
          "code": 200,
          "responseTime": 822,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "30556e47-af9f-40c3-8f19-82995e5fb18a",
        "cursor": {
          "ref": "9bbb540d-7200-4c5c-88e6-9f2f478d3285",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "6b19db22-e838-4b7c-9379-0253b63f57ee"
        },
        "item": {
          "id": "30556e47-af9f-40c3-8f19-82995e5fb18a",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "39562715-c0bf-4aaa-8ebb-29473c778a8a",
          "status": "OK",
          "code": 200,
          "responseTime": 765,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b304f81e-d3a9-4a72-89c8-30bb6472b9d6",
        "cursor": {
          "ref": "17a8e9d6-7944-4364-8337-32e6b2a700e7",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "a6207b46-9928-43f8-b247-5cf89d1546dc"
        },
        "item": {
          "id": "b304f81e-d3a9-4a72-89c8-30bb6472b9d6",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "b304f81e-d3a9-4a72-89c8-30bb6472b9d6",
        "cursor": {
          "ref": "17a8e9d6-7944-4364-8337-32e6b2a700e7",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "a6207b46-9928-43f8-b247-5cf89d1546dc"
        },
        "item": {
          "id": "b304f81e-d3a9-4a72-89c8-30bb6472b9d6",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "dafe853a-c7c1-474d-92d8-07d2a08bced6",
        "cursor": {
          "ref": "4bb2f3c5-265a-4195-b54f-65e6f1059ce4",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "2e01b610-d621-4cea-95ca-1d77e1604f96"
        },
        "item": {
          "id": "dafe853a-c7c1-474d-92d8-07d2a08bced6",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:281)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:281)"
            }
          }
        ]
      },
      {
        "id": "9e16ff6d-7ccd-4d32-a61c-8ce4872b84ae",
        "cursor": {
          "ref": "5c5fcd1b-e839-4157-a3fc-e269665e81af",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "14d8c566-3db0-4691-86f8-e59f822cf41b"
        },
        "item": {
          "id": "9e16ff6d-7ccd-4d32-a61c-8ce4872b84ae",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:282)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:282)"
            }
          }
        ]
      }
    ]
  }
}